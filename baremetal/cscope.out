cscope 15 $HOME/xy_linux/xy_baretest/baremetal-asic -q 0000006064 0000898344
	@L2_cache.c

5 
	~<°rög.h
>

6 
	~"ck810.h
"

7 
	~"d©©y≥.h
"

8 
	~"timî.h
"

9 
	~"ˇche.h
"

10 
	~"misc.h
"

12 
CK_UINT32
 
	gm©rix
[4196][32]={{1,2},};

14 
	$CK_Timî0_Sèπ
()

16 
	`CK_Timî_Inô
();

17 
	`CK_Timî_O≥n
(0, 0x0, 
CK_INTC_TIM0
 + 0, 
FALSE
);

18 
	`CK_Timî_Sèπ
(0, 0x8888888);

19 
	}
}

21 
CK_UINT32
 
	$CK_Timî0_Ród
()

23 
CK_UINT32
 
TvÆue
=0;

24 
TvÆue
 = 
	`CK_Timî_CuºítVÆue
(0);

25  
TvÆue
;

26 
	}
}

28 
	$bad_a˚sss
()

30 
CK_UINT32
 
k
,
j
 ,
sum
=0;

31 
k
=0;k<32;k++)

32 
j
=0;j<4196;j++)

33 
sum
 +=
m©rix
[
j
][
k
];

35 
	}
}

37 
ölöe
 
	$cou¡î_öô
()

39 
__b
;

41 
__asm__
 
	`__vﬁ©ûe__
 ("lrwÑ1,0xc000000d\n\t"

43 : "Ù" (
__b
));

44 
	}
}

46 
ölöe
 
	$Evít_Cou¡î_Clo£
()

48 
__b
;

50 
__asm__
 
	`__vﬁ©ûe__
 ("lrwÑ1,0x0000001d\n\t"

52 : "Ù" (
__b
));

53 
	}
}

56 
ölöe
 
	$Evít_Cou¡î_Sèπ
()

58 
__b
;

60 
__asm__
 
	`__vﬁ©ûe__
 ("lrwÑ1,0x0000000d\n\t"

62 : "Ù" (
__b
));

63 
	}
}

66 
ölöe
 
	$cou¡î_°¨t
()

68 
__b
;

70 
__asm__
 
	`__vﬁ©ûe__
 ("lrwÑ1,CK_CPU_TEST_3\n\t"

72 : "Ù" (
__b
));

73 
	}
}

75 
ölöe
 
	$cou¡î_íd
()

77 
__b
;

79 
__asm__
 
	`__vﬁ©ûe__
 ("lrwÑ1, CK_CPU_End\n\t"

81 : "Ù" (
__b
));

82 
	}
}

85 
ölöe
 
CK_UINT32
 
	$H¨d_Profûe_Cou¡î_Low
()

87 
CK_UINT32
 
ªt
 = 0;

88 
__asm
 volatile("nop");

90 
__asm
 volatile(

93 :"Ù"(
ªt
)

98 
__asm
 volatile("nop");

99  
ªt
;

100 
	}
}

101 
ölöe
 
CK_UINT32
 
	$H¨d_Profûe_Cou¡î_High
()

103 
CK_UINT32
 
ªt
 = 0;

104 
__asm
 volatile("nop");

106 
__asm
 volatile(

109 :"Ù"(
ªt
)

114 
__asm
 volatile("nop");

115  
ªt
;

116 
	}
}

119 
ölöe
 
CK_UINT32
 
	$Cy˛e_Cou¡î_Low
()

121 
CK_UINT32
 
ªt
 = 0;

122 
__asm
 volatile("nop");

124 
__asm
 volatile(

127 :"Ù"(
ªt
)

132 
__asm
 volatile("nop");

133  
ªt
;

134 
	}
}

135 
ölöe
 
CK_UINT32
 
	$Cy˛e_Cou¡î_High
()

137 
CK_UINT32
 
ªt
 = 0;

138 
__asm
 volatile("nop");

140 
__asm
 volatile(

143 :"Ù"(
ªt
)

148 
__asm
 volatile("nop");

149  
ªt
;

150 
	}
}

151 
ölöe
 
CK_UINT32
 
	$TŸÆ_In°ru˘_Cou¡î_Low
()

153 
CK_UINT32
 
ªt
 = 0;

154 
__asm
 volatile("nop");

156 
__asm
 volatile(

159 :"Ù"(
ªt
)

164 
__asm
 volatile("nop");

165  
ªt
;

166 
	}
}

167 
ölöe
 
CK_UINT32
 
	$TŸÆ_In°ru˘_Cou¡î_High
()

169 
CK_UINT32
 
ªt
 = 0;

170 
__asm
 volatile("nop");

172 
__asm
 volatile(

175 :"Ù"(
ªt
)

180 
__asm
 volatile("nop");

181  
ªt
;

182 
	}
}

186 
ölöe
 
CK_UINT32
 
	$l1iˇche_ac˚ss_Lowcou¡î
()

188 
CK_UINT32
 
ªt
 = 0;

189 
__asm
 volatile("nop");

191 
__asm
 volatile(

194 :"Ù"(
ªt
)

199 
__asm
 volatile("nop");

200  
ªt
;

201 
	}
}

202 
ölöe
 
CK_UINT32
 
	$l1iˇche_ac˚ss_Highcou¡î
()

204 
CK_UINT32
 
ªt
 = 0;

205 
__asm
 volatile("nop");

207 
__asm
 volatile(

210 :"Ù"(
ªt
)

215 
__asm
 volatile("nop");

216  
ªt
;

217 
	}
}

219 
ölöe
 
CK_UINT32
 
	$l1iˇche_miss_Lowcou¡î
()

221 
CK_UINT32
 
ªt
 = 0;

222 
__asm
 volatile("nop");

224 
__asm
 volatile(

227 :"Ù"(
ªt
)

232 
__asm
 volatile("nop");

233  
ªt
;

234 
	}
}

236 
ölöe
 
CK_UINT32
 
	$l1iˇche_miss_Highcou¡î
()

238 
CK_UINT32
 
ªt
 = 0;

239 
__asm
 volatile("nop");

241 
__asm
 volatile(

244 :"Ù"(
ªt
)

249 
__asm
 volatile("nop");

250  
ªt
;

251 
	}
}

255 
ölöe
 
CK_UINT32
 
	$l1dˇche_a˚ss_lowcou¡î
()

257 
CK_UINT32
 
ªt
 = 0;

258 
__asm
 volatile("nop");

260 
__asm
 volatile(

263 :"Ù"(
ªt
)

268 
__asm
 volatile("nop");

269  
ªt
;

270 
	}
}

274 
ölöe
 
CK_UINT32
 
	$l1dˇche_a˚ss_Highcou¡î
()

276 
CK_UINT32
 
ªt
 = 0;

277 
__asm
 volatile("nop");

279 
__asm
 volatile(

282 :"Ù"(
ªt
)

287 
__asm
 volatile("nop");

288  
ªt
;

289 
	}
}

292 
ölöe
 
CK_UINT32
 
	$l1dˇche_miss_lowcou¡î
()

294 
CK_UINT32
 
ªt
 = 0;

295 
__asm
 volatile("nop");

297 
__asm
 volatile(

300 :"Ù"(
ªt
)

305 
__asm
 volatile("nop");

306  
ªt
;

307 
	}
}

309 
ölöe
 
CK_UINT32
 
	$l1dˇche_miss_Highcou¡î
()

311 
CK_UINT32
 
ªt
 = 0;

312 
__asm
 volatile("nop");

314 
__asm
 volatile(

317 :"Ù"(
ªt
)

322 
__asm
 volatile("nop");

323  
ªt
;

324 
	}
}

327 
ölöe
 
CK_UINT32
 
	$l2ˇche_ac˚ss_lowcou¡î
()

329 
CK_UINT32
 
ªt
 = 0;

330 
__asm
 volatile("nop");

332 
__asm
 volatile(

335 :"Ù"(
ªt
)

340 
__asm
 volatile("nop");

341  
ªt
;

342 
	}
}

345 
ölöe
 
CK_UINT32
 
	$l2ˇche_ac˚ss_highcou¡î
()

347 
CK_UINT32
 
ªt
 = 0;

348 
__asm
 volatile("nop");

350 
__asm
 volatile(

353 :"Ù"(
ªt
)

358 
__asm
 volatile("nop");

359  
ªt
;

360 
	}
}

363 
ölöe
 
CK_UINT32
 
	$l2ˇche_miss_lowcou¡î
()

365 
CK_UINT32
 
ªt
 = 0;

366 
__asm
 volatile("nop");

368 
__asm
 volatile(

371 :"Ù"(
ªt
)

376 
__asm
 volatile("nop");

377  
ªt
;

378 
	}
}

381 
ölöe
 
CK_UINT32
 
	$l2ˇche_miss_highcou¡î
()

383 
CK_UINT32
 
ªt
 = 0;

384 
__asm
 volatile("nop");

386 
__asm
 volatile(

389 :"Ù"(
ªt
)

394 
__asm
 volatile("nop");

395  
ªt
;

397 
	}
}

399 
	$CK_CPU_End
() {

400 
i
 = 0;

402 
i
++;

403 
	}
}

405 
	$CK_CPU_TEST_3
()

407 
CK_UINT32
 
i
;

408 
CK_UINT32
 
TEST_START
,
TEST_END
;

409 
TEST_START
=
	`CK_Timî0_Ród
();

411 
i
=0;i<1000;i++)

413 
	`bad_a˚sss
();

415 
TEST_END
=
	`CK_Timî0_Ród
();

417 
	`¥ötf
("\n--- Te° co°Åimê=0x%x\n", 
TEST_START
 - 
TEST_END
);

418 
	}
}

421 
	$CK_CPU_L2_Te°
()

423 
CK_UINT64
 
cou¡î_low
;

424 
CK_UINT64
 
cou¡î_high
;

426 
	`¥ötf
("\n--- CK860 L2 Cache Test start---\n");

428 
	`CK_Timî0_Sèπ
();

430 
	`cou¡î_öô
();

431 
	`cou¡î_°¨t
();

432 
	`cou¡î_íd
();

434 
	`CK_CPU_TEST_3
();

435 
	`CK_CPU_End
();

473 
	`¥ötf
("\n--- CK860 L2 Cache TestÉnd---\n");

475 
	}
}

	@cpu_boot.c

13 
	~<°rög.h
>

14 
	~"ck810.h
"

15 
	~"d©©y≥.h
"

16 
	~"timî.h
"

17 
	~"ˇche.h
"

18 
	~"misc.h
"

20 
	~"pmu.h
"

22 
	#CK860_BOOT_CTL
 (
CK_SYS_CTRL_ADDR
 + 0x000)

	)

23 
	#CK810_BOOT_CTL
 (
CK_SYS_CTRL_ADDR
 + 0x004)

	)

24 
	#BOOT_SEL
 (
CK_SYS_CTRL_ADDR
 + 0x010)

	)

26 
	#SLAVE_CPU_BOOT_ADDR
 0xf0040000

	)

28 
	#TEST_MEM_ADDR
 0x10000000

	)

29 
	#TEST_SRC_ADDR
 0x20000000

	)

46 
	$£t_¶ave_¥ogøm
()

49 
	`wrôe_úam32
(
SLAVE_CPU_BOOT_ADDR
 + 0x100, 0x1000ea23);

50 
	`wrôe_úam32
(
SLAVE_CPU_BOOT_ADDR
 + 0x104, 0x2000ea22);

51 
	`wrôe_úam16
(
SLAVE_CPU_BOOT_ADDR
 + 0x108, 0x9240);

52 
	`wrôe_úam16
(
SLAVE_CPU_BOOT_ADDR
 + 0x10a, 0xb340);

53 
	`wrôe_úam16
(
SLAVE_CPU_BOOT_ADDR
 + 0x10c, 0x07fa);

56 
	`wrôe_úam32
(
SLAVE_CPU_BOOT_ADDR
, SLAVE_CPU_BOOT_ADDR + 0x100);

57 
	}
}

59 
	$CK_CPU_BoŸ_Te°
()

61 
CK_UINT32
 
boŸ_£l
;

62 
CK_UINT32
 
vÆ
;

64 
	`¥ötf
("\n--- CPU Boot Test start---\n");

66 
	`£t_¶ave_¥ogøm
();

67 
	`wrôe_úam32
(
TEST_MEM_ADDR
, 0x0);

68 
	`wrôe_úam32
(
TEST_SRC_ADDR
, 0x5aa5);

69 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

71 
boŸ_£l
 = 
	`ªad_mªg32
(
BOOT_SEL
);

72 i‡(
boŸ_£l
 == 0) {

73 
	`¥ötf
("boot from CK860\n");

74 
vÆ
 = 
	`ªad_úam32
(
TEST_MEM_ADDR
);

75 i‡(
vÆ
 != 0) {

76 
	`¥ötf
("\t£àvÆuêo‡add∏0x%xÅÿ0 faû", 
TEST_MEM_ADDR
);

78 
	`¥ötf
("release slave CPU -> CK810\n");

79 
	`wrôe_mªg32
(
CK810_BOOT_CTL
, 0xa501);

80 
	`dñay
(10);

83 
vÆ
 = 
	`ªad_úam32
(
TEST_MEM_ADDR
);

84 i‡(
vÆ
 != 0x5aa5) {

85 
	`¥ötf
("\tcheck value ofáddr 0x%x fail,Éxpect 0x5aa5, got 0x%x\n",

86 
TEST_MEM_ADDR
, 
vÆ
);

87 
	`¥ötf
("\tslave CPUÑun fail\n");

88 
d⁄e
;

90 
	`¥ötf
("\tslave CPUÑunÖass\n");

92 } i‡(
boŸ_£l
 == 1) {

93 
	`¥ötf
("boot from CK810\n");

94 
	`¥ötf
("release slave CPU -> CK860\n");

95 
	`wrôe_mªg32
(
CK860_BOOT_CTL
, 0xa501);

96 
	`dñay
(10);

99 
vÆ
 = 
	`ªad_úam32
(
TEST_MEM_ADDR
);

100 i‡(
vÆ
 != 0x5aa5) {

101 
	`¥ötf
("\tcheck value ofáddr 0x%x fail,Éxpect 0x5aa5, got 0x%x\n",

102 
TEST_MEM_ADDR
, 
vÆ
);

103 
	`¥ötf
("\tslave CPUÑun fail\n");

104 
d⁄e
;

106 
	`¥ötf
("\tslave CPUÑunÖass\n");

109 
	`¥ötf
("unsuµ‹ãd boŸ sñe˘i⁄ %d\n", 
boŸ_£l
);

110 
d⁄e
;

113 
	`wrôe_úam32
(
TEST_SRC_ADDR
, 0x1234);

114 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

115 
	`¥ötf
("\n\tinject value 0x1234Åo sourceáddress\n");

116 
	`udñay
(1000);

117 
vÆ
 = 
	`ªad_úam32
(
TEST_MEM_ADDR
);

118 i‡(
vÆ
 != 0x1234) {

119 
	`¥ötf
("\t¶avêCPU i†nŸÑu¬ög(Áû),Éx≥˘ 0x1234, gŸ 0x%x\n", 
vÆ
);

120 
d⁄e
;

122 
	`¥ötf
("\tslave CPU is stillÑunning(pass)\n");

125 
	`wrôe_úam32
(
TEST_SRC_ADDR
, 0xaabb);

126 
__asm__
 
	`__vﬁ©ûe__
 ("sync\n");

127 
	`¥ötf
("\n\tinject value 0xaabbÅo sourceáddress\n");

128 
	`udñay
(1000);

129 
	`¥ötf
("\tpower down slave CPU\n");

130 
	`domaö_powî_off
(
CK810_POWER_GATING_CTL
, 
CK810_HARD_PWR_CTL
);

131 
vÆ
 = 
	`ªad_úam32
(
TEST_MEM_ADDR
);

132 i‡(
vÆ
 != 0xaabb) {

133 
	`¥ötf
("\tslave CPU isÖower downÇow --Öass\n");

135 
	`¥ötf
("\tslave CPU is stillÑunning -- fail\n");

138 
d⁄e
:

139 
	`¥ötf
("\n--- CPU Boot TestÉnd---\n");

140 
	}
}

	@drivers/ADV7511.c

17 
	~"ADV7511.h
"

18 
	~"ck810.h
"

20 
	#ADV7511_I2C_ADDR
 0x39

	)

21 
	$ADV7511_Reg_SögÀWrôe
(
CK_UINT8
 
addr
, CK_UINT8 
vÆ
) {

22 
CK_UINT8
 
vÆ2
;

23 
	`dw_i2c_wrôe_öt
(2, 
ADV7511_I2C_ADDR
, 
addr
, 1, &
vÆ
, 1);

24 
	`dw_i2c_ªad_öt
(2, 
ADV7511_I2C_ADDR
, 
addr
, 1, &
vÆ2
, 1);

25 
	`¥ötf
("ADV7511_Reg_SögÀWrôê 0x%x (vÆË=0x%x \r\n",
vÆ2
,
vÆ
);

26 
	}
}

28 
	$ADV7511_Reg_SögÀRód
(
CK_UINT8
 
addr
, CK_UINT8 *
vÆ
) {

29 
	`dw_i2c_ªad_öt
(2, 
ADV7511_I2C_ADDR
, 
addr
, 1, 
vÆ
, 1);

30 
	`¥ötf
("ADV7511_Reg_SögÀRódádd∏0x%x (*vÆË=0x%x \r\n",
addr
,*
vÆ
);

31 
	}
}

33 
	$ADV7511_Inôül
()

35 
CK_UINT8
 
ªad_d©a
;

36 
dñay
;

37 
	`dw_i2c_öô
(2, 
I2C_STANDARD_SPEED
, 1);

39 
	`ADV7511_Reg_SögÀRód
(0x00,&
ªad_d©a
);

41 
dñay
 =0x1000;delay>0;delay--);

42 
	`ADV7511_Reg_SögÀWrôe
(0x41, 0x10);

43 
dñay
 =0x1000;delay>0;delay--);

45 
	`ADV7511_Reg_SögÀWrôe
(0x98, 0x03);

46 
	`ADV7511_Reg_SögÀWrôe
(0x9a, 0xe0);

47 
	`ADV7511_Reg_SögÀWrôe
(0x9c, 0x30);

48 
	`ADV7511_Reg_SögÀWrôe
(0x9d, 0x61);

49 
	`ADV7511_Reg_SögÀWrôe
(0xa2, 0xa4);

50 
	`ADV7511_Reg_SögÀWrôe
(0xa3, 0xa4);

51 
	`ADV7511_Reg_SögÀWrôe
(0xe0, 0xd0);

52 
	`ADV7511_Reg_SögÀWrôe
(0xf9, 0x00);

55 
	`ADV7511_Reg_SögÀWrôe
(0x15, 0x00);

56 
	`ADV7511_Reg_SögÀWrôe
(0x16, 0x30);

59 
	`ADV7511_Reg_SögÀWrôe
(0x15, 0x01);

60 
	`ADV7511_Reg_SögÀWrôe
(0x16, 0xB3);

61 
	`ADV7511_Reg_SögÀWrôe
(0x55, 0x20);

62 
	`ADV7511_Reg_SögÀWrôe
(0x56, 0x28);

65 
	`ADV7511_Reg_SögÀWrôe
(0x17, 0x02);

66 
	`ADV7511_Reg_SögÀWrôe
(0x18, 0x40);

70 
	`ADV7511_Reg_SögÀWrôe
(0x3c, 0x3);

73 
	`ADV7511_Reg_SögÀWrôe
(0xaf, 0x06);

78 
	`ADV7511_Reg_SögÀRód
(0x3e,&
ªad_d©a
);

79 
	`ADV7511_Reg_SögÀRód
(0x42,&
ªad_d©a
);

80 
	`ADV7511_Reg_SögÀRód
(0x9e,&
ªad_d©a
);

82 
	}
}

85 
	$ADV7511_sdi_Inôül
()

87 
CK_UINT8
 
ªad_d©a
;

88 
dñay
;

89 
	`dw_i2c_öô
(2, 
I2C_STANDARD_SPEED
, 1);

91 
	`ADV7511_Reg_SögÀRód
(0x00,&
ªad_d©a
);

93 
dñay
 =0x1000;delay>0;delay--);

94 
	`ADV7511_Reg_SögÀWrôe
(0x41, 0x10);

95 
dñay
 =0x1000;delay>0;delay--);

97 
	`ADV7511_Reg_SögÀWrôe
(0x98, 0x03);

98 
	`ADV7511_Reg_SögÀWrôe
(0x9a, 0xe0);

99 
	`ADV7511_Reg_SögÀWrôe
(0x9c, 0x30);

100 
	`ADV7511_Reg_SögÀWrôe
(0x9d, 0x61);

101 
	`ADV7511_Reg_SögÀWrôe
(0xa2, 0xa4);

102 
	`ADV7511_Reg_SögÀWrôe
(0xa3, 0xa4);

103 
	`ADV7511_Reg_SögÀWrôe
(0xe0, 0xd0);

104 
	`ADV7511_Reg_SögÀWrôe
(0xf9, 0x00);

107 
	`ADV7511_Reg_SögÀWrôe
(0x15, 0x00);

108 
	`ADV7511_Reg_SögÀWrôe
(0x16, 0x30);

111 
	`ADV7511_Reg_SögÀWrôe
(0x15, 0x01);

112 
	`ADV7511_Reg_SögÀWrôe
(0x16, 0xB3);

113 
	`ADV7511_Reg_SögÀWrôe
(0x55, 0x20);

114 
	`ADV7511_Reg_SögÀWrôe
(0x56, 0x28);

117 
	`ADV7511_Reg_SögÀWrôe
(0x17, 0x02);

118 
	`ADV7511_Reg_SögÀWrôe
(0x18, 0x40);

126 
	`ADV7511_Reg_SögÀWrôe
(0x3c, 0x0B);

128 
	`ADV7511_Reg_SögÀWrôe
(0xaf, 0x06);

133 
	`ADV7511_Reg_SögÀRód
(0x3e,&
ªad_d©a
);

134 
	`ADV7511_Reg_SögÀRód
(0x42,&
ªad_d©a
);

135 
	`ADV7511_Reg_SögÀRód
(0x9e,&
ªad_d©a
);

137 
	}
}

	@drivers/ADV7511.h

17 #i‚de‡
__ADV7511_H__


18 
	#__ADV7511_H__


	)

20 
	~"iic.h
"

23 
	#ADV7511_REG_CHIP_REVISION
 0x00

	)

24 
	#ADV7511_REG_N0
 0x01

	)

25 
	#ADV7511_REG_N1
 0x02

	)

26 
	#ADV7511_REG_N2
 0x03

	)

27 
	#ADV7511_REG_SPDIF_FREQ
 0x04

	)

28 
	#ADV7511_REG_CTS_AUTOMATIC1
 0x05

	)

29 
	#ADV7511_REG_CTS_AUTOMATIC2
 0x06

	)

30 
	#ADV7511_REG_CTS_MANUAL0
 0x07

	)

31 
	#ADV7511_REG_CTS_MANUAL1
 0x08

	)

32 
	#ADV7511_REG_CTS_MANUAL2
 0x09

	)

33 
	#ADV7511_REG_AUDIO_SOURCE
 0x0a

	)

34 
	#ADV7511_REG_AUDIO_CONFIG
 0x0b

	)

35 
	#ADV7511_REG_I2S_CONFIG
 0x0c

	)

36 
	#ADV7511_REG_I2S_WIDTH
 0x0d

	)

37 
	#ADV7511_REG_AUDIO_SUB_SRC0
 0x0e

	)

38 
	#ADV7511_REG_AUDIO_SUB_SRC1
 0x0f

	)

39 
	#ADV7511_REG_AUDIO_SUB_SRC2
 0x10

	)

40 
	#ADV7511_REG_AUDIO_SUB_SRC3
 0x11

	)

41 
	#ADV7511_REG_AUDIO_CFG1
 0x12

	)

42 
	#ADV7511_REG_AUDIO_CFG2
 0x13

	)

43 
	#ADV7511_REG_AUDIO_CFG3
 0x14

	)

44 
	#ADV7511_REG_I2C_FREQ_ID_CFG
 0x15

	)

45 
	#ADV7511_REG_VIDEO_INPUT_CFG1
 0x16

	)

46 
	#ADV7511_REG_CSC_UPPER
(
x
Ë(0x18 + (xË* 2)

	)

47 
	#ADV7511_REG_CSC_LOWER
(
x
Ë(0x19 + (xË* 2)

	)

48 
	#ADV7511_REG_SYNC_DECODER
(
x
Ë(0x30 + (x))

	)

49 
	#ADV7511_REG_DE_GENERATOR
 (0x35 + (
x
))

	)

50 
	#ADV7511_REG_PIXEL_REPETITION
 0x3b

	)

51 
	#ADV7511_REG_VIC_MANUAL
 0x3c

	)

52 
	#ADV7511_REG_VIC_SEND
 0x3d

	)

53 
	#ADV7511_REG_VIC_DETECTED
 0x3e

	)

54 
	#ADV7511_REG_AUX_VIC_DETECTED
 0x3f

	)

55 
	#ADV7511_REG_PACKET_ENABLE0
 0x40

	)

56 
	#ADV7511_REG_POWER
 0x41

	)

57 
	#ADV7511_REG_STATUS
 0x42

	)

58 
	#ADV7511_REG_EDID_I2C_ADDR
 0x43

	)

59 
	#ADV7511_REG_PACKET_ENABLE1
 0x44

	)

60 
	#ADV7511_REG_PACKET_I2C_ADDR
 0x45

	)

61 
	#ADV7511_REG_DSD_ENABLE
 0x46

	)

62 
	#ADV7511_REG_VIDEO_INPUT_CFG2
 0x48

	)

63 
	#ADV7511_REG_INFOFRAME_UPDATE
 0x4a

	)

64 
	#ADV7511_REG_GC
(
x
Ë(0x4b + (x)Ë

	)

65 
	#ADV7511_REG_AVI_INFOFRAME_VERSION
 0x52

	)

66 
	#ADV7511_REG_AVI_INFOFRAME_LENGTH
 0x53

	)

67 
	#ADV7511_REG_AVI_INFOFRAME_CHECKSUM
 0x54

	)

68 
	#ADV7511_REG_AVI_INFOFRAME
(
x
Ë(0x55 + (x)Ë

	)

69 
	#ADV7511_REG_AUDIO_INFOFRAME_VERSION
 0x70

	)

70 
	#ADV7511_REG_AUDIO_INFOFRAME_LENGTH
 0x71

	)

71 
	#ADV7511_REG_AUDIO_INFOFRAME_CHECKSUM
 0x72

	)

72 
	#ADV7511_REG_AUDIO_INFOFRAME
(
x
Ë(0x73 + (x)Ë

	)

73 
	#ADV7511_REG_INT_ENABLE0
 0x92

	)

74 
	#ADV7511_REG_INT_ENABLE1
 0x94

	)

75 
	#ADV7511_REG_INT_ENABLE2
 0x95

	)

76 
	#ADV7511_REG_INT
(
x
Ë(0x96 + (x))

	)

77 
	#ADV7511_REG_INPUT_CLK_DIV
 0x9d

	)

78 
	#ADV7511_REG_PLL_STATUS
 0x9e

	)

79 
	#ADV7511_REG_HDMI_POWER
 0xa1

	)

80 
	#ADV7511_REG_HDCP_HDMI_CFG
 0xaf

	)

81 
	#ADV7511_REG_AN
(
x
Ë(0xb0 + (x)Ë

	)

82 
	#ADV7511_REG_HDCP_STATUS
 0xb8

	)

83 
	#ADV7511_REG_BCAPS
 0xbe

	)

84 
	#ADV7511_REG_BKSV
(
x
Ë(0xc0 + (x)Ë

	)

85 
	#ADV7511_REG_EDID_SEGMENT
 0xc4

	)

86 
	#ADV7511_REG_DDC_STATUS
 0xc8

	)

87 
	#ADV7511_REG_EDID_READ_CTRL
 0xc9

	)

88 
	#ADV7511_REG_BSTATUS
(
x
Ë(0xˇ + (x)Ë

	)

89 
	#ADV7511_REG_TIMING_GEN_SEQ
 0xd0

	)

90 
	#ADV7511_REG_POWER2
 0xd6

	)

91 
	#ADV7511_REG_HSYNC_PLACEMENT_MSB
 0xÁ

	)

92 
	#ADV7511_REG_SYNC_ADJUSTMENT
(
x
Ë(0xd7 + (x)Ë

	)

93 
	#ADV7511_REG_TMDS_CLOCK_INV
 0xde

	)

94 
	#ADV7511_REG_ARC_CTRL
 0xdf

	)

95 
	#ADV7511_REG_CEC_I2C_ADDR
 0xe1

	)

96 
	#ADV7511_REG_CEC_CTRL
 0xe2

	)

97 
	#ADV7511_REG_CHIP_ID_HIGH
 0xf5

	)

98 
	#ADV7511_REG_CHIP_ID_LOW
 0xf6

	)

101 
ADV7511_Inôül
();

	@drivers/ADV7611.c

2 
	~"ADV7611.h
"

3 
	~"ck810.h
"

7 
CK_UINT8
 
	gadv7611_ßdd
 ;

8 
CK_UINT8
 
	gio_m≠
 = 0x98;

9 
CK_UINT8
 
	gksv_m≠
 = 0x64;

10 
CK_UINT8
 
	ghdmi_m≠
 = 0x68;

11 
CK_UINT8
 
	g˝_m≠
 = 0x44;

13 
	#ADV7611_RST
 (11)

	)

15 
	#ADV7611_IIC_CS
 (3)

	)

16 
	$adv7611_wrôe_ªg
(
CK_UINT8
 
dev_addr
, CK_UINT8 
addr
, CK_UINT8 
vÆ
) {

17 
CK_UINT8
 
vÆ2
;

21 
	`dw_i2c_wrôe
(
ADV7611_IIC_CS
, 
dev_addr
>>1, 
addr
, 1, &
vÆ
, 1);

22 
	`dw_i2c_ªad
(
ADV7611_IIC_CS
, 
dev_addr
>>1, 
addr
, 1, &
vÆ2
, 1);

23 
	`¥ötf
("ADV7611_Reg_SögÀWrôê 0x%x (vÆË=0x%x \r\n",
vÆ2
,
vÆ
);

24 
	}
}

26 
	$adv7611_ªad_ªg
(
CK_UINT8
 
dev_addr
,CK_UINT8 
addr
, CK_UINT8 *
vÆ
) {

28 
	`dw_i2c_ªad
(
ADV7611_IIC_CS
, 
dev_addr
>>1, 
addr
, 1, 
vÆ
, 1);

30 
	`¥ötf
("ADV7611_Reg_SögÀRódádd∏0x%x (*vÆË=0x%x \r\n",
addr
,*
vÆ
);

31 
	}
}

36 
	$adv7611_öô
()

39 
CK_UINT8
 
vÆ
;

42 
	`dw_i2c_öô
(
ADV7611_IIC_CS
, 
I2C_STANDARD_SPEED
, 1);

44 
	`CK_Gpio_Ouçut
(
ADV7611_RST
, 0);

47 
	`udñay
(100 * 1000);

48 
	`CK_Gpio_Ouçut
(
ADV7611_RST
, 1);

52 
adv7611_ßdd
 = 
io_m≠
;

56 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xó, &
vÆ
);

57 
	`¥ötf
(" id1 = 0x%x \r\n" , 
vÆ
) ;

58 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xeb, &
vÆ
);

59 
	`¥ötf
(" id2 = 0x%x \r\n" , 
vÆ
) ;

64 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x00, 0x02);

67 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x01, 0x06);

68 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x02, 0xf5);

70 #i‚de‡
__ADV7611_SD__


71 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x80);

72 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x83);

73 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

76 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x00);

77 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0xc3);

78 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

80 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x80);

81 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x80);

82 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

83 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x83);

87 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x05, 0x2c);

90 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x06, 0xa7);

92 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x0b, 0x44);

93 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x0c, 0x42);

94 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x14, 0x7f);

96 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x15, 0x80);

101 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf4, 0x80);

102 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf5, 0x7c);

103 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf8, 0x4c);

104 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf9, 0x64);

105 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfa, 0x6c);

106 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfb, 0x68);

107 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfd, 0x44);

109 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xf4, &
vÆ
);

110 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xf5, &
vÆ
);

111 
	`udñay
(50 * 1000);

113 
adv7611_ßdd
 = 
˝_m≠
;

114 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xba, 0x01);

115 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x6c, 0x00);

116 
	`udñay
(50 * 1000);

118 
adv7611_ßdd
 = 
ksv_m≠
;

119 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x40, 0x81);

121 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x77, 0x00);

122 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x52, 0x20);

123 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x53, 0x00);

124 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x70, 0x9e);

125 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x74, 0x03);

127 
	`udñay
(50 * 1000);

129 
adv7611_ßdd
 = 
hdmi_m≠
;

130 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x9b, 0x03);

132 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x6f, 0x08);

133 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x85, 0x1f);

134 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x87, 0x70);

135 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x57, 0xda);

136 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x58, 0x01);

137 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x98);

138 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x4c, 0x44);

140 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc1, 0x01);

141 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc2, 0x01);

142 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc3, 0x01);

143 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc4, 0x01);

144 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc5, 0x01);

145 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc6, 0x01);

146 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc7, 0x01);

147 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc8, 0x01);

148 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc9, 0x01);

149 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xca, 0x01);

150 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xcb, 0x01);

151 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xcc, 0x01);

153 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x00, 0x00);

154 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x83, 0xfe);

156 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x8d, 0x04);

158 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x8e, 0x35);

159 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x1a, 0x8a);

161 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x75, 0x10);

163 
	`udñay
(50 * 1000);

167 
adv7611_ßdd
 = 
hdmi_m≠
;

168 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x05, &
vÆ
);

169 
adv7611_ßdd
 = 
hdmi_m≠
;

170 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x04, &
vÆ
);

172 
adv7611_ßdd
 = 
hdmi_m≠
;

173 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x0B, &
vÆ
);

175 
adv7611_ßdd
 = 
hdmi_m≠
;

176 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x51, &
vÆ
);

177 
adv7611_ßdd
 = 
hdmi_m≠
;

178 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x52, &
vÆ
);

180 
adv7611_ßdd
 = 
io_m≠
;

181 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x6A, &
vÆ
);

187 
	}
}

191 
	$adv7611_öô
()

194 
CK_UINT8
 
vÆ
;

197 
	`dw_i2c_öô
(
ADV7611_IIC_CS
, 
I2C_STANDARD_SPEED
, 1);

199 
	`CK_Gpio_Ouçut
(
ADV7611_RST
, 0);

202 
	`udñay
(100 * 1000);

203 
	`CK_Gpio_Ouçut
(
ADV7611_RST
, 1);

208 
adv7611_ßdd
 = 
io_m≠
;

212 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xó, &
vÆ
);

213 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xeb, &
vÆ
);

216 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x00, 0x02);

218 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x01, 0x06);

219 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x02, 0xf5);

222 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x80);

223 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x83);

224 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

227 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x00);

228 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0xc3);

229 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

231 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x80);

232 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x80);

233 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x33, 0x40);

234 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x19, 0x83);

238 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x05, 0x2c);

241 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x06, 0xa7);

242 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x0b, 0x44);

243 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x0c, 0x42);

244 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x14, 0x7f);

246 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x15, 0x80);

251 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf4, 0x80);

252 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf5, 0x7c);

253 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf8, 0x4c);

254 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xf9, 0x64);

255 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfa, 0x6c);

256 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfb, 0x68);

257 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xfd, 0x44);

259 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xf4, &
vÆ
);

260 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0xf5, &
vÆ
);

261 
	`udñay
(50 * 1000);

263 
adv7611_ßdd
 = 
˝_m≠
;

264 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xba, 0x01);

265 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x6c, 0x00);

266 
	`udñay
(50 * 1000);

268 
adv7611_ßdd
 = 
ksv_m≠
;

269 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x40, 0x81);

271 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x77, 0x00);

272 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x52, 0x20);

273 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x53, 0x00);

274 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x70, 0x9e);

275 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x74, 0x03);

277 
	`udñay
(50 * 1000);

279 
adv7611_ßdd
 = 
hdmi_m≠
;

280 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x9b, 0x03);

282 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x6f, 0x08);

283 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x85, 0x1f);

284 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x87, 0x70);

285 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x57, 0xda);

286 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x58, 0x01);

287 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x03, 0x98);

288 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x4c, 0x44);

290 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc1, 0x01);

291 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc2, 0x01);

292 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc3, 0x01);

293 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc4, 0x01);

294 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc5, 0x01);

295 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc6, 0x01);

296 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc7, 0x01);

297 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc8, 0x01);

298 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xc9, 0x01);

299 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xca, 0x01);

300 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xcb, 0x01);

301 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0xcc, 0x01);

303 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x00, 0x00);

304 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x83, 0xfe);

306 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x8d, 0x04);

308 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x8e, 0x35);

309 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x1a, 0x8a);

311 
	`adv7611_wrôe_ªg
(
adv7611_ßdd
, 0x75, 0x10);

313 
	`udñay
(50 * 1000);

317 
adv7611_ßdd
 = 
hdmi_m≠
;

318 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x05, &
vÆ
);

319 
adv7611_ßdd
 = 
hdmi_m≠
;

320 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x04, &
vÆ
);

322 
adv7611_ßdd
 = 
hdmi_m≠
;

323 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x0B, &
vÆ
);

325 
adv7611_ßdd
 = 
hdmi_m≠
;

326 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x51, &
vÆ
);

327 
adv7611_ßdd
 = 
hdmi_m≠
;

328 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x52, &
vÆ
);

330 
adv7611_ßdd
 = 
io_m≠
;

331 
	`adv7611_ªad_ªg
(
adv7611_ßdd
, 0x6A, &
vÆ
);

337 
	}
}

	@drivers/ADV7611.h

1 #i‚de‡
__ADV7611_H__


2 
	#__ADV7611_H__


	)

4 
	~"iic.h
"

	@drivers/OV_5640.c

1 
	~"OV_5640.h
"

2 
	~"°dio.h
"

3 
	~"gpio.h
"

4 
	~"ck810.h
"

5 
	~"mùi_subsys.h
"

6 
CK_UINT32
 
dw_i2c_wrôe_öt
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

7 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

8 
CK_UINT32
 
dw_i2c_ªad_öt
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

9 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

11 
	#OV_I2C_NB
 (0)

	)

12 
	#OV_I2C_NB_CH1
 (1)

	)

13 
	#OV_PWDN_IONB
 (0)

	)

14 
	#OV_RESET_IONB
 (1)

	)

15 
	#OV_PWDN_IONB_CH1
 (2)

	)

16 
	#OV_RESET_IONB_CH1
 (3)

	)

17 
	#ADV_I2C_NB
 (2)

	)

18 
	#MIPI_PHY_I2C_ADDR
 (0x28)

	)

19 
	#OV5640_I2C_ADDR
 (0x3c)

	)

21 
	$ADV7511_Reg_Wrôe
(
CK_UINT8
 
addr
, CK_UINT8 
vÆ
) {

22 
	`dw_i2c_wrôe
(
ADV_I2C_NB
, 0x39, 
addr
, 1, &
vÆ
, 1);

23 
	}
}

24 
	$ADV7511_Reg_Ród
(
CK_UINT8
 
addr
, CK_UINT8 *
vÆ
) {

25 
	`dw_i2c_ªad
(
ADV_I2C_NB
, 0x39, 
addr
, 1, 
vÆ
, 1);

26 
	`¥ötf
("ADV7511_Reg_Ródádd∏0x%x (*vÆË=0x%x \r\n",
addr
,*
vÆ
);

27 
	}
}

29 
	$I2C_MIPI_PHY_Wrôe
(
CK_UINT8
 
addr
, CK_UINT8 
vÆ
) {

30 
CK_UINT8
 
vÆ2
;

32 
	`dw_i2c_wrôe_öt
(0, 
MIPI_PHY_I2C_ADDR
, 
addr
, 1, &
vÆ
, 1);

33 
	`dw_i2c_ªad_öt
(0, 
MIPI_PHY_I2C_ADDR
, 
addr
, 1, &
vÆ2
, 1);

35 
	`¥ötf
("I2C_MIPI_PHY_Wrôê 0x%x (vÆË=0x%x \r\n",
vÆ2
,
vÆ
);

36 
	}
}

38 
CK_UINT8
 
	$I2C_OV5640_Ród
(
CK_UINT16
 
addr
) {

39 
CK_UINT8
 
vÆ
;

40 #i‡
	`deföed
–
MIPI_ISP_CH1
Ë||deföed(
__TEST_ISP1__
)

41 
	`dw_i2c_ªad
(
OV_I2C_NB_CH1
, 
OV5640_I2C_ADDR
, 
addr
, 2, &
vÆ
, 1);

44 
	`dw_i2c_ªad
(
OV_I2C_NB
, 
OV5640_I2C_ADDR
, 
addr
, 2, &
vÆ
, 1);

46  
vÆ
;

47 
	}
}

49 
	$I2C_OV5640_Wrôe
(
CK_UINT16
 
addr
, 
CK_UINT8
 
vÆ
) {

51 #i‡
	`deföed
–
MIPI_ISP_CH1
Ë||deföed(
__TEST_ISP1__
)

52 
	`dw_i2c_wrôe
(
OV_I2C_NB_CH1
, 
OV5640_I2C_ADDR
, 
addr
, 2, &
vÆ
, 1);

54 
	`dw_i2c_wrôe
(
OV_I2C_NB
, 
OV5640_I2C_ADDR
, 
addr
, 2, &
vÆ
, 1);

56 
	`¥ötf
("I2C_OV5640_Wrôê 0x%x (vÆË=0x%x \r\n",
	`I2C_OV5640_Ród
(
addr
),
vÆ
);

57 
	}
}

61 
	$I2C_MIPI_PHY_Inôül
()

64 
	`wrôe_mªg32
(
CK_MIPI_Sœve
+0x08, 0x1);

65 
	`wrôe_mªg32
(
CK_MIPI_Sœve
+0x40, 0x1);

66 
	`wrôe_mªg32
(
CK_MIPI_Sœve
+0x44, 0x1);

69 
	`wrôe_mªg32
(0xfc20906c, 0x8);

70 
	`wrôe_mªg32
(0xfc209070, 0x8);

72 #i‡
	`deföed
–
MIPI_ISP_CH1
Ë||deföed(
__TEST_ISP1__
)

73 
	`dw_i2c_öô
(
OV_I2C_NB_CH1
, 
I2C_STANDARD_SPEED
, 1);

76 
	`dw_i2c_öô
(
OV_I2C_NB
, 
I2C_STANDARD_SPEED
, 1);

78 
	}
}

80 
	$I2C_OV5640_Inôül
()

82 
	`¥ötf
("I2C_OV5640_Initial \r\n");

83 #i‡
	`deföed
–
MIPI_ISP_CH1
Ë||deföed(
__TEST_ISP1__
)

84 
	`dw_i2c_öô
(
OV_I2C_NB_CH1
, 
I2C_STANDARD_SPEED
, 1);

87 
	`dw_i2c_öô
(
OV_I2C_NB
, 
I2C_STANDARD_SPEED
, 1);

89 
	}
}

91 
mùi_dphy_öôül
(
‰eq
);

92 
	$MIPI_PHY_Inôül
()

94 #i‡
CONFIG_IS_ASIC


95 #ifde‡
__OV5640_80MBPS__


96 
	`mùi_dphy_öôül
(80);

98 #ifde‡
__OV5640_160MBPS__


99 
	`mùi_dphy_öôül
(160);

101 #ifde‡
__OV5640_400MBPS__


102 
	`mùi_dphy_öôül
(400);

105 #ifde‡
__OV5640_800MBPS__


106 
	`mùi_dphy_öôül
(800);

108 #ifde‡
__OV5640_600MBPS__


109 
	`mùi_dphy_öôül
(600);

112 
	`I2C_MIPI_PHY_Inôül
();

114 
	`I2C_MIPI_PHY_Wrôe
(
ADDR_CIL_APBWR_CTRL
, 0xff);

115 
	`I2C_MIPI_PHY_Wrôe
(
TCDPHY_GCTRL
, 0x2f);

116 
	`I2C_MIPI_PHY_Wrôe
(
TCDPHY_ENABLE
, 0x13);

117 
	`I2C_MIPI_PHY_Wrôe
(
ADDR_CIL_CNT_HSD_SETTLE
, 0x2);

118 
	`I2C_MIPI_PHY_Wrôe
(
ADDR_CIL_CNT_HSCK_SETTLE
, 0x8);

120 
	`I2C_MIPI_PHY_Wrôe
(0x00, 0x01);

121 
	`I2C_MIPI_PHY_Wrôe
(0x0e, 0x00);

122 
	`I2C_MIPI_PHY_Wrôe
(0x14, 0x06);

123 
	`I2C_MIPI_PHY_Wrôe
(0x07, 0x2);

124 
	`I2C_MIPI_PHY_Wrôe
(0xf0, 0x43);

125 
	`I2C_MIPI_PHY_Wrôe
(0xf1, 0x13);

126 
	`I2C_MIPI_PHY_Wrôe
(0xf0, 0x63);

129 
	}
}

131 
	$MOV5640_F‹m©_Inô
(
f‹m©
)

133 
i
;

135 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV5640_CFG_INIT
); i++)

137 if(
SåMOV5640_CFG_INIT
[
i
].
addr
 == 0x4300)

139 if(
f‹m©
 =
CSI_YUV422_8B
)

141 
	`I2C_OV5640_Wrôe
(0x4300, 0x3f);

142 
	`I2C_OV5640_Wrôe
(0x501f, 0x00);

144 i‡(
f‹m©
 =
CSI_RGB565
)

146 
	`I2C_OV5640_Wrôe
(0x4300, 0x6f);

147 
	`I2C_OV5640_Wrôe
(0x501f, 0x01);

149 i‡(
f‹m©
 =
CSI_RGB555
)

151 
	`I2C_OV5640_Wrôe
(0x4300, 0x7f);

152 
	`I2C_OV5640_Wrôe
(0x501f, 0x01);

154 i‡(
f‹m©
 =
CSI_RGB444
)

156 
	`I2C_OV5640_Wrôe
(0x4300, 0x9f);

157 
	`I2C_OV5640_Wrôe
(0x501f, 0x01);

159 if(
f‹m©
 =
CSI_YUV420_8B
)

161 
	`I2C_OV5640_Wrôe
(0x4300, 0x4f);

162 
	`I2C_OV5640_Wrôe
(0x501f, 0x00);

164 if(
f‹m©
 =
CSI_YUV420_8B_NV21
)

166 
	`I2C_OV5640_Wrôe
(0x4300, 0x43);

167 
	`I2C_OV5640_Wrôe
(0x501f, 0x00);

172 
	`I2C_OV5640_Wrôe
(
SåMOV5640_CFG_INIT
[
i
].
addr
, SåMOV5640_CFG_INIT[i].
vÆue
);

174 if(
i
 < 3)

176 
	`udñay
(5 * 1000);

180 
	`dñay
(1);

183 
	}
}

185 
	$MOV5640_i•_F‹m©_Inô
(
f‹m©
)

187 
i
;

189 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV5640_CFG_ISP_INIT
); i++)

199 
	`I2C_OV5640_Wrôe
(
SåMOV5640_CFG_ISP_INIT
[
i
].
addr
, SåMOV5640_CFG_ISP_INIT[i].
vÆue
);

201 if(
i
 < 3)

203 
	`udñay
(5 * 1000);

207 
	`udñay
(10);

210 
	}
}

212 
	$MOV5640_640x480
(
f‹m©
)

214 
i
;

215 
ªg_vÆue
 = 0x00;

217 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV40_640X480
); i++)

219 
	`I2C_OV5640_Wrôe
(
SåMOV40_640X480
[
i
].
addr
, SåMOV40_640X480[i].
vÆue
);

220 
	`udñay
(10);

224 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3820);

225 
ªg_vÆue
 |= 0x06;

226 
	`I2C_OV5640_Wrôe
(0x3820, 
ªg_vÆue
);

228 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3821);

229 
ªg_vÆue
 |= 0x06;

230 
	`I2C_OV5640_Wrôe
(0x3821, 
ªg_vÆue
);

231 
	}
}

233 
	$MOV5640_1280x720
(
f‹m©
)

235 
i
;

236 
ªg_vÆue
 = 0x00;

238 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV40_1280X720
); i++)

240 
	`I2C_OV5640_Wrôe
(
SåMOV40_1280X720
[
i
].
addr
, SåMOV40_1280X720[i].
vÆue
);

241 
	`udñay
(10);

244 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3820);

245 
ªg_vÆue
 |= 0x06;

246 
	`I2C_OV5640_Wrôe
(0x3820, 
ªg_vÆue
);

248 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3821);

249 
ªg_vÆue
 |= 0x06;

250 
	`I2C_OV5640_Wrôe
(0x3821, 
ªg_vÆue
);

251 
	}
}

253 
	$MOV5640_RAW_1280x720
(
f‹m©
)

255 
i
;

256 
ªg_vÆue
 = 0x00;

258 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV40_RAW_1280X720
); i++)

260 
	`I2C_OV5640_Wrôe
(
SåMOV40_RAW_1280X720
[
i
].
addr
, SåMOV40_RAW_1280X720[i].
vÆue
);

261 
	`udñay
(10);

264 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3820);

265 
ªg_vÆue
 |= 0x06;

266 
	`I2C_OV5640_Wrôe
(0x3820, 
ªg_vÆue
);

268 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3821);

269 
ªg_vÆue
 |= 0x06;

270 
	`I2C_OV5640_Wrôe
(0x3821, 
ªg_vÆue
);

271 
	}
}

273 
	$MOV5640_1920x1080
(
f‹m©
)

275 
i
;

276 
ªg_vÆue
 = 0x00;

278 
i
 = 0; i < 
	`ARRAY_SIZE
(
SåMOV40_1920X1080
); i++)

280 
	`I2C_OV5640_Wrôe
(
SåMOV40_1920X1080
[
i
].
addr
, SåMOV40_1920X1080[i].
vÆue
);

281 
	`udñay
(10);

285 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3820);

286 
ªg_vÆue
 |= 0x06;

287 
	`I2C_OV5640_Wrôe
(0x3820, 
ªg_vÆue
);

289 
ªg_vÆue
 = 
	`I2C_OV5640_Ród
(0x3821);

290 
ªg_vÆue
 |= 0x06;

291 
	`I2C_OV5640_Wrôe
(0x3821, 
ªg_vÆue
);

292 
	}
}

295 
	$MOV5640_MIPI_°ªam_⁄
()

297 
ªg_vÆue
 = 0x00;

298 
	`I2C_OV5640_Wrôe
(0x4202, 
ªg_vÆue
);

300 
	}
}

303 
	$MOV5640_MIPI_°ªam_off
()

305 
ªg_vÆue
 = 0x0f;

306 
	`I2C_OV5640_Wrôe
(0x4202, 
ªg_vÆue
);

308 
	}
}

310 
	$mov5640_i•_öô
(
size
, 
f‹m©
)

312 
CK_UINT8
 
chù_id
;

314 
	`I2C_OV5640_Inôül
();

315 #i‡
CONFIG_IS_ASIC


317 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB
, 1);

318 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB
, 0);

319 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB_CH1
, 1);

320 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB_CH1
, 0);

322 
	`udñay
(100 * 1000);

323 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB_CH1
, 0);

324 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB
, 0);

326 
	`udñay
(100 * 1000);

327 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB_CH1
, 1);

328 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB
, 1);

330 
	`udñay
(100 * 1000);

334 
	`udñay
(10 * 1000);

335 
	`¥ötf
(" mov5640_init \r\n");

337 
chù_id
 = 
	`I2C_OV5640_Ród
(0x300a);

338 
	`¥ötf
("ˇmî®ov5640_mùòi†0x300a,IDÑód i†0x%x\n",
chù_id
);

339 if(
chù_id
 != 0x56)

341 
	`¥ötf
("ˇmî®ov5640_mùòi†nŸ found,IDÑód i†0x%x\n",
chù_id
);

344 
chù_id
 = 
	`I2C_OV5640_Ród
(0x300b);

345 if(
chù_id
 != 0x40)

347 
	`¥ötf
("ˇmî®ov5640_mùòi†nŸ found,IDÑód i†0x%x\n",
chù_id
);

350 
	`¥ötf
("ˇmî®ov5640_mùòi†0x300b,IDÑód i†0x%x\n",
chù_id
);

352 
	`MOV5640_MIPI_°ªam_off
();

355 
	`MOV5640_i•_F‹m©_Inô
(
f‹m©
);

357 
	`MOV5640_RAW_1280x720
(
f‹m©
);

359 
	`MOV5640_MIPI_°ªam_off
();

361 
	}
}

364 
	$mov5640_öô
(
size
, 
f‹m©
)

366 
CK_UINT8
 
chù_id
;

368 
	`I2C_OV5640_Inôül
();

369 #i‡
CONFIG_IS_ASIC


371 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB
, 1);

372 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB
, 0);

373 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB_CH1
, 1);

374 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB_CH1
, 0);

376 
	`udñay
(100 * 1000);

377 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB
, 0);

378 
	`CK_Gpio_Ouçut
(
OV_PWDN_IONB_CH1
, 0);

380 
	`udñay
(100 * 1000);

381 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB
, 1);

382 
	`CK_Gpio_Ouçut
(
OV_RESET_IONB_CH1
, 1);

384 
	`udñay
(100 * 1000);

389 
	`udñay
(100 * 1000);

390 
	`¥ötf
(" mov5640_init \r\n");

392 
chù_id
 = 
	`I2C_OV5640_Ród
(0x300a);

393 
	`¥ötf
("ˇmî®ov5640_mùòi†0x300a,IDÑód i†0x%x\n",
chù_id
);

394 if(
chù_id
 != 0x56)

396 
	`¥ötf
("ˇmî®ov5640_mùòi†nŸ found,IDÑód i†0x%x\n",
chù_id
);

399 
chù_id
 = 
	`I2C_OV5640_Ród
(0x300b);

400 if(
chù_id
 != 0x40)

402 
	`¥ötf
("ˇmî®ov5640_mùòi†nŸ found,IDÑód i†0x%x\n",
chù_id
);

405 
	`¥ötf
("ˇmî®ov5640_mùòi†0x300b,IDÑód i†0x%x\n",
chù_id
);

407 
	`MOV5640_MIPI_°ªam_off
();

410 
	`MOV5640_F‹m©_Inô
(
f‹m©
);

412 if(
size
 =
IMAGE_VGA
)

414 
	`MOV5640_640x480
(
f‹m©
);

416 if(
size
 =
IMAGE_720P
)

418 
	`MOV5640_1280x720
(
f‹m©
);

420 if(
size
 =
IMAGE_1080P
)

422 
	`MOV5640_1920x1080
(
f‹m©
);

425 
	`MOV5640_MIPI_°ªam_off
();

427 
	}
}

	@drivers/OV_5640.h

1 #i‚de‡
_SENSOR_MOV5640_H_


2 
	#_SENSOR_MOV5640_H_


	)

4 
	~"iic.h
"

7 
	#__MIPI_TEST__


	)

9 
	#__CFG_0V5640_1__


	)

10 
	#__CFG_0V5640_2__


	)

11 
	#__CFG_0V5640_3__


	)

17 
	#__OV5640_800MBPS__
 800

	)

21 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

24 
	smov5640_ªgvÆ_li°
 {

25 
	maddr
;

26 
	mvÆue
;

30 
	#CSI_YUV422_8B
 0

	)

31 
	#CSI_RGB565
 1

	)

32 
	#CSI_YUV420_8B
 2

33 
	#CSI_RGB555
 3

	)

34 
	#CSI_RGB444
 4

	)

35 
	#CSI_RGB888
 5

	)

36 
	#CSI_YUV420_8B_NV21
 6

38 
	#CSI_1LANES
 1

	)

39 
	#CSI_2LANES
 2

	)

40 
	#CSI_3LANES
 3

	)

41 
	#CSI_4LANES
 4

	)

43 
	#IMAGE_VGA
 0

	)

44 
	#IMAGE_720P
 1

	)

45 
	#IMAGE_1080P
 2

	)

51 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV5640_CFG_INIT
[] =

127 #ifde‡
TEST_PATTERN


303 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV5640_CFG_ISP_INIT
[] =

384 #ifde‡
TEST_PATTERN


561 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV40_1920X1080
[] =

563 #ifde‡
__OV5640_80MBPS__


568 #ifde‡
__OV5640_160MBPS__


573 #ifde‡
__OV5640_800MBPS__


578 #ifde‡
__OV5640_400MBPS__


584 #ifde‡
__OV5640_600MBPS__


630 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV40_640X480
[] =

632 #ifde‡
__OV5640_80MBPS__


638 #ifde‡
__OV5640_160MBPS__


643 #ifde‡
__OV5640_800MBPS__


648 #ifde‡
__OV5640_400MBPS__


653 #ifde‡
__OV5640_600MBPS__


703 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV40_1280X720
[] =

705 #ifde‡
__OV5640_80MBPS__


710 #ifde‡
__OV5640_160MBPS__


715 #ifde‡
__OV5640_400MBPS__


720 #ifde‡
__OV5640_600MBPS__


725 #ifde‡
__OV5640_800MBPS__


774 c⁄° 
mov5640_ªgvÆ_li°
 
	gSåMOV40_RAW_1280X720
[] =

777 #ifde‡
__OV5640_80MBPS__


782 #ifde‡
__OV5640_160MBPS__


787 #ifde‡
__OV5640_400MBPS__


792 #ifde‡
__OV5640_800MBPS__


797 #ifde‡
__OV5640_600MBPS__


851 
	#TC_DPHYCIL_BASE
 0x00

	)

852 
	#TC_DPHYCTRL_BASE
 0x90

	)

853 
	#TC_PLL_BASE
 0xA0

	)

856 
	#ADDR_CIL_APBWR_CTRL
 (
TC_DPHYCIL_BASE
 + 0x00)

	)

858 
	#ADDR_CIL_GLOBAL_CTRL0
 (
TC_DPHYCIL_BASE
 + 0x01)

	)

859 
	#ADDR_CIL_GLOBAL_CTRL1
 (
TC_DPHYCIL_BASE
 + 0x02)

	)

860 
	#ADDR_CIL_GLOBAL_CTRL2
 (
TC_DPHYCIL_BASE
 + 0x03)

	)

861 
	#ADDR_CIL_GLOBAL_CTRL3
 (
TC_DPHYCIL_BASE
 + 0x04)

	)

863 
	#ADDR_CIL_CNT_WAKEUP
 (
TC_DPHYCIL_BASE
 + 0x10)

	)

864 
	#ADDR_CIL_CNT_DREN_DELAY
 (
TC_DPHYCIL_BASE
 + 0x11)

	)

865 
	#ADDR_CIL_CNT_TX_RELINQUISH
 (
TC_DPHYCIL_BASE
 + 0x12)

	)

866 
	#ADDR_CIL_CNT_RX_RELINQUISH
 (
TC_DPHYCIL_BASE
 + 0x13)

	)

867 
	#ADDR_CIL_CNT_RX_TIMEOUTL
 (
TC_DPHYCIL_BASE
 + 0x14)

	)

868 
	#ADDR_CIL_CNT_RX_TIMEOUTH
 (
TC_DPHYCIL_BASE
 + 0x15)

	)

870 
	#ADDR_CIL_CNT_HSCK_LPX
 (
TC_DPHYCIL_BASE
 + 0x20)

	)

871 
	#ADDR_CIL_CNT_HSCK_PREP
 (
TC_DPHYCIL_BASE
 + 0x21)

	)

872 
	#ADDR_CIL_CNT_HSCK_ZERO
 (
TC_DPHYCIL_BASE
 + 0x22)

	)

873 
	#ADDR_CIL_CNT_HSCK_PRE
 (
TC_DPHYCIL_BASE
 + 0x23)

	)

874 
	#ADDR_CIL_CNT_HSCK_TRAIL
 (
TC_DPHYCIL_BASE
 + 0x24)

	)

875 
	#ADDR_CIL_CNT_HSCK_EXIT
 (
TC_DPHYCIL_BASE
 + 0x25)

	)

876 
	#ADDR_CIL_CNT_HSCK_POST
 (
TC_DPHYCIL_BASE
 + 0x26)

	)

878 
	#ADDR_CIL_CNT_HSCK_SETTLE
 (
TC_DPHYCIL_BASE
 + 0x27)

	)

880 
	#ADDR_CIL_CNT_HSD_LPX
 (
TC_DPHYCIL_BASE
 + 0x30)

	)

881 
	#ADDR_CIL_CNT_HSD_ZERO
 (
TC_DPHYCIL_BASE
 + 0x31)

	)

882 
	#ADDR_CIL_CNT_HSD_PREP
 (
TC_DPHYCIL_BASE
 + 0x32)

	)

883 
	#ADDR_CIL_CNT_HSD_TRAIL
 (
TC_DPHYCIL_BASE
 + 0x33)

	)

884 
	#ADDR_CIL_CNT_HSD_EXIT
 (
TC_DPHYCIL_BASE
 + 0x34)

	)

886 
	#ADDR_CIL_CNT_HSD_SETTLE
 (
TC_DPHYCIL_BASE
 + 0x35)

	)

888 
	#ADDR_CIL_CNT_TAGO
 (
TC_DPHYCIL_BASE
 + 0x40)

	)

889 
	#ADDR_CIL_CNT_TAGET
 (
TC_DPHYCIL_BASE
 + 0x41)

	)

890 
	#ADDR_CIL_CNT_TASURE
 (
TC_DPHYCIL_BASE
 + 0x42)

	)

891 
	#ADDR_CIL_CNT_TABG
 (
TC_DPHYCIL_BASE
 + 0x43)

	)

892 
	#ADDR_CIL_CNT_TAREQ_DLY
 (
TC_DPHYCIL_BASE
 + 0x44)

	)

894 
	#ADDR_CIL_DEBUG_REG0
 (
TC_DPHYCIL_BASE
 + 0x51)

	)

895 
	#ADDR_CIL_DCHECKERR
 (
TC_DPHYCIL_BASE
 + 0x52)

	)

896 
	#ADDR_CIL_RCALOUT
 (
TC_DPHYCIL_BASE
 + 0x53)

	)

898 
	#ADDR_CIL_CKLANE_CTL0
 (
TC_DPHYCIL_BASE
 + 0x60)

	)

899 
	#ADDR_CIL_CKLANE_CTL1
 (
TC_DPHYCIL_BASE
 + 0x61)

	)

900 
	#ADDR_CIL_CKLANE_CTL2
 (
TC_DPHYCIL_BASE
 + 0x62)

	)

902 
	#ADDR_CIL_D0LANE_CTL0
 (
TC_DPHYCIL_BASE
 + 0x63)

	)

903 
	#ADDR_CIL_D0LANE_CTL1
 (
TC_DPHYCIL_BASE
 + 0x64)

	)

904 
	#ADDR_CIL_D0LANE_CTL2
 (
TC_DPHYCIL_BASE
 + 0x65)

	)

906 
	#ADDR_CIL_D1LANE_CTL0
 (
TC_DPHYCIL_BASE
 + 0x66)

	)

907 
	#ADDR_CIL_D1LANE_CTL1
 (
TC_DPHYCIL_BASE
 + 0x67)

	)

908 
	#ADDR_CIL_D1LANE_CTL2
 (
TC_DPHYCIL_BASE
 + 0x68)

	)

910 
	#ADDR_CIL_D2LANE_CTL0
 (
TC_DPHYCIL_BASE
 + 0x69)

	)

911 
	#ADDR_CIL_D2LANE_CTL1
 (
TC_DPHYCIL_BASE
 + 0x6A)

	)

912 
	#ADDR_CIL_D2LANE_CTL2
 (
TC_DPHYCIL_BASE
 + 0x6B)

	)

914 
	#ADDR_CIL_D3LANE_CTL0
 (
TC_DPHYCIL_BASE
 + 0x6C)

	)

915 
	#ADDR_CIL_D3LANE_CTL1
 (
TC_DPHYCIL_BASE
 + 0x6D)

	)

916 
	#ADDR_CIL_D3LANE_CTL2
 (
TC_DPHYCIL_BASE
 + 0x6E)

	)

918 
	#ADDR_CIL_CKLANE_ST0
 (
TC_DPHYCIL_BASE
 + 0x70)

	)

919 
	#ADDR_CIL_D0LANE_ST0
 (
TC_DPHYCIL_BASE
 + 0x71)

	)

920 
	#ADDR_CIL_D0LANE_ST1
 (
TC_DPHYCIL_BASE
 + 0x72)

	)

921 
	#ADDR_CIL_D1LANE_ST0
 (
TC_DPHYCIL_BASE
 + 0x73)

	)

922 
	#ADDR_CIL_D1LANE_ST1
 (
TC_DPHYCIL_BASE
 + 0x74)

	)

923 
	#ADDR_CIL_D2LANE_ST0
 (
TC_DPHYCIL_BASE
 + 0x75)

	)

924 
	#ADDR_CIL_D2LANE_ST1
 (
TC_DPHYCIL_BASE
 + 0x76)

	)

925 
	#ADDR_CIL_D3LANE_ST0
 (
TC_DPHYCIL_BASE
 + 0x77)

	)

926 
	#ADDR_CIL_D3LANE_ST1
 (
TC_DPHYCIL_BASE
 + 0x78)

	)

929 
	#TCDPHY_GCTRL
 (
TC_DPHYCTRL_BASE
 + 0x00)

	)

930 
	#TCDPHY_ENABLE
 (
TC_DPHYCTRL_BASE
 + 0x01)

	)

933 
	#TCPLL_DM
 (
TC_PLL_BASE
 + 0x00)

	)

934 
	#TCPLL_CLKF
 (
TC_PLL_BASE
 + 0x01)

	)

935 
	#TCPLL_GCTRL
 (
TC_PLL_BASE
 + 0x02)

	)

937 
	#TCOSCPLL_IN0
 (
TC_PLL_BASE
 + 0x08)

	)

938 
	#TCOSCPLL_IN1
 (
TC_PLL_BASE
 + 0x09)

	)

939 
	#TCOSCPLL_IN2
 (
TC_PLL_BASE
 + 0x0A)

	)

941 
mov5640_öô
–
size
, 
f‹m©
);

942 
MOV5640_MIPI_°ªam_⁄
();

	@drivers/ad1938_spi.c

12 
	~<°rög.h
>

13 
	~"ck810.h
"

14 
	~"dw_≠b_i2s.h
"

15 
	~"¢d_pcm.h
"

16 
	~"d©©y≥.h
"

17 
	~"misc.h
"

18 
	~"ad193x.h
"

19 
	~"vs_≠b_•i.h
"

20 
	~"soc_dai.h
"

31 
	#AD1938_GADDR
 0x04

	)

33 
	$ad193x_•i_wrôe
(
ad193x_dev
 *
ad193x
, 
ªg
, 
vÆ
)

35 
•i_å™s„r
 
x„r
;

36 
txbuf
[3];

37 
	`mem£t
(&
x„r
, 0, (
•i_å™s„r
));

39 
txbuf
[0] = 
AD1938_GADDR
 << 1;

40 
txbuf
[1] = 
ªg
;

41 
txbuf
[2] = 
vÆ
;

42 
x„r
.
tx_buf
 = 
txbuf
;

43 
x„r
.
rx_buf
 = 
NULL
;

44 
x„r
.
bôs_≥r_w‹d
 = 8;

45 
x„r
.
Àn
 = 3;

46 
x„r
.
•ìd_hz
 = 500000;

47 
x„r
.
rx_nbôs
 = 
SPI_NBITS_SINGLE
;

49 
	`vsi_•i_£t_cs
(
ad193x
->
•idev
, 
åue
);

51 
	`vsi_•i_å™s„r_⁄e
(
ad193x
->
•idev
, &
x„r
);

53 
	`vsi_•i_£t_cs
(
ad193x
->
•idev
, 
Ál£
);

54 
	}
}

56 
	$ad193x_•i_ªad
(
ad193x_dev
 *
ad193x
, 
ªg
)

58 
•i_å™s„r
 
x„r
;

59 
txbuf
[2] = {0};

60 
rxbuf
[1] = {0};

61 
	`mem£t
(&
x„r
, 0, (
•i_å™s„r
));

63 
txbuf
[0] = 
AD1938_GADDR
 << 1 | 0x01;

64 
txbuf
[1] = 
ªg
;

65 
x„r
.
tx_buf
 = 
txbuf
;

66 
x„r
.
rx_buf
 = 
NULL
;

67 
x„r
.
bôs_≥r_w‹d
 = 8;

68 
x„r
.
Àn
 = 2;

69 
x„r
.
•ìd_hz
 = 500000;

70 
x„r
.
rx_nbôs
 = 
SPI_NBITS_SINGLE
;

72 
	`vsi_•i_£t_cs
(
ad193x
->
•idev
, 
åue
);

74 
	`vsi_•i_å™s„r_⁄e
(
ad193x
->
•idev
, &
x„r
);

76 
x„r
.
tx_buf
 = 
NULL
;

77 
x„r
.
rx_buf
 = 
rxbuf
;

78 
x„r
.
Àn
 = 1;

79 
	`vsi_•i_å™s„r_⁄e
(
ad193x
->
•idev
, &
x„r
);

81 
	`vsi_•i_£t_cs
(
ad193x
->
•idev
, 
Ál£
);

83  
rxbuf
[0];

85 
	}
}

88 
	$ad193x_•i_upd©e_bôs
(
ad193x_dev
 *
ad193x
, 
ªg
,

89 
mask
, 
vÆ
)

91 
t
 = 
	`ad193x_•i_ªad
(
ad193x
, 
ªg
);

92 
t
 &~
mask
;

93 
t
 |
vÆ
;

94 
	`ad193x_•i_wrôe
(
ad193x
, 
ªg
, 
t
);

95 
	}
}

97 
	$ad193x_£t_tdm_¶Ÿ
(
¢d_soc_dai_dev
 *
dai
, 
¶Ÿs
)

99 
ad193x_dev
 *
ad193x
 = (ad193x_dev *)
dai
->
codec_dai
;

100 
ch™√ls
;

102 
¶Ÿs
) {

104 
ch™√ls
 = 
AD193X_2_CHANNELS
;

107 
ch™√ls
 = 
AD193X_4_CHANNELS
;

110 
ch™√ls
 = 
AD193X_8_CHANNELS
;

113 
ch™√ls
 = 
AD193X_16_CHANNELS
;

119 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_DAC_CTRL1
,

120 
AD193X_DAC_CHAN_MASK
, 
ch™√ls
 << 
AD193X_DAC_CHAN_SHFT
);

122 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_ADC_CTRL2
,

123 
AD193X_ADC_CHAN_MASK
,

124 
ch™√ls
 << 
AD193X_ADC_CHAN_SHFT
);

127 
	}
}

129 
	$ad1938_ªg_dump
(
ad193x_dev
 *
ad193x
)

131 
vÆ
, 
i
;

133 
	`¥ötf
("==========AD1938 Register DUMP======\n");

134 
i
 = 0; i <= 16; i++) {

135 
vÆ
 = 
	`ad193x_•i_ªad
(
ad193x
, 
i
);

136 
	`¥ötf
("Reg_%d, vÆ_0x%x\n", 
i
, 
vÆ
);

138 
	`¥ötf
("=====================================\n");

141 
	}
}

143 
	$ad193x_£t_dai_fmt
(
¢d_soc_dai_dev
 *
dai
,

144 
fmt
)

146 
ad193x_dev
 *
ad193x
 = (ad193x_dev *)
dai
->
codec_dai
;

147 
adc_£rfmt
 = 0;

148 
adc_fmt
 = 0;

149 
dac_fmt
 = 0;

154 
fmt
 & 
SND_SOC_DAIFMT_FORMAT_MASK
) {

155 
SND_SOC_DAIFMT_I2S
:

156 
adc_£rfmt
 |
AD193X_ADC_SERFMT_TDM
;

158 
SND_SOC_DAIFMT_DSP_A
:

159 
adc_£rfmt
 |
AD193X_ADC_SERFMT_AUX
;

165 
fmt
 & 
SND_SOC_DAIFMT_INV_MASK
) {

166 
SND_SOC_DAIFMT_NB_NF
:

168 
SND_SOC_DAIFMT_NB_IF
:

169 
adc_fmt
 |
AD193X_ADC_LEFT_HIGH
;

170 
dac_fmt
 |
AD193X_DAC_LEFT_HIGH
;

172 
SND_SOC_DAIFMT_IB_NF
:

173 
adc_fmt
 |
AD193X_ADC_BCLK_INV
;

174 
dac_fmt
 |
AD193X_DAC_BCLK_INV
;

176 
SND_SOC_DAIFMT_IB_IF
:

177 
adc_fmt
 |
AD193X_ADC_LEFT_HIGH
;

178 
adc_fmt
 |
AD193X_ADC_BCLK_INV
;

179 
dac_fmt
 |
AD193X_DAC_LEFT_HIGH
;

180 
dac_fmt
 |
AD193X_DAC_BCLK_INV
;

186 
fmt
 & 
SND_SOC_DAIFMT_MASTER_MASK
) {

187 
SND_SOC_DAIFMT_CBM_CFM
:

188 
adc_fmt
 |
AD193X_ADC_LCR_MASTER
;

189 
adc_fmt
 |
AD193X_ADC_BCLK_MASTER
;

190 
dac_fmt
 |
AD193X_DAC_LCR_MASTER
;

191 
dac_fmt
 |
AD193X_DAC_BCLK_MASTER
;

193 
SND_SOC_DAIFMT_CBS_CFM
:

194 
adc_fmt
 |
AD193X_ADC_LCR_MASTER
;

195 
dac_fmt
 |
AD193X_DAC_LCR_MASTER
;

197 
SND_SOC_DAIFMT_CBM_CFS
:

198 
adc_fmt
 |
AD193X_ADC_BCLK_MASTER
;

199 
dac_fmt
 |
AD193X_DAC_BCLK_MASTER
;

201 
SND_SOC_DAIFMT_CBS_CFS
:

208 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_ADC_CTRL1
,

209 
AD193X_ADC_SERFMT_MASK
, 
adc_£rfmt
);

210 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_ADC_CTRL2
,

211 
AD193X_ADC_FMT_MASK
, 
adc_fmt
);

213 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_DAC_CTRL1
,

214 
AD193X_DAC_FMT_MASK
, 
dac_fmt
);

217 
	}
}

219 
	$ad193x_£t_dai_sys˛k
(
¢d_soc_dai_dev
 *
dai
)

221 
ad193x_dev
 *
ad193x
 = (ad193x_dev *)
dai
->
codec_dai
;

222 
dai
->
sys˛k
) {

227 
ad193x
->
sys˛k
 = 
dai
->sysclk;

231 
	}
}

233 
	$ad193x_°¨tup
(
¢d_soc_dai_dev
 *
dai
,

234 
¢d_pcm_sub°ªam
 *
sub°ªam
)

236 if(
	`ad193x_£t_dai_sys˛k
(
dai
)) {

237 
	`¥ötf
("Bad systerm clock\n");

240 if(
	`ad193x_£t_tdm_¶Ÿ
(
dai
, 
sub°ªam
->
∑øms
.
ch™_ƒ
)){

241 
	`¥ötf
("Bad channelÇumber\n");

245 if(
	`ad193x_£t_dai_fmt
(
dai
, 
sub°ªam
->
fmt
)) {

246 
	`¥ötf
("Bad fmt\n");

250 
	}
}

252 
	$ad193x_hw_∑øms
(
¢d_soc_dai_dev
 *
dai
,

253 
¢d_pcm_sub°ªam
 *
sub°ªam
)

255 
w‹d_Àn
 = 0, 
ma°î_øã
 = 0;

256 
ad193x_dev
 *
ad193x
 = (ad193x_dev *)
dai
->
codec_dai
;

259 
sub°ªam
->
∑øms
.
d©a_width
) {

261 
w‹d_Àn
 = 3;

264 
w‹d_Àn
 = 1;

268 
w‹d_Àn
 = 0;

274 
ad193x
->
sys˛k
) {

276 
ma°î_øã
 = 
AD193X_PLL_INPUT_256
;

279 
ma°î_øã
 = 
AD193X_PLL_INPUT_384
;

282 
ma°î_øã
 = 
AD193X_PLL_INPUT_512
;

285 
ma°î_øã
 = 
AD193X_PLL_INPUT_768
;

290 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_PLL_CLK_CTRL0
,

291 
AD193X_PLL_INPUT_MASK
, 
ma°î_øã
);

293 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_DAC_CTRL2
,

294 
AD193X_DAC_WORD_LEN_MASK
,

295 
w‹d_Àn
 << 
AD193X_DAC_WORD_LEN_SHFT
);

297 
	`ad193x_•i_upd©e_bôs
(
ad193x
, 
AD193X_ADC_CTRL1
,

298 
AD193X_ADC_WORD_LEN_MASK
, 
w‹d_Àn
);

301 
	}
}

303 c⁄° 
¢d_soc_dai_›s
 
	gad193x_dai_›s
 = {

304 .
hw_∑øms
 = 
ad193x_hw_∑øms
,

305 .
	g°¨tup
 = 
ad193x_°¨tup
,

309 
ad193x_dev
 
	gad193x_dev
;

314 
	$ad193x_codec_¥obe
(
¢d_soc_dai_dev
 *
dai_dev
, 
u8
 
•i_id
)

316 if(!
dai_dev
)

319 
	`mem£t
(&
ad193x_dev
, 0, (ad193x_dev));

320 
dai_dev
->
codec_dai
 = &
ad193x_dev
;

322 
ad193x_dev
.
•idev
 = 
	`vsi_•i_¥obe
(
•i_id
);

323 if(!
ad193x_dev
.
•idev
)

326 
ad193x_dev
.
dai_›s
 = &
ad193x_dai_›s
;

329 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_CHNL_MUTE
, 0x0);

330 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_L1_VOL
 , 0x0);

331 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_R1_VOL
 , 0x0);

332 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_L2_VOL
 , 0x0);

333 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_R2_VOL
 , 0x0);

334 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_L3_VOL
 , 0x0);

335 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_R3_VOL
 , 0x0);

336 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_L4_VOL
 , 0x0);

337 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_R4_VOL
 , 0x0);

340 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_CTRL2
, 0x1A);

345 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_DAC_CTRL0
, 0x00);

351 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_ADC_CTRL0
, 0x2);

353 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_ADC_CTRL1
, 0x43);

357 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_PLL_CLK_CTRL0
, 0x98);

360 
	`ad193x_•i_wrôe
(&
ad193x_dev
, 
AD193X_PLL_CLK_CTRL1
, 0x04);

365 
	`¥ötf
("Codec AD1938 Probed\n");

367 
	}
}

	@drivers/ad193x.h

9 #i‚de‡
__AD193X_H__


10 
	#__AD193X_H__


	)

12 
	~"soc_dai.h
"

13 
	~"vs_≠b_•i.h
"

15 
	#SPI_FOR_AD1938
 1

	)

17 
	#AD193X_PLL_CLK_CTRL0
 0x00

	)

18 
	#AD193X_PLL_POWERDOWN
 0x01

	)

19 
	#AD193X_PLL_INPUT_MASK
 0x6

	)

20 
	#AD193X_PLL_INPUT_256
 (0 << 1)

	)

21 
	#AD193X_PLL_INPUT_384
 (1 << 1)

	)

22 
	#AD193X_PLL_INPUT_512
 (2 << 1)

	)

23 
	#AD193X_PLL_INPUT_768
 (3 << 1)

	)

24 
	#AD193X_PLL_CLK_CTRL1
 0x01

	)

25 
	#AD193X_DAC_CTRL0
 0x02

	)

26 
	#AD193X_DAC_POWERDOWN
 0x01

	)

27 
	#AD193X_DAC_SERFMT_MASK
 0xC0

	)

28 
	#AD193X_DAC_SERFMT_STEREO
 (0 << 6)

	)

29 
	#AD193X_DAC_SERFMT_TDM
 (1 << 6)

	)

30 
	#AD193X_DAC_CTRL1
 0x03

	)

31 
	#AD193X_DAC_CHAN_SHFT
 1

	)

32 
	#AD193X_DAC_CHAN_MASK
 (3 << 
AD193X_DAC_CHAN_SHFT
)

	)

33 
	#AD193X_DAC_LCR_MASTER
 (1 << 4)

	)

34 
	#AD193X_DAC_BCLK_MASTER
 (1 << 5)

	)

35 
	#AD193X_DAC_LEFT_HIGH
 (1 << 3)

	)

36 
	#AD193X_DAC_BCLK_INV
 (1 << 7)

	)

37 
	#AD193X_DAC_FMT_MASK
 (
AD193X_DAC_LCR_MASTER
 | \

38 
AD193X_DAC_BCLK_MASTER
 | 
AD193X_DAC_LEFT_HIGH
 | 
AD193X_DAC_BCLK_INV
)

	)

39 
	#AD193X_DAC_CTRL2
 0x04

	)

40 
	#AD193X_DAC_WORD_LEN_SHFT
 3

	)

41 
	#AD193X_DAC_WORD_LEN_MASK
 0x18

	)

42 
	#AD193X_DAC_MASTER_MUTE
 1

	)

43 
	#AD193X_DAC_CHNL_MUTE
 0x05

	)

44 
	#AD193X_DACL1_MUTE
 0

	)

45 
	#AD193X_DACR1_MUTE
 1

	)

46 
	#AD193X_DACL2_MUTE
 2

	)

47 
	#AD193X_DACR2_MUTE
 3

	)

48 
	#AD193X_DACL3_MUTE
 4

	)

49 
	#AD193X_DACR3_MUTE
 5

	)

50 
	#AD193X_DACL4_MUTE
 6

	)

51 
	#AD193X_DACR4_MUTE
 7

	)

52 
	#AD193X_DAC_L1_VOL
 0x06

	)

53 
	#AD193X_DAC_R1_VOL
 0x07

	)

54 
	#AD193X_DAC_L2_VOL
 0x08

	)

55 
	#AD193X_DAC_R2_VOL
 0x09

	)

56 
	#AD193X_DAC_L3_VOL
 0x0a

	)

57 
	#AD193X_DAC_R3_VOL
 0x0b

	)

58 
	#AD193X_DAC_L4_VOL
 0x0c

	)

59 
	#AD193X_DAC_R4_VOL
 0x0d

	)

60 
	#AD193X_ADC_CTRL0
 0x0e

	)

61 
	#AD193X_ADC_POWERDOWN
 0x01

	)

62 
	#AD193X_ADC_HIGHPASS_FILTER
 1

	)

63 
	#AD193X_ADCL1_MUTE
 2

	)

64 
	#AD193X_ADCR1_MUTE
 3

	)

65 
	#AD193X_ADCL2_MUTE
 4

	)

66 
	#AD193X_ADCR2_MUTE
 5

	)

67 
	#AD193X_ADC_CTRL1
 0x0f

	)

68 
	#AD193X_ADC_SERFMT_MASK
 0x60

	)

69 
	#AD193X_ADC_SERFMT_STEREO
 (0 << 5)

	)

70 
	#AD193X_ADC_SERFMT_TDM
 (1 << 5)

	)

71 
	#AD193X_ADC_SERFMT_AUX
 (2 << 5)

	)

72 
	#AD193X_ADC_WORD_LEN_MASK
 0x3

	)

73 
	#AD193X_ADC_CTRL2
 0x10

	)

74 
	#AD193X_ADC_CHAN_SHFT
 4

	)

75 
	#AD193X_ADC_CHAN_MASK
 (3 << 
AD193X_ADC_CHAN_SHFT
)

	)

76 
	#AD193X_ADC_LCR_MASTER
 (1 << 3)

	)

77 
	#AD193X_ADC_BCLK_MASTER
 (1 << 6)

	)

78 
	#AD193X_ADC_LEFT_HIGH
 (1 << 2)

	)

79 
	#AD193X_ADC_BCLK_INV
 (1 << 1)

	)

80 
	#AD193X_ADC_FMT_MASK
 (
AD193X_ADC_LCR_MASTER
 | \

81 
AD193X_ADC_BCLK_MASTER
 | 
AD193X_ADC_LEFT_HIGH
 | 
AD193X_ADC_BCLK_INV
)

	)

83 
	#AD193X_2_CHANNELS
 0

	)

84 
	#AD193X_4_CHANNELS
 1

	)

85 
	#AD193X_8_CHANNELS
 2

	)

86 
	#AD193X_16_CHANNELS
 3

	)

88 
	#AD193X_NUM_REGS
 17

	)

90 
	sad193x_dev
 {

91 
vsi_•i
 *
	m•idev
;

92 
¢d_soc_dai_›s
 *
	mdai_›s
;

93 
	msys˛k
;

96 
ad193x_codec_¥obe
(
¢d_soc_dai_dev
 *
dai_dev
, 
u8
 
•i_id
);

	@drivers/aes_cbc_128.c

4 
	~"ck810.h
"

5 
	~"•acc.h
"

6 
	~"misc.h
"

11 
	gi_key
[] = {

18 
	gi_iv
[] = {

25 
	g∂aö
[] = {

140 
	gf_key
[] = {

147 
	gf_iv
[] = {

155 
	$CK_SPACC_Te°
 ()

157 
ªsu…
;

158 
tmp
;

159 
k
;

160 
i
;

161 
ˇ£_Áû
;

164 
vl_í_˘æ
 = 0xe000e012;

165 
vl_de_˘æ
 = 0xe0006012;

166 
vl_§c_Àn
 = 0x000001c0;

167 
vl_d°_Àn
 = 0x000001c0;

168 
vl_icv_Àn
 = 0x00000000;

169 
vl_icv_off£t
 = 0x00000000;

170 
vl_off£t
 = 0x00000000;

171 
vl_¥e_Ød_Àn
 = 0x00000000;

172 
vl_¥oc_Àn
 = 0x000001c0;

173 
vl_po°_Ød_Àn
 = 0x00000000;

174 
vl_iv_off£t
 = 0x0000020;

175 
vl_aux
 = 0x00000000;

178 
vl_cùhî_key_sz
 = 0x80000010;

179 
vl_hash_key_sz
 = 0x00000000;

181 
ˇ£_Áû
 = 0;

183 
	`¥ötf
("# Wr PlainÅo SRAM #\n");

185 
i
=0;i<112;i=i+1){

186 
	`wrôe_mªg32
(
PLAIN_SRAM_BASE
+
i
*0x4,
∂aö
[i]);

190 
	`¥ötf
("# Encrypt Flow #\n");

193 
i
=0;i<4;i=i+1){

194 
	`wrôe_mªg32
(
CIPH_CTX
+
i
*0x4,
i_key
[i]);

196 
i
=0;i<4;i=i+1){

197 
	`wrôe_mªg32
(
CIPH_CTX
+0x20+
i
*0x4,
i_iv
[i]);

202 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x0,
PLAIN_SRAM_BASE
);

203 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x4,
vl_§c_Àn
);

204 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x8,0x0);

205 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0xc,0x0);

208 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x0,
CIPH_SRAM_BASE
);

209 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x4,
vl_d°_Àn
);

210 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x8,0x0);

211 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0xc,0x0);

215 
	`wrôe_mªg32
(
SRC_PTR
,
SRC_PTR_ADDR
);

216 
	`wrôe_mªg32
(
DST_PTR
,
DST_PTR_ADDR
);

217 
	`wrôe_mªg32
(
OFFSET
,
vl_off£t
);

218 
	`wrôe_mªg32
(
PRE_AAD_LEN
,
vl_¥e_Ød_Àn
);

219 
	`wrôe_mªg32
(
POST_AAD_LEN
,
vl_po°_Ød_Àn
);

220 
	`wrôe_mªg32
(
PROC_LEN
,
vl_¥oc_Àn
);

221 
	`wrôe_mªg32
(
ICV_LEN
,
vl_icv_Àn
);

222 
	`wrôe_mªg32
(
ICV_OFFSET
,
vl_icv_off£t
);

223 
	`wrôe_mªg32
(
IV_OFFSET
,
vl_iv_off£t
);

224 
	`wrôe_mªg32
(
AUX_INFO
,
vl_aux
);

225 
	`wrôe_mªg32
(
KEY_SZ
,
vl_cùhî_key_sz
);

226 
	`wrôe_mªg32
(
KEY_SZ
,
vl_hash_key_sz
);

229 
	`¥ötf
("# Wait for Wr Ctrl Reg #\n");

230 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

231 (
ªsu…
&0x8000) != 0x0){

232 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

234 
	`wrôe_mªg32
(
CTRL
,
vl_í_˘æ
);

237 
	`¥ötf
("# Wait Encrypt End #\n");

238 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

239 (
ªsu…
&0x80000000) != 0x0){

240 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

243 
	`wrôe_mªg32
(
STAT_POP
,0x1);

244 
	`¥ötf
("# Rd StatÑeg #\n");

245 
ªsu…
 = 
	`ªad_mªg32
(
STATUS
);

246 if((
ªsu…
&0x07000000) == 0x0){

247 
	`¥ötf
("# EncryptÉnd! #\n");

251 
	`¥ötf
("Encrypt FAIL! \n");

252 
ˇ£_Áû
 = 1;

257 
	`¥ötf
("# Decrypt Flow #\n");

260 
i
=0;i<4;i=i+1){

261 
	`wrôe_mªg32
(
CIPH_CTX
+
i
*0x4,
i_key
[i]);

263 
i
=0;i<4;i=i+1){

264 
	`wrôe_mªg32
(
CIPH_CTX
+0x20+
i
*0x4,
i_iv
[i]);

269 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x0,
CIPH_SRAM_BASE
);

270 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x4,
vl_§c_Àn
);

271 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0x8,0x0);

272 
	`wrôe_mªg32
(
SRC_PTR_ADDR
+0xc,0x0);

275 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x0,
DECYP_SRAM_BASE
);

276 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x4,
vl_d°_Àn
);

277 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0x8,0x0);

278 
	`wrôe_mªg32
(
DST_PTR_ADDR
+0xc,0x0);

282 
	`wrôe_mªg32
(
SRC_PTR
,
SRC_PTR_ADDR
);

283 
	`wrôe_mªg32
(
DST_PTR
,
DST_PTR_ADDR
);

284 
	`wrôe_mªg32
(
OFFSET
,
vl_off£t
);

285 
	`wrôe_mªg32
(
PRE_AAD_LEN
,
vl_¥e_Ød_Àn
);

286 
	`wrôe_mªg32
(
POST_AAD_LEN
,
vl_po°_Ød_Àn
);

287 
	`wrôe_mªg32
(
PROC_LEN
,
vl_¥oc_Àn
);

288 
	`wrôe_mªg32
(
ICV_LEN
,
vl_icv_Àn
);

289 
	`wrôe_mªg32
(
ICV_OFFSET
,
vl_icv_off£t
);

290 
	`wrôe_mªg32
(
IV_OFFSET
,
vl_iv_off£t
);

291 
	`wrôe_mªg32
(
AUX_INFO
,
vl_aux
);

292 
	`wrôe_mªg32
(
KEY_SZ
,
vl_cùhî_key_sz
);

293 
	`wrôe_mªg32
(
KEY_SZ
,
vl_hash_key_sz
);

296 
	`¥ötf
("# Wait for Wr Ctrl Reg #\n");

297 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

298 (
ªsu…
&0x8000) != 0x0){

299 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

301 
	`wrôe_mªg32
(
CTRL
,
vl_de_˘æ
);

304 
	`¥ötf
("# Wait Decrypt End #\n");

305 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

306 (
ªsu…
&0x80000000) != 0x0){

307 
ªsu…
 = 
	`ªad_mªg32
(
FIFO_STAT
);

311 
	`wrôe_mªg32
(
STAT_POP
,0x1);

313 
ªsu…
 = 
	`ªad_mªg32
(
STATUS
);

314 if((
ªsu…
&0x07000000) == 0x0){

315 
	`¥ötf
("# DecryptÉnd! #\n");

319 
	`¥ötf
("Decrypt FAIL! \n");

320 
ˇ£_Áû
 = 1;

327 
	`¥ötf
("# check data #\n");

329 
i
=0;i<112;i=i+1){

331 
tmp
 = 
	`ªad_mªg32
(
DECYP_SRAM_BASE
+
i
*0x4);

333 if(
tmp
==
∂aö
[
i
]){

337 
	`¥ötf
("data compare is FAIL! \n");

338 
ˇ£_Áû
 = 1;

342 
i
=0;i<4;i=i+1){

344 
tmp
 = 
	`ªad_mªg32
(
CIPH_CTX
+
i
*0x4);

346 if(
tmp
==
f_key
[
i
]){

350 
	`¥ötf
("key compare is FAIL! \n");

351 
ˇ£_Áû
 = 1;

355 
i
=0;i<4;i=i+1){

357 
tmp
 = 
	`ªad_mªg32
(
CIPH_CTX
+0x20+
i
*0x4);

359 if(
tmp
==
f_iv
[
i
]){

363 
	`¥ötf
("IV compare is FAIL! \n");

364 
ˇ£_Áû
 = 1;

370 i‡(
ˇ£_Áû
)

371 
	`¥ötf
("case is failed! \n");

373 
	`¥ötf
("case isÖassed! \n");

377 
	}
}

	@drivers/ahbdma.c

13 
	~"ck810.h
"

14 
	~"ötc.h
"

15 
	~"ahbdma.h
"

16 
	~"d©©y≥.h
"

17 
	~"misc.h
"

18 
	~"u¨t.h
"

19 
	~"cku¨t.h
"

20 
	~"©24c64.h
"

21 
	~"iic.h
"

22 
	~"•i_«nd.h
"

23 
	~"°dlib.h
"

24 
	~<°rög.h
>

26 
BOOL
 
CK_U¨t_Gë_FIFO_Ac˚ss_Mode
(
CK_U¨t_Devi˚
 
u¨tid
);

27 
CK_C⁄sﬁe_Inô
();

28 
CK_U¨t_Devi˚
 
c⁄sﬁeu¨t
;

29 
•i_«nd_öt_mode
;

31 
	#UART_THR
(
id
Ë
	`PHYSICAL_ADDRESS
((
CK_UINT32
)
CK_UART_ADDRBASE0
 + 
CK_UART_THR
 + id * 0x1000)

	)

32 
	#UART_RBR
(
id
Ë
	`PHYSICAL_ADDRESS
((
CK_UINT32
)
CK_UART_ADDRBASE0
 + 
CK_UART_RBR
 + id * 0x1000)

	)

33 
	#≥rùhîÆ_u¨t_tx_2_id
(
pid
Ë(’id - 4Ë/ 2)

	)

34 
	#≥rùhîÆ_u¨t_rx_2_id
(
pid
Ë(’id - 5Ë/ 2)

	)

36 
	#I2C_IC_DATA_CMD
(
id
Ë
	`PHYSICAL_ADDRESS
((
CK_UINT32
)
CK_I2C0_BASSADDR
 + 0x10 + id * 0x1000)

	)

37 
	#≥rùhîÆ_i2c_tx_2_id
(
pid
Ë(’id - 4Ë/ 2)

	)

38 
	#≥rùhîÆ_i2c_rx_2_id
(
pid
Ë(’id - 5Ë/ 2)

	)

40 
	#MEM2MEM_TEST_L
 0x1000

	)

41 
	#MEM2MEM_LINK_TEST_L
 0x100

	)

42 
	#MEM2MEM_REALIGNMENT_L
 0x9

	)

43 
	#MEM2UART0_TEST_L
 0x24

	)

44 
	#MEM2I2C_TEST_L
 0x20

	)

45 
	#MEM2SPI_TEST_L
 0x24

	)

46 
	#MEM2SPIS_RX_TEST_L
 0x14

	)

47 
	#MEM2SPIS_TX_TEST_L
 0x14

	)

48 
	#MEM_TEST_SRC
 0x20000000

	)

49 
	#MEM_TEST_SRC1
 0x20000400

	)

50 
	#MEM_TEST_DEST
 0x20004000

	)

51 
	#MEM_TEST_DEST1
 0x20004400

	)

52 
	#SRAM_TEST_SRC
 0xF0000000

	)

53 
	#SRAM_TEST_SRC1
 0xF0000400

	)

54 
	#SRAM_TEST_DEST
 0xF0009000

	)

55 
	#SRAM_TEST_DEST1
 0xF0009400

	)

58 
	#DMA_CH01_MAX_BLK_SIZE
 1023

	)

60 
	#DMA_CH27_MAX_BLK_SIZE
 1023

	)

61 
	#DMAH_NUM_CHANNELS
 8

	)

63 
	#MULTI_CHANNEL_MEM_INTVL
 0x200

	)

65 
	#DMAC_DMA_COMP_PARAM_1_VAL
 (
CK_UINT64
)0x3820070c88888888

	)

66 
	#DMAC_DMA_COMP_PARAM_2_VAL
 (
CK_UINT64
)0x0000000030041b00

	)

67 
	#DMAC_DMA_COMP_PARAM_3_VAL
 (
CK_UINT64
)0x30041b0030041b00

	)

68 
	#DMAC_DMA_COMP_PARAM_4_VAL
 (
CK_UINT64
)0x30041b0030041b00

	)

69 
	#DMAC_DMA_COMP_PARAM_5_VAL
 (
CK_UINT64
)0x30041b0030041b00

	)

70 
	#DMAC_DMA_COMP_PARAM_6_VAL
 (
CK_UINT64
)0x30041b0000000000

	)

71 
	#DMAC_DMAIDREG_VAL
 (
CK_UINT64
)0x0

	)

72 
	#DMAC_DMA_COMP_ID_VAL
 (
CK_UINT64
)0x3232312a44571110

	)

74 #ifde‡
AHB_DMAC_DEBUG


75 
	#DBG
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

77 
	#DBG
(...)

	)

80 
CK_UINT32
 
	gid_ªgs
[2][8] = {{
DMAC_DMAIDREG
(0), 
DMAC_DMA_COMP_ID
(0),

81 
DMAC_DMA_COMP_PARAM_1
(0), 
DMAC_DMA_COMP_PARAM_2
(0),

82 
DMAC_DMA_COMP_PARAM_3
(0), 
DMAC_DMA_COMP_PARAM_4
(0),

83 
DMAC_DMA_COMP_PARAM_5
(0), 
DMAC_DMA_COMP_PARAM_6
(0)},

84 {
DMAC_DMAIDREG
(1), 
DMAC_DMA_COMP_ID
(1),

85 
DMAC_DMA_COMP_PARAM_1
(1), 
DMAC_DMA_COMP_PARAM_2
(1),

86 
DMAC_DMA_COMP_PARAM_3
(1), 
DMAC_DMA_COMP_PARAM_4
(1),

87 
DMAC_DMA_COMP_PARAM_5
(1), 
DMAC_DMA_COMP_PARAM_6
(1)}};

89 
CK_UINT64
 
	gid_ªgs_vÆ
[8] = {
DMAC_DMAIDREG_VAL
, 
DMAC_DMA_COMP_ID_VAL
,

90 
DMAC_DMA_COMP_PARAM_1_VAL
,

91 
DMAC_DMA_COMP_PARAM_2_VAL
,

92 
DMAC_DMA_COMP_PARAM_3_VAL
,

93 
DMAC_DMA_COMP_PARAM_4_VAL
,

94 
DMAC_DMA_COMP_PARAM_5_VAL
,

95 
DMAC_DMA_COMP_PARAM_6_VAL
};

98 vﬁ©ûê
CK_UINT32
 
	gDMAC_INT_Fœg
[2];

101 
CK_UINT32
 
	gã°_mem_d©a
[] = {

105 
CK_UINT8
 
	gã°_ch¨_d©a
[] = {

109 
CK_UINT8
 
	gã°_ch¨_d©a1
[] = {

113 
CK_UINT8
 
	g•is_ã°_∑âí
[20] = {

119 
	sLLI
{

120 vﬁ©ûê
u32
 
	mSAR
;

121 vﬁ©ûê
u32
 
	mDAR
;

122 
LLI
 vﬁ©ûê*
	mLLP
;

123 vﬁ©ûê
u32
 
	mCTL_L
;

124 vﬁ©ûê
u32
 
	mCTL_H
;

125 vﬁ©ûê
u32
 
	mRev
[2];

128 
	#LLI_NULL
 (–
LLI_INST
 *)0x0)

	)

129 
	#LLI0_ADDR
 0x20010000

	)

130 
	#LLI1_ADDR
 0x20010100

	)

133 
CK_UINT32
 
	gahbdma_ã°ˇ£_no
 = 0;

134 
CK_UINT32
 
	g∑s£d_ˇ£
 = 0;

136 
CKSåu˘_IRQH™dÀr
 
	gúqh™dÀr0
;

137 
CKSåu˘_IRQH™dÀr
 
	gúqh™dÀr1
;

138 
CK_UINT8
 
	göãºu±_ªgi°îed
[2] = {0, 0};

142 
	$DMAC_Inô
(
CK_UINT32
 
id
) {

144 
	`wrôe_mªg32
(
	`DMAC_DMACFGREG
(
id
), 
DMAC_EN
);

146 
	`wrôe_mªg32
(
	`DMAC_DMATESTREG
(
id
), 
DMAC_NORMAL_MODE
);

149 
	`wrôe_mªg32
(
	`DMAC_REQSRCREG
(
id
), (
DMAC_ALL_MASK
 << 8));

150 
	`wrôe_mªg32
(
	`DMAC_REQDSTREG
(
id
), (
DMAC_ALL_MASK
 << 8));

151 
	`wrôe_mªg32
(
	`DMAC_SGLRQSRCREG
(
id
), (
DMAC_ALL_MASK
 << 8));

152 
	`wrôe_mªg32
(
	`DMAC_SGLRQDSTREG
(
id
), (
DMAC_ALL_MASK
 << 8));

153 
	`wrôe_mªg32
(
	`DMAC_LSTSRCREG
(
id
), (
DMAC_ALL_MASK
 << 8));

154 
	`wrôe_mªg32
(
	`DMAC_LSTDSTREG
(
id
), (
DMAC_ALL_MASK
 << 8));

157 
	`wrôe_mªg32
(
	`DMAC_CHENREG
(
id
), (
DMAC_ALL_MASK
 << 8));

159 
DMAC_INT_Fœg
[
id
] = 0;

161 i‡(
öãºu±_ªgi°îed
[
id
] == 0) {

162 i‡(
id
 == 0) {

163 
	`mem£t
(&
úqh™dÀr0
, 0, (irqhandler0));

164 
úqh™dÀr0
.
dev«me
 = "AHBDMA";

165 
úqh™dÀr0
.
úqid
 = 
	`CK_INTC_AHBDMA
(
id
);

166 
úqh™dÀr0
.
¥i‹ôy
 = 
	`CK_INTC_AHBDMA
(
id
);

167 
úqh™dÀr0
.
h™dÀr
 = 
dmac0_i§_h™dÀr
;

168 
úqh™dÀr0
.
bÁ°
 = 
FALSE
;

169 
úqh™dÀr0
.
√xt
 = 
NULL
;

171 
	`CK_INTC_Reque°Irq
(&
úqh™dÀr0
, 
AUTO_MODE
);

173 
	`mem£t
(&
úqh™dÀr1
, 0, (irqhandler1));

174 
úqh™dÀr1
.
dev«me
 = "AHBDMA";

175 
úqh™dÀr1
.
úqid
 = 
	`CK_INTC_AHBDMA
(
id
);

176 
úqh™dÀr1
.
¥i‹ôy
 = 
	`CK_INTC_AHBDMA
(
id
);

177 
úqh™dÀr1
.
h™dÀr
 = 
dmac1_i§_h™dÀr
;

178 
úqh™dÀr1
.
bÁ°
 = 
FALSE
;

179 
úqh™dÀr1
.
√xt
 = 
NULL
;

181 
	`CK_INTC_Reque°Irq
(&
úqh™dÀr1
, 
AUTO_MODE
);

183 
öãºu±_ªgi°îed
[
id
] = 1;

185 
	}
}

190 
	$DMAC_I¡îru±_í
(
CK_UINT32
 
id
, CK_UINT32 
ty≥
) {

191 
CK_UINT32
 
tmp32
 = 0;

194 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(
id
), 
DMAC_ALL_MASK
);

195 
	`wrôe_mªg32
(
	`DMAC_CLEARBLOCK
(
id
), 
DMAC_ALL_MASK
);

196 
	`wrôe_mªg32
(
	`DMAC_CLEARSRCTRAN
(
id
), 
DMAC_ALL_MASK
);

197 
	`wrôe_mªg32
(
	`DMAC_CLEARDSTTRAN
(
id
), 
DMAC_ALL_MASK
);

198 
	`wrôe_mªg32
(
	`DMAC_CLEARERR
(
id
), 
DMAC_ALL_MASK
);

200 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSINT
(
id
));

201 i‡(
tmp32
 != 0) {

202 
	`¥ötf
("\n\tDMAC Interrupt initial fail,"

204 
	`¥ötf
(" - - - FAIL.\n");

207 
	`wrôe_mªg32
(
	`DMAC_MASKTFR
(
id
), (
DMAC_ALL_MASK
 << 8));

208 
	`wrôe_mªg32
(
	`DMAC_MASKBLOCK
(
id
), (
DMAC_ALL_MASK
 << 8));

209 
	`wrôe_mªg32
(
	`DMAC_MASKSRCTRAN
(
id
), (
DMAC_ALL_MASK
 << 8));

210 
	`wrôe_mªg32
(
	`DMAC_MASKDSTTRAN
(
id
), (
DMAC_ALL_MASK
 << 8));

211 
	`wrôe_mªg32
(
	`DMAC_MASKERR
(
id
), (
DMAC_ALL_MASK
 << 8));

212 i‡((
ty≥
 & 
DMAC_INTERRUPT_BLOCK
) != 0) {

213 
	`wrôe_mªg32
(
	`DMAC_MASKBLOCK
(
id
), (
DMAC_ALL_MASK
 | (DMAC_ALL_MASK << 8)));

215 i‡((
ty≥
 & 
DMAC_INTERRUPT_TFR
) != 0) {

216 
	`wrôe_mªg32
(
	`DMAC_MASKTFR
(
id
), (
DMAC_ALL_MASK
 | (DMAC_ALL_MASK << 8)));

218 i‡((
ty≥
 & 
DMAC_INTERRUPT_ERROR
) != 0) {

219 
	`wrôe_mªg32
(
	`DMAC_MASKERR
(
id
), (
DMAC_ALL_MASK
 | (DMAC_ALL_MASK << 8)));

221 
	}
}

227 
	$DMAC_RUN_ALL
(
CK_UINT32
 
id
) {

228 
	`wrôe_mªg32
(
	`DMAC_CHENREG
(
id
), 0xffff);

229 
	}
}

236 
	$DMAC_O≥n
(
CK_UINT32
 
id
, 
DMAC_CH_INFO
 *
ch™√l
, CK_UINT32 
ch™√l_numbî
,

237 
CK_UINT16
 
BlockSize
) {

238 i‡((
ch™√l
->
˘lLx
 & 
DMAC_CTL_INT_EN
) != 0) {

239 
DMAC_INT_Fœg
[
id
] &(~(1<<
ch™√l_numbî
));

240 
	`DMAC_I¡îru±_í
(
id
, 
DMAC_INTERRUPT_BLOCK
);

242 
	`DMAC_C⁄fig
(
id
, 
ch™√l
, 
ch™√l_numbî
, 
BlockSize
);

243 
	}
}

245 
	$DMAC_C⁄fig
(
CK_UINT32
 
id
, 
DMAC_CH_INFO
 *
ch™√l
, CK_UINT32 
ch™√l_numbî
,

246 
CK_UINT16
 
BlockSize
) {

247 
CK_UINT32
 
tmp32
 = 0;

248 
CK_UINT32
 
max_blk_size
 = 0;

250 i‡(
ch™√l_numbî
 > 
CC_DMAC_NUM_CHANNELS
) {

251 
	`¥ötf
("\n\tDMAC%d ch™√»d€¢'àexi°!\n", 
id
);

252 
	`¥ötf
(" - - - FAIL.\n");

256 i‡(
ch™√l_numbî
 < 2) {

257 
max_blk_size
 = 
DMA_CH01_MAX_BLK_SIZE
;

259 
max_blk_size
 = 
DMA_CH27_MAX_BLK_SIZE
;

261 i‡(
BlockSize
 > 
max_blk_size
) {

262 
	`¥ötf
("\n\tDMA%d Block Sizêtoÿœrge!\n", 
id
);

263 
	`¥ötf
(" - - - FAIL.\n");

268 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_CHENREG
(
id
));

269 i‡((
tmp32
 & (1 << 
ch™√l_numbî
)) != 0) {

270 
	`¥ötf
("\n\tDMAC%d i†u£d!\n", 
id
);

275 
	`wrôe_mªg32
(
	`DMAC_SAR
(
id
, 
ch™√l_numbî
), 
ch™√l
->
ßrx
);

276 
	`wrôe_mªg32
(
	`DMAC_DAR
(
id
, 
ch™√l_numbî
), 
ch™√l
->
d¨x
);

277 
	`wrôe_mªg32
(
	`DMAC_CTLH
(
id
, 
ch™√l_numbî
), (
CK_UINT32
)(
BlockSize
));

278 
	`wrôe_mªg32
(
	`DMAC_CTL
(
id
, 
ch™√l_numbî
), 
ch™√l
->
˘lLx
);

279 
	`wrôe_mªg32
(
	`DMAC_CFGH
(
id
, 
ch™√l_numbî
), 
ch™√l
->
cfgHx
);

280 
	`wrôe_mªg32
(
	`DMAC_CFG
(
id
, 
ch™√l_numbî
), 
ch™√l
->
cfgLx
);

282 i‡((
ch™√l
->
˘lLx
 & 
DMAC_CTL_SRC_GATHER_EN
) != 0) {

283 
	`wrôe_mªg32
(
	`DMAC_SGR
(
id
, 
ch™√l_numbî
), 
ch™√l
->
sgrx
);

285 i‡((
ch™√l
->
˘lLx
 & 
DMAC_CTL_DST_SCATTER_EN
) != 0) {

286 
	`wrôe_mªg32
(
	`DMAC_DSR
(
id
, 
ch™√l_numbî
), 
ch™√l
->
d§x
);

288 
	`wrôe_mªg32
(
	`DMAC_LLP
(
id
, 
ch™√l_numbî
), 
ch™√l
->
Œpx
);

290 
	`DBG
("\n\tread_mreg32 (0x%x) = 0x%x\n",

291 
	`DMAC_SAR
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_SAR(id, channel_number)));

292 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

293 
	`DMAC_DAR
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_DAR(id, channel_number)));

294 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

295 
	`DMAC_CTLH
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_CTLH(id, channel_number)));

296 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

297 
	`DMAC_CTL
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_CTL(id, channel_number)));

298 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

299 
	`DMAC_CFGH
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_CFGH(id, channel_number)));

300 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

301 
	`DMAC_CFG
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_CFG(id, channel_number)));

302 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

303 
	`DMAC_SGR
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_SGR(id, channel_number)));

304 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

305 
	`DMAC_DSR
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_DSR(id, channel_number)));

306 
	`DBG
("\tread_mreg32 (0x%x) = 0x%x\n",

307 
	`DMAC_LLP
(
id
, 
ch™√l_numbî
), 
	`ªad_mªg32
(DMAC_LLP(id, channel_number)));

308 
	}
}

310 
	$DMAC_Sèπ
(
CK_UINT32
 
id
, CK_UINT32 
ch™√l_numbî
) {

311 
	`wrôe_mªg32
(
	`DMAC_CHENREG
(
id
), 
	`DMAC_CH_EN
(
ch™√l_numbî
));

312 
	}
}

314 
	$DMAC_Sèπ_Ch_bôs
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l_bôs
) {

315 
	`wrôe_mªg32
(
	`DMAC_CHENREG
(
id
), 
ch™√l_bôs
 | (channel_bits << 8));

316 
	}
}

318 
	$DMAC_Së_FIFO_MODE
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l_numbî
) {

319 
CK_UINT8
 
ªg
 = 0;

320 
ªg
 = 
	`ªad_mªg32
(
	`DMAC_CFGH
(
id
, 
ch™√l_numbî
));

321 
	`wrôe_mªg32
(
	`DMAC_CFGH
(
id
, 
ch™√l_numbî
), 
ªg
 | 
DMAC_CFG_FIFO_MODE_1
);

322 
	}
}

327 
CK_UINT32
 
	$DMAC_CheckD⁄e
(
CK_UINT32
 
id
, CK_UINT32 
ch™√l_numbî
, 
CK_UINT8
 
dma_öå
) {

328 
CK_UINT32
 
tmp32
 = 0;

330 i‡(
dma_öå
 == 1) {

331 
tmp32
 = (
DMAC_INT_Fœg
[
id
] & (1 << 
ch™√l_numbî
));

332 if(
tmp32
 != 0) {

333 
DMAC_INT_Fœg
[
id
] &~(1 << 
ch™√l_numbî
);

339 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_RAWTFR
(
id
));

340 
tmp32
 &(1 << 
ch™√l_numbî
);

341 i‡(
tmp32
 != 0) {

342 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(
id
), 
tmp32
);

343 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSBLOCK
(
id
));

344 i‡((
tmp32
 & (1 << 
ch™√l_numbî
)) != 0) {

345 
	`¥ötf
("\n\tStatusBlock shouldÇot be set for channel %d,"

347 
ch™√l_numbî
);

348 
	`¥ötf
(" - - - FAIL.\n");

349 
	`exô
(0);

356 
	}
}

361 
CK_UINT32
 
	$DMAC_CheckD⁄e_Any
(
CK_UINT32
 
id
) {

362 
CK_UINT32
 
tmp32
 = 0;

363 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_RAWTFR
(
id
));

364 i‡(
tmp32
 != 0) {

369 
	}
}

374 
	$DMAC_Clo£
(
CK_UINT32
 
id
, CK_UINT32 
ch™√l_numbî
) {

376 
	`wrôe_mªg32
(
	`DMAC_REQSRCREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

377 
	`wrôe_mªg32
(
	`DMAC_REQDSTREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

378 
	`wrôe_mªg32
(
	`DMAC_SGLRQSRCREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

379 
	`wrôe_mªg32
(
	`DMAC_SGLRQDSTREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

380 
	`wrôe_mªg32
(
	`DMAC_LSTSRCREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

381 
	`wrôe_mªg32
(
	`DMAC_LSTDSTREG
(
id
), 
	`DMAC_SW_REQ_DIS
(
ch™√l_numbî
));

383 
	`wrôe_mªg32
(
	`DMAC_CHENREG
(
id
), 
	`DMAC_CH_DIS
(
ch™√l_numbî
));

385 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(
id
), 
	`DMAC_INT_CLR
(
ch™√l_numbî
));

386 
	`wrôe_mªg32
(
	`DMAC_CLEARBLOCK
(
id
), 
	`DMAC_INT_CLR
(
ch™√l_numbî
));

387 
	`wrôe_mªg32
(
	`DMAC_CLEARSRCTRAN
(
id
), 
	`DMAC_INT_CLR
(
ch™√l_numbî
));

388 
	`wrôe_mªg32
(
	`DMAC_CLEARDSTTRAN
(
id
), 
	`DMAC_INT_CLR
(
ch™√l_numbî
));

389 
	`wrôe_mªg32
(
	`DMAC_CLEARERR
(
id
), 
	`DMAC_INT_CLR
(
ch™√l_numbî
));

391 
	`wrôe_mªg32
(
	`DMAC_MASKTFR
(
id
), 
	`DMAC_INT_MASK
(
ch™√l_numbî
));

392 
	`wrôe_mªg32
(
	`DMAC_MASKBLOCK
(
id
), 
	`DMAC_INT_MASK
(
ch™√l_numbî
));

393 
	`wrôe_mªg32
(
	`DMAC_MASKSRCTRAN
(
id
), 
	`DMAC_INT_MASK
(
ch™√l_numbî
));

394 
	`wrôe_mªg32
(
	`DMAC_MASKDSTTRAN
(
id
), 
	`DMAC_INT_MASK
(
ch™√l_numbî
));

395 
	`wrôe_mªg32
(
	`DMAC_MASKERR
(
id
), 
	`DMAC_INT_MASK
(
ch™√l_numbî
));

397 
DMAC_INT_Fœg
[
id
] &~(1 << 
ch™√l_numbî
);

398 
	}
}

403 
	$dmac0_i§_h™dÀr
(
CK_UINT32
 
úq
) {

404 
CK_UINT32
 
tmp32
 = 0;

406 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSTFR
(0));

407 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(0), 
tmp32
);

408 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSBLOCK
(0));

409 
DMAC_INT_Fœg
[0] |(
tmp32
 & 
DMAC_ALL_MASK
);

411 
	`DBG
("\n\t<<<<<< DMA0_IRQHandler >>>>>> DMAC_INT_Flag = 0x%x\n",

412 
DMAC_INT_Fœg
[0]);

413 
	`wrôe_mªg32
(
	`DMAC_CLEARBLOCK
(0), 
tmp32
);

416 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSERR
(0));

419 
	`wrôe_mªg32
(
	`DMAC_CLEARERR
(0), 
tmp32
);

420 i‡(
tmp32
 != 0) {

421 
	`¥ötf
("\n\tDMAC0Érror occur\n");

422 
	`¥ötf
(" - - - FAIL.\n");

424 
	`DBG
("\n\tDMA0 interrupt!\n");

425 
	}
}

427 
	$dmac1_i§_h™dÀr
(
CK_UINT32
 
úq
) {

428 
CK_UINT32
 
tmp32
 = 0;

430 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSTFR
(1));

431 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(1), 
tmp32
);

432 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSBLOCK
(1));

433 
DMAC_INT_Fœg
[1] |(
tmp32
 & 
DMAC_ALL_MASK
);

435 
	`DBG
("\n\t<<<<<< DMA1_IRQHandler >>>>>> DMAC_INT_Flag = 0x%x\n",

436 
DMAC_INT_Fœg
[1]);

437 
	`wrôe_mªg32
(
	`DMAC_CLEARBLOCK
(1), 
tmp32
);

440 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_STATUSERR
(1));

443 
	`wrôe_mªg32
(
	`DMAC_CLEARERR
(1), 
tmp32
);

444 i‡(
tmp32
 != 0) {

445 
	`¥ötf
("\n\tDMAC1Érror occur\n");

446 
	`¥ötf
(" - - - FAIL.\n");

448 
	`DBG
("\n\tDMA1 interrupt!\n");

449 
	}
}

451 
	$DMAMem2MemO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
, CK_UINT32 
§c_addr
, CK_UINT32 
d°_addr
,

452 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
dma_öå
, CK_UINT8 
UNIT
,

453 
CK_UINT8
 
¥io
, 
CK_UINT32
 
Œpx
, CK_UINT8 
Œp_§c_upd
,

454 
CK_UINT8
 
Œp_d°_upd
) {

455 
DMAC_CH_INFO
 
ch™√l_öfo
;

456 
	`mem£t
(&
ch™√l_öfo
, 0, (channel_info));

458 
ch™√l_öfo
.
ßrx
 = 
§c_addr
;

459 
ch™√l_öfo
.
d¨x
 = 
d°_addr
;

460 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

461 
ch™√l_öfo
.
Œpx
 =Ülpx;

463 
UNIT
) {

464 
Align8
:

465 
ch™√l_öfo
.
˘lLx
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

466 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

467 
DMAC_CTL_DINC_INC
 | 
DMAC_CTL_SRC_TR_WIDTH8
 |

468 
DMAC_CTL_DST_TR_WIDTH8
 | 
dma_öå
 |

469 
Œp_§c_upd
 << 28 | 
Œp_d°_upd
 << 27);

471 
Align16
:

472 
ch™√l_öfo
.
˘lLx
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

473 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

474 
DMAC_CTL_DINC_INC
 |

475 
DMAC_CTL_SRC_TR_WIDTH16
 |

476 
DMAC_CTL_DST_TR_WIDTH16
 | 
dma_öå
 |

477 
Œp_§c_upd
 << 28 | 
Œp_d°_upd
 << 27);

479 
Align32
:

480 
ch™√l_öfo
.
˘lLx
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

481 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

482 
DMAC_CTL_DINC_INC
 |

483 
DMAC_CTL_SRC_TR_WIDTH32
 |

484 
DMAC_CTL_DST_TR_WIDTH32
 | 
dma_öå
 |

485 
Œp_§c_upd
 << 28 | 
Œp_d°_upd
 << 27);

487 
Align64
:

488 
ch™√l_öfo
.
˘lLx
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

489 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

490 
DMAC_CTL_DINC_INC
 |

491 
DMAC_CTL_SRC_TR_WIDTH64
 |

492 
DMAC_CTL_DST_TR_WIDTH64
 | 
dma_öå
 |

493 
Œp_§c_upd
 << 28 | 
Œp_d°_upd
 << 27);

496 
ch™√l_öfo
.
cfgLx
 = (
DMAC_CFG_HS_SRC_SOFTWARE
 | 
DMAC_CFG_HS_DST_SOFTWARE
 |

497 
DMAC_CFG_SRC_HS_POL_H
 | 
DMAC_CFG_DST_HS_POL_H
 |

498 
	`DMAC_CFG_CH_PRIOR
(
¥io
));

503 
	`DMAC_O≥n
(
id
, &
ch™√l_öfo
, 
ch™√l
, 
cou¡
);

504 
	}
}

512 
	$DMAMem2PîùhîÆO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
, CK_UINT32 
§c_addr
,

513 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
≥rùhîÆ_ID
,

514 
CK_UINT8
 
dma_öå
,
CK_UINT32
 
P‹tNum
,

515 
CK_UINT16
 
§c_gth_˙t
, 
CK_UINT32
 
§c_gth_ötvl
,

516 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

517 
DMAC_CH_INFO
 
ch™√l_öfo
;

518 
CK_UINT8
 
p_id
 = 0;

519 
	`mem£t
(&
ch™√l_öfo
, 0, (channel_info));

521 i‡(
id
 == 1) {

522 
≥rùhîÆ_ID
) {

523 
	`≥rùhîÆ_u¨t_tx
(0):

524 
	`≥rùhîÆ_u¨t_tx
(1):

525 
	`≥rùhîÆ_u¨t_tx
(2):

526 
	`≥rùhîÆ_u¨t_tx
(3):

527 
	`≥rùhîÆ_u¨t_tx
(4):

528 
p_id
 = 
	`≥rùhîÆ_u¨t_tx_2_id
(
≥rùhîÆ_ID
);

529 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
§c_addr
;

530 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
	`UART_THR
(
p_id
);

531 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

532 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_M2P_DW
 | 
DMAC_CTL_SRC_MSIZE1
 |

533 
d°_msize
 | 
DMAC_CTL_SINC_INC
 |

534 
DMAC_CTL_DINC_NO
 | 
DMAC_CTL_SRC_TR_WIDTH32
 |

535 
d°_å_width
 | 
dma_öå
;

537 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

538 
DMAC_CFG_HS_SRC_SOFTWARE
 |

539 
DMAC_CFG_HS_DST_HARDWARE
 |

540 
DMAC_CFG_DST_HS_POL_H
;

541 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_DEST_PER
(
≥rùhîÆ_ID
);

543 
	`≥rùhîÆ_•i_tx
(2):

544 
	`≥rùhîÆ_•i_tx
(3):

545 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
§c_addr
;

546 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_TXREG
);

547 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

548 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_M2P_DW
 | 
DMAC_CTL_SRC_MSIZE1
 |

549 
d°_msize
 | 
DMAC_CTL_SINC_INC
 |

550 
DMAC_CTL_DINC_NO
 | 
DMAC_CTL_SRC_TR_WIDTH32
 |

551 
d°_å_width
 | 
dma_öå
;

552 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

553 
DMAC_CFG_HS_SRC_SOFTWARE
 |

554 
DMAC_CFG_HS_DST_HARDWARE
 |

555 
DMAC_CFG_DST_HS_POL_H
;

556 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_DEST_PER
(
≥rùhîÆ_ID
);

560 i‡(
id
 == 0) {

561 
≥rùhîÆ_ID
) {

563 
≥rùhîÆ_•i_¶ave_tx
:

564 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
§c_addr
;

565 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_SLAVE_TXREG
);

566 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

567 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_M2P_DW
 | 
DMAC_CTL_SRC_MSIZE1
 |

568 
d°_msize
 | 
DMAC_CTL_SINC_INC
 |

569 
DMAC_CTL_DINC_NO
 | 
DMAC_CTL_SRC_TR_WIDTH32
 |

570 
d°_å_width
 | 
dma_öå
;

571 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

572 
DMAC_CFG_HS_SRC_SOFTWARE
 |

573 
DMAC_CFG_HS_DST_HARDWARE
 |

574 
DMAC_CFG_DST_HS_POL_H
;

575 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_DEST_PER
(
≥rùhîÆ_•i_¶ave_tx
);

578 
	`≥rùhîÆ_i2c_tx
(1):

579 
	`≥rùhîÆ_i2c_tx
(2):

580 
	`≥rùhîÆ_i2c_tx
(3):

581 
	`≥rùhîÆ_i2c_tx
(4):

582 
p_id
 = 
	`≥rùhîÆ_i2c_tx_2_id
(
≥rùhîÆ_ID
);

583 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
§c_addr
;

584 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
	`I2C_IC_DATA_CMD
(
p_id
);

585 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

586 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_M2P_DW
 | 
DMAC_CTL_SRC_MSIZE1
 |

587 
d°_msize
 | 
DMAC_CTL_SINC_INC
 |

588 
DMAC_CTL_DINC_NO
 | 
DMAC_CTL_SRC_TR_WIDTH32
 |

589 
d°_å_width
 | 
dma_öå
;

591 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

592 
DMAC_CFG_HS_SRC_SOFTWARE
 |

593 
DMAC_CFG_HS_DST_HARDWARE
 |

594 
DMAC_CFG_DST_HS_POL_H
;

595 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_DEST_PER
(
≥rùhîÆ_ID
);

599 i‡((
§c_gth_˙t
 !0Ë&& (
§c_gth_ötvl
 != 0)) {

601 
ch™√l_öfo
.
sgrx
 = 
	`DMAC_SG_SET
(
§c_gth_˙t
, 
§c_gth_ötvl
);

602 
ch™√l_öfo
.
˘lLx
 |
DMAC_CTL_SRC_GATHER_EN
;

604 
ch™√l_öfo
.
sgrx
 = 0x0;

606 
ch™√l_öfo
.
d§x
 = 0x0;

607 
ch™√l_öfo
.
Œpx
 = 0x0;

608 
	`DMAC_O≥n
(
id
, &
ch™√l_öfo
, 
ch™√l
, 
cou¡
);

609 
	}
}

617 
	$DMAPîùhîÆ2MemO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
,CK_UINT32 
d°_addr
,CK_UINT32 
cou¡
,

618 
CK_UINT8
 
≥rùhîÆ_ID
,CK_UINT8 
dma_öå
,

619 
CK_UINT32
 
P‹tNum
, 
CK_UINT16
 
d°_s˘_˙t
,

620 
CK_UINT32
 
d°_s˘_ötvl
) {

621 
DMAC_CH_INFO
 
ch™√l_öfo
;

622 
CK_UINT8
 
p_id
 = 0;

623 
	`mem£t
(&
ch™√l_öfo
, 0, (channel_info));

625 i‡(
id
 == 1) {

626 
≥rùhîÆ_ID
) {

627 
	`≥rùhîÆ_u¨t_rx
(0):

628 
	`≥rùhîÆ_u¨t_rx
(1):

629 
	`≥rùhîÆ_u¨t_rx
(2):

630 
	`≥rùhîÆ_u¨t_rx
(3):

631 
	`≥rùhîÆ_u¨t_rx
(4):

632 
p_id
 = 
	`≥rùhîÆ_u¨t_rx_2_id
(
≥rùhîÆ_ID
);

633 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
	`UART_RBR
(
p_id
);

634 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
d°_addr
;

635 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

636 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_P2M_DW
 | 
DMAC_CTL_SRC_MSIZE16
 |

637 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_NO
 |

638 
DMAC_CTL_DINC_INC
 | 
DMAC_CTL_SRC_TR_WIDTH8
 |

639 
DMAC_CTL_DST_TR_WIDTH8
 | 
dma_öå
;

642 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

643 
DMAC_CFG_HS_SRC_HARDWARE
 |

644 
DMAC_CFG_HS_DST_SOFTWARE
 |

645 
DMAC_CFG_SRC_HS_POL_H
;

646 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_SRC_PER
(
≥rùhîÆ_ID
);

648 
	`≥rùhîÆ_•i_rx
(2):

649 
	`≥rùhîÆ_•i_rx
(3):

650 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_RXREG
);

651 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
d°_addr
;

652 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

653 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_P2M_DW
 | 
DMAC_CTL_SRC_MSIZE16
 |

654 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_NO
 |

655 
DMAC_CTL_DINC_INC
 | 
DMAC_CTL_SRC_TR_WIDTH8
 |

656 
DMAC_CTL_DST_TR_WIDTH8
 | 
dma_öå
;

657 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

658 
DMAC_CFG_HS_SRC_HARDWARE
 |

659 
DMAC_CFG_HS_DST_SOFTWARE
 |

660 
DMAC_CFG_SRC_HS_POL_H
;

661 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_SRC_PER
(
≥rùhîÆ_ID
);

666 
≥rùhîÆ_•i_¶ave_rx
 :

667 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_SLAVE_RXREG
);

668 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
d°_addr
;

669 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

670 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_P2M_DW
 | 
DMAC_CTL_SRC_MSIZE16
 |

671 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_NO
 |

672 
DMAC_CTL_DINC_INC
 | 
DMAC_CTL_SRC_TR_WIDTH8
 |

673 
DMAC_CTL_DST_TR_WIDTH8
 | 
dma_öå
;

674 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

675 
DMAC_CFG_HS_SRC_HARDWARE
 |

676 
DMAC_CFG_HS_DST_SOFTWARE
 |

677 
DMAC_CFG_SRC_HS_POL_H
;

678 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_SRC_PER
(
≥rùhîÆ_•i_¶ave_rx
);

681 i‡(
id
 == 0) {

682 
≥rùhîÆ_ID
) {

683 
	`≥rùhîÆ_i2c_rx
(1):

684 
	`≥rùhîÆ_i2c_rx
(2):

685 
	`≥rùhîÆ_i2c_rx
(3):

686 
	`≥rùhîÆ_i2c_rx
(4):

687 
p_id
 = 
	`≥rùhîÆ_i2c_tx_2_id
(
≥rùhîÆ_ID
);

688 
ch™√l_öfo
.
ßrx
 = (
CK_UINT32
)
	`I2C_IC_DATA_CMD
(
p_id
);

689 
ch™√l_öfo
.
d¨x
 = (
CK_UINT32
)
d°_addr
;

690 
ch™√l_öfo
.
˘lHx
 = 
cou¡
;

691 
ch™√l_öfo
.
˘lLx
 = 
DMAC_CTL_P2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

692 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_NO
 |

693 
DMAC_CTL_DINC_INC
 | 
DMAC_CTL_SRC_TR_WIDTH8
 |

694 
DMAC_CTL_DST_TR_WIDTH8
 | 
dma_öå
;

697 
ch™√l_öfo
.
cfgLx
 = 
	`DMAC_CFG_CH_PRIOR
(0) |

698 
DMAC_CFG_HS_SRC_HARDWARE
 |

699 
DMAC_CFG_HS_DST_SOFTWARE
 |

700 
DMAC_CFG_SRC_HS_POL_H
;

701 
ch™√l_öfo
.
cfgHx
 = 
	`DMAC_CFG_SRC_PER
(
≥rùhîÆ_ID
);

706 i‡((
d°_s˘_˙t
 !0Ë&& (
d°_s˘_ötvl
 != 0)) {

707 
ch™√l_öfo
.
d§x
 = 
	`DMAC_SG_SET
(
d°_s˘_˙t
, 
d°_s˘_ötvl
);

708 
ch™√l_öfo
.
˘lLx
 |
DMAC_CTL_DST_SCATTER_EN
;

710 
ch™√l_öfo
.
d§x
 = 0x0;

712 
ch™√l_öfo
.
sgrx
 = 0x0;

713 
ch™√l_öfo
.
Œpx
 = 0x0;

714 
	`DMAC_O≥n
(
id
, &
ch™√l_öfo
, 
ch™√l
, 
cou¡
);

715 
	}
}

717 
	$CK_AHBDMA_UART_Lo›back_Te°
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
,

718 
BOOL
 
g©hî
, BOOL 
sˇâî
, 
CK_UINT8
 
dma_öå
,

719 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

720 
CK_UINT32
 
i
 = 0;

721 
CK_UINT8
 
d©a
 = 0;

722 
CK_UINT32
 
timeout
 = 0;

723 
CK_UINT32
 
›í_Àn
 = 0;

725 
CK_UINT16
 
§c_gth_˙t
 = 0;

726 
CK_UINT32
 
§c_gth_ötvl
 = 0;

727 
CK_UINT32
 
§c_ötvl_˙t
 = 0;

728 
CK_UINT32
 
§c_mem_Àn
 = 0;

729 
CK_UINT32
 
§c_å_width
 = 4;

731 
CK_UINT16
 
d°_s˘_˙t
 = 0;

732 
CK_UINT32
 
d°_s˘_ötvl
 = 0;

733 
CK_UINT32
 
d°_mem_Àn
 = 0;

734 
CK_UINT32
 
d°_ötvl_˙t
 = 0;

736 i‡(
sˇâî
 =
TRUE
) {

737 
d°_s˘_˙t
 = 12;

738 
d°_s˘_ötvl
 = 10;

739 
d°_ötvl_˙t
 = (
MEM2UART0_TEST_L
 - 1Ë/ 
d°_s˘_˙t
;

742 
d°_mem_Àn
 = 
MEM2UART0_TEST_L
 + 
d°_s˘_ötvl
 * 
d°_ötvl_˙t
;

744 i‡(
g©hî
 =
TRUE
) {

745 
§c_gth_˙t
 = 12;

746 
§c_gth_ötvl
 = 2;

747 
§c_ötvl_˙t
 = (
MEM2UART0_TEST_L
 - 1Ë/ (
§c_gth_˙t
 * 
§c_å_width
);

750 
	`¥ötf
("\n%d. MemoryÅo UART%d Transfer%s with"

753 
ahbdma_ã°ˇ£_no
++, 
id
,

754 
g©hî
 ? " in Gather" : "",

755 
	`DST_TR_WIDTH
(
d°_å_width
),

756 
	`DST_MSIZE
(
d°_msize
), 
id
,

757 
sˇâî
 ? " in Scatter" : "");

761 i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH32
) {

762 
§c_mem_Àn
 = 
MEM2UART0_TEST_L
 * 4 +

763 
§c_gth_ötvl
 * 
§c_ötvl_˙t
 * 
§c_å_width
;

764 
	`mem£t
((*)
MEM_TEST_SRC
, 0, 
§c_mem_Àn
);

765 
i
 = 0; i < 
MEM2UART0_TEST_L
; i++) {

766 
CK_UINT32
 
tmp_ötvl
 = 0;

767 i‡(
§c_gth_˙t
 != 0) {

768 
tmp_ötvl
 = ((
i
 * 4Ë/ (
§c_gth_˙t
 * 
§c_å_width
)

769 * (
§c_gth_ötvl
 * 
§c_å_width
));

771 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
 * 4 + 
tmp_ötvl
,

772 
ã°_ch¨_d©a
[
i
 % 12]);

774 
›í_Àn
 = 
MEM2UART0_TEST_L
;

775 } i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH8
) {

776 
§c_mem_Àn
 = 
MEM2UART0_TEST_L
 +

777 
§c_gth_ötvl
 * 
§c_ötvl_˙t
 * 
§c_å_width
;

778 
	`mem£t
((*)
MEM_TEST_SRC
, 0, 
§c_mem_Àn
);

779 
i
 = 0; i < 
MEM2UART0_TEST_L
; i++) {

780 
CK_UINT32
 
tmp_ötvl
 = 0;

781 i‡(
§c_gth_˙t
 != 0) {

782 
tmp_ötvl
 = (
i
 / (
§c_gth_˙t
 * 
§c_å_width
))

783 * (
§c_gth_ötvl
 * 
§c_å_width
);

785 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
 + 
tmp_ötvl
, 
ã°_ch¨_d©a
[i % 12]);

787 
›í_Àn
 = 
MEM2UART0_TEST_L
 / 4;

789 
	`¥ötf
("\n\tDMAC_CTL_DST_TR_WIDTH %dÇot supported inÅest forÇow\n",

790 
	`DST_TR_WIDTH
(
d°_å_width
));

791 
	`¥ötf
(" - - - FAIL.\n");

796 
	`mem£t
((*)
MEM_TEST_DEST
, 0, 
d°_mem_Àn
);

799 
	`DMAC_Inô
(
dma_id
);

800 
	`DMAMem2PîùhîÆO≥n
(
dma_id
, 
DMA_CHANNEL_1
, 
MEM_TEST_SRC
,

801 
›í_Àn
, 
	`≥rùhîÆ_u¨t_tx
(
id
),

802 
dma_öå
, 0, 
§c_gth_˙t
, 
§c_gth_ötvl
,

803 
d°_å_width
, 
d°_msize
);

805 
	`¥ötf
("\n\tstartÅransfer\n\n");

807 
	`dñay
(50);

808 
	`CK_U¨t_O≥n
(
id
, 
NULL
);

810 
	`CK_U¨t_Së_Lo›back_Mode
(
id
);

811 
	`CK_U¨t_Së_FIFO_Ac˚ss_Mode
(
id
);

814 
	`DMAPîùhîÆ2MemO≥n
(
dma_id
, 
DMA_CHANNEL_2
, 
MEM_TEST_DEST
, 
MEM2UART0_TEST_L
,

815 
	`≥rùhîÆ_u¨t_rx
(
id
), 
dma_öå
, 0,

816 
d°_s˘_˙t
, 
d°_s˘_ötvl
);

818 
	`DMAC_Sèπ_Ch_bôs
(
dma_id
, (1 << 
DMA_CHANNEL_1
Ë| (1 << 
DMA_CHANNEL_2
));

821 i‡(
	`DMAC_CheckD⁄e
(
dma_id
, 
DMA_CHANNEL_1
, 
dma_öå
) == 1) {

824 i‡(
timeout
++ > 0x5000) {

825 
	`DMAC_Clo£
(
dma_id
, 
DMA_CHANNEL_1
);

826 
	`CK_U¨t_Un£t_Lo›back_Mode
(
id
);

827 
	`¥ötf
("\n\twaôög f‹ CH%d D⁄êtimeout!\n", 
DMA_CHANNEL_1
);

828 
	`¥ötf
(" - - - FAIL.\n");

833 
timeout
 = 0;

835 i‡(
	`DMAC_CheckD⁄e
(
dma_id
, 
DMA_CHANNEL_2
, 
dma_öå
) == 1) {

838 i‡(
timeout
++ > 0x5000) {

839 
	`DMAC_Clo£
(
dma_id
, 
DMA_CHANNEL_2
);

840 
	`CK_U¨t_Un£t_Lo›back_Mode
(
id
);

841 
	`¥ötf
("\n\twaôög f‹ CH%d D⁄êtimeout!\n", 
DMA_CHANNEL_2
);

842 
	`¥ötf
(" - - - FAIL.\n");

847 
	`DMAC_Clo£
(
dma_id
, 
DMA_CHANNEL_1
);

848 
	`DMAC_Clo£
(
dma_id
, 
DMA_CHANNEL_2
);

850 
	`CK_U¨t_Un£t_Lo›back_Mode
(
id
);

852 
i
 = 0; i < 
MEM2UART0_TEST_L
; i++) {

853 
CK_UINT8
 
tmp_ötvl
 = 0;

854 i‡(
d°_s˘_˙t
 != 0) {

855 
tmp_ötvl
 = 
d°_s˘_ötvl
 * (
i
 / 
d°_s˘_˙t
);

857 
d©a
 = 
	`ªad_mªg8
(
MEM_TEST_DEST
 + 
i
 + 
tmp_ötvl
);

858 i‡(
d©a
 !
ã°_ch¨_d©a
[
i
 % 12]) {

859 
	`¥ötf
("\n\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

860 
MEM_TEST_DEST
 + 
i
,

861 
d©a
, 
ã°_ch¨_d©a
[
i
 % 12]);

862 
	`¥ötf
(" - - - FAIL.\n");

866 
∑s£d_ˇ£
++;

867 
	`¥ötf
(" - - - PASS.\n");

868 
	}
}

870 
	$CK_AHBDMA_UART_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
) {

871 
CK_UINT8
 
i
 = 0;

872 
CK_UINT8
 
g©hî
 = 0;

873 
CK_UINT8
 
sˇâî
 = 0;

874 
i
 = 0; i < 5; i++) {

875 
g©hî
 = 0; gather < 2; gather++) {

876 
sˇâî
 = 0; scatter < 2; scatter++) {

877 
	`CK_AHBDMA_UART_Lo›back_Te°
(
id
, 
i
, 
g©hî
, 
sˇâî
, 
dma_öå
,

878 
DMAC_CTL_DST_TR_WIDTH8
, 
DMAC_CTL_DEST_MSIZE4
);

879 
	`CK_AHBDMA_UART_Lo›back_Te°
(
id
, 
i
, 
g©hî
, 
sˇâî
, 
dma_öå
,

880 
DMAC_CTL_DST_TR_WIDTH32
, 
DMAC_CTL_DEST_MSIZE1
);

884 
	}
}

886 
	$CK_AHBDMA_SPI_M_Te°
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
, 
CK_UINT8
 
dma_öå
,

887 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

888 
CK_UINT32
 
i
 = 0;

889 
CK_UINT8
 
d©a
 = 0;

890 
CK_UINT32
 
Êash_addr
 = 0x6400000;

891 
CK_UINT32
 
ªsu…
 = 0;

892 
CK_UINT8
 
°©us
 = 0;

893 
CK_UINT32
 
•i_öt
 = 
•i_«nd_öt_mode
;

894 
CK_UINT32
 
›í_Àn
 = 0;

895 
	`¥ötf
("\n%d. Memory <-> SPI Mater Transfer with\n"

897 
ahbdma_ã°ˇ£_no
++,

898 
	`DST_TR_WIDTH
(
d°_å_width
),

899 
	`DST_MSIZE
(
d°_msize
));

902 i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH32
) {

903 
	`mem£t
((*)
MEM_TEST_SRC
, 0, 
MEM2SPI_TEST_L
 * 4);

904 
i
 = 0; i < 
MEM2SPI_TEST_L
; i++) {

905 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
 * 4, 
ã°_ch¨_d©a
[i % 12]);

907 
›í_Àn
 = 
MEM2SPI_TEST_L
;

908 } i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH8
) {

909 
i
 = 0; i < 
MEM2SPI_TEST_L
; i++) {

910 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
, 
ã°_ch¨_d©a
[i % 12]);

912 
›í_Àn
 = 
MEM2SPI_TEST_L
 / 4;

914 
	`¥ötf
("\n\tDMAC_CTL_DST_TR_WIDTH %dÇot supported inÅest forÇow\n",

915 
	`DST_TR_WIDTH
(
d°_å_width
));

916 
	`¥ötf
(" - - - FAIL.\n");

921 
	`mem£t
((*)
MEM_TEST_DEST
, 0, 
MEM2SPI_TEST_L
);

922 
•i_«nd_öt_mode
 = 0;

923 
	`Inôül_Spi
();

924 
	`CMD_RESET_OP
();

926 
	`CMD_GET_FEATURE
(0xa0, &
°©us
);

927 i‡(
°©us
 & 0x38) {

928 
	`CMD_SET_FEATURE
(0xa0, (
°©us
 & 0xc7));

931 
ªsu…
 = 
	`CMD_BE
(
Êash_addr
);

932 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

933 
	`¥ötf
("\n\terase failed\n");

934 
	`¥ötf
(" - - - FAIL.\n");

935 
•i_«nd_öt_mode
 = 
•i_öt
;

939 
	`DMA_Wrôe_NAND
(
dma_id
, 
id
, 
Êash_addr
, (
CK_UINT8
 *)
MEM_TEST_SRC
,

940 
›í_Àn
, 
DMA_CHANNEL_4
, 
dma_öå
,

941 
d°_å_width
, 
d°_msize
);

943 
	`DMA_Ród_NAND
(
dma_id
, 
id
, 
Êash_addr
, (
CK_UINT8
 *)
MEM_TEST_DEST
,

944 
MEM2SPI_TEST_L
, 
DMA_CHANNEL_4
, 
dma_öå
);

946 
i
 = 0; i < 
MEM2SPI_TEST_L
; i++) {

947 
d©a
 = 
	`ªad_mªg8
(
MEM_TEST_DEST
 + 
i
);

948 i‡(
d©a
 !
ã°_ch¨_d©a
[
i
 % 12]) {

949 
	`¥ötf
("\n\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

950 
MEM_TEST_DEST
 + 
i
, 
d©a
, 
ã°_ch¨_d©a
[i % 12]);

951 
	`¥ötf
(" - - - FAIL.\n");

952 
•i_«nd_öt_mode
 = 
•i_öt
;

956 
∑s£d_ˇ£
++;

957 
	`¥ötf
(" - - - PASS.\n");

958 
•i_«nd_öt_mode
 = 
•i_öt
;

959 
	}
}

961 
	$CK_AHBDMA_SPI_M_W_Subsys_Pª
(
CK_UINT8
 
ch™√l
) {

962 
CK_UINT32
 
i
 = 0;

963 
CK_UINT32
 
Êash_addr
 = 0x6400000;

964 
CK_UINT32
 
ªsu…
 = 0;

965 
CK_UINT32
 
°©us
 = 0;

966 
CK_UINT32
 
•i_öt
 = 
•i_«nd_öt_mode
;

969 
i
 = 0; i < 
AHB_DMA_SUB_TEST_L
; i++) {

970 
	`wrôe_mªg8
(
AHB_DMA_SUB_SRC_SPI
 + 
i
, 
ã°_ch¨_d©a
[i % 12]);

973 
•i_«nd_öt_mode
 = 0;

974 
	`Inôül_Spi
();

975 
	`CMD_RESET_OP
();

977 
	`CMD_GET_FEATURE
(0xa0, &
°©us
);

978 i‡(
°©us
 & 0x38) {

979 
	`CMD_SET_FEATURE
(0xa0, (
°©us
 & 0xc7));

982 
ªsu…
 = 
	`CMD_BE
(
Êash_addr
);

983 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

984 
	`¥ötf
("\n\terase failed\n");

985 
	`¥ötf
(" - - - FAIL.\n");

986 
•i_«nd_öt_mode
 = 
•i_öt
;

990 
ªsu…
 = 
	`DMA_Wrôe_NAND_¥e
(
Êash_addr
, 
AHB_DMA_SUB_SRC_SPI
,

991 
AHB_DMA_SUB_TEST_L
 / 4, 
ch™√l
, 0,

992 
DMAC_CTL_DST_TR_WIDTH8
, 
DMAC_CTL_DEST_MSIZE4
);

994 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

995 
	`¥ötf
("\n\tDMA writeÅo SPI failed. . .\n");

996 
	`¥ötf
(" - - - FAIL.\n");

997 
•i_«nd_öt_mode
 = 
•i_öt
;

1000 
•i_«nd_öt_mode
 = 
•i_öt
;

1001 
	}
}

1003 
	$CK_AHBDMA_SPI_M_W_Subsys_Po°
(
CK_UINT8
 
ch™√l
) {

1004 
CK_UINT32
 
ªt
 = 0;

1005 
CK_UINT32
 
Êash_addr
 = 0x6400000;

1006 
CK_UINT32
 
•i_öt
 = 
•i_«nd_öt_mode
;

1007 
•i_«nd_öt_mode
 = 0;

1008 
ªt
 = 
	`DMA_Wrôe_NAND_po°
(
Êash_addr
, 
ch™√l
, 0);

1009 i‡(
ªt
 !
Fœsh_Suc˚ss
) {

1010 
	`¥ötf
("\n\tDMA writeÅo SPI failed. . .\n");

1011 
	`¥ötf
(" - - - FAIL.\n");

1013 
•i_«nd_öt_mode
 = 
•i_öt
;

1014 
	}
}

1016 
	$CK_AHBDMA_SPI_M_R_Subsys_Pª
(
CK_UINT8
 
ch™√l
) {

1017 
CK_UINT32
 
i
 = 0;

1018 
CK_UINT32
 
Êash_addr
 = 0x6400000;

1019 
CK_UINT32
 
•i_öt
 = 
•i_«nd_öt_mode
;

1022 
	`mem£t
(
AHB_DMA_SUB_DST_SPI
, 0, 
AHB_DMA_SUB_TEST_L
);

1023 
•i_«nd_öt_mode
 = 0;

1024 
	`Inôül_Spi
();

1025 
	`CMD_RESET_OP
();

1027 
	`DMA_Ród_NAND_¥e
(
Êash_addr
, 
AHB_DMA_SUB_DST_SPI
,

1028 
AHB_DMA_SUB_TEST_L
, 
ch™√l
, 0);

1030 
•i_«nd_öt_mode
 = 
•i_öt
;

1031 
	}
}

1033 
	$CK_AHBDMA_SPI_M_R_Subsys_Po°
(
CK_UINT8
 
ch™√l
) {

1034 
CK_UINT32
 
i
 = 0;

1035 
CK_UINT8
 
d©a
 = 0;

1036 
CK_UINT32
 
•i_öt
 = 
•i_«nd_öt_mode
;

1037 
•i_«nd_öt_mode
 = 0;

1039 
	`DMA_Ród_NAND_po°
(
ch™√l
, 0);

1041 
i
 = 0; i < 
AHB_DMA_SUB_TEST_L
; i++) {

1042 
d©a
 = 
	`ªad_mªg8
(
AHB_DMA_SUB_DST_SPI
 + 
i
);

1043 i‡(
d©a
 !
ã°_ch¨_d©a
[
i
 % 12]) {

1044 
	`¥ötf
("\n\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1045 
AHB_DMA_SUB_DST_SPI
 + 
i
, 
d©a
, 
ã°_ch¨_d©a
[i % 12]);

1046 
	`¥ötf
(" - - - FAIL.\n");

1047 
•i_«nd_öt_mode
 = 
•i_öt
;

1051 
	`¥ötf
(" - - - PASS.\n");

1052 
•i_«nd_öt_mode
 = 
•i_öt
;

1053 
	}
}

1055 
	$CK_AHBDMA_SPI_S_Te°
(
CK_UINT8
 
dma_öå
, 
CK_UINT32
 
d°_å_width
,

1056 
CK_UINT32
 
d°_msize
) {

1057 
CK_UINT32
 
i
 = 0;

1058 
CK_UINT8
 
d©a
 = 0;

1059 
CK_UINT32
 
ªsu…
 = 1;

1060 
CK_UINT32
 
›í_Àn
;

1062 
	`¥ötf
("\n%d. Memory <-> SPI Slave Transfer with\n"

1064 
ahbdma_ã°ˇ£_no
++,

1065 
	`DST_TR_WIDTH
(
d°_å_width
),

1066 
	`DST_MSIZE
(
d°_msize
));

1069 i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH32
) {

1070 
	`mem£t
((*)
MEM_TEST_SRC
, 0, 
MEM2SPIS_TX_TEST_L
);

1071 
i
 = 0; i < 
MEM2SPIS_TX_TEST_L
; i++) {

1072 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
 * 4, 0x10 + i);

1074 
›í_Àn
 = 
MEM2SPIS_TX_TEST_L
;

1075 } i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH8
) {

1076 
i
 = 0; i < 
MEM2SPIS_TX_TEST_L
; i++) {

1077 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
, 0x10 + i);

1079 
›í_Àn
 = 
MEM2SPIS_TX_TEST_L
 / 4;

1081 
	`¥ötf
("\n\tDMAC_CTL_DST_TR_WIDTH %dÇot supported inÅest forÇow\n",

1082 
	`DST_TR_WIDTH
(
d°_å_width
));

1083 
	`¥ötf
(" - - - FAIL.\n");

1087 
	`•i_¶ave_öô
(
MODE0
, 2);

1088 
	`¥ötf
("\n\tTest Receive data from SPI Controller side: \n");

1089 
	`¥ötf
("\n\t\t Run SPI Slave TXÅestápplication: \n");

1090 
	`•is_dma_rx
((
CK_UINT8
 *)
MEM_TEST_DEST
, 
MEM2SPIS_RX_TEST_L
, 
DMA_CHANNEL_3
, 
dma_öå
);

1092 
i
 = 0; i < 
MEM2SPIS_RX_TEST_L
; i++) {

1093 
d©a
 = 
	`ªad_mªg8
(
MEM_TEST_DEST
 + 
i
);

1094 i‡(
d©a
 !
•is_ã°_∑âí
[
i
]) {

1095 
	`¥ötf
("\n\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1096 
MEM_TEST_DEST
 + 
i
, 
d©a
, 
•is_ã°_∑âí
[i]);

1097 
ªsu…
 = 0;

1101 if(
ªsu…
)

1102 
	`¥ötf
("\t\t\t- - -PASS\n");

1104 
	`¥ötf
("\t\t\t- - -FAILURE\n");

1106 
	`¥ötf
("\n\tTest Transmit 32 dataÅo SPI Controller side: \n");

1107 
	`¥ötf
("\n\t\t Run SPI Slave RXÅestápplication: \n");

1108 
ªsu…
 = 
	`•is_dma_tx
((
CK_UINT8
 *)
MEM_TEST_SRC
, 
›í_Àn
, 
DMA_CHANNEL_3
, 
dma_öå
,

1109 
d°_å_width
, 
d°_msize
);

1111 if(
ªsu…
) {

1112 
∑s£d_ˇ£
++;

1113 
	`¥ötf
("\t\t\t- - -PASS\n");

1115 
	`¥ötf
("\t\t\t- - -FAILURE\n");

1116 
	}
}

1118 
	$CK_AHBDMA_I2C_Te°
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
i2c_id
, CK_UINT8 
dma_öå
,

1119 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

1120 
CK_UINT32
 
i
 = 0, 
j
 = 0;

1121 
CK_UINT8
 
d©a
 = 0;

1122 
CK_UINT32
 
ì¥om_d©a_addr
 = 0x160;

1123 
CK_UINT8
 
ªt
 = 0;

1124 
CK_UINT8
 
›í_Àn
 = 0;

1125 
CK_UINT8
 *
§c_d©a
[] = {
ã°_ch¨_d©a
, 
ã°_ch¨_d©a1
};

1126 
	`¥ötf
("\n%d. I2C %d Transfer with DST_TR_WIDTH %d,"

1128 
ahbdma_ã°ˇ£_no
++, 
i2c_id
,

1129 
	`DST_TR_WIDTH
(
d°_å_width
), 
	`DST_MSIZE
(
d°_msize
));

1131 
j
 = 0; j < 2; j++) {

1133 i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH32
) {

1134 
	`mem£t
(
MEM_TEST_SRC
, 0, 
MEM2I2C_TEST_L
 * 4);

1135 
i
 = 0; i < 
MEM2I2C_TEST_L
; i++) {

1136 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
 * 4, 
§c_d©a
[
j
][i % 12]);

1138 
›í_Àn
 = 
MEM2I2C_TEST_L
;

1139 } i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH8
) {

1140 
i
 = 0; i < 
MEM2I2C_TEST_L
; i++) {

1141 
	`wrôe_mªg8
(
MEM_TEST_SRC
 + 
i
, 
§c_d©a
[
j
][i % 12]);

1143 
›í_Àn
 = 
MEM2I2C_TEST_L
 / 4;

1145 
	`¥ötf
("\n\tDMAC_CTL_DST_TR_WIDTH %dÇot supported inÅest forÇow\n",

1146 
	`DST_TR_WIDTH
(
d°_å_width
));

1147 
	`¥ötf
(" - - - FAIL.\n");

1151 
	`mem£t
(
MEM_TEST_DEST
, 0, 
MEM2I2C_TEST_L
);

1153 
	`dw_i2c_öô
(
i2c_id
, 
I2C_STANDARD_SPEED
, 0);

1155 
ªt
 = 
	`dw_i2c_dma_wrôe
(
dma_id
, 
i2c_id
, 
AT24C64_SLAVE_ADDR
,

1156 
	`WORD_ADDR_L
(
ì¥om_d©a_addr
), 
WORD_ADDR_L_LEN
,

1157 
MEM_TEST_SRC
, 
›í_Àn
, 
DMA_CHANNEL_3
,

1158 
dma_öå
, 4, 
d°_å_width
, 
d°_msize
);

1159 i‡(
ªt
 != 0) {

1160 
	`¥ötf
("\n\tDMA writeÅo EEPROM failed. . .\n");

1161 
	`¥ötf
(" - - - FAIL.\n");

1165 
ªt
 = 
	`dw_i2c_dma_ªad
(
dma_id
, 
i2c_id
, 
AT24C64_SLAVE_ADDR
,

1166 
	`WORD_ADDR_L
(
ì¥om_d©a_addr
), 
WORD_ADDR_L_LEN
,

1167 
MEM_TEST_DEST
, 
MEM2I2C_TEST_L
, 
DMA_CHANNEL_3
,

1168 
dma_öå
, 3);

1170 i‡(
ªt
 != 0) {

1171 
	`¥ötf
("\n\tDMAÑead from EEPROM failed. . .\n");

1172 
	`¥ötf
(" - - - FAIL.\n");

1176 
i
 = 0; i < 
MEM2I2C_TEST_L
; i++) {

1177 
d©a
 = 
	`ªad_mªg8
(
MEM_TEST_DEST
 + 
i
);

1178 i‡(
d©a
 !
§c_d©a
[
j
][
i
 % 12]) {

1179 
	`¥ötf
("\n\èdd∏0x%x: 0x%xÇŸÉquÆÅÿ0x%x\n", 
MEM_TEST_DEST
 + 
i
,

1180 
d©a
, 
§c_d©a
[
j
][
i
 % 12]);

1181 
	`¥ötf
(" - - - FAIL.\n");

1186 
∑s£d_ˇ£
++;

1187 
	`¥ötf
(" - - - PASS.\n");

1188 
	}
}

1190 
	$CK_AHBDMA_I2C1_W_Subsys_Pª
(
CK_UINT8
 
ch™√l
) {

1191 
CK_UINT32
 
i
 = 0;

1192 
CK_UINT32
 
ì¥om_d©a_addr
 = 0x200;

1193 
CK_UINT8
 
i2c_id
 = 1;

1194 
CK_UINT8
 
ªt
 = 0;

1197 
i
 = 0; i < 
AHB_DMA_SUB_TEST_L
; i++) {

1198 
	`wrôe_mªg8
(
AHB_DMA_SUB_SRC_I2C
 + 
i
, 
ã°_ch¨_d©a
[i % 12]);

1201 
	`dw_i2c_öô
(
i2c_id
, 
I2C_STANDARD_SPEED
, 0);

1202 
ªt
 = 
	`dw_i2c_dma_wrôe_¥e
(
i2c_id
, 
	`AT24CM02_DEV_ADDR
(
ì¥om_d©a_addr
),

1203 
	`WORD_ADDR_L
(
ì¥om_d©a_addr
), 
WORD_ADDR_L_LEN
,

1204 
AHB_DMA_SUB_SRC_I2C
, 
AHB_DMA_SUB_TEST_L
 / 4,

1205 
ch™√l
, 0, 4,

1206 
DMAC_CTL_DST_TR_WIDTH8
, 
DMAC_CTL_DEST_MSIZE4
);

1207 i‡(
ªt
 != 0) {

1208 
	`¥ötf
("\n\tDMA writeÅo EEPROM failed. . .\n");

1209 
	`¥ötf
(" - - - FAIL.\n");

1212 
	}
}

1214 
	$CK_AHBDMA_I2C1_W_Subsys_Po°
(
CK_UINT8
 
ch™√l
) {

1215 
CK_UINT8
 
i2c_id
 = 1;

1216 
CK_UINT8
 
ªt
 = 0;

1218 
ªt
 = 
	`dw_i2c_dma_wrôe_po°
(
i2c_id
, 
AHB_DMA_SUB_SRC_I2C
,

1219 
AHB_DMA_SUB_TEST_L
 / 4, 
ch™√l
,

1220 0, 
DMAC_CTL_DST_TR_WIDTH8
);

1221 i‡(
ªt
 != 0) {

1222 
	`¥ötf
("\n\tDMA writeÅo EEPROM failed. . .\n");

1223 
	`¥ötf
(" - - - FAIL.\n");

1226 
	}
}

1228 
	$CK_AHBDMA_I2C1_R_Subsys_Pª
(
CK_UINT8
 
ch™√l
) {

1229 
CK_UINT32
 
i
 = 0;

1230 
CK_UINT32
 
ì¥om_d©a_addr
 = 0x200;

1231 
CK_UINT8
 
i2c_id
 = 1;

1232 
CK_UINT8
 
ªt
 = 0;

1235 
	`mem£t
(
AHB_DMA_SUB_DST_I2C
, 0, 
AHB_DMA_SUB_TEST_L
);

1237 
	`dw_i2c_öô
(
i2c_id
, 
I2C_STANDARD_SPEED
, 0);

1239 
ªt
 = 
	`dw_i2c_dma_ªad_¥e
(
i2c_id
, 
	`AT24CM02_DEV_ADDR
(
ì¥om_d©a_addr
),

1240 
	`WORD_ADDR_L
(
ì¥om_d©a_addr
), 
WORD_ADDR_L_LEN
,

1241 
AHB_DMA_SUB_DST_I2C
, 
AHB_DMA_SUB_TEST_L
,

1242 
ch™√l
, 0, 3);

1244 i‡(
ªt
 != 0) {

1245 
	`¥ötf
("\n\tDMAÑead from EEPROM failed. . .\n");

1246 
	`¥ötf
(" - - - FAIL.\n");

1249 
	}
}

1251 
	$CK_AHBDMA_I2C1_R_Subsys_Po°
(
CK_UINT8
 
ch™√l
) {

1252 
CK_UINT32
 
i
 = 0;

1253 
CK_UINT8
 
d©a
 = 0;

1254 
CK_UINT8
 
i2c_id
 = 1;

1255 
CK_UINT8
 
ªt
 = 0;

1257 
ªt
 = 
	`dw_i2c_dma_ªad_po°
(
i2c_id
, 
AHB_DMA_SUB_TEST_L
, 
ch™√l
, 0);

1259 i‡(
ªt
 != 0) {

1260 
	`¥ötf
("\n\tDMAÑead from EEPROM failed. . .\n");

1261 
	`¥ötf
(" - - - FAIL.\n");

1265 
i
 = 0; i < 
AHB_DMA_SUB_TEST_L
; i++) {

1266 
d©a
 = 
	`ªad_mªg8
(
AHB_DMA_SUB_DST_I2C
 + 
i
);

1267 i‡(
d©a
 !
ã°_ch¨_d©a
[
i
 % 12]) {

1268 
	`¥ötf
("\n\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1269 
AHB_DMA_SUB_DST_I2C
 + 
i
,

1270 
d©a
, 
ã°_ch¨_d©a
[
i
 % 12]);

1271 
	`¥ötf
(" - - - FAIL.\n");

1275 
	`¥ötf
(" - - - PASS.\n");

1276 
	}
}

1278 
	$CK_AHBDMA_MEM2MEM_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
, CK_UINT8 
unô
) {

1279 
CK_UINT32
 
d©a_Êag
 = 0;

1280 
CK_UINT32
 
ª°_vÆ
 = 0;

1281 
CK_UINT32
 
lo›
 = 0;

1282 
CK_UINT32
 
§c
 = 0;

1283 
CK_UINT32
 
de°
 = 0;

1284 
CK_UINT32
 
tmp32
 = 0;

1285 
i
 = 0;

1287 
	`¥ötf
("\n%d. MemoryÅo Memory Transfer, width %d . . .\n",

1288 
ahbdma_ã°ˇ£_no
++, 
unô
 * 8);

1291 
lo›
 = 0;lo› < 
MEM2MEM_TEST_L
;Üoop += 16) {

1292 
i
 = 0; i < 4; i++)

1293 
	`wrôe_mªg32
((
MEM_TEST_SRC
 + 
lo›
 + 
i
 * 4), 
ã°_mem_d©a
[i]);

1296 
	`mem£t
((*)
MEM_TEST_DEST
, 0, 
MEM2MEM_TEST_L
);

1299 
ª°_vÆ
 = 
MEM2MEM_TEST_L
;

1300 
§c
 = 
MEM_TEST_SRC
;

1301 
de°
 = 
MEM_TEST_DEST
;

1302 
	`DMAC_Inô
(
id
);

1304 
	`DBG
("\n\ttransfer %d bytes fromáddress 0x%xÅo 0x%x\n",

1305 
MEM2MEM_TEST_L
, 
MEM_TEST_SRC
, 
MEM_TEST_DEST
);

1308 if(
ª°_vÆ
 > (
DMA_CH01_MAX_BLK_SIZE
 * 
unô
)) {

1309 
	`DBG
("\n\trest 0x%x bytes > (DMA_CH01_MAX_BLK_SIZE * 4) 0x%x bytes\n",

1310 
ª°_vÆ
, 
DMA_CH01_MAX_BLK_SIZE
 * 
unô
);

1311 
	`DMAMem2MemO≥n
(
id
, 
DMA_CHANNEL_0
, 
§c
, 
de°
,

1312 
DMA_CH01_MAX_BLK_SIZE
, 
dma_öå
, 
unô
, 0, 0, 0, 0);

1313 
	`DMAC_Sèπ
(
id
, 
DMA_CHANNEL_0
);

1315 !(
	`DMAC_CheckD⁄e
(
id
, 
DMA_CHANNEL_0
, 
dma_öå
)));

1316 
ª°_vÆ
 -(
DMA_CH01_MAX_BLK_SIZE
 * 
unô
);

1317 
§c
 +(
DMA_CH01_MAX_BLK_SIZE
 * 
unô
);

1318 
de°
 +(
DMA_CH01_MAX_BLK_SIZE
 * 
unô
);

1320 
	`DBG
("\n\trest 0x%x bytes < (DMA_CH01_MAX_BLK_SIZE * %d) 0x%x bytes\n",

1321 
ª°_vÆ
, 
unô
, 
DMA_CH01_MAX_BLK_SIZE
 * unit);

1322 
	`DMAMem2MemO≥n
(
id
, 
DMA_CHANNEL_0
, 
§c
, 
de°
,

1323 (
ª°_vÆ
 / 
unô
), 
dma_öå
, unit, 0, 0, 0, 0);

1324 
	`DMAC_Sèπ
(
id
, 
DMA_CHANNEL_0
);

1325 
ª°_vÆ
 = 0;

1330 
	`DBG
("\n\ttransfer Done\n");

1331 !(
	`DMAC_CheckD⁄e
(
id
, 
DMA_CHANNEL_0
, 
dma_öå
)));

1332 
	`DMAC_Clo£
(
id
, 
DMA_CHANNEL_0
);

1334 
	`DBG
("\n\tcompareÅransfer data value\n");

1336 
d©a_Êag
 = 0;

1337 
lo›
 = 0;Üo› < 
MEM2MEM_TEST_L
;Üoop += 16) {

1338 
i
 = 0; i < 4; i++) {

1339 
tmp32
 = 
	`ªad_mªg32
(
MEM_TEST_DEST
 + 
lo›
 + 
i
 * 4);

1340 i‡(
tmp32
 !
ã°_mem_d©a
[
i
]) {

1341 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1342 
MEM_TEST_DEST
 + 
lo›
 + 
i
 * 4, 
tmp32
, 
ã°_mem_d©a
[i]);

1343 
d©a_Êag
 = 1;

1348 i‡(
d©a_Êag
 == 0) {

1349 
∑s£d_ˇ£
++;

1350 
	`¥ötf
(" - - - PASS.\n");

1352 
	`¥ötf
(" - - - FAIL.\n");

1354 
	}
}

1356 
CK_UINT8
 
	$CK_AHBDMA_Löked_Li°_Te°
(
CK_UINT32
 
id
, CK_UINT32 
§c1
, CK_UINT32 
§c2
, CK_UINT32 
de°1
,

1357 
CK_UINT32
 
de°2
, CK_UINT32 
Àn
, 
CK_UINT8
 
dma_öå
) {

1358 
LLI
 
	tLLI_INST
;

1359 
CK_UINT32
 
d©a_Êag
 = 0;

1360 
CK_UINT32
 
lo›
 = 0;

1361 
CK_UINT32
 
tmp32
 = 0;

1362 
i
 = 0;

1366 
lo›
 = 0;lo› < 
Àn
;Üoop += 16) {

1367 
i
 = 0; i < 4; i++)

1368 
	`wrôe_mªg32
((
§c1
 + 
lo›
 + 
i
 * 4), 
ã°_mem_d©a
[i]);

1371 
lo›
 = 0;lo› < 
Àn
;Üoop += 16) {

1372 
i
 = 0; i < 4; i++)

1373 
	`wrôe_mªg32
((
§c2
 + 
lo›
 + 
i
 * 4), 
ã°_mem_d©a
[i]);

1376 
	`mem£t
((*)
de°1
, 0, 
Àn
);

1377 
	`mem£t
((*)
de°2
, 0, 
Àn
);

1379 
	`DMAC_Inô
(
id
);

1381 
LLI_INST
 * vﬁ©ûê
LLI0
=–LLI_INST *)(
LLI0_ADDR
);

1382 
LLI_INST
 * vﬁ©ûê
LLI1
=–LLI_INST *)(
LLI1_ADDR
);

1384 
LLI0
->
SAR
 = 
§c1
;

1385 
LLI0
->
DAR
 = 
de°1
;

1386 
LLI0
->
LLP
 = 
LLI1
;

1387 
LLI0
->
CTL_L
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

1388 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

1389 
DMAC_CTL_DINC_INC
 |

1390 
DMAC_CTL_SRC_TR_WIDTH32
 |

1391 
DMAC_CTL_DST_TR_WIDTH32
 | 
dma_öå
 |

1392 
DMAC_CTL_LLP_SRC_EN
 | 
DMAC_CTL_LLP_DST_EN
);

1393 
LLI0
->
CTL_H
 = 
Àn
 / 4;

1396 
LLI1
->
SAR
 = 
§c2
;

1397 
LLI1
->
DAR
 = 
de°2
;

1398 
LLI1
->
LLP
 = 
LLI_NULL
;

1399 
LLI1
->
CTL_L
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

1400 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

1401 
DMAC_CTL_DINC_INC
 |

1402 
DMAC_CTL_SRC_TR_WIDTH32
 |

1403 
DMAC_CTL_DST_TR_WIDTH32
 | 
dma_öå
);

1404 
LLI1
->
CTL_H
 = 
Àn
 / 4;

1406 
	`¥ötf
("\n\t startÜinked modeÅransfer\n");

1411 
	`DMAMem2MemO≥n
(
id
, 
DMA_CHANNEL_0
, 0, 0,

1412 
Àn
 / 4, 
dma_öå
, 4, 0,

1413 
LLI0_ADDR
, 1, 1);

1415 
	`DMAC_Sèπ
(
id
, 
DMA_CHANNEL_0
);

1417 
	`DBG
("\n\ttransfer Done\n");

1419 
CK_UINT32
 
timeout
 = 0;

1421 i‡(
	`DMAC_CheckD⁄e
(
id
, 
DMA_CHANNEL_0
, 
dma_öå
) == 1) {

1424 i‡(
timeout
++ > 0x500) {

1425 
	`DMAC_Clo£
(
id
, 
DMA_CHANNEL_0
);

1426 
	`¥ötf
("\n\twaiting for DMA DoneÅimeout!\n");

1432 
	`DMAC_Clo£
(
id
, 
DMA_CHANNEL_0
);

1434 
	`DBG
("\n\tcompareÅransfer data value\n");

1436 
d©a_Êag
 = 0;

1437 
lo›
 = 0;Üo› < 
Àn
;Üoop += 16) {

1438 
i
 = 0; i < 4; i++) {

1439 
tmp32
 = 
	`ªad_mªg32
(
de°1
 + 
lo›
 + 
i
 * 4);

1440 i‡(
tmp32
 !
ã°_mem_d©a
[
i
]) {

1441 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1442 
de°1
 + 
lo›
 + 
i
 * 4, 
tmp32
, 
ã°_mem_d©a
[i]);

1443 
d©a_Êag
 = 1;

1448 
lo›
 = 0;Üo› < 
Àn
;Üoop += 16) {

1449 
i
 = 0; i < 4; i++) {

1450 
tmp32
 = 
	`ªad_mªg32
(
de°2
 + 
lo›
 + 
i
 * 4);

1451 i‡(
tmp32
 !
ã°_mem_d©a
[
i
]) {

1452 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1453 
de°2
 + 
lo›
 + 
i
 * 4, 
tmp32
, 
ã°_mem_d©a
[i]);

1454 
d©a_Êag
 = 1;

1459 i‡(
d©a_Êag
 == 0)

1463 
	}
}

1465 
	$CK_AHBDMA_MEM2MEM_Löked_Li°_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
) {

1466 
CK_UINT32
 
d©a_Êag
 = 0;

1468 
	`¥ötf
("\n%d. Löked Li° Mem‹yÅÿLöked Li° Mem‹y Tøns„r. . .\n", 
ahbdma_ã°ˇ£_no
++);

1470 
d©a_Êag
 = 
	`CK_AHBDMA_Löked_Li°_Te°
(
id
, 
MEM_TEST_SRC
, 
MEM_TEST_SRC1
,

1471 
MEM_TEST_DEST
, 
MEM_TEST_DEST1
, 
MEM2MEM_LINK_TEST_L
, 
dma_öå
);

1473 i‡(
d©a_Êag
 == 0) {

1474 
∑s£d_ˇ£
++;

1475 
	`¥ötf
(" - - - PASS.\n");

1477 
	`¥ötf
(" - - - FAIL.\n");

1479 
	}
}

1481 
	$CK_AHBDMA_SRAM2MEM_Löked_Li°_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
) {

1482 
CK_UINT32
 
d©a_Êag
 = 0;

1484 
	`¥ötf
("\n%d. Löked Li° SRAMÅÿLöked Li° Mem‹y Tøns„r. . .\n", 
ahbdma_ã°ˇ£_no
++);

1486 
d©a_Êag
 = 
	`CK_AHBDMA_Löked_Li°_Te°
(
id
, 
SRAM_TEST_SRC
, 
SRAM_TEST_SRC1
,

1487 
MEM_TEST_DEST
, 
MEM_TEST_DEST1
, 
MEM2MEM_LINK_TEST_L
, 
dma_öå
);

1489 i‡(
d©a_Êag
 == 0) {

1490 
∑s£d_ˇ£
++;

1491 
	`¥ötf
(" - - - PASS.\n");

1493 
	`¥ötf
(" - - - FAIL.\n");

1495 
	}
}

1497 
	$CK_AHBDMA_MEM2SRAM_Löked_Li°_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
) {

1498 
CK_UINT32
 
d©a_Êag
 = 0;

1500 
	`¥ötf
("\n%d. Löked Li° Mem‹yÅÿLöked Li° SRAM Tøns„r. . .\n", 
ahbdma_ã°ˇ£_no
++);

1502 
d©a_Êag
 = 
	`CK_AHBDMA_Löked_Li°_Te°
(
id
, 
MEM_TEST_SRC
, 
MEM_TEST_SRC1
,

1503 
SRAM_TEST_DEST
, 
SRAM_TEST_DEST1
, 
MEM2MEM_LINK_TEST_L
, 
dma_öå
);

1505 i‡(
d©a_Êag
 == 0) {

1506 
∑s£d_ˇ£
++;

1507 
	`¥ötf
(" - - - PASS.\n");

1509 
	`¥ötf
(" - - - FAIL.\n");

1511 
	}
}

1513 
	$CK_AHBDMA_MEM2MEM_Rólignmít_Te°
(
CK_UINT32
 
id
, 
CK_UINT8
 
dma_öå
) {

1514 
DMAC_CH_INFO
 
ch™√l_öfo
;

1515 
	`mem£t
(&
ch™√l_öfo
, 0, (channel_info));

1516 
CK_UINT32
 
d©a_Êag
 = 0;

1517 
CK_UINT32
 
lo›
 = 0;

1518 
CK_UINT32
 
tmp32
 = 0;

1519 
i
 = 0;

1521 
	`¥ötf
("\n%d. Mem‹yÅÿMem‹y RólignmíàTøns„r. . .\n", 
ahbdma_ã°ˇ£_no
++);

1524 
lo›
 = 0;lo› < 
MEM2MEM_LINK_TEST_L
;Üoop += 16) {

1525 
i
 = 0; i < 4; i++)

1526 
	`wrôe_mªg32
((
MEM_TEST_SRC
 + 
lo›
 + 
i
 * 4), 
ã°_mem_d©a
[i]);

1529 
	`mem£t
((*)
MEM_TEST_DEST
, 0, 
MEM2MEM_LINK_TEST_L
);

1531 
	`DMAC_Inô
(
id
);

1533 
	`¥ötf
("\n\t startÑansfer\n");

1535 
ch™√l_öfo
.
ßrx
 = 
MEM_TEST_SRC
;

1536 
ch™√l_öfo
.
d¨x
 = 
MEM_TEST_DEST
;

1537 
ch™√l_öfo
.
˘lHx
 = 
MEM2MEM_REALIGNMENT_L
;

1538 
ch™√l_öfo
.
Œpx
 = 0;

1539 
ch™√l_öfo
.
˘lLx
 = (
DMAC_CTL_M2M_DW
 | 
DMAC_CTL_SRC_MSIZE4
 |

1540 
DMAC_CTL_DEST_MSIZE4
 | 
DMAC_CTL_SINC_INC
 |

1541 
DMAC_CTL_DINC_INC
 |

1542 
DMAC_CTL_SRC_TR_WIDTH16
 |

1543 
DMAC_CTL_DST_TR_WIDTH32
 | 
dma_öå
);

1545 
ch™√l_öfo
.
cfgLx
 = (
DMAC_CFG_HS_SRC_SOFTWARE
 | 
DMAC_CFG_HS_DST_SOFTWARE
 |

1546 
DMAC_CFG_SRC_HS_POL_H
 | 
DMAC_CFG_DST_HS_POL_H
 |

1547 
	`DMAC_CFG_CH_PRIOR
(0Ë| 
DMAC_CFG_RELOAD_SRC
);

1552 
	`DMAC_O≥n
(
id
, &
ch™√l_öfo
, 
DMA_CHANNEL_0
, 
MEM2MEM_REALIGNMENT_L
);

1554 
	`DMAC_Sèπ
(
id
, 
DMA_CHANNEL_0
);

1556 
	`dñay
(10);

1559 
tmp32
 = 
	`ªad_mªg32
(
	`DMAC_CFG
(
id
, 0));

1560 
tmp32
 &~
DMAC_CFG_RELOAD_SRC
;

1561 
	`wrôe_mªg32
(
	`DMAC_CFG
(
id
, 0), 
tmp32
);

1563 
	`DBG
("\n\ttransfer Done\n");

1565 
CK_UINT32
 
timeout
 = 0;

1567 i‡(
	`DMAC_CheckD⁄e
(
id
, 
DMA_CHANNEL_0
, 
dma_öå
) == 1) {

1570 i‡(
timeout
++ > 0x500) {

1571 
	`DMAC_Clo£
(
id
, 
DMA_CHANNEL_0
);

1572 
	`¥ötf
("\n\twaiting for DMA DoneÅimeout!\n");

1573 
	`¥ötf
(" - - - FAIL.\n");

1579 
	`DMAC_Clo£
(
id
, 
DMA_CHANNEL_0
);

1581 
	`DBG
("\n\tcompareÅransfer data value\n");

1590 
d©a_Êag
 = 0;

1591 
lo›
 = 0;Üoop < 60;Üoop += 20) {

1592 
i
 = 0; i < 5; i++) {

1593 
tmp32
 = 
	`ªad_mªg32
(
MEM_TEST_DEST
 + 
lo›
 + 
i
 * 4);

1594 i‡(((
i
 < 4 && (
tmp32
 !
ã°_mem_d©a
[i])))) {

1595 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1596 
MEM_TEST_DEST
 + 
lo›
 + 
i
 * 4, 
tmp32
, 
ã°_mem_d©a
[i]);

1597 
d©a_Êag
 = 1;

1600 i‡(
i
 =4 && (
tmp32
 !(
ã°_mem_d©a
[0] & 0x0000FFFF))) {

1601 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1602 
MEM_TEST_DEST
 + 
lo›
 + 
i
 * 4, 
tmp32
, 
ã°_mem_d©a
[0] & 0x0000FFFF);

1603 
d©a_Êag
 = 1;

1609 i‡(
d©a_Êag
 == 0) {

1610 
∑s£d_ˇ£
++;

1611 
	`¥ötf
(" - - - PASS.\n");

1613 
	`¥ötf
(" - - - FAIL.\n");

1615 
	}
}

1617 
	$CK_AHBDMA_Mu…i_Ch™√l_Te°
(
CK_UINT32
 
id
) {

1618 
CK_UINT8
 
d©a_Êag
 = 0;

1619 
CK_UINT32
 
§c
 = 0;

1620 
CK_UINT32
 
de°
 = 0;

1621 
CK_UINT32
 
max_Àn
 = 0;

1622 
CK_UINT32
 
i
 = 0;

1623 
CK_UINT8
 
ch™√l_numbî
 = 0;

1624 
CK_UINT8
 
¥io
[8] = {2, 0, 6, 7, 6, 1, 5, 3};

1625 
CK_UINT8
 
com∂ëe_£q
[8] = {3, 2, 4, 6, 7, 0, 5, 1};

1626 
CK_UINT8
 
com∂ëe_no
 = 0;

1628 
	`¥ötf
("\n%d. Multi-Channel Transfer with differentÖriorities. . .\n",

1629 
ahbdma_ã°ˇ£_no
++);

1631 
	`DMAC_Inô
(
id
);

1633 
ch™√l_numbî
 = 0;

1634 
ch™√l_numbî
 < 
DMAH_NUM_CHANNELS
; channel_number++) {

1635 i‡(
ch™√l_numbî
 < 2) {

1636 
max_Àn
 = 
DMA_CH01_MAX_BLK_SIZE
 * 4;

1638 
max_Àn
 = 
DMA_CH27_MAX_BLK_SIZE
 * 4;

1640 
§c
 = 
MEM_TEST_SRC
 + 
ch™√l_numbî
 * 
MULTI_CHANNEL_MEM_INTVL
;

1641 
de°
 = 
MEM_TEST_DEST
 + 
ch™√l_numbî
 * 
MULTI_CHANNEL_MEM_INTVL
;

1643 
i
 = 0; i < 
max_Àn
; i++) {

1644 
	`wrôe_mªg8
(
§c
 + 
i
, 
ã°_ch¨_d©a
[i % 12]);

1647 
	`mem£t
((*)
de°
, 0, 
max_Àn
);

1649 
	`DMAMem2MemO≥n
(
id
, 
ch™√l_numbî
, 
§c
, 
de°
,

1650 (
max_Àn
 / 4), 0, 4, 
¥io
[
ch™√l_numbî
], 0, 0, 0);

1651 
	`DBG
("\n\ttransfer %d bytes fromáddress 0x%xÅo 0x%x\n",

1652 
max_Àn
, 
§c
, 
de°
);

1656 
	`DMAC_RUN_ALL
(
id
);

1659 
com∂ëe_no
 < 8) {

1660 
CK_UINT32
 
ch™√l
 = 
com∂ëe_£q
[
com∂ëe_no
];

1661 i‡(
	`DMAC_CheckD⁄e_Any
(
id
)) {

1662 
CK_UINT32
 
øwt‰
 = 
	`ªad_mªg32
(
	`DMAC_RAWTFR
(
id
));

1663 i‡(
øwt‰
 !(1 << 
ch™√l
)) {

1664 
	`¥ötf
("\n\tchannel %d withÖriority %d should complete in"

1666 
ch™√l
, 
¥io
[ch™√l], 
com∂ëe_no
, 
øwt‰
);

1667 
	`¥ötf
(" - - - FAIL.\n");

1671 
	`wrôe_mªg32
(
	`DMAC_CLEARTFR
(
id
), 1 << 
ch™√l
);

1672 
com∂ëe_no
++;

1678 
ch™√l_numbî
 = 0;

1679 
ch™√l_numbî
 < 
DMAH_NUM_CHANNELS
; channel_number++) {

1680 
	`DMAC_Clo£
(
id
, 
ch™√l_numbî
);

1683 
ch™√l_numbî
 = 0;

1684 
ch™√l_numbî
 < 
DMAH_NUM_CHANNELS
; channel_number++) {

1685 
	`DBG
("\n\tcom∑ªÅøns„∏d©®vÆuêf‹ ch™√»%d\n", 
ch™√l_numbî
);

1687 i‡(
ch™√l_numbî
 < 2) {

1688 
max_Àn
 = 
DMA_CH01_MAX_BLK_SIZE
 * 4;

1690 
max_Àn
 = 
DMA_CH27_MAX_BLK_SIZE
 * 4;

1692 
de°
 = 
MEM_TEST_DEST
 + 
ch™√l_numbî
 * 
MULTI_CHANNEL_MEM_INTVL
;

1694 
d©a_Êag
 = 0;

1695 
i
 = 0; i < 
max_Àn
; i++) {

1696 
CK_UINT8
 
d©a
 = 
	`ªad_mªg8
(
de°
 + 
i
);

1697 i‡(
d©a
 !
ã°_ch¨_d©a
[
i
 % 12]) {

1698 
	`DBG
("\taddr 0x%x: 0x%xÇotÉqualÅo 0x%x, channel %d\n",

1699 
de°
 + 
i
, 
d©a
, 
ã°_ch¨_d©a
[ò% 12], 
ch™√l_numbî
);

1700 
d©a_Êag
 = 1;

1705 i‡(
d©a_Êag
 == 0) {

1706 
∑s£d_ˇ£
++;

1707 
	`¥ötf
(" - - - PASS.\n");

1709 
	`¥ötf
(" - - - FAIL.\n");

1711 
	}
}

1713 
	$CK_AHBDMA_ID_REG_Te°
(
CK_UINT32
 
id
) {

1714 
CK_UINT8
 
i
 = 0;

1715 
CK_UINT8
 
°©us
 = 0;

1717 
	`¥ötf
("\n%d. Ród ID Regi°îs. . .\n", 
ahbdma_ã°ˇ£_no
++);

1718 
i
 = 0; i < 8; i++) {

1719 i‡(
	`ªad_mªg32
(
id_ªgs
[
id
][
i
]Ë!(
id_ªgs_vÆ
[i] & 0xffffffff)) {

1720 
	`¥ötf
("\n\tlower 32 bits of 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1721 
id_ªgs
[
id
][
i
], 
	`ªad_mªg32
(id_regs[id][i]),

1722 (
id_ªgs_vÆ
[
i
] & 0xffffffff));

1723 
°©us
 = 1;

1726 i‡(
	`ªad_mªg32
(
id_ªgs
[
id
][
i
] + 4) !=

1727 ((
id_ªgs_vÆ
[
i
] >> 32) & 0xffffffff)) {

1728 
	`¥ötf
("\n\thigher 32 bits of 0x%x: 0x%xÇotÉqualÅo 0x%x\n",

1729 
id_ªgs
[
id
][
i
], 
	`ªad_mªg32
(id_regs[id][i] + 4),

1730 (
id_ªgs_vÆ
[
i
] >> 32) & 0xffffffff);

1731 
°©us
 = 1;

1734 i‡(
°©us
 == 0) {

1735 
∑s£d_ˇ£
++;

1736 
	`¥ötf
(" - - - PASS.\n");

1738 
	`¥ötf
(" - - - FAIL.\n");

1740 
	}
}

1742 
	$CK_AHBDMA_Te°
(
CK_UINT32
 
id
) {

1743 
CK_UINT8
 
dma_öå
 = 0;

1744 
CK_UINT8
 
suµ‹ãd_unô
[] = {1, 2, 4, 8};

1745 
CK_UINT8
 
unô
 = 0;

1746 
	`¥ötf
("\nSyn›sy†AHB DMA C⁄åﬁÀ∏%d Te°. . . \n", 
id
);

1747 
ahbdma_ã°ˇ£_no
 = 0;

1748 
∑s£d_ˇ£
 = 0;

1749 
	`CK_AHBDMA_ID_REG_Te°
(
id
);

1750 
dma_öå
 = 0; dma_intr < 2; dma_intr++) {

1751 i‡(
dma_öå
 == 0) {

1752 
	`¥ötf
("\n\n**************** DMAÅest with interrupt disabled"

1755 
	`¥ötf
("\n\n**************** DMAÅest with interruptÉnabled"

1758 
unô
 = 0; unit < 4; unit++) {

1759 
	`CK_AHBDMA_MEM2MEM_Te°
(
id
, 
dma_öå
, 
suµ‹ãd_unô
[
unô
]);

1761 
	`CK_AHBDMA_MEM2MEM_Löked_Li°_Te°
(
id
, 
dma_öå
);

1762 
	`CK_AHBDMA_SRAM2MEM_Löked_Li°_Te°
(
id
, 
dma_öå
);

1763 
	`CK_AHBDMA_MEM2SRAM_Löked_Li°_Te°
(
id
, 
dma_öå
);

1765 i‡(
id
 == 0) {

1767 
	`CK_AHBDMA_I2C_Te°
(
id
, 3, 
dma_öå
, 
DMAC_CTL_DST_TR_WIDTH8
, 
DMAC_CTL_DEST_MSIZE4
);

1768 
	`CK_AHBDMA_I2C_Te°
(
id
, 3, 
dma_öå
, 
DMAC_CTL_DST_TR_WIDTH32
, 
DMAC_CTL_DEST_MSIZE1
);

1770 i‡(
id
 == 1) {

1771 
	`CK_AHBDMA_UART_Te°
(
id
, 
dma_öå
);

1772 
	`CK_AHBDMA_SPI_M_Te°
(
id
, 3, 
dma_öå
, 
DMAC_CTL_DST_TR_WIDTH8
,

1773 
DMAC_CTL_DEST_MSIZE4
);

1774 
	`CK_AHBDMA_SPI_M_Te°
(
id
, 3, 
dma_öå
, 
DMAC_CTL_DST_TR_WIDTH32
,

1775 
DMAC_CTL_DEST_MSIZE4
);

1782 
	`CK_AHBDMA_MEM2MEM_Rólignmít_Te°
(
id
, 0);

1783 
	`CK_AHBDMA_Mu…i_Ch™√l_Te°
(
id
);

1784 
	`¥ötf
("\n\n************************************************\n");

1785 
	`¥ötf
(" Pass Rate: %d/%d\n",

1786 
∑s£d_ˇ£
, 
ahbdma_ã°ˇ£_no
);

1787 
	`¥ötf
("************************************************\n");

1788 
ahbdma_ã°ˇ£_no
 = 0;

1789 
∑s£d_ˇ£
 = 0;

1790 
	`¥ötf
("\nEnd Syn›sy†AHB DMA C⁄åﬁÀ∏%d Te°. . . \n", 
id
);

1791 
	}
}

	@drivers/at24c64.c

13 
	~"©24c64.h
"

14 
	~"d©©y≥.h
"

15 
	~"misc.h
"

17 
CK_UINT32
 
dw_i2c_wrôe
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

18 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

19 
CK_UINT32
 
dw_i2c_wrôe_öt
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

20 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

21 
CK_UINT32
 
dw_i2c_ªad
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

22 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

23 
CK_UINT32
 
dw_i2c_ªad_öt
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

24 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

26 
CK_UINT32
 
	$byã_wrôe
(
CK_UINT32
 
i2c_id
, CK_UINT32 
addr
,

27 
CK_UINT8
 
d©a
, CK_UINT8 
öt_í
) {

28 
CK_UINT32
 
ªt
 = 0;

29 i‡(
öt_í
 == 0) {

30 
ªt
 = 
	`dw_i2c_wrôe
(
i2c_id
, 
AT24C64_SLAVE_ADDR
, 
	`WORD_ADDR_L
(
addr
),

31 
WORD_ADDR_L_LEN
, &
d©a
, 1);

33 
ªt
 = 
	`dw_i2c_wrôe_öt
(
i2c_id
, 
AT24C64_SLAVE_ADDR
,

34 
	`WORD_ADDR_L
(
addr
), 
WORD_ADDR_L_LEN
, &
d©a
, 1);

36  
ªt
;

37 
	}
}

39 
CK_UINT32
 
	$∑ge_wrôe
(
CK_UINT32
 
i2c_id
, CK_UINT32 
addr
, 
CK_UINT8
 *
buf
,

40 
CK_UINT16
 
Àn
, 
CK_UINT8
 
öt_í
) {

41 
CK_UINT32
 
ªt
 = 0;

43 i‡(((
addr
 & 0xffË+ 
Àn
) > 256) {

44 
	`¥ötf
("can't doÖage write from 0x%x with %d bytes,"

45 "ouào‡∑gêbound¨y", 
addr
, 
Àn
);

48 i‡(
öt_í
 == 0) {

49 
ªt
 = 
	`dw_i2c_wrôe
(
i2c_id
, 
AT24C64_SLAVE_ADDR
, 
	`WORD_ADDR_L
(
addr
),

50 
WORD_ADDR_L_LEN
, 
buf
, 
Àn
);

52 
ªt
 = 
	`dw_i2c_wrôe_öt
(
i2c_id
, 
AT24C64_SLAVE_ADDR
,

53 
	`WORD_ADDR_L
(
addr
), 
WORD_ADDR_L_LEN
, 
buf
, 
Àn
);

55  
ªt
;

56 
	}
}

58 
CK_UINT32
 
	$cuºít_addr_ªad
(
CK_UINT32
 
i2c_id
, 
CK_UINT8
 *
buf
,

59 
CK_UINT32
 
Àn
, 
CK_UINT8
 
öt_í
) {

60 
CK_UINT32
 
ªt
 = 0;

62 i‡(
öt_í
 == 0) {

64 
ªt
 = 
	`dw_i2c_ªad
(
i2c_id
, 
AT24C64_SLAVE_ADDR
, 0, 0, 
buf
, 
Àn
);

66 
ªt
 = 
	`dw_i2c_ªad_öt
(
i2c_id
, 
AT24C64_SLAVE_ADDR
, 0, 0, 
buf
, 
Àn
);

68  
ªt
;

69 
	}
}

71 
CK_UINT32
 
	$øndom_ªad
(
CK_UINT32
 
i2c_id
, CK_UINT32 
addr
, 
CK_UINT8
 *
buf
,

72 
CK_UINT32
 
Àn
, 
CK_UINT8
 
öt_í
) {

73 
CK_UINT32
 
ªt
 = 0;

75 i‡(
öt_í
 == 0) {

76 
ªt
 = 
	`dw_i2c_ªad
(
i2c_id
, 
AT24C64_SLAVE_ADDR
, 
	`WORD_ADDR_L
(
addr
),

77 
WORD_ADDR_L_LEN
, 
buf
, 
Àn
);

79 
ªt
 = 
	`dw_i2c_ªad_öt
(
i2c_id
, 
AT24C64_SLAVE_ADDR
,

80 
	`WORD_ADDR_L
(
addr
), 
WORD_ADDR_L_LEN
, 
buf
, 
Àn
);

82  
ªt
;

83 
	}
}

	@drivers/axidma.c

1 
	~"ck810.h
"

2 
	~"d©©y≥.h
"

3 
	~"ötc.h
"

4 
	~"•i_n‹.h
"

5 
	~"axidma.h
"

6 
	~"ˇche.h
"

7 
	~"misc.h
"

8 
	~<°rög.h
>

10 
	#M2M_TEST_LEN
 64

	)

12 
	#LLI_ADDR
 0x10000000

	)

14 
CKSåu˘_IRQH™dÀr
 
	gúqh™dÀr
;

15 
CK_UINT8
 
	göãºu±_Êag
 = 0;

16 
CK_UINT32
 
	göãºu±_›í
 = 0;

18 vﬁ©ûê
CK_UINT32
 
	gchx_I¡îVÆ
[
AXI_DMAC_MAX_CHANNELS
];

23 
	$CHOSE_TYPE
(
CK_UINT32
 
ty≥
){

24 
öãºu±_›í
 = 
ty≥
;

25 
	}
}

30 
	$CK_AXIDMA_ID_REG_Te°
()

32 
CK_UINT32
 
id
;

33 
id
 = 
	`ªad_mªg32
(
AXI_DMAC_IDREG
);

34 i‡(
id
 !
AXI_DMAC_ID
)

35 
	`¥ötf
("AXIDMA ID ERROR!, gë:%d\n", 
id
);

37 
	`¥ötf
("AXIDMA ID:0x%d\n", 
id
);

38 
	}
}

43 
CK_UINT32
 
	$ˇl_block_ts
(
CK_UINT32
 
§c_width
, CK_UINT32 
Àngth
)

45 
CK_UINT32
 
tmp1
 = 
§c_width
+3;

46 
CK_UINT32
 
tmp2
 = 1;

47 
tmp1
) {

48 
tmp2
 =Åmp2 * 2;

49 
tmp1
--;

51 
CK_UINT32
 
block_ts
 = ((
Àngth
 * 8Ë/ 
tmp2
) - 1;

52  
block_ts
;

53 
	}
}

58 
ölöe
 
	$CK_Cache_Flush
()

60 #i‡
CONFIG_CKCPU_MMU


61 
	`CK_Cache_FlushAŒ
();

63 
	}
}

68 
	$AXI_DMA_OPEN
()

71 
	`wrôe_mªg32
(
AXI_DMAC_CFGREG
, 
AXI_DMAC_EN
 | 
AXI_DMAC_INT_EN
);

72 
	}
}

77 
	$AXI_DMA_CLOSE
()

80 
	`wrôe_mªg32
(
AXI_DMAC_CFGREG
, 
AXI_DMAC_DE
 | 
AXI_DMAC_INT_DE
);

83 
	`CK_INTC_FªeIrq
(&
úqh™dÀr
, 
AUTO_MODE
);

84 
öãºu±_Êag
 = 0;

85 
	}
}

90 
	$AXI_DMA_CHx_SATRT
(
CK_UINT32
 
ch™√l
)

93 
	`wrôe_mªg32
(
AXI_DMAC_CHENREG
, 
	`CHx_EN
(
ch™√l
Ë| 
	`CHx_EN_WE
(channel));

94 
	}
}

99 
	$AXI_DMA_CHx_ENABLEINT
(
CK_UINT32
 
ch™√l
)

102 
	`wrôe_mªg32
(
	`CHx_INTSIGNAL_ENABLEREG
(
ch™√l
), 
CHx_INSIGNAL_EN_DMA_TFR_DONE
);

103 
	}
}

108 
	$AXI_DMA_CHx_CLEARINT
(
CK_UINT32
 
ch™√l
)

111 
	`wrôe_mªg32
(
	`CHx_INTCLEARREG
(
ch™√l
), 
CLEAR_DMA_TFR_DONE
);

112 
	}
}

117 
	$AXI_DMA_CHx_CLOSE
(
CK_UINT32
 
ch™√l
)

120 
	`wrôe_mªg32
(
AXI_DMAC_CHENREG
, 
	`CHx_DE
(
ch™√l
Ë| 
	`CHx_DE_WE
(channel));

121 
	}
}

126 
	$AXI_DMA_CHECKDONE
(
CK_UINT32
 
ch™√l
){

127 vﬁ©ûê
CK_UINT32
 
axi_dma_°©us
;

128 i‡(
öãºu±_›í
 == 1) {

129 (
chx_I¡îVÆ
[
ch™√l
-1] & 
DMA_TFR_DONE
) != DMA_TFR_DONE);

130 
chx_I¡îVÆ
[
ch™√l
-1] = 0;

132 
axi_dma_°©us
 = 
	`ªad_mªg32
(
	`CHx_INTSTATUS
(
ch™√l
));

133 (
axi_dma_°©us
 & 
DMA_TFR_DONE
) != DMA_TFR_DONE){

134 
axi_dma_°©us
 = 
	`ªad_mªg32
(
	`CHx_INTSTATUS
(
ch™√l
));

137 
	}
}

142 
	$axi_dma_úqH™dÀr
(
CK_UINT32
 
úq
)

144 
CK_UINT32
 
tmp_DMAC
, 
tmp_Comm⁄
, 
tmp_CHx
;

145 
CK_UINT32
 
CHx
, 
˙t
;

147 
tmp_DMAC
 = 
	`ªad_mªg32
(
AXI_DMAC_INTSTATUSREG
);

148 i‡((
tmp_DMAC
 & 
Comm⁄Reg_I¡Sèt
) == CommonReg_IntStat) {

150 
tmp_Comm⁄
 = 
	`ªad_mªg32
(
AXI_DMAC_COMMONREG_INTSTATUSREG
);

152 
	`wrôe_úam32
(
AXI_DMAC_COMMONREG_INTCLEARREG
, 
tmp_Comm⁄
);

154 i‡((
tmp_DMAC
 && 0xff) > 0) {

155 
CHx
 = (
tmp_DMAC
 & 0xff);

156 
˙t
=1; c¡ <
AXI_DMAC_MAX_CHANNELS
; cnt++) {

157 i‡(
	`CHx_I¡Sèt
(
˙t
Ë=
CHx
) {

159 
tmp_CHx
 = 
	`ªad_mªg32
(
	`CHx_INTSTATUS
(
˙t
));

160 
chx_I¡îVÆ
[
˙t
-1] = 
tmp_CHx
;

161 
	`wrôe_mªg32
(
	`CHx_INTCLEARREG
(
˙t
), 
tmp_CHx
);

166 
	}
}

171 
	$AXI_DMA_INIT
()

173 
	`AXI_DMA_CLOSE
();

175 i‡(
öãºu±_›í
 == 1) {

176 i‡(
öãºu±_Êag
 == 0) {

177 
	`mem£t
(&
úqh™dÀr
, 0, (irqhandler));

178 
úqh™dÀr
.
dev«me
 = "AXIDMA";

179 
úqh™dÀr
.
úqid
 = 
CK_INTC_AXIDMA
;

180 
úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_AXIDMA
;

181 
úqh™dÀr
.
h™dÀr
 = 
axi_dma_úqH™dÀr
;

182 
úqh™dÀr
.
bÁ°
 = 
FALSE
;

183 
úqh™dÀr
.
√xt
 = 
NULL
;

185 
	`CK_INTC_Reque°Irq
(&
úqh™dÀr
, 
AUTO_MODE
);

186 
öãºu±_Êag
 = 1;

189 
	`AXI_DMA_OPEN
();

190 
	}
}

195 
CK_UINT32
 
	$CHx_CONFIG
(
axi_dma_öfo
 
axi
, 
CK_UINT32
 
ty≥
){

197 
CK_UINT32
 
axi_d©a
 = 0x00;

198 i‡(
ty≥
 =
TYPE_SINGLE
)

199 
	`wrôe_mªg32
(
	`CHx_CFG_LOW
(
axi
.
ch™√l
), 0x00);

201 
	`wrôe_mªg32
(
	`CHx_CFG_LOW
(
axi
.
ch™√l
), 0xf);

203 
axi
.
dúe˘i⁄
)

205 
CHx_M2M_DMAC
:

206 
	`wrôe_mªg32
(
	`CHx_CFG_HIGH
(
axi
.
ch™√l
),áxi.
dúe˘i⁄
 | 
CHx_HS_SEL_SRC_S


207 | 
CHx_HS_SEL_DST_S
 | 
	`CHx_PRIOR
(
axi
.
ch™√l
));

209 
CHx_M2P_DMAC
:

210 
	`wrôe_mªg32
(
	`CHx_CFG_HIGH
(
axi
.
ch™√l
),áxi.
dúe˘i⁄
 | 
CHx_HS_SEL_SRC_S


211 | 
CHx_HS_SEL_DST_H
 | 
	`CHx_PRIOR
(
axi
.
ch™√l
));

213 
CHx_P2M_DMAC
:

214 
	`wrôe_mªg32
(
	`CHx_CFG_HIGH
(
axi
.
ch™√l
),áxi.
dúe˘i⁄
 | 
CHx_HS_SEL_SRC_H


215 | 
CHx_HS_SEL_DST_S
 | 
CHx_SRC_PER
 | 
	`CHx_PRIOR
(
axi
.
ch™√l
));

217 
CHx_P2P_DMAC
:

218 
	`wrôe_mªg32
(
	`CHx_CFG_HIGH
(
axi
.
ch™√l
),áxi.
dúe˘i⁄
 | 
CHx_HS_SEL_SRC_H


219 | 
CHx_HS_SEL_DST_H
 | 
	`CHx_PRIOR
(
axi
.
ch™√l
));

224 
axi_d©a
 = 
	`CHx_DST_MSIZE
(
axi
.
d°_msize
Ë| 
	`CHx_SRC_MSIZE
◊xi.
§c_msize
)

225 | 
	`CHx_DST_WIDTH
(
axi
.
d°_width
Ë| 
	`CHx_SRC_WIDTH
◊xi.
§c_width
);

227 
axi
.
dúe˘i⁄
)

229 
CHx_M2M_DMAC
:

230 if(
axi
.
ch™√l
 == 1 ||áxi.channel == 2)

233 
axi_d©a
 |
CHx_SMS
 | 
CHx_DMS
;

235 
CHx_M2P_DMAC
:

236 if(
axi
.
ch™√l
 == 1 ||áxi.channel == 2)

237 
axi_d©a
 |
CHx_DINC
;

239 
axi_d©a
 |
CHx_DINC
 | 
CHx_SMS
 | 
CHx_DMS
;

241 
CHx_P2M_DMAC
:

242 if(
axi
.
ch™√l
==1 ||áxi.channel==2)

243 
axi_d©a
 |
CHx_SINC
;

245 
axi_d©a
 |
CHx_SINC
 | 
CHx_SMS
 | 
CHx_DMS
;

247 
CHx_P2P_DMAC
:

248 if(
axi
.
ch™√l
==1 ||áxi.channel==2){

249 
axi_d©a
 |
CHx_SINC
 | 
CHx_DINC
;

251 
axi_d©a
 |
CHx_SINC
 | 
CHx_DINC
 | 
CHx_SMS
 | 
CHx_DMS
;

255 i‡(
ty≥
 =
TYPE_SINGLE
) {

256 
	`wrôe_mªg32
(
	`CHx_CTL_LOW
(
axi
.
ch™√l
), 
axi_d©a
);

257 
axi_d©a
 = 0x00;

258 
	`wrôe_mªg32
(
	`CHx_CTL_HIGH
(
axi
.
ch™√l
), 
axi_d©a
);

261 
	`AXI_DMA_CHx_ENABLEINT
(
axi
.
ch™√l
);

263  
axi_d©a
;

264 
	}
}

269 
	$AXI_DMA_TRAN_INIT
(
axi_dma_öfo
 
axi
, 
CK_UINT32
 
§c_addr
,

270 
CK_UINT32
 
d°_addr
, CK_UINT32 
Àngth
)

272 
CK_UINT32
 
block_ts
;

274 
	`AXI_DMA_INIT
();

277 
	`wrôe_mªg32
(
	`CHx_SAR
(
axi
.
ch™√l
), 
§c_addr
);

278 
	`wrôe_mªg32
(
	`CHx_DAR
(
axi
.
ch™√l
), 
d°_addr
);

281 
block_ts
 = 
	`ˇl_block_ts
(
axi
.
§c_width
, 
Àngth
);

282 
	`wrôe_mªg32
(
	`CHx_BLOCK_TS
(
axi
.
ch™√l
), 
block_ts
);

284 
	`CHx_CONFIG
(
axi
, 
TYPE_SINGLE
);

285 
	}
}

290 
	$AXI_DMA_TRAN_INIT_LLI
(
axi_dma_öfo
 
axi
, 
CK_UINT32
 
§c_addr
,

291 
CK_UINT32
 
d°_addr
, CK_UINT32 
Àngth
)

293 
axi_d©a
;

295 
	`AXI_DMA_INIT
();

297 
axi_d©a
 = 
	`CHx_CONFIG
(
axi
, 
TYPE_LLI
);

299 
axi_dma_Œi
* 
hód
 = (*)
LLI_ADDR
;

300 
axi_dma_Œi
* 
tmp
 = 
hód
;

301 
CK_UINT32
 
num
 = 1;

302 
tmp
->
Œp
 !()
NULL
) {

303 
tmp
 = (
axi_dma_Œi
*)(
CK_INT32
Èmp->
Œp
;

304 
num
++;

306 
tmp
 = 
hód
;

308 
CK_UINT32
 
˙t
;

309 
CK_UINT32
 
ö¸emít
 = 
Àngth
 / 
num
;

310 
CK_UINT32
 
block_ts
 = 
	`ˇl_block_ts
(
axi
.
§c_width
, 
ö¸emít
);

312 
˙t
 = 0; c¡ < 
num
; cnt++) {

313 
tmp
->
ßr
 = 
§c_addr
 + 
ö¸emít
 * 
˙t
;

314 
tmp
->
d¨
 = 
d°_addr
 + 
ö¸emít
 * 
˙t
;

315 
tmp
->
block_ts_lo
 = 
block_ts
;

316 
tmp
->
˘l_lo
 = 
axi_d©a
;

317 i‡(
tmp
->
Œp
 =()
NULL
)

318 
tmp
->
˘l_hi
 = 
LAST_ITEM
 | 
VALID
;

320 
tmp
->
˘l_hi
 = 
NOT_LAST_ITEM
 | 
VALID
;

322 
tmp
 = (
axi_dma_Œi
*)(
CK_INT32
Èmp->
Œp
;

326 
	`wrôe_mªg32
(
	`CHx_LLP
(
axi
.
ch™√l
), 
LLI_ADDR
);

327 
	}
}

332 
	$AXI_DMA_TRANS
(
axi_dma_öfo
 
axi
)

334 
	`CK_Cache_Flush
();

336 
	`AXI_DMA_CHx_SATRT
(
axi
.
ch™√l
);

339 
axi
.
dúe˘i⁄
)

341 
CHx_M2P_DMAC
:

342 
	`wrôe_mªg32
(
	`CHx_SWHSSRCREG
(
axi
.
ch™√l
), 
OPEN_SRC_SWHS
);

344 
CHx_P2M_DMAC
:

345 
	`wrôe_mªg32
(
	`CHx_SWHSDSTREG
(
axi
.
ch™√l
), 
OPEN_DST_SWHS
);

347 
CHx_M2M_DMAC
:

348 
	`wrôe_mªg32
(
	`CHx_SWHSSRCREG
(
axi
.
ch™√l
), 
OPEN_SRC_SWHS
);

349 
	`wrôe_mªg32
(
	`CHx_SWHSDSTREG
(
axi
.
ch™√l
), 
OPEN_DST_SWHS
);

353 
	`AXI_DMA_CHECKDONE
(
axi
.
ch™√l
);

355 
	`AXI_DMA_CHx_CLEARINT
(
axi
.
ch™√l
);

357 
	`AXI_DMA_CHx_CLOSE
(
axi
.
ch™√l
);

359 
	`AXI_DMA_CLOSE
();

360 
	}
}

	@drivers/axidma.h

1 #i‚de‡
_AXI_DMA_H


2 
	#_AXI_DMA_H


	)

4 
	#AXI_DMAC_ID
 0x0

	)

6 
	#AXI_DMAC_MAX_CHANNELS
 4

	)

8 
	#DMA_TFR_DONE
 2

	)

13 
	#TYPE_SINGLE
 1

	)

14 
	#TYPE_LLI
 2

	)

20 
	#AXI_DMAC_IDREG
 (
CK_AXI_DMA_ADDRESS
 + 0x00)

	)

21 
	#AXI_DMAC_COMPVERREG
 (
CK_AXI_DMA_ADDRESS
 + 0x08)

	)

22 
	#AXI_DMAC_CFGREG
 (
CK_AXI_DMA_ADDRESS
 + 0x10)

	)

23 
	#AXI_DMAC_CHENREG
 (
CK_AXI_DMA_ADDRESS
 + 0x18)

	)

24 
	#AXI_DMAC_CHENREG2
 (
CK_AXI_DMA_ADDRESS
 + 0x20)

	)

25 
	#AXI_DMAC_CHSUSPREG
 (
CK_AXI_DMA_ADDRESS
 + 0x28)

	)

26 
	#AXI_DMAC_INTSTATUSREG
 (
CK_AXI_DMA_ADDRESS
 + 0x30)

	)

27 
	#AXI_DMAC_INTSTATUSREG2
 (
CK_AXI_DMA_ADDRESS
 + 0x30)

	)

28 
	#AXI_DMAC_COMMONREG_INTCLEARREG
 (
CK_AXI_DMA_ADDRESS
 + 0x38)

	)

29 
	#AXI_DMAC_COMMONREG_INTSTATUS_ENABLEREG
 (
CK_AXI_DMA_ADDRESS
 + 0x40)

	)

30 
	#AXI_DMAC_COMMONREG_INTSIGNAL_ENABLEREG
 (
CK_AXI_DMA_ADDRESS
 + 0x48)

	)

31 
	#AXI_DMAC_COMMONREG_INTSTATUSREG
 (
CK_AXI_DMA_ADDRESS
 + 0x50)

	)

32 
	#AXI_DMAC_RESETREG
 (
CK_AXI_DMA_ADDRESS
 + 0x58)

	)

33 
	#AXI_DMAC_LOWPOWER_CFGREG
 (
CK_AXI_DMA_ADDRESS
 + 0x60)

	)

38 
	#CHx_SAR_OFFSET
 0x100

	)

39 
	#CHx_DAR_OFFSET
 0x108

	)

40 
	#CHx_BLOCK_TS_OFFSET
 0x110

	)

41 
	#CHx_CTL_OFFSET
 0x118

	)

42 
	#CHx_CFG_OFFSET
 0x120

	)

43 
	#CHx_LLP_OFFSET
 0x128

	)

44 
	#CHx_STATUSREG_OFFSET
 0x130

	)

45 
	#CHx_SWHSSRCREG_OFFSET
 0x138

	)

46 
	#CHx_SWHSDSTREG_OFFSET
 0x140

	)

47 
	#CHx_BLK_TFR_RESUMEREQREG_OFFSET
 0x148

	)

48 
	#CHx_AXI_IDREG_OFFSET
 0x150

	)

49 
	#CHx_AXI_QOSREG_OFFSET
 0x158

	)

50 
	#CHx_SSTAT_OFFSET
 0x160

	)

51 
	#CHx_DSTAT_OFFSET
 0x168

	)

52 
	#CHx_SSTATAR_OFFSET
 0x170

	)

53 
	#CHx_DSTATAR_OFFSET
 0x178

	)

54 
	#CHx_INTSTATUS_ENABLEREG_OFFSET
 0x180

	)

55 
	#CHx_INTSTATUS_OFFSET
 0x188

	)

56 
	#CHx_INTSIGNAL_ENABLEREG_OFFSET
 0x190

	)

57 
	#CHx_INTCLEARREG_OFFSET
 0x198

	)

59 
	#CHx_SAR
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_SAR_OFFSET
 + (x-1)*0x100)

	)

60 
	#CHx_DAR
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_DAR_OFFSET
 + (x-1)*0x100)

	)

61 
	#CHx_BLOCK_TS
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_BLOCK_TS_OFFSET
 + (x-1)*0x100)

	)

62 
	#CHx_CTL_LOW
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_CTL_OFFSET
 + (x-1)*0x100)

	)

63 
	#CHx_CTL_HIGH
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + (
CHx_CTL_OFFSET
 + 4Ë+ (x-1)*0x100)

	)

64 
	#CHx_CFG_LOW
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_CFG_OFFSET
 + (x-1)*0x100)

	)

65 
	#CHx_CFG_HIGH
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + (
CHx_CFG_OFFSET
 + 4Ë+ (x-1)*0x100)

	)

66 
	#CHx_LLP
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_LLP_OFFSET
 + (x-1)*0x100)

	)

67 
	#CHx_STATUSREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_STATUSREG_OFFSET
 + (x-1)*0x100)

	)

68 
	#CHx_SWHSSRCREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_SWHSSRCREG_OFFSET
 + (x-1)*0x100)

	)

69 
	#CHx_SWHSDSTREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_SWHSDSTREG_OFFSET
 + (x-1)*0x100)

	)

70 
	#CHx_BLK_TFR_RESUMEREQREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_BLK_TFR_RESUMEREQREG_OFFSET
 + (x-1)*0x100)

	)

71 
	#CHx_AXI_IDREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_AXI_IDREG_OFFSET
 + (x-1)*0x100)

	)

72 
	#CHx_AXI_QOSREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_AXI_QOSREG_OFFSET
 + (x-1)*0x100)

	)

73 
	#CHx_SSTAT
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_SSTAT_OFFSET
 + (x-1)*0x100)

	)

74 
	#CHx_DSTAT
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_DSTAT_OFFSET
 + (x-1)*0x100)

	)

75 
	#CHx_SSTATAR
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_SSTATAR_OFFSET
 + (x-1)*0x100)

	)

76 
	#CHx_DSTATAR
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_DSTATAR_OFFSET
 + (x-1)*0x100)

	)

77 
	#CHx_INTSTATUS_ENABLEREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_INTSTATUS_ENABLEREG_OFFSET
 + (x-1)*0x100)

	)

78 
	#CHx_INTSTATUS
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_INTSTATUS_OFFSET
 + (x-1)*0x100)

	)

79 
	#CHx_INTSIGNAL_ENABLEREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_INTSIGNAL_ENABLEREG_OFFSET
 + (x-1)*0x100)

	)

80 
	#CHx_INTCLEARREG
(
x
Ë(
CK_AXI_DMA_ADDRESS
 + 
CHx_INTCLEARREG_OFFSET
 + (x-1)*0x100)

	)

85 
	#AXI_DMAC_EN
 (1<<0)

	)

86 
	#AXI_DMAC_DE
 (0<<0)

	)

87 
	#AXI_DMAC_INT_EN
 (1<<1)

	)

88 
	#AXI_DMAC_INT_DE
 (0<<1)

	)

93 
	#CHx_EN
(
x
Ë(1<<(x-1))

	)

94 
	#CHx_DE
(
x
Ë(0<<(x-1))

	)

95 
	#CHx_EN_WE
(
x
Ë(1<<(x+(
AXI_DMAC_MAX_CHANNELS
+4)-1))

	)

96 
	#CHx_DE_WE
(
x
Ë(0<<(x+(
AXI_DMAC_MAX_CHANNELS
+4)-1))

	)

101 
	#CHx_I¡Sèt
(
x
Ë(1<<(x-1))

	)

102 
	#Comm⁄Reg_I¡Sèt
 (1<<16)

	)

106 
	#CHx_DST_MSIZE
(
x
Ë(x<<18)

	)

107 
	#CHx_SRC_MSIZE
(
x
Ë(x<<14)

	)

108 
	#CHx_DST_WIDTH
(
x
Ë(x<<11)

	)

109 
	#CHx_SRC_WIDTH
(
x
Ë(x<<8)

	)

110 
	#CHx_DINC
 (1<<6)

	)

111 
	#CHx_SINC
 (1<<4)

	)

112 
	#CHx_DMS
 (0<<2)

	)

113 
	#CHx_SMS
 (0<<0)

	)

114 
	#LAST_ITEM
 (1<<30)

	)

115 
	#NOT_LAST_ITEM
 (0<<30)

	)

116 
	#VALID
 (1<<31)

	)

117 
	#INVALID
 (0<<31)

	)

122 
	#CHx_M2M_DMAC
 (0<<0)

	)

123 
	#CHx_M2P_DMAC
 (1<<0)

	)

124 
	#CHx_P2M_DMAC
 (2<<0)

	)

125 
	#CHx_P2P_DMAC
 (3<<0)

	)

126 
	#CHx_P2M_SRC
 (4<<0)

	)

127 
	#CHx_P2P_SRC
 (5<<0)

	)

128 
	#CHx_M2P_DST
 (6<<0)

	)

129 
	#CHx_P2P_DST
 (7<<0)

	)

130 
	#CHx_HS_SEL_SRC_H
 (0<<3)

	)

131 
	#CHx_HS_SEL_SRC_S
 (1<<3)

	)

132 
	#CHx_HS_SEL_DST_H
 (0<<4)

	)

133 
	#CHx_HS_SEL_DST_S
 (1<<4)

	)

134 
	#CHx_SRC_PER
 (1<<7)

	)

135 
	#CHx_PRIOR
(
x
Ë((x-1)<<17)

	)

140 
	#ACTIVE_SWHS_REQ_SRC
 (1<<0)

	)

141 
	#INACTIVE_SWHS_REQ_SRC
 (0<<0)

	)

142 
	#ENABLE_SWHS_REQ_SRC
 (1<<1)

	)

143 
	#DISABLE_SWHS_REQ_SRC
 (0<<1)

	)

144 
	#ACTIVE_SWHS_SGLREQ_SRC
 (1<<2)

	)

145 
	#INACTIVE_SWHS_SGLREQ_SRC
 (0<<2)

	)

146 
	#ENABLE_SWHS_SGLREQ_SRC
 (1<<3)

	)

147 
	#DISABLE_SWHS_SGLREQ_SRC
 (0<<3)

	)

148 
	#OPEN_SRC_SWHS
 0xf

	)

153 
	#ACTIVE_SWHS_REQ_DST
 (1<<0)

	)

154 
	#INACTIVE_SWHS_REQ_DST
 (0<<0)

	)

155 
	#ENABLE_SWHS_REQ_DST
 (1<<1)

	)

156 
	#DISABLE_SWHS_REQ_DST
 (0<<1)

	)

157 
	#ACTIVE_SWHS_SGLREQ_DST
 (1<<2)

	)

158 
	#INACTIVE_SWHS_SGLREQ_DST
 (0<<2)

	)

159 
	#ENABLE_SWHS_SGLREQ_DST
 (1<<3)

	)

160 
	#DISABLE_SWHS_SGLREQ_DST
 (0<<3)

	)

161 
	#OPEN_DST_SWHS
 0xf

	)

166 
	#CHx_INSIGNAL_EN_DMA_TFR_DONE
 (1<<1)

	)

171 
	#CLEAR_DMA_TFR_DONE
 (1<<1)

	)

176 
	saxi_dma_öfo
{

177 
u32
 
	m§c_msize
;

178 
u32
 
	md°_msize
;

179 
u32
 
	m§c_width
;

180 
u32
 
	md°_width
;

181 
u32
 
	mch™√l
;

182 
u32
 
	mdúe˘i⁄
;

185 
	saxi_dma_Œi
 {

186 
u64
 
	mßr
;

187 
u64
 
	md¨
;

188 
u32
 
	mblock_ts_lo
;

189 
u32
 
	mblock_ts_hi
;

190 
u64
 
	mŒp
;

191 
u32
 
	m˘l_lo
;

192 
u32
 
	m˘l_hi
;

193 
u32
 
	ms°©
;

194 
u32
 
	md°©
;

195 
u32
 
	m°©us_lo
;

196 
u32
 
	m°°us_hi
;

197 
u32
 
	mª£rved_lo
;

198 
u32
 
	mª£rved_hi
;

201 
	eSRC_MSIZE
{

202 
	mSRC_MSIZE1
 = 0,

203 
	mSRC_MSIZE4
,

204 
	mSRC_MSIZE8
,

205 
	mSRC_MSIZE16
,

206 
	mSRC_MSIZE32
,

207 
	mSRC_MSIZE64
,

208 
	mSRC_MSIZE128
,

209 
	mSRC_MSIZE256
,

210 
	mSRC_MSIZE512
,

211 
	mSRC_MSIZE1024


214 
	eDST_MSIZE
{

215 
	mDST_MSIZE1
 = 0,

216 
	mDST_MSIZE4
,

217 
	mDST_MSIZE8
,

218 
	mDST_MSIZE16
,

219 
	mDST_MSIZE32
,

220 
	mDST_MSIZE64
,

221 
	mDST_MSIZE128
,

222 
	mDST_MSIZE256
,

223 
	mDST_MSIZE512
,

224 
	mDST_MSIZE1024


227 
	eSRC_WIDTH
{

228 
	mSRC_WIDTH8
 = 0,

229 
	mSRC_WIDTH16
,

230 
	mSRC_WIDTH32
,

231 
	mSRC_WIDTH64
,

232 
	mSRC_WIDTH128
,

233 
	mSRC_WIDTH256
,

234 
	mSRC_WIDTH512


237 
	eDST_WIDTH
{

238 
	mDST_WIDTH8
 = 0,

239 
	mDST_WIDTH16
,

240 
	mDST_WIDTH32
,

241 
	mDST_WIDTH64
,

242 
	mDST_WIDTH128
,

243 
	mDST_WIDTH256
,

244 
	mDST_WIDTH512


250 
CHOSE_TYPE
(
CK_UINT32
 
ty≥
);

252 
AXI_DMA_TRAN_INIT
(
axi_dma_öfo
 
axi
, 
CK_UINT32
 
§c_addr
, CK_UINT32 
d°_addr
, CK_UINT32 
Àngth
);

254 
AXI_DMA_TRAN_INIT_LLI
(
axi_dma_öfo
 
axi
, 
CK_UINT32
 
§c_addr
, CK_UINT32 
d°_addr
, CK_UINT32 
Àngth
);

256 
AXI_DMA_TRANS
(
axi_dma_öfo
 
axi
);

	@drivers/ckiic.h

15 #i‚de‡
__CKWDT_H__


16 
	#__CKWDT_H__


	)

18 
	~"ck810.h
"

19 
	~"d©©y≥.h
"

20 
	~"ötc.h
"

25 
	#CK_I2C_IRQ0
 
CK_INTC_I2C0


	)

26 
	#CK_I2C_IRQ1
 
CK_INTC_I2C1


	)

27 
	#CK_I2C_IRQ2
 
CK_INTC_I2C2


	)

28 
	#CK_I2C_IRQ3
 
CK_INTC_I2C3


	)

30 
	sCKS_I2C


32 vﬁ©ûê
CK_REG
 
	mic_c⁄
;

33 vﬁ©ûê
CK_REG
 
	mic_èr
;

34 vﬁ©ûê
CK_REG
 
	mic_ßr
;

35 vﬁ©ûê
CK_REG
 
	mic_hs_maddr
;

36 vﬁ©ûê
CK_REG
 
	mic_cmd_d©a
;

37 vﬁ©ûê
CK_REG
 
	mic_ss_s˛_h˙t
;

38 vﬁ©ûê
CK_REG
 
	mic_ss_s˛_l˙t
;

39 vﬁ©ûê
CK_REG
 
	mic_fs_s˛_h˙t
;

40 vﬁ©ûê
CK_REG
 
	mic_fs_s˛_l˙t
;

41 vﬁ©ûê
CK_REG
 
	mic_hs_s˛_h˙t
;

42 vﬁ©ûê
CK_REG
 
	mic_hs_s˛_l˙t
;

43 vﬁ©ûê
CK_REG
 
	mic_öå_°©
;

44 vﬁ©ûê
CK_REG
 
	mic_öå_mask
;

45 vﬁ©ûê
CK_REG
 
	mic_øw_öå_°©
;

46 vﬁ©ûê
CK_REG
 
	mic_rx_é
;

47 vﬁ©ûê
CK_REG
 
	mic_tx_é
;

48 vﬁ©ûê
CK_REG
 
	mic_˛r_öå
;

49 vﬁ©ûê
CK_REG
 
	mic_˛r_rx_undî
;

50 vﬁ©ûê
CK_REG
 
	mic_˛r_rx_ovî
;

51 vﬁ©ûê
CK_REG
 
	mic_˛r_tx_ovî
;

52 vﬁ©ûê
CK_REG
 
	mic_˛r_rd_ªq
;

53 vﬁ©ûê
CK_REG
 
	mic_˛r_tx_abπ
;

54 vﬁ©ûê
CK_REG
 
	mic_˛r_rx_d⁄e
;

55 vﬁ©ûê
CK_REG
 
	mic_˛r_a˘ivôy
;

56 vﬁ©ûê
CK_REG
 
	mic_˛r_°›_dë
;

57 vﬁ©ûê
CK_REG
 
	mic_˛r_°¨t_dë
;

58 vﬁ©ûê
CK_REG
 
	mic_˛r_gí_ˇŒ
;

59 vﬁ©ûê
CK_REG
 
	mic_íabÀ
;

60 vﬁ©ûê
CK_REG
 
	mic_°©us
;

61 vﬁ©ûê
CK_REG
 
	mic_txÊr
;

62 vﬁ©ûê
CK_REG
 
	mic_rxÊr
;

63 vﬁ©ûê
CK_REG
 
	mic_sda_hﬁd
;

64 vﬁ©ûê
CK_REG
 
	mic_tx_abπ_sour˚
;

65 vﬁ©ûê
CK_REG
 
	mic_¶v_d©a_«ck_⁄ly
;

66 vﬁ©ûê
CK_REG
 
	mic_dma_¸
;

67 vﬁ©ûê
CK_REG
 
	mic_dma_tdÃ
;

68 vﬁ©ûê
CK_REG
 
	mic_dma_rdÃ
;

69 vﬁ©ûê
CK_REG
 
	mic_sda_£tup
;

70 vﬁ©ûê
CK_REG
 
	mic_ack_gíîÆ_ˇŒ
;

71 vﬁ©ûê
CK_REG
 
	mic_íabÀ_°©us
;

72 vﬁ©ûê
CK_REG
 
	mic_fs_•kÀn
;

73 vﬁ©ûê
CK_REG
 
	mic_hs_•kÀn
;

74 vﬁ©ûê
CK_REG
 
	mic_˛r_ª°¨t_dë
;

75 } 
	tCKSåu˘_I2C
,* 
	tPCKPSåu˘_I2C
;

77 
	sCK_I2C_Info_t
 {

78 
CK_UINT32
 
	mid
;

79 
PCKPSåu˘_I2C
 
	maddr
;

80 
CK_UINT32
 
	múq
;

81 
BOOL
 
	mb›íed
;

82 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

83 } 
	tCKSåu˘_I2CInfo
, * 
	tPCKSåu˘_I2CInfo
;

	@drivers/ckintc.h

12 #i‚de‡
_CKINTC_H_


13 
	#_CKINTC_H_


	)

15 
	~"ck810.h
"

18 
	sCKS_INTC


20 vﬁ©ûê
CK_REG
 
	mICR_ISR
;

21 vﬁ©ûê
CK_REG
 
	mRev0
;

22 vﬁ©ûê
CK_REG
 
	mIFRL
;

23 vﬁ©ûê
CK_REG
 
	mIPRL
;

24 vﬁ©ûê
CK_REG
 
	mNIERL
;

25 vﬁ©ûê
CK_REG
 
	mNIPRL
;

26 vﬁ©ûê
CK_REG
 
	mFIERL
;

27 vﬁ©ûê
CK_REG
 
	mFIPRL
;

28 vﬁ©ûê
CK_REG
 
	mIFRH
;

29 vﬁ©ûê
CK_REG
 
	mIPRH
;

30 vﬁ©ûê
CK_REG
 
	mNIERH
;

31 vﬁ©ûê
CK_REG
 
	mNIPRH
;

32 vﬁ©ûê
CK_REG
 
	mFIERH
;

33 vﬁ©ûê
CK_REG
 
	mFIPRH
;

34 vﬁ©ûê
CK_REG
 
	mRev1
[2];

35 vﬁ©ûê
CK_REG
 
	mPR
[16];

36 vﬁ©ûê
CK_REG
 
	mRev2
[4];

37 vﬁ©ûê
CK_REG
 
	mIMASKRL
;

38 vﬁ©ûê
CK_REG
 
	mIMASKRH
;

39 vﬁ©ûê
CK_REG
 
	mRev3
[28];

40 vﬁ©ûê
CK_REG
 
	mIFRL1
;

41 vﬁ©ûê
CK_REG
 
	mIPRL1
;

42 vﬁ©ûê
CK_REG
 
	mNIERL1
;

43 vﬁ©ûê
CK_REG
 
	mNIPRL1
;

44 vﬁ©ûê
CK_REG
 
	mFIERL1
;

45 vﬁ©ûê
CK_REG
 
	mFIPRL1
;

46 vﬁ©ûê
CK_REG
 
	mIFRH1
;

47 vﬁ©ûê
CK_REG
 
	mIPRH1
;

48 vﬁ©ûê
CK_REG
 
	mNIERH1
;

49 vﬁ©ûê
CK_REG
 
	mNIPRH1
;

50 vﬁ©ûê
CK_REG
 
	mFIERH1
;

51 vﬁ©ûê
CK_REG
 
	mFIPRH1
;

52 vﬁ©ûê
CK_REG
 
	mRev4
[2];

53 vﬁ©ûê
CK_REG
 
	mPR1
[16];

54 vﬁ©ûê
CK_REG
 
	mRev5
[4];

55 vﬁ©ûê
CK_REG
 
	mIMASKRL1
;

56 vﬁ©ûê
CK_REG
 
	mIMASKRH1
;

57 }
	tCKSåu˘_INTC
, *
	tPCKSåu˘_INTC
;

60 
	#PCK_INTC
 ((
PCKSåu˘_INTC
)
CK_INTC_BASEADDRESS
)

	)

66 
	#ICR_AVE
 0x80000000

	)

67 
	#ICR_FVE
 0x40000000

	)

68 
	#ICR_ME
 0x20000000

	)

69 
	#ICR_MFI
 0x10000000

	)

75 #i‡
CK_128_INTC


76 
	#NR_IRQS
 128

	)

78 
	#NR_IRQS
 64

	)

80 
	#IRQ_MAX_TEST_NUM
 10

	)

	@drivers/ckpwm.c

9 
	~"ckpwm.h
"

10 
	~"ck810.h
"

12 
	#PWM_EN
 (0x01 << 0x0)

	)

13 
	#PWM_CENTER
 (0x01 << 0x01)

	)

14 
	#PWM_POLAR
 (0x01 << 0x02)

	)

15 
	#PWM_RESOLUT8
 (0x01 << 0x03)

	)

16 
	#PWM_REPET_NUMBER
(
x
Ë((x & 0xFFË<< 0x04)

	)

17 
	#PWM_REPET_NUMBER_MASK
 (0xFF << 0x04)

	)

20 
	#PWM_IRQEN
 (0x01 << 0x0)

	)

21 
	#PWM_CLR
 (0x01 << 0x01)

	)

22 
	#PWM_INT
 (0x01 << 0x02)

	)

23 
	#PWM_STATUS
 (0x01 << 0x03)

	)

24 
	#FIFO_STATUS_MASK
 (0x07 << 0x04)

	)

27 
	#PWM_CLKSEL_SCLK
 (0x01 << 0x0)

	)

28 
	#PWM_CLKSEL_ACLK
 (0x00)

	)

29 
	#PWM_CLKDIV_1
 (0x00 << 0x01)

	)

30 
	#PWM_CLKDIV_2
 (0x01 << 0x01)

	)

31 
	#PWM_CLKDIV_4
 (0x02 << 0x01)

	)

32 
	#PWM_CLKDIV_8
 (0x03 << 0x01)

	)

33 
	#PWM_CLKDIV_16
 (0x04 << 0x01)

	)

34 
	#PWM_CLKDIV_32
 (0x05 << 0x01)

	)

35 
	#PWM_CLKDIV_64
 (0x06 << 0x01)

	)

36 
	#PWM_RESCALE
(
x
Ë(((x - 1Ë& 0xffË<< 4)

	)

46 
CK_INT32
 
	$CK_PWM_£t_˛k
(
PCKSåu˘_PWMInfo
 
pwm
, 
u32
 
˛k_£l
, 
u8
 
div_ªg
, u8 
¥esˇÀ
)

48 
u32
 
fcy
 = 
PWM_PCLK_FREQ
;

50 
˛k_£l
)

52 
PWM_CLKSEL_SCLK
: 
fcy
 = 
PWM_SCLK_FREQ
; ;

53 
PWM_CLKSEL_ACLK
: 
fcy
 = 
PWM_PCLK_FREQ
; ;

56 i‡(0 =
¥esˇÀ
)

58 
	`¥ötf
("prescale canÇot setÅo 0!");

61 i‡(1 =
¥esˇÀ
)

63 
¥esˇÀ
 = 2;

66 
div_ªg
 = div_reg & 0x7;

67 
pwm
->
addr
->
˛k
 = 
˛k_£l
 | (
div_ªg
 << 1Ë| 
	`PWM_RESCALE
(
¥esˇÀ
);

69 
fcy
 = fcy >> (
div_ªg
 + 1);

70 
fcy
 /
¥esˇÀ
;

71 
pwm
->
˛k_fcy
 = 
fcy
;

73 
	}
}

75 
CK_INT32
 
	$CK_PWM_úq_íabÀ
(
PCKSåu˘_PWMInfo
 
pwm
)

77 
pwm
->
addr
->
c§
 |
PWM_IRQEN
;

78  
SUCCESS
;

79 
	}
}

80 
CK_INT32
 
	$CK_PWM_check_i§
(
PCKSåu˘_PWMInfo
 
pwm
)

82  (
pwm
->
addr
->
c§
 & 
PWM_INT
) ? 1 : 0;

83 
	}
}

85 
	$CK_PWM_˛r_i§
(
PCKSåu˘_PWMInfo
 
pwm
)

87 
pwm
->
addr
->
c§
 |
PWM_CLR
;

88 
pwm
->
addr
->
c§
 &~
PWM_CLR
;

89 
	}
}

96 
CK_INT32
 
	$CK_PWM_£t_out_fcy
(
PCKSåu˘_PWMInfo
 
pwm
, 
u32
 
fcy_hz
)

98 
u16
 
ªg
 = 
pwm
->
˛k_fcy
 / 
fcy_hz
;

99 
u32
 
fcy_out
 = 0;

100 i‡(0 =
ªg
)

102 
ªg
 = 1;

104 
pwm
->
addr
->
pwr
 = 
ªg
;

105 
fcy_out
 = 
pwm
->
˛k_fcy
 / 
ªg
;

107  
fcy_out
;

108 
	}
}

110 
CK_INT32
 
	$CK_PWM_£t_out_width
(
PCKSåu˘_PWMInfo
 
pwm
, 
u32
 
width
)

112 
u16
 
ªg
 = 0;

113 i‡(
pwm
->
addr
->
˘l
 & 
PWM_RESOLUT8
)

115 
ªg
 = 
width
 & 0xff;

116 
pwm
->
addr
->
pwr
 = ((
u8
)
ªg
 << 24)

117 | ((
u8
)
ªg
 << 16)

118 | ((
u8
)
ªg
 << 8)

119 | (
u8
)
ªg
;

123 
ªg
 = 
width
 & 0xffff;

124 
pwm
->
addr
->
pwr
 = (
ªg
 << 16) |Ñeg;

128 
	}
}

130 
CK_INT32
 
	$CK_PWM_£t_≥riod
(
PCKSåu˘_PWMInfo
 
pwm
, 
u32
 
≥riod
 )

132 
≥riod
 += 1;

133 i‡(
pwm
->
addr
->
˘l
 & 
PWM_RESOLUT8
)

135 
pwm
->
addr
->
¥d
 = 
≥riod
 & 0xff;

139 
pwm
->
addr
->
¥d
 = 
≥riod
 & 0xffff;

142 
	}
}

144 
CK_INT32
 
	$CK_PWM_gë_‰equícy
(
PCKSåu˘_PWMInfo
 
pwm
)

146 
CK_INT32
 
out_‰cy
 = 0;

147 i‡(
pwm
->
addr
->
˘l
 & 
PWM_RESOLUT8
)

149 
out_‰cy
 = 
pwm
->
˛k_fcy
 / (’wm->
addr
->
¥d
 & 0xff) - 1);

153 
out_‰cy
 = 
pwm
->
˛k_fcy
 / (’wm->
addr
->
¥d
 & 0xffff) - 1);

155  
out_‰cy
;

156 
	}
}

158 
CK_INT32
 
	$CK_PWM_gë_duty
(
PCKSåu˘_PWMInfo
 
pwm
)

160 
CK_INT32
 
out_duty
 = 0;

161 i‡(
pwm
->
addr
->
˘l
 & 
PWM_RESOLUT8
)

163 
out_duty
 = (
pwm
->
addr
->
pwr
 & 0xffË* 100 / (pwm->addr->
¥d
 & 0xff);

167 
out_duty
 = (
pwm
->
addr
->
pwr
 & 0xffffË* 100 / (pwm->addr->
¥d
 & 0xffff);

169  
out_duty
;

170 
	}
}

178 
CK_INT32
 
	$CK_PWM_£t_dißbÀ_mode
(
PCKSåu˘_PWMInfo
 
pwm
)

180 
pwm
->
addr
->
˘l
 = 0x0;

182 
	}
}

183 
CK_INT32
 
	$CK_PWM_£t_kìpout_mode
(
PCKSåu˘_PWMInfo
 
pwm
)

185 
pwm
->
addr
->
˘l
 &~
PWM_REPET_NUMBER_MASK
;

186 
pwm
->
addr
->
˘l
 |
PWM_EN
;

188 
	}
}

190 
CK_INT32
 
	$CK_PWM_£t_ª≥©_mode
(
PCKSåu˘_PWMInfo
 
pwm
, 
u32
 
pul£_nb
)

193 
pwm
->
addr
->
˘l
 &~
	`PWM_REPET_NUMBER
(0xff);

194 
pwm
->
addr
->
˘l
 |
	`PWM_REPET_NUMBER
(
pul£_nb
);

195 
pwm
->
addr
->
˘l
 |
PWM_EN
;

197 
	}
}

199 
CK_INT32
 
	$CK_PWM_£t_pﬁ¨ôy_ªvî£d
(
PCKSåu˘_PWMInfo
 
pwm
, 
boﬁ
 
ªvî£d
)

202 i‡(
ªvî£d
)

203 
pwm
->
addr
->
˘l
 |
PWM_POLAR
;

205 
pwm
->
addr
->
˘l
 &~
PWM_POLAR
;

207 
	}
}

210 
CK_INT32
 
	$CK_PWM_£t_ªsﬁuti⁄
(
PCKSåu˘_PWMInfo
 
pwm
, 
boﬁ
 
u£_8ô_mode
)

213 i‡(
u£_8ô_mode
)

214 
pwm
->
addr
->
˘l
 |
PWM_RESOLUT8
;

216 
pwm
->
addr
->
˘l
 &~
PWM_RESOLUT8
;

218 
	}
}

228 
	#PWM_NUM
 8

	)

229 
CKSåu˘_PWMInfo
 
	gCK_PWM_TabÀ
[
PWM_NUM
];

230 
	gúq_åiggîed
 = 0;

234 
	$CK_Pwm_H™dÀr
(
CK_UINT32
 
úq
)

236 
CK_UINT32
 
i
;

237 #ifde‡
PWM_IRQ_DEBUG


238 
	`¥ötf
("[%s:%d]\n", 
__FUNCTION__
, 
__LINE__
);

240 
i
 = 0; i < 
PWM_NUM
; i++)

242 i‡((
	`CK_PWM_check_i§
(&
CK_PWM_TabÀ
[
i
]) ))

244 
	`CK_PWM_˛r_i§
(&
CK_PWM_TabÀ
[
i
]);

245 #ifde‡
PWM_IRQ_DEBUG


246 
	`¥ötf
("pwm[%d] irqÅriggîed!\n", 
i
);

248 
úq_åiggîed
 = 1;

251 
	}
}

253 
	$CK_PWM_ã°
()

255 
CK_UINT32
 
gë
;

256 
CK_UINT32
 
i
, 
j
;

257 
Áûed
 = 0;

258 
ã°_id
;

259 
u8
 
˛k_£l
, 
div_ªg
, 
¥esˇÀ
;

260 
	`¥ötf
("\nPWM Test. . . \n");

261 
i
 = 0; i < 8; i ++)

263 
CK_PWM_TabÀ
[
i
].
addr
 = (
PCKPSåu˘_PWM
)
	`PWM_BASE
(i);

264 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
dev«me
 = "PWM";

265 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
úqid
 = 
	`CK_INTC_PWM
(i);

266 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
¥i‹ôy
 = i;

267 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
h™dÀr
 = 
CK_Pwm_H™dÀr
;

268 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
bÁ°
 = 
FALSE
;

269 
CK_PWM_TabÀ
[
i
].
úqh™dÀr
.
√xt
 = 
NULL
;

271 
	`CK_INTC_Reque°Irq
(&(
CK_PWM_TabÀ
[
i
].
úqh™dÀr
), 
AUTO_MODE
);

275 
	`¥ötf
("\nplease input PWMÇumber (0 .. 7):");

276 
gë
 = 
	`gëch¨
();

277 
	`putch¨
(
gë
);

278 
ã°_id
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
gë
);

279 i‡((
ã°_id
 >= 0) && (test_id <= 7)) {

284 
	`CK_PWM_£t_dißbÀ_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

285 
úq_åiggîed
 = 0;

287 
	`¥ötf
("\nplease select PWM clk :");

288 
	`¥ötf
("\n0 -- APB_clk");

289 
	`¥ötf
("\n1 --Öwm slower clk");

290 
gë
 = 
	`gëch¨
();

291 
	`putch¨
(
gë
);

292 
˛k_£l
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
gë
);

293 i‡((
˛k_£l
 >= 0) && (clk_sel <= 1)) {

298 
	`¥ötf
("\nplease input PWM div_reg val(0 - 7) :");

299 
gë
 = 
	`gëch¨
();

300 
	`putch¨
(
gë
);

301 
div_ªg
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
gë
);

302 i‡((
div_ªg
 >= 0) && (div_reg <= 7)) {

307 
	`¥ötf
("\nplease input PWMÖrescale val(001 - 256) :");

308 
¥esˇÀ
 = 0;

309 
i
 = 100; i > 0; i /= 10)

311 
gë
 = 
	`gëch¨
();

312 
	`putch¨
(
gë
);

313 
¥esˇÀ
 +
	`asciô⁄um
((
CK_UINT8
 *)&
gë
Ë* 
i
;

315 i‡((
¥esˇÀ
 >= 1) && (prescale <= 256)) {

319 i‡(
˛k_£l
)

320 
˛k_£l
 = 
PWM_CLKSEL_SCLK
;

322 
˛k_£l
 = 
PWM_CLKSEL_ACLK
;

323 
	`CK_PWM_£t_˛k
(&
CK_PWM_TabÀ
[
ã°_id
], 
˛k_£l
, 
div_ªg
, 
¥esˇÀ
);

324 
	`¥ötf
("\ncou¡î fªquícy i†:%d", 
CK_PWM_TabÀ
[
ã°_id
].
˛k_fcy
);

326 
	`¥ötf
("\ncontinuous output 16bit mode");

328 
i
 = 1; i <= 3; i ++)

333 
j
 = 1; j <= 3; j++)

335 
	`CK_PWM_£t_ªsﬁuti⁄
(&
CK_PWM_TabÀ
[
ã°_id
], 0);

336 
	`CK_PWM_£t_˛k
(&
CK_PWM_TabÀ
[
ã°_id
], 
˛k_£l
, 
div_ªg
, 
¥esˇÀ
);

337 
	`CK_PWM_£t_≥riod
(&
CK_PWM_TabÀ
[
ã°_id
], 1000 * 
i
);

338 
	`CK_PWM_£t_out_width
(&
CK_PWM_TabÀ
[
ã°_id
], (1000 * 
i
Ë>> 
j
);

339 
	`CK_PWM_£t_kìpout_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

340 
	`CK_PWM_£t_pﬁ¨ôy_ªvî£d
(&
CK_PWM_TabÀ
[
ã°_id
], 0);

341 
	`¥ötf
("\¿ouçuàpul£ fªquícy: %d", 
	`CK_PWM_gë_‰equícy
(&
CK_PWM_TabÀ
[
ã°_id
]));

342 
	`¥ötf
("\¿ouçuàpul£ duty: %d%%", 
	`CK_PWM_gë_duty
(&
CK_PWM_TabÀ
[
ã°_id
]));

343 
	`¥ötf
("\n outputÖulseÖolarity : highÜevel");

344 
	`¥ötf
("\n Is frequency&duty&polarity correct?");

345 i‡(
	`CK_WaôF‹Rïly
() != 1) {

346 
Áûed
 = 1;

348 
	`CK_PWM_£t_pﬁ¨ôy_ªvî£d
(&
CK_PWM_TabÀ
[
ã°_id
], 1);

349 
	`¥ötf
("\n outputÖulseÖolarity :ÜowÜevel");

350 
	`¥ötf
("\n Is frequency&duty&polarity correct?");

351 i‡(
	`CK_WaôF‹Rïly
() != 1) {

352 
Áûed
 = 1;

354 
	`CK_PWM_£t_dißbÀ_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

359 #i‡
PWM_TEST_8BIT_CONTINUOUS_MODE


360 
	`¥ötf
("\ncontinuous output 8bit mode");

362 
i
 = 1; i <= 3; i ++)

364 
j
 = 1; j <= 3; j++)

366 
	`CK_PWM_£t_ªsﬁuti⁄
(&
CK_PWM_TabÀ
[
ã°_id
], 1);

367 
	`CK_PWM_£t_˛k
(&
CK_PWM_TabÀ
[
ã°_id
], 
˛k_£l
, 
div_ªg
, 
¥esˇÀ
);

368 
	`CK_PWM_£t_≥riod
(&
CK_PWM_TabÀ
[
ã°_id
], 80 * 
i
);

369 
	`CK_PWM_£t_out_width
(&
CK_PWM_TabÀ
[
ã°_id
], (80 * 
i
Ë>> 
j
);

370 
	`CK_PWM_£t_kìpout_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

371 
	`CK_PWM_£t_pﬁ¨ôy_ªvî£d
(&
CK_PWM_TabÀ
[
ã°_id
], 0);

372 
	`¥ötf
("\¿ouçuàpul£ fªquícy: %d HZ", 
	`CK_PWM_gë_‰equícy
(&
CK_PWM_TabÀ
[
ã°_id
]));

373 
	`¥ötf
("\¿ouçuàpul£ duty: %d%%", 
	`CK_PWM_gë_duty
(&
CK_PWM_TabÀ
[
ã°_id
]));

374 
	`¥ötf
("\n outputÖulseÖolarity : highÜevel");

375 
	`¥ötf
("\n Is frequency&duty&polarity correct?");

376 i‡(
	`CK_WaôF‹Rïly
() != 1) {

377 
Áûed
 = 1;

379 
	`CK_PWM_£t_pﬁ¨ôy_ªvî£d
(&
CK_PWM_TabÀ
[
ã°_id
], 1);

380 
	`¥ötf
("\n outputÖulseÖolarity :ÜowÜevel");

381 
	`¥ötf
("\n Is frequency&duty&polarity correct?");

382 i‡(
	`CK_WaôF‹Rïly
() != 1) {

383 
Áûed
 = 1;

385 
	`CK_PWM_£t_dißbÀ_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

389 
	`¥ötf
("\nrepeat output 8bit mode with irqÉn");

390 
	`CK_PWM_úq_íabÀ
(&
CK_PWM_TabÀ
[
ã°_id
]);

391 
i
 = 1; i <= 3; i ++)

393 
j
 = 1; j <= 3; j++)

395 
	`CK_PWM_£t_ªsﬁuti⁄
(&
CK_PWM_TabÀ
[
ã°_id
], 1);

396 
	`CK_PWM_£t_˛k
(&
CK_PWM_TabÀ
[
ã°_id
], 
˛k_£l
, 
div_ªg
, 
¥esˇÀ
);

397 
	`CK_PWM_£t_≥riod
(&
CK_PWM_TabÀ
[
ã°_id
], 80 * 
i
);

398 
	`CK_PWM_£t_out_width
(&
CK_PWM_TabÀ
[
ã°_id
], (80 * 
i
) >> 1);

399 
úq_åiggîed
 = 0;

400 
	`CK_PWM_£t_ª≥©_mode
(&
CK_PWM_TabÀ
[
ã°_id
], 
j
 << 2);

402 
	`¥ötf
("\¿ouçuàpul£ fªquícy: %d HZ", 
	`CK_PWM_gë_‰equícy
(&
CK_PWM_TabÀ
[
ã°_id
]));

403 
	`¥ötf
("\¿ouçuàpul£Çumbî: %d", (
j
 << 2) * 4);

404 
	`¥ötf
("\n Is frequency&pulseÇumber correct?");

405 i‡(
	`CK_WaôF‹Rïly
() != 1) {

406 
Áûed
 = 1;

408 i‡(0 =
úq_åiggîed
)

410 
Áûed
 = 1;

411 
	`¥ötf
("\nÖwm irqÅest failed !");

415 
	`¥ötf
("\nÖwm irqÅestÖass !");

417 
	`CK_PWM_£t_dißbÀ_mode
(&
CK_PWM_TabÀ
[
ã°_id
]);

421 i‡(
Áûed
)

422 
	`¥ötf
("\nÖwmÅest failed !");

424 
	`¥ötf
("\nÖwmÅestÖass !");

425 
	}
}

	@drivers/ckpwm.h

8 #i‚de‡
DRIVERS_CKPWM_H_


9 
	#DRIVERS_CKPWM_H_


	)

11 
	~"ck810.h
"

12 
	~"d©©y≥.h
"

13 
	~"ötc.h
"

15 
	sCKS_PWM


17 vﬁ©ûê
CK_REG
 
	m˘l
;

18 vﬁ©ûê
CK_REG
 
	mc§
;

19 vﬁ©ûê
CK_REG
 
	m˛k
;

20 vﬁ©ûê
CK_REG
 
	m¥d
;

21 vﬁ©ûê
CK_REG
 
	m˙t
;

22 vﬁ©ûê
CK_REG
 
	mpwr
;

23 } 
	tCKSåu˘_PWM
,* 
	tPCKPSåu˘_PWM
;

27 
CK_UINT32
 
	mid
;

28 
PCKPSåu˘_PWM
 
	maddr
;

29 
CK_UINT32
 
	múq
;

30 
BOOL
 
	mb›íed
;

31 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

32 
CK_UINT32
 
	m˛k_fcy
;

33 } 
	tCKSåu˘_PWMInfo
, *
	tPCKSåu˘_PWMInfo
;

35 
CK_PWM_ã°
();

	@drivers/cktimer.h

15 #i‚de‡
__CKTIMER_H__


16 
	#__CKTIMER_H__


	)

18 
	~"ck810.h
"

19 
	~"d©©y≥.h
"

20 
	~"ötc.h
"

25 
	#CK_TIMER_IRQ0
 
CK_INTC_TIM0


	)

26 
	#CK_TIMER_IRQ1
 
CK_INTC_TIM1


	)

27 
	#CK_TIMER_IRQ2
 
CK_INTC_TIM2


	)

28 
	#CK_TIMER_IRQ3
 
CK_INTC_TIM3


	)

29 
	#CK_TIMER_IRQ4
 
CK_INTC_TIM4


	)

30 
	#CK_TIMER_IRQ5
 
CK_INTC_TIM5


	)

31 
	#CK_TIMER_IRQ6
 
CK_INTC_TIM6


	)

32 
	#CK_TIMER_IRQ7
 
CK_INTC_TIM7


	)

34 
	sCKS_TIMER


36 vﬁ©ûê
CK_REG
 
	mTxLﬂdCou¡
;

37 vﬁ©ûê
CK_REG
 
	mTxCuºítVÆue
;

38 vﬁ©ûê
CK_REG
 
	mTxC⁄åﬁ
;

39 vﬁ©ûê
CK_REG
 
	mTxEOI
;

40 vﬁ©ûê
CK_REG
 
	mTxI¡Sètus
;

41 vﬁ©ûê
CK_REG
 
	mª£rve
[41];

42 vﬁ©ûê
CK_REG
 
	mTxLﬂdCou¡2
;

43 } 
	tCKSåu˘_TIMER
, *
	tPCKPSåu˘_TIMER
;

46 
CK_UINT32
 
	mid
;

47 
PCKPSåu˘_TIMER
 
	maddr
;

48 
CK_UINT32
 
	múq
;

49 
BOOL
 
	m›íed
;

50 
CK_UINT32
 
	mtimeout
;

51 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

52 } 
	tCKSåu˘_TimîInfo
, * 
	tPCKSåu˘_TimîInfo
;

57 
	#CK_TIMER_TXCONTROL_ENABLE
 (1UL << 0)

	)

58 
	#CK_TIMER_TXCONTROL_MODE
 (1UL << 1)

	)

59 
	#CK_TIMER_TXCONTROL_INTMASK
 (1UL << 2)

	)

63 
	sCKS_TIMER_CON


65 vﬁ©ûê
CK_REG
 
	mI¡Sètus
;

68 vﬁ©ûê
CK_REG
 
	mEOI
;

71 vﬁ©ûê
CK_REG
 
	mRawI¡Sètus
;

74 } 
	tCKSåu˘_TIMER_CON
,* 
	tPCKSåu˘_TIMER_CON
;

	@drivers/ckuart.h

12 #i‚de‡
__CKUART_H__


13 
	#__CKUART_H__


	)

15 
	~"ck810.h
"

16 
	~"d©©y≥.h
"

17 
	~"u¨t.h
"

18 
	~"cú˛ebuf„r.h
"

19 
	~"ötc.h
"

22 
	#CK_UART_RBR
 0x00

	)

23 
	#CK_UART_THR
 0x00

	)

24 
	#CK_UART_DLL
 0x00

	)

25 
	#CK_UART_IER
 0x01

	)

26 
	#CK_UART_DLH
 0x01

	)

27 
	#CK_UART_IIR
 0x02

	)

28 
	#CK_UART_FCR
 0x02

	)

29 
	#CK_UART_LCR
 0x03

	)

30 
	#CK_UART_MCR
 0x04

	)

31 
	#CK_UART_LSR
 0x05

	)

32 
	#CK_UART_MSR
 0x06

	)

33 
	#CK_UART_FAR
 0x1¯

	)

34 
	#CK_UART_TFR
 0x1d

	)

35 
	#CK_UART_RFW
 0x1ê

	)

36 
	#CK_UART_USR
 0x1‡

	)

37 
	#CK_UART_TFL
 0x20

	)

38 
	#CK_UART_RFL
 0x21

	)

39 
	#CK_UART_SRR
 0x22

	)

41 
	#UART_BUSY_TIMEOUT
 1000000

	)

42 
	#UART_RECEIVE_TIMEOUT
 1000

	)

43 
	#UART_TRANSMIT_TIMEOUT
 1000

	)

49 
	#USR_UART_BUSY
 0x01

	)

50 
	#LSR_DATA_READY
 0x01

	)

51 
	#LSR_THR_EMPTY
 0x20

	)

52 
	#IER_RDA_INT_ENABLE
 0x01

	)

53 
	#IER_THRE_INT_ENABLE
 0x02

	)

54 
	#IIR_NO_ISQ_PEND
 0x01

	)

56 
	#LCR_SET_DLAB
 0x80

	)

57 
	#LCR_PARITY_ENABLE
 0x08

	)

58 
	#LCR_PARITY_EVEN
 0x10

	)

59 
	#LCR_PARITY_ODD
 0xe‡

	)

60 
	#LCR_WORD_SIZE_5
 0xf¯

	)

61 
	#LCR_WORD_SIZE_6
 0x01

	)

62 
	#LCR_WORD_SIZE_7
 0x02

	)

63 
	#LCR_WORD_SIZE_8
 0x03

	)

64 
	#LCR_STOP_BIT1
 0xfb

	)

65 
	#LCR_STOP_BIT2
 0x04

	)

67 
	#MCR_SIRE
 0x40

	)

68 
	#MCR_AFCE
 0x20

	)

69 
	#MCR_RTS
 0x02

	)

70 
	#MCR_LOOPBACK
 0x10

	)

72 
	#CK_LSR_PFE
 0x80

	)

73 
	#CK_LSR_TEMT
 0x40

	)

74 
	#CK_LSR_THRE
 0x40

	)

75 
	#CK_LSR_BI
 0x10

	)

76 
	#CK_LSR_FE
 0x08

	)

77 
	#CK_LSR_PE
 0x04

	)

78 
	#CK_LSR_OE
 0x02

	)

79 
	#CK_LSR_DR
 0x01

	)

80 
	#CK_LSR_TRANS_EMPTY
 0x20

	)

82 
	#CK_UART0_IRQID
 
CK_INTC_UART0


	)

83 
	#CK_UART1_IRQID
 
CK_INTC_UART1


	)

84 
	#CK_UART2_IRQID
 
CK_INTC_UART2


	)

85 
	#CK_UART3_IRQID
 
CK_INTC_UART3


	)

86 
	#CK_UART4_IRQID
 
CK_INTC_UART4


	)

88 
	#CK_UART_DMA_MODE_SEL
 (1UL << 3)

	)

89 
	#CK_UART_DMA_MODE0
 0

	)

90 
	#CK_UART_DMA_MODE1
 1

	)

93 
	#FCR_RT_00
 0 << 6

	)

94 
	#FCR_RT_01
 1 << 6

	)

95 
	#FCR_RT_10
 2 << 6

	)

96 
	#FCR_RT_11
 3 << 6

	)

97 
	#FCR_TET_00
 0 << 4

	)

98 
	#FCR_TET_01
 1 << 4

	)

99 
	#FCR_TET_10
 2 << 4

	)

100 
	#FCR_TET_11
 3 << 4

	)

101 
	#FCR_FIFOE
 1 << 0

	)

104 
	#FAR_FIFO_ACCESS
 1 << 0

	)

106 
	#UART_FCR_FIFO_EN
 0x01

	)

107 
	#UART_FCR_RXSR
 0x02

	)

108 
	#UART_FCR_TXSR
 0x04

	)

112 
	#CK_UART_TXBUFFERSIZE
 4096

	)

113 
	#CK_UART_RXBUFFERSIZE
 4096

	)

114 
	sCK_UART_Info_t
 {

115 
CK_UINT32
 
	mid
;

116 vﬁ©ûê
CK_UINT32
* 
	maddr
;

117 
CK_UINT32
 
	múq
 ;

118 
BOOL
 
	mb›íed
;

119 (* 
	mh™dÀr
)(
CK_INT8
 
	mîr‹
);

120 
CK_U¨t_Baudøã
 
	mbaudøã
;

121 
CK_U¨t_P¨ôy
 
	m∑rôy
;

122 
CK_U¨t_W‹dSize
 
	mw‹d
;

123 
CK_U¨t_St›Bô
 
	m°›
;

124 
BOOL
 
	mbtxquîy
;

125 
BOOL
 
	mbrxquîy
;

126 
CK_UINT8
 
	mtxbuf„r
[
CK_UART_TXBUFFERSIZE
];

127 
CK_UINT8
 
	mrxbuf„r
[
CK_UART_RXBUFFERSIZE
];

128 
CKSåu˘_Cú˛eBuf„r
 
	mtxcú˛ebuf„r
;

129 
CKSåu˘_Cú˛eBuf„r
 
	mrxcú˛ebuf„r
;

130 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

131 } 
	tCKSåu˘_U¨tInfo
, *
	tPCKSåu˘_U¨tInfo
;

	@drivers/ckwdt.h

15 #i‚de‡
__CKWDT_H__


16 
	#__CKWDT_H__


	)

18 
	~"ck810.h
"

19 
	~"d©©y≥.h
"

20 
	~"ötc.h
"

25 
	#CK_WDT_CK860
 
CK_INTC_WDT_CK860


	)

26 
	#CK_WDT_CK810
 
CK_INTC_WDT_CK810


	)

27 
	#CK_WDT_UNI
 
CK_INTC_WDT_UNI


	)

29 
	sCKS_WDT


31 vﬁ©ûê
CK_REG
 
	mWDT_CR
;

32 vﬁ©ûê
CK_REG
 
	mWDT_TORR
;

33 vﬁ©ûê
CK_REG
 
	mWDT_CCVR
;

34 vﬁ©ûê
CK_REG
 
	mWDT_CRR
;

35 vﬁ©ûê
CK_REG
 
	mWDT_STAT
;

36 vﬁ©ûê
CK_REG
 
	mWDT_EOI
;

37 vﬁ©ûê
CK_REG
 
	mRev
[51];

38 vﬁ©ûê
CK_REG
 
	mWDT_COMP_PARAMS_5
;

39 vﬁ©ûê
CK_REG
 
	mWDT_COMP_PARAMS_4
;

40 vﬁ©ûê
CK_REG
 
	mWDT_COMP_PARAMS_3
;

41 vﬁ©ûê
CK_REG
 
	mWDT_COMP_PARAMS_2
;

42 vﬁ©ûê
CK_REG
 
	mWDT_COMP_PARAMS_1
;

43 vﬁ©ûê
CK_REG
 
	mWDT_COMP_VERSION
;

44 vﬁ©ûê
CK_REG
 
	mWDT_COMP_TYPE
;

45 } 
	tCKSåu˘_WDT
,* 
	tPCKPSåu˘_WDT
;

48 
CK_UINT32
 
	mid
;

49 
PCKPSåu˘_WDT
 
	maddr
;

50 
CK_UINT32
 
	múq
;

51 
BOOL
 
	mb›íed
;

52 
CK_UINT32
 
	mtimeout
;

53 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

54 } 
	tCKSåu˘_WDTInfo
, *
	tPCKSåu˘_WDTInfo
;

59 
	#CK_WDT_CR_ENABLE
 (1UL << 0)

	)

60 
	#CK_WDT_CR_RMOD
 (1UL << 1)

	)

61 
	#CK_WDT_CR_RPL
 (1UL << 2)

	)

63 
	#COUNTER_RST_CMD
 0x76

	)

65 
	#CK_WDT_SYSTEM_RST
 0

	)

66 
	#CK_WDT_INTC_RST
 1

	)

68 
CKSåu˘_WDTInfo
 
	gCK_WDT_TabÀ
[] =

70 {0, (
PCKPSåu˘_WDT
)
CK_WDT_CK860_ADDR
, 
CK_WDT_CK860
, 
FALSE
, 0},

71 {1, (
PCKPSåu˘_WDT
)
CK_WDT_CK810_ADDR
, 
CK_WDT_CK810
, 
FALSE
, 0},

72 {2, (
PCKPSåu˘_WDT
)
CK_WDT_UNI_ADDR
 , 
CK_WDT_UNI
 , 
FALSE
, 0},

75 
	#WDTRID_MAX
 ((
CK_WDT_TabÀ
Ë/ (
CKSåu˘_WDTInfo
))

	)

	@drivers/ddr.c

1 #i‚de‡
___DDR_TEST_TASK_H___


2 
	#___DDR_TEST_TASK_H___


	)

4 
	#RUN_DDR_IN_SPL_ENV
 1

	)

6 #i‡
RUN_DDR_IN_SPL_ENV


8 
	~"d©©y≥.h
"

9 
	~"misc.h
"

10 
	~"ck810.h
"

11 
	#ªg_ªad32
(
addr
Ë(*(vﬁ©ûê
u32
 *Ë◊dd∏+ 
PERI_BASE
))

	)

12 
	#ªg_wrôe32
(
addr
, 
vÆ
Ë((*(vﬁ©ûê
u32
 *Ë◊dd∏+ 
PERI_BASE
)Ë(vÆ))

	)

14 
	#SOFT_DEBUG_FOR_DDR


	)

15 
	#DRAM_öô_by_PHY


	)

17 #i‡
CONFIG_DDR4_1600_SUPPORT


18 
	#add_m¨gö


	)

19 
	#__DDR4_1600M__


	)

23 #i‡
CONFIG_DDR4_800_SUPPORT


24 
	#add_m¨gö


	)

25 
	#__DDR4_800M__


	)

30 
	~"˛ib.h
"

31 
	~"¥öt_Àd.h
"

32 
	~<°dio.h
>

35 
	~"ddr_Æl_ma¸o.h
"

36 
	~"ddr_chùã°_deföe.h
"

38 #i‡
RUN_DDR_IN_SPL_ENV


39 
	~"ddr_debug_ªg.h
"

42 
ddr_low_powî
 (
ddr_num
);

47 
	$¥öt_èsk
 (
°rög
[])

49 #ifde‡
SOFT_DEBUG_FOR_DDR


50 
	`¥ötf
("%s",
°rög
);

52 
	`¥öt_Àd
(
°rög
);

54 
	}
}

67 
	$ªad_ªg_dñay
 (
dñay
)

69 
ªad_d©a
 = 0 ;

70 
i
 ;

71 
i
=0;i<
dñay
;i=i+1) {

72 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200000) ;

74 
	}
}

77 
	$gëbôs
(
x
, 
p
, 
n
)

79  (
x
>>(
p
-
n
)) & (~(0xFFFFFFFF<<n));

80 
	}
}

83 
	$£tbôs
(
x
, 
p
, 
n
, 
y
)

85  (
x
&(~((~(0xFFFFFFFF<<
n
))<<(
p
-n)))Ë| ((
y
&(~(0xFFFFFFFF<<n)))<<(p-n));

86 
	}
}

92 
	$≠b_ª£t_ªÀa£
 (
ddr_num
)

94 
ªad_d©a
 = 0 ;

95 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200004) ;

96 
ªad_d©a
 =Ñód_d©®| (0x1 << (8+
ddr_num
)) ;

97 
ªad_d©a
 =Ñód_d©®| (0x1 << (12+
ddr_num
)) ;

98 
	`ªg_wrôe32
(0xF9200004 ,
ªad_d©a
 );

99 
	`¥öt_èsk
("ddr controller/PHYápbÑesetÑelease !\n");

100 
	}
}

102 
	$≠b_ª£t_ªÀa£_Æl
 ()

104 
	`ªg_wrôe32
(0xF9200004 ,0xFF00 );

105 
	}
}

107 
	$dmc_ª£t_ªÀa£
 (
ddr_num
)

109 
ªad_d©a
 = 0 ;

110 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200004) ;

111 
ªad_d©a
 =Ñód_d©®| (0x1 << 
ddr_num
) ;

112 
	`ªg_wrôe32
(0xF9200004 ,
ªad_d©a
 );

113 
	`¥öt_èsk
("ddr controllerÑesetÑelease !\n");

114 
	}
}

116 
	$dmc_ª£t_ªÀa£_Æl
 ()

118 
	`ªg_wrôe32
(0xF9200004 ,0xFF0F );

119 
	}
}

121 
	$phy_ª£t_ªÀa£
 (
ddr_num
)

123 
ªad_d©a
 = 0 ;

124 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200004) ;

125 
ªad_d©a
 =Ñód_d©®| (0x1 << (4+
ddr_num
)) ;

126 
	`ªg_wrôe32
(0xF9200004 , 
ªad_d©a
);

127 
	`¥öt_èsk
("ddrÖhyÑesetÑelease !\n");

128 
	}
}

130 
	$phy_ª£t_ªÀa£_Æl
 ()

132 
	`ªg_wrôe32
(0xF9200004 ,0xFFFF);

133 
	}
}

136 
	$axi_ª£t_ªÀa£
 (
ddr_num
)

138 
ªad_d©a
 = 0 ;

139 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200000) ;

140 
ªad_d©a
 =Ñód_d©®| (0x1F << (8*
ddr_num
)) ;

141 
	`ªg_wrôe32
(0xF9200000 ,
ªad_d©a
 );

142 
	`¥öt_èsk
("AXIÖortÑesetÑelease !\n");

143 
	}
}

145 
	$axi_ª£t_ªÀa£_Æl
 ()

147 
	`axi_ª£t_ªÀa£
 (0) ;

148 
	`axi_ª£t_ªÀa£
 (1) ;

149 
	`axi_ª£t_ªÀa£
 (2) ;

150 
	`axi_ª£t_ªÀa£
 (3) ;

151 
	}
}

158 
	$dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
)

160 
ªad_d©a
 = 0 ;

162 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWCTL
, 0x0);

164 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIMISC
);

165 
ªad_d©a
=Ñead_data|0x1 ;

166 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIMISC
 , 
ªad_d©a
);

169 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWCTL
, 0x1);

172 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWSTAT
);

173 
ªad_d©a
 =Ñead_data&0x00000001 ;

175 
ªad_d©a
 != 1);

176 
	}
}

181 
	$dfi_öô_com∂ëe_dis
(
ddr_˘æ_ba£_addr
)

183 
ªad_d©a
 = 0 ;

185 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWCTL
, 0x0);

187 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIMISC
 );

188 
ªad_d©a
 =read_data&0xFFFFFFFE ;

189 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIMISC
 , 
ªad_d©a
);

192 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWCTL
, 0x1);

195 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SWSTAT
);

196 
ªad_d©a
 =Ñead_data&0x00000001 ;

198 
ªad_d©a
 != 1);

199 
	}
}

202 
	$ddr_§f_pd_íabÀ
 ( 
ddr_˘æ_ba£_addr
)

204 
ªad_d©a
 = 0 ;

205 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PWRCTL
);

206 
ªad_d©a
 =Ñead_data | 0x3 ;

207 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PWRCTL
 , 
ªad_d©a
);

208 
	}
}

214 
	$dmc_cfg_maö
(
ddr_ty≥
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
)

216 
ªad_d©a
 = 0 ;

228 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MSTR
);

229 if(
ddr_ty≥
== 0){

230 
ªad_d©a
 = (read_data&0xFFFFFFEF)|0x00000010 ;

231 } if(
ddr_ty≥
 == 1){

232 
ªad_d©a
 = (read_data&0xFFFFFFFE)|0x00000001 ;

233 } if(
ddr_ty≥
 == 2){

234 
ªad_d©a
 = (read_data&0xFFFFFFF7)|0x00000008 ;

236 
	`¥öt_èsk
("Unsupported DDRÅype!\n");

239 if(
ddr_ty≥
==0) {

240 
ªad_d©a
 = (ªad_d©a&0x3FFFFFFFË+ (
dev_ty≥
<<30) ;

244 
ªad_d©a
 = (read_data&0xFFF0FFFF)|0x00040000 ;

245 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MSTR
 , 
ªad_d©a
 );

247 
	}
}

253 
	$dmc_cfg_timög
(
ddr_ty≥
, 
•ìd
,
ddr_˘æ_ba£_addr
)

255 if(
ddr_ty≥
 == 0) {

256 if(
•ìd
 == 0) {

258 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PWRTMG
 , 0x00221306);

259 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL0
 , 0x00210070);

260 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL1
 , 0x00010008);

261 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL3
 , 0x00000000);

262 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x009200D2);

264 #ifde‡
SOFT_DEBUG_FOR_DDR


265 #ifde‡
DRAM_öô_by_PHY


266 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xC0030126);

268 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00030126);

270 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00770000);

275 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010000);

278 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00000000);

283 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , ((
DDR4_2400_MODE_REG0
<<16)|(
DDR4_2400_MODE_REG1
)));

287 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , ((
DDR4_2400_MODE_REG2
<<16)|(
DDR4_2400_MODE_REG3
)));

290 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT5
 , 0x00110000);

294 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT6
 , ((
DDR4_2400_MODE_REG4
<<16)|(
DDR4_2400_MODE_REG5
)));

297 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT7
 , 
DDR4_2400_MODE_REG6
);

299 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0x11122914);

300 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x0004051C);

301 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x0608050D);

302 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x0000400C);

303 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x08030409);

304 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x06060403);

305 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG7
 , 0x00000606);

306 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG8
 , 0x05050D08);

307 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG9
 , 0x0002040A);

308 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG11
 , 0x1409010e);

309 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG12
 , 0x00000008);

310 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG15
 , 0x00000000);

312 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0x01000040);

313 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x0000493E);

318 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x038C820A);

324 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

326 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG0
 , 0x07F04011);

327 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG1
 , 0x000000B0);

328 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0xE0400018);

329 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD1
 , 0x0048005A);

330 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD2
 , 0x80000000);

332 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG2
 , 0x00000B07);

333 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG3
 , 0x00000004);

334 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DBICTL
 , 0x00000001);

335 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIPHYMSTR
 , 0x00000000);

337 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTCFG
 , 0x06000610);

338 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTMAP
 , 0x00001323);

341 if(
•ìd
 == 1) {

343 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PWRTMG
 , 0x00221306);

344 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL0
 , 0x00210070);

345 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL1
 , 0x00010008);

346 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL3
 , 0x00000000);

347 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x007000BB);

350 #ifde‡
SOFT_DEBUG_FOR_DDR


351 #ifde‡
DRAM_öô_by_PHY


352 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xc0030106);

354 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00030106);

356 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x006A0000);

361 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010000);

364 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00000000);

369 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , ((
DDR4_2133_MODE_REG0
<<16)|(
DDR4_2133_MODE_REG1
)));

373 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , ((
DDR4_2133_MODE_REG2
<<16)|(
DDR4_2133_MODE_REG3
)));

376 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT5
 , 0x00110000);

380 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT6
 , ((
DDR4_2133_MODE_REG4
<<16)|(
DDR4_2133_MODE_REG5
)));

383 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT7
 , 
DDR4_2133_MODE_REG6
);

385 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0x10102412);

386 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x00040419);

387 #ifde‡
add_m¨gö


388 
	`¥ötf
("DDRINFO: ADD cmd margin \n");

389 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x06070a0e);

390 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x070a0408);

391 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG9
 , 0x000a030e);

393 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x0607040C);

394 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x07030408);

395 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG9
 , 0x0002030A);

397 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x0000400C);

398 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x06060403);

399 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG7
 , 0x00000606);

400 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG8
 , 0x04040D07);

401 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG11
 , 0x1308010e);

402 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG12
 , 0x00000008);

403 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG15
 , 0x00000000);

405 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0x01000040);

406 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x00004111);

411 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x038A820A);

417 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

419 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG0
 , 0x07F04011);

420 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG1
 , 0x000000B0);

421 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0xE0400018);

422 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD1
 , 0x0048005A);

423 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD2
 , 0x80000000);

425 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG2
 , 0x00000A06);

426 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG3
 , 0x00000004);

427 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DBICTL
 , 0x00000001);

428 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIPHYMSTR
 , 0x00000000);

430 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTCFG
 , 0x06000608);

431 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTMAP
 , 0x00001323);

434 if(
•ìd
 == 2) {

436 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PWRTMG
 , 0x00221306);

437 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL0
 , 0x00210070);

438 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL1
 , 0x00010008);

439 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL3
 , 0x00000000);

440 #ifde‡
__DDR4_800M__


441 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x00300046);

443 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x0061008c);

446 #ifde‡
SOFT_DEBUG_FOR_DDR


447 #ifde‡
DRAM_öô_by_PHY


448 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xc00200C5);

450 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x000200C5);

452 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00500000);

457 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010000);

460 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00000000);

465 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , ((
DDR4_1600_MODE_REG0
<<16)|(
DDR4_1600_MODE_REG1
)));

469 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , ((
DDR4_1600_MODE_REG2
<<16)|(
DDR4_1600_MODE_REG3
)));

472 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT5
 , 0x00110000);

476 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT6
 , ((
DDR4_1600_MODE_REG4
<<16)|(
DDR4_1600_MODE_REG5
)));

479 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT7
 , 
DDR4_1600_MODE_REG6
);

481 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0x0E0C1B0D);

482 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x00030313);

483 #ifde‡
add_m¨gö


484 
	`¥ötf
("DDRINFO: ADD cmd margin \n");

485 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x06060a0e);

486 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x060a0307);

487 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG9
 , 0x000a030a);

489 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x0606030B);

490 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x06030307);

491 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG9
 , 0x00020309);

493 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x0000400C);

494 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x04040302);

495 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG7
 , 0x00000404);

496 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG8
 , 0x04040d06);

497 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG11
 , 0x1206010e);

498 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG12
 , 0x00000008);

499 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG15
 , 0x00000000);

501 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0x01000040);

502 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x000030D4);

507 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x03888209);

513 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

515 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG0
 , 0x07F04011);

516 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG1
 , 0x000000B0);

517 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0xE0400018);

518 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD1
 , 0x0048005A);

519 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD2
 , 0x80000000);

521 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG2
 , 0x00000604);

522 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG3
 , 0x00000004);

523 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DBICTL
 , 0x00000001);

524 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIPHYMSTR
 , 0x00000000);

526 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTCFG
 , 0x06000604);

527 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTMAP
 , 0x00001323);

530 if(
ddr_ty≥
 == 1) {

531 if(
•ìd
 == 2) {

532 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x00610040);

534 #ifde‡
SOFT_DEBUG_FOR_DDR


535 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xC00200C5);

536 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x0001000b);

541 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010000);

544 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00000000);

549 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , ((
DDR3_1600_MODE_REG0
<<16)|(
DDR3_1600_MODE_REG1
)));

553 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , ((
DDR3_1600_MODE_REG2
<<16)|(
DDR3_1600_MODE_REG3
)));

555 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0x0c101b0e);

556 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x00030314);

557 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x04060509);

558 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x00002006);

559 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x06020306);

560 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x04040302);

561 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG8
 , 0x00000909);

563 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0x40800020);

564 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x0000c350);

570 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x03878206);

576 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

578 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG2
 , 0x00000603);

579 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG0
 , 0x07000000);

581 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0x00400018);

582 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD1
 , 0x0005003C);

583 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD2
 , 0x80000000);

584 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIPHYMSTR
 , 0x00000000);

585 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTCFG
 , 0x0600060C);

586 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTMAP
 , 0x00001323);

589 if(
•ìd
 == 3) {

590 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x00300020);

592 #ifde‡
SOFT_DEBUG_FOR_DDR


593 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xc0020063);

594 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x0001000b);

599 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010000);

602 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT1
 , 0x00000000);

607 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , ((
DDR3_800_MODE_REG0
<<16)|(
DDR3_800_MODE_REG1
)));

611 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , ((
DDR3_800_MODE_REG2
<<16)|(
DDR3_800_MODE_REG3
)));

613 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0x0c101b0e);

614 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x00030314);

615 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x04060509);

616 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x00002006);

617 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x06020306);

618 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x04040302);

619 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG8
 , 0x00000909);

621 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0x40800020);

622 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x0000c350);

630 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x03878206);

636 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

638 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG2
 , 0x00000603);

639 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFILPCFG0
 , 0x07000000);

641 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0x00400018);

642 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD1
 , 0x0005003C);

643 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD2
 , 0x80000000);

644 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIPHYMSTR
 , 0x00000000);

645 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTCFG
 , 0x0600060C);

646 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ODTMAP
 , 0x00001323);

650 if(
ddr_ty≥
 == 2) {

651 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIMISC
 , 0x00000000);

657 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MSTR
 , 0x40040008);

662 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHCTL0
 , 0x00f08000);

665 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_RFSHTMG
 , 0x0072003d);

666 #ifde‡
SOFT_DEBUG_FOR_DDR


667 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0xc005c001);

668 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT2
 , 0x00000005);

673 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT0
 , 0x00010001);

678 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT3
 , 0x0083000C);

680 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT4
 , 0x00020000);

683 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_INIT5
 , 0x00100001);

688 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG0
 , 0xe182014);

692 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG1
 , 0x4041c);

697 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG2
 , 0x407090b);

698 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG3
 , 0x407000);

703 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG4
 , 0x7020509);

704 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG5
 , 0x1010702);

705 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG6
 , 0x2020005);

706 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DRAMTMG7
 , 0x202);

707 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL0
 , 0xd0800020);

708 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ZQCTL1
 , 0x02020000);

714 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG0
 , 0x038A8207);

720 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFITMG1
 , 0x00090404);

721 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DFIUPD0
 , 0xc0400005);

725 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_DBICTL
 , 0x00000001);

728 
	`¥öt_èsk
 ("Un-supported DDRÅype(dmc_cfg_timing)!\n");

730 
	}
}

738 
	$dmc_cfg_addr_m≠
(
ddr_ty≥
 , 
ˇ∑côy
,
ddr_˘æ_ba£_addr
)

740 if(
ddr_ty≥
 == 0){

741 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP0
 , 0x00003f1f);

742 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP1
 , 0x003f0909);

743 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP2
 , 0x01010100);

744 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP3
 , 0x01010101);

745 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP4
 , 0x00001f1f);

746 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP5
 , 0x07070707);

747 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP6
 , 0x07070707);

748 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP7
 , 0x00000f0f);

749 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP8
 , 0x00003f01);

750 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP9
 , 0x00000000);

751 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP10
 , 0x00000000);

752 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP11
 , 0x00000000);

753 } if(
ddr_ty≥
 == 1){

754 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP0
 , 0x0000001f);

755 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP1
 , 0x00080808);

756 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP2
 , 0x00000000);

757 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP3
 , 0x00000000);

758 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP4
 , 0x00001f1f);

759 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP5
 , 0x07070707);

760 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP6
 , 0x0F0F0707);

761 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP9
 , 0x0A020b06);

762 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP10
 , 0x0A0A0A0A);

763 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP11
 , 0x00000000);

764 } if(
ddr_ty≥
 == 2) {

765 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP1
 , 0x00090909);

766 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP2
 , 0x00000000);

767 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP3
 , 0x00000000);

768 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP4
 , 0x00001f1f);

769 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP5
 , 0x080f0808);

770 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP6
 , 0x0f080808);

771 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP9
 , 0x08080808);

772 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP10
 , 0x08080808);

773 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP11
 , 0x001f1f08);

774 } if(
ddr_ty≥
 == 3) {

775 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP1
 , 0x00090909);

776 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP2
 , 0x00000000);

777 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP3
 , 0x00000000);

778 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP4
 , 0x00001f00);

779 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP5
 , 0x080f0808);

780 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP6
 , 0x0f0f0808);

781 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP9
 , 0x08080808);

782 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP10
 , 0x08080808);

783 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_ADDRMAP11
 , 0x001f1f08);

785 
	`¥öt_èsk
("Un-supported DDRÅype!\n");

787 
	}
}

795 
	$dmc_cfg_mp
(
ddr_˘æ_ba£_addr
)

797 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PCTRL_0
 , 0x00000001);

798 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PCTRL_1
 , 0x00000001);

799 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PCTRL_2
 , 0x00000001);

800 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PCTRL_3
 , 0x00000001);

801 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PCTRL_4
 , 0x00000001);

802 
	}
}

807 
	$dmc_cfg_qos
(
ddr_˘æ_ba£_addr
)

815 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SCHED
 , 0x40001801);

816 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_SCHED1
 , 0x00000033);

819 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PERFHPR1
 , 0x0f001000);

822 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PERFLPR1
 , 0x0f004000);

825 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_PERFWR1
 , 0x0f001000);

826 
	}
}

834 
	$dmc_öô
(
ddr_ty≥
, 
•ìd
 ,
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
)

836 
	`dmc_cfg_maö
 (
ddr_ty≥
,
dev_ty≥
,
ddr_˘æ_ba£_addr
);

837 
	`dmc_cfg_timög
 (
ddr_ty≥
,
•ìd
,
ddr_˘æ_ba£_addr
);

838 
	`dmc_cfg_addr_m≠
 (
ddr_ty≥
,
ˇ∑côy
,
ddr_˘æ_ba£_addr
);

839 #ifde‡
DDR_PD_SR_EN


840 
	`ddr_§f_pd_íabÀ
(
ddr_˘æ_ba£_addr
);

842 
	`dmc_cfg_mp
 (
ddr_˘æ_ba£_addr
);

843 #ifde‡
DDR_QOS_TEST


844 
	`dmc_cfg_qos
 (
ddr_˘æ_ba£_addr
);

846 
	`¥öt_èsk
("dmc config done!\n");

847 
	}
}

854 
	$ddr_phy_maö
 (
ddr_ty≥
 ,
•ìd
,
ddr_phy_ba£_addr
)

856 
ªad_d©a
 = 0 ;

870 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR
);

871 if(
•ìd
 == 0) {

872 
ªad_d©a
 =Ñead_data&0xFFE7FFFF ;

873 } i‡(
•ìd
 ==1 ) {

874 
ªad_d©a
 =Ñead_data&0xFFE7FFFF ;

875 } i‡(
•ìd
 ==2 ) {

876 
ªad_d©a
 = (read_data&0xFFE7FFFF)|0x00080000 ;

877 } i‡(
•ìd
 ==3 ) {

878 
ªad_d©a
 = (read_data&0xFFE7FFFF)|0x00180000 ;

880 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR
, 
ªad_d©a
);

892 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQCR
);

893 if((
•ìd
 == 0) || (speed == 1)) {

895 
ªad_d©a
 = (read_data&0xFFFFF8FF)|0x00000700 ;

896 } if(
•ìd
 == 2) {

898 
ªad_d©a
 = (read_data&0xFFFFF8FF)|0x00000500 ;

899 } if(
•ìd
 == 3) {

901 
ªad_d©a
 = (read_data&0xFFFFF8FF)|0x00000400 ;

903 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQCR
, 
ªad_d©a
);

907 if(
ddr_ty≥
==0) {

908 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ0PR
);

909 
ªad_d©a
 =Ñead_data | 0x10000000 ;

910 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR4_ZPROG_PU_ODT_ONLY
 << 16);

911 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR4_ZPROG_ASYM_DRV_PD
 << 12);

912 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR4_ZPROG_ASYM_DRV_PU
 << 8);

913 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ0PR
, 
ªad_d©a
);

915 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ1PR
);

916 
ªad_d©a
 =Ñead_data | 0x10000000 ;

917 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR4_ZPROG_PU_ODT_ONLY
 << 16);

918 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR4_ZPROG_ASYM_DRV_PD
 << 12);

919 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR4_ZPROG_ASYM_DRV_PU
 << 8);

920 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ1PR
, 
ªad_d©a
);

922 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ2PR
);

923 
ªad_d©a
 =Ñead_data | 0x10000000 ;

924 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR4_ZPROG_PU_ODT_ONLY
 << 16);

925 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR4_ZPROG_ASYM_DRV_PD
 << 12);

926 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR4_ZPROG_ASYM_DRV_PU
 << 8);

927 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ2PR
, 
ªad_d©a
);

929 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ3PR
);

930 
ªad_d©a
 =Ñead_data | 0x10000000 ;

931 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR4_ZPROG_PU_ODT_ONLY
 << 16);

932 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR4_ZPROG_ASYM_DRV_PD
 << 12);

933 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR4_ZPROG_ASYM_DRV_PU
 << 8);

934 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ3PR
, 
ªad_d©a
);

938 } if(
ddr_ty≥
==1) {

939 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ0PR
);

941 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR3_ZPROG_PU_ODT_ONLY
 << 16);

942 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR3_ZPROG_ASYM_DRV_PD
 << 12);

943 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR3_ZPROG_ASYM_DRV_PU
 << 8);

944 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ0PR
, 
ªad_d©a
);

946 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ1PR
);

948 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR3_ZPROG_PU_ODT_ONLY
 << 16);

949 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR3_ZPROG_ASYM_DRV_PD
 << 12);

950 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR3_ZPROG_ASYM_DRV_PU
 << 8);

951 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ1PR
, 
ªad_d©a
);

953 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ2PR
);

955 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR3_ZPROG_PU_ODT_ONLY
 << 16);

956 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR3_ZPROG_ASYM_DRV_PD
 << 12);

957 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR3_ZPROG_ASYM_DRV_PU
 << 8);

958 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ2PR
, 
ªad_d©a
);

960 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ3PR
);

962 
ªad_d©a
 = (ªad_d©®&0xFFF0FFFF)|(
DDR3_ZPROG_PU_ODT_ONLY
 << 16);

963 
ªad_d©a
 = (ªad_d©®&0xFFFF0FFF)|(
DDR3_ZPROG_ASYM_DRV_PD
 << 12);

964 
ªad_d©a
 = (ªad_d©®&0xFFFFF0FF)|(
DDR3_ZPROG_ASYM_DRV_PU
 << 8);

965 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ZQ3PR
, 
ªad_d©a
);

967 
	}
}

974 
	$ddr_phy_timög
 (
ddr_ty≥
 ,
•ìd
,
skù
,
ddr_phy_ba£_addr
)

976 
ªad_d©a
 = 0 ;

979 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCR
);

980 if(
ddr_ty≥
==0) {

981 
ªad_d©a
 = (read_data&0xFFFFFFF8)|0x00000004 ;

982 } if(
ddr_ty≥
==1) {

983 
ªad_d©a
 = (read_data&0xFFFFFFF8)|0x00000003 ;

984 } if(
ddr_ty≥
==2) {

985 
ªad_d©a
 = (read_data&0xFFFFFFF8)|0x00000001 ;

987 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCR
, 
ªad_d©a
);

989 if((
ddr_ty≥
 == 0) || (ddr_type == 1)) {

990 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCR
);

992 
ªad_d©a
 = (read_data&0xEFFFFFFF)|0x10000000 ;

993 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCR
, 
ªad_d©a
);

999 if(
ddr_ty≥
 == 0) {

1000 if(
•ìd
 == 0) {

1001 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR0
, 
DDR4_2400_MODE_REG0
);

1002 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR1
, 
DDR4_2400_MODE_REG1
);

1003 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR2
, 
DDR4_2400_MODE_REG2
);

1004 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR3
, 
DDR4_2400_MODE_REG3
);

1005 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR4
, 
DDR4_2400_MODE_REG4
);

1006 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR5
, 
DDR4_2400_MODE_REG5
);

1007 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR6
, 
DDR4_2400_MODE_REG6
);

1009 if(
•ìd
 == 1) {

1010 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR0
, 
DDR4_2133_MODE_REG0
);

1011 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR1
, 
DDR4_2133_MODE_REG1
);

1012 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR2
, 
DDR4_2133_MODE_REG2
);

1013 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR3
, 
DDR4_2133_MODE_REG3
);

1014 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR4
, 
DDR4_2133_MODE_REG4
);

1015 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR5
, 
DDR4_2133_MODE_REG5
);

1016 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR6
, 
DDR4_2133_MODE_REG6
);

1018 if(
•ìd
 == 2) {

1019 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR0
, 
DDR4_1600_MODE_REG0
);

1020 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR1
, 
DDR4_1600_MODE_REG1
);

1021 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR2
, 
DDR4_1600_MODE_REG2
);

1022 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR3
, 
DDR4_1600_MODE_REG3
);

1023 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR4
, 
DDR4_1600_MODE_REG4
);

1024 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR5
, 
DDR4_1600_MODE_REG5
);

1025 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR6
, 
DDR4_1600_MODE_REG6
);

1027 } i‡(
ddr_ty≥
 == 1) {

1028 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR0
, 
DDR3_1600_MODE_REG0
);

1029 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR1
, 
DDR3_1600_MODE_REG1
);

1030 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR2
, 
DDR3_1600_MODE_REG2
);

1031 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR3
, 
DDR3_1600_MODE_REG3
);

1033 } i‡(
ddr_ty≥
== 2) {

1034 
ªad_d©a
 = (0x4<<5) | 0x3;

1035 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR1
, 
ªad_d©a
);

1036 
ªad_d©a
 = 0xc ;

1037 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_MR2
, 
ªad_d©a
);

1041 if(
ddr_ty≥
 == 0) {

1042 if(
•ìd
 == 0) {

1043 
ªad_d©a
 = 9 | (16<<8) | (39<<16) | (8<<24);

1044 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1046 
ªad_d©a
 = 8 | (0<<8) | (36<<16) | (40<<24);

1047 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR1
, 
ªad_d©a
);

1048 
ªad_d©a
 = 768 | (7<<16) | (0<<24) | (0<<28);

1049 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR2
, 
ªad_d©a
);

1051 
ªad_d©a
 = (896<<16) ;

1052 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR3
, 
ªad_d©a
);

1054 
ªad_d©a
 = 9 | (12<<8) | (420<<16) ;

1055 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR4
, 
ªad_d©a
);

1057 
ªad_d©a
 = 9 | (24<<8) | (16<<16) ;

1058 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR5
, 
ªad_d©a
);

1060 #ifde‡
SOFT_DEBUG_FOR_DDR


1061 
ªad_d©a
 = 10 | (2402<<6) | (602<<21) ;

1062 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR0
, 
ªad_d©a
);

1064 
ªad_d©a
 = 5402 | (60002<<15) ;

1065 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR1
, 
ªad_d©a
);

1067 
ªad_d©a
 = 600000 | (432<<20) ;

1068 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR3
, 
ªad_d©a
);

1070 
ªad_d©a
 = 240000 | (1024<<18) ;

1071 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR4
, 
ªad_d©a
);

1074 if(
•ìd
 == 1) {

1075 
ªad_d©a
 = 8 | (14<<8) | (35<<16) | (7<<24);

1076 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1078 
ªad_d©a
 = 8 | (0<<8) | (32<<16) | (40<<24);

1079 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR1
, 
ªad_d©a
);

1081 
ªad_d©a
 = 768 | (7<<16) | (0<<24) | (0<<28);

1082 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR2
, 
ªad_d©a
);

1084 
ªad_d©a
 = (896<<16) ;

1085 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR3
, 
ªad_d©a
);

1087 
ªad_d©a
 = 7 | (11<<8) | (374<<16) ;

1088 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR4
, 
ªad_d©a
);

1090 
ªad_d©a
 = 9 | (22<<8) | (14<<16) ;

1091 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR5
, 
ªad_d©a
);

1093 #ifde‡
SOFT_DEBUG_FOR_DDR


1094 
ªad_d©a
 = 10 | (2134<<6) | (535<<21) ;

1095 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR0
, 
ªad_d©a
);

1097 
ªad_d©a
 = 4799 | (53302<<15) ;

1098 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR1
, 
ªad_d©a
);

1100 
ªad_d©a
 = 533000 | (384<<20) ;

1101 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR3
, 
ªad_d©a
);

1103 
ªad_d©a
 = 213200 | (1024<<18) ;

1104 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR4
, 
ªad_d©a
);

1107 if(
•ìd
 == 2) {

1108 
ªad_d©a
 = 6 | (12<<8) | (26<<16) | (6<<24);

1109 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1111 
ªad_d©a
 = 8 | (0<<8) | (24<<16) | (40<<24);

1112 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR1
, 
ªad_d©a
);

1114 
ªad_d©a
 = 768 | (5<<16) | (0<<24) | (0<<28);

1115 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR2
, 
ªad_d©a
);

1117 
ªad_d©a
 = (896<<16) ;

1118 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR3
, 
ªad_d©a
);

1120 
ªad_d©a
 = 4 | (8<<8) | (280<<16) ;

1121 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR4
, 
ªad_d©a
);

1123 
ªad_d©a
 = 9 | (20<<8) | (12<<16) ;

1124 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR5
, 
ªad_d©a
);

1126 #ifde‡
SOFT_DEBUG_FOR_DDR


1127 
ªad_d©a
 = 10 | (1602<<6) | (402<<21) ;

1128 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR0
, 
ªad_d©a
);

1130 
ªad_d©a
 = 3602 | (40002<<15) ;

1131 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR1
, 
ªad_d©a
);

1133 
ªad_d©a
 = 400000 | (288<<20) ;

1134 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR3
, 
ªad_d©a
);

1136 
ªad_d©a
 = 160000 | (1024<<18) ;

1137 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR4
, 
ªad_d©a
);

1140 } i‡(
ddr_ty≥
== 1) {

1141 if(
•ìd
 == 2) {

1142 
ªad_d©a
 = 8 | (11<<8) | (28<<16) | (6<<24);

1143 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1145 
ªad_d©a
 = 4 | (0<<8) | (32<<16) | (40<<24);

1146 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR1
, 
ªad_d©a
);

1148 
ªad_d©a
 = 512 | (5<<16) | (0<<24) | (0<<28);

1149 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR2
, 
ªad_d©a
);

1151 
ªad_d©a
 = (640<<16) ;

1152 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR3
, 
ªad_d©a
);

1154 
ªad_d©a
 = 4 | (8<<8) | (128<<16) ;

1155 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR4
, 
ªad_d©a
);

1157 
ªad_d©a
 = 9 | (19<<8) | (39<<16) ;

1158 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR5
, 
ªad_d©a
);

1160 #ifde‡
SOFT_DEBUG_FOR_DDR


1161 
ªad_d©a
 = 10 | (1602<<6) | (402<<21) ;

1162 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR0
, 
ªad_d©a
);

1164 
ªad_d©a
 = 3602 | (40002<<15) ;

1165 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR1
, 
ªad_d©a
);

1167 
ªad_d©a
 = 400000 | (136<<20) ;

1168 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR3
, 
ªad_d©a
);

1170 
ªad_d©a
 = 160000 | (1024<<18) ;

1171 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR4
, 
ªad_d©a
);

1175 if(
•ìd
 == 3) {

1176 
ªad_d©a
 = 8 | (11<<8) | (28<<16) | (6<<24);

1177 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1179 
ªad_d©a
 = 4 | (0<<8) | (32<<16) | (40<<24);

1180 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR1
, 
ªad_d©a
);

1182 
ªad_d©a
 = 512 | (5<<16) | (0<<24) | (0<<28);

1183 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR2
, 
ªad_d©a
);

1185 
ªad_d©a
 = (640<<16) ;

1186 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR3
, 
ªad_d©a
);

1188 
ªad_d©a
 = 4 | (8<<8) | (128<<16) ;

1189 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR4
, 
ªad_d©a
);

1191 
ªad_d©a
 = 9 | (19<<8) | (39<<16) ;

1192 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR5
, 
ªad_d©a
);

1194 #ifde‡
SOFT_DEBUG_FOR_DDR


1195 
ªad_d©a
 = 10 | (1602<<6) | (402<<21) ;

1196 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR0
, 
ªad_d©a
);

1198 
ªad_d©a
 = 3602 | (40002<<15) ;

1199 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR1
, 
ªad_d©a
);

1201 
ªad_d©a
 = 400000 | (136<<20) ;

1202 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR3
, 
ªad_d©a
);

1204 
ªad_d©a
 = 160000 | (1024<<18) ;

1205 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PTR4
, 
ªad_d©a
);

1209 } i‡(
ddr_ty≥
== 2) {

1210 
ªad_d©a
 = 0x9 | (0x11<<8) | (0x27<<16) | (0x4<<24);

1211 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTPR0
, 
ªad_d©a
);

1231 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_ODTCR
, 
PHY_ODTCR
);

1234 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_AACR
, 
PHY_AACR
);

1239 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
);

1240 
ªad_d©a
 = (read_data&0xFFFFFFBF)| (1<<6) ;

1241 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
, 
ªad_d©a
);

1257 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_IOVCR1
, 
PHY_IOVCR1
);

1296 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX0GCR4
, 
PHY_DXnGCR4
);

1297 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX1GCR4
, 
PHY_DXnGCR4
);

1298 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX2GCR4
, 
PHY_DXnGCR4
);

1299 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX3GCR4
, 
PHY_DXnGCR4
);

1304 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX0GCR5
, 
PHY_DXnGCR5
);

1305 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX1GCR5
, 
PHY_DXnGCR5
);

1306 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX2GCR5
, 
PHY_DXnGCR5
);

1307 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX3GCR5
, 
PHY_DXnGCR5
);

1308 
	`¥ötf
("DDRINFO: Së DXnGCR5 = %x \n", 
PHY_DXnGCR5
);

1309 
	}
}

1316 
	$ddr_phy_öô_cfg
 (
ddr_ty≥
 , 
•ìd
,
skù
,
ddr_phy_ba£_addr
)

1319 
	`ddr_phy_maö
(
ddr_ty≥
, 
•ìd
,
ddr_phy_ba£_addr
);

1320 
	`ddr_phy_timög
(
ddr_ty≥
, 
•ìd
,1,
ddr_phy_ba£_addr
);

1322 
ªad_d©a
 = 0 ;

1345 i‡(
skù
 ==0) {

1346 #ifde‡
DRAM_öô_by_PHY


1347 
ªad_d©a
 = (1<<0)

1353 
	`¥ötf
("DDRINTO: DRAM init by PHY \n");

1355 
ªad_d©a
 = (1<<0)

1362 
ªad_d©a
 = (1<<0)

1368 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PIR
,
ªad_d©a
);

1370 
	}
}

1372 
	$ddr_phy_öô_check
 (
ddr_phy_ba£_addr
)

1374 
ªad_d©a
 = 0 ;

1377 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGSR0
);

1378 
ªad_d©a
 =Ñead_data&0x00000001 ;

1380 
ªad_d©a
 != 1);

1386 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PIR
,(1<<0) | (1<<18));

1387 
	}
}

1390 
	$ddr_phy_öô
 (
ddr_ty≥
 , 
•ìd
,
skù
,
ddr_phy_ba£_addr
)

1392 
	`ddr_phy_öô_cfg
 ( 
ddr_ty≥
 , 
•ìd
, 
skù
, 
ddr_phy_ba£_addr
) ;

1393 
	`ddr_phy_öô_check
 ( 
ddr_phy_ba£_addr
) ;

1394 
	`¥öt_èsk
("ddrÖhy init done!\n");

1395 
	}
}

1398 
	$ddr4_vªf_åaöög
 (
ddr_phy_ba£_addr
 )

1400 
ªad_d©a
 = 0 ;

1401 
tmp
 = 0;

1403 
	`¥öt_èsk
("kanzi: vref_training!\n");

1404 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUTPR
 , 0xff);

1409 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
);

1410 
ªad_d©a
=Ñead_data & 0x0FFFFFFF ;

1411 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
 , 
ªad_d©a
);

1414 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTUDPR
 , 0xA5A5A5A5);

1417 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

1418 
ªad_d©a
= (read_data & 0xFFC1FFFF)| (0xe<<17) ;

1419 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
 , 
ªad_d©a
);

1429 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
);

1431 
ªad_d©a
=Ñead_data | 0x4 ;

1432 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
 , 
ªad_d©a
);

1435 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
);

1436 
ªad_d©a
=Ñead_data & 0x0FFFFFFF ;

1437 
ªad_d©a
= (read_data &0xFFFFFF1F) |(5<<5) ;

1438 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
 , 
ªad_d©a
);

1441 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR0
);

1442 
ªad_d©a
=Ñead_data & 0xFFC3FFFF ;

1443 
ªad_d©a
= (read_data &0x1FFFFFFF) |(5<<29) ;

1444 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR0
 , 
ªad_d©a
);

1447 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
);

1448 
ªad_d©a
= (read_data &0xFFFF0FFF) | (0xe<<12) ;

1450 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_VTCR1
 , 
ªad_d©a
);

1453 
ªad_d©a
 = (1<<0)

1455 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PIR
,
ªad_d©a
);

1459 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGSR0
);

1460 
tmp
 = 
ªad_d©a
&0x1 ;

1462 
tmp
!= 1);

1463 
	`¥öt_èsk
("DDR PHY vrefÅraining done !\n");

1466 
tmp
 = (
ªad_d©a
 >> 19)&0x1 ;

1467 if(
tmp
 == 0) {

1468 
	`¥öt_èsk
("0928 DDR PHY vrefÅraining success !\n");

1470 
	`¥öt_èsk
("0928 DDR PHY vrefÅraining fail !\n");

1473 
	}
}

1477 
	$ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
,
skù
 ,
ddr_phy_ba£_addr
)

1479 
ªad_d©a
 = 0 ;

1480 
ªad_d©a
=0x0 ;

1482 if(
ddr_ty≥
 ==0){

1484 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
);

1485 
ªad_d©a
 =Ñead_data &0xFFFFE01F;

1486 
ªad_d©a
 =Ñead_data|(8L << 9);

1487 
ªad_d©a
 =Ñead_data|(1L << 20);

1488 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
, 
ªad_d©a
);

1489 
	`¥ötf
("DDRINIFO: disc⁄√˘ DQS f‹ DDR4 DDR_PHY_DXCCR = 0x%x \n",
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
));

1495 i‡((
ddr_ty≥
 == 0) | (ddr_type == 1)|(ddr_type == 2)) {

1496 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
);

1500 
ªad_d©a
 =Ñead_data |(1L << 6);

1502 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DTCR0
, 
ªad_d©a
);

1530 i‡(
skù
==0) {

1531 
ªad_d©a
 = (1<<0)

1541 
ªad_d©a
 = (1<<0)

1545 if(
ddr_ty≥
==2) {

1546 
ªad_d©a
 =Ñead_data | (1<<2);

1549 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PIR
,
ªad_d©a
);

1550 
	}
}

1552 
	$ddr_phy_åaö_check
 (
ddr_phy_ba£_addr
,
ddr_ty≥
 , 
vªf_åaö
)

1554 
ªad_d©a
 = 0 ;

1557 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGSR0
);

1558 
ªad_d©a
 =Ñead_data&0x1 ;

1560 
ªad_d©a
!= 1);

1562 
	`¥ötf
("ddr_phy_åaö_checkÑód_d©®=0x%x \r\n",
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGSR0
));

1563 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGSR0
);

1565 
ªad_d©a
 =Ñead_data&0x7FF80000 ;

1566 if(
ªad_d©a
 == 0) {

1567 
	`¥öt_èsk
("DDR PHYÅrainingÖass (without vrefÅraining)!\n");

1569 
	`¥öt_èsk
("DDR PHYÅraining fail (without vrefÅraining)!\n");

1572 if((
ddr_ty≥
==0Ë&& (
vªf_åaö
 == 1)) {

1573 
	`ddr4_vªf_åaöög
 (
ddr_phy_ba£_addr
 );

1578 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
);

1579 
ªad_d©a
 =Ñead_data &0xFFFFE01F;

1580 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
, 
ªad_d©a
);

1583 
	}
}

1585 
	$ddr_phy_åaö
 (
ddr_ty≥
 , 
vªf_åaö
,
skù
 ,
ddr_phy_ba£_addr
)

1587 
	`ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
, 
skù
 ,
ddr_phy_ba£_addr
);

1588 
	`ddr_phy_åaö_check
 (
ddr_phy_ba£_addr
,
ddr_ty≥
,
vªf_åaö
) ;

1589 
	`¥öt_èsk
("ddrÅranining done!\n");

1590 
	}
}

1593 #ifde‡
DDR_LP_TEST


1599 
	$ddr_phy_Õbk_ã°
 (
bi°_mode
 , 
Õbk_mode
,
ddr_phy_ba£_addr
)

1601 
ªad_d©a
 = 0 ;

1604 if(
bi°_mode
 == 1) {

1606 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR0
);

1607 
ªad_d©a
 =Ñead_data & (~(1<<26));

1608 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR0
, 
ªad_d©a
);

1610 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR0
);

1611 
ªad_d©a
 =Ñead_data | (1<<26);

1612 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR0
, 
ªad_d©a
);

1628 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_RIOCR0
);

1630 
ªad_d©a
 =Ñead_data &0xF000FFFF ;

1631 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_RIOCR0
, 
ªad_d©a
);

1633 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_RIOCR1
);

1636 
ªad_d©a
 =read_data & 0x00FF00FF ;

1637 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_RIOCR1
, 
ªad_d©a
);

1644 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR1
);

1649 
ªad_d©a
 = (ªad_d©a&0x8EFFFFFF)|(
Õbk_mode
<<27) ;

1650 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR1
,
ªad_d©a
);

1653 if(
bi°_mode
 == 1) {

1654 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR4
);

1656 
ªad_d©a
 =Ñead_data | (3 < 19) ;

1657 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR4
,
ªad_d©a
);

1661 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
);

1662 if(
Õbk_mode
 == 0) {

1664 
ªad_d©a
 =Ñead_data & 0xFFFFFFE7 ;

1667 
ªad_d©a
 = (read_data & 0xFFFFFFE7) | 0x00000008 ; ;

1669 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DXCCR
,
ªad_d©a
);

1673 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTLSR
,0x1234ABCD);

1676 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTWCR
,0x200);

1679 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

1682 
ªad_d©a
 = (read_data & 0xFFFFFFF0) | 0x00000001 ;

1683 if(
bi°_mode
==0) {

1685 
ªad_d©a
 = (read_data & 0xFFFF3FFF) | 0x00008000 ;

1688 
ªad_d©a
 = (read_data & 0xFFFF3FFF) | 0x00004000 ;

1719 
ªad_d©a
 = (read_data & 0xFFC0FFFF) | 0x001E0000 ;

1725 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

1731 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

1733 
ªad_d©a
 = (read_data &0xFFFFFFF8)|0x2 ;

1734 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

1738 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTGSR
);

1739 
ªad_d©a
 =Ñead_data &0x1 ;

1740 } 
ªad_d©a
 != 0x1);

1743 
ªad_d©a
 =Ñead_data&0x3FFFFFFE ;

1744 if(
ªad_d©a
 == 0) {

1745 
	`¥öt_èsk
 ( "DDR PHYÜoopbackÅestÖass!!!\n");

1778 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

1780 
ªad_d©a
 = (read_data &0xFFFFFFF8)|0x3 ;

1781 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

1784 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR1
);

1786 
ªad_d©a
 =Ñead_data &0x7FFFFFFF ;

1787 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PGCR1
,
ªad_d©a
);

1789 
	}
}

1793 #ifde‡
DDR_DCU_TEST


1798 
	$£t_dcu_ˇche_ac˚ss
(
ˇche_£l
 ,
öc_addr
 ,
acc_ty≥
 ,
w‹d_addr
 ,
¶i˚_addr
,
ddr_phy_ba£_addr
)

1800 
dcu¨
;

1801 
dcu¨
 = 
w‹d_addr


1802 | 
¶i˚_addr
<< 4

1803 | 
ˇche_£l
 << 8

1804 | 
öc_addr
 << 10

1805 | 
acc_ty≥
 << 11;

1806 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUAR
, 
dcu¨
);

1809 
	}
}

1811 
	$lﬂd_dcu_comm™d
(
Ωt
 ,

1812 
dç
 ,

1813 
èg
 ,

1814 
cmd
 ,

1815 
b™k
,

1816 
addr
,

1817 
mask
,

1818 
d©a
,

1819 
ddr_phy_ba£_addr
)

1821 
ªad_d©a
 ;

1822 
cmd_bô1
 ;

1823 
cmd_Ÿhî_bô
 ;

1824 
cmd_bô1
 = 
cmd
 &0x1 ;

1825 
cmd_Ÿhî_bô
 = (
cmd
 &0xFFFFFFFE)>>1 ;

1826 
ªad_d©a
 =(
cmd_bô1
<<31)+(
b™k
<<27)+(
addr
<<9)+(
mask
<<5)+
d©a
 ;

1829 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUDR
, 
ªad_d©a
);

1831 
ªad_d©a
 = (
Ωt
<<10)+ (
dç
<<5Ë+ (
èg
<<3Ë+ 
cmd_Ÿhî_bô
 ;

1833 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUDR
, 
ªad_d©a
);

1835 
	}
}

1837 
	$lﬂd_ex≥˘ed_d©a
 (
d©a
,
ddr_phy_ba£_addr
)

1839 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUDR
, 
d©a
);

1841 
	}
}

1844 
	$ªad_dcu_rd©a
(
ddr_phy_ba£_addr
)

1846 
ªad_d©a
 = 0;

1847 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUDR
);

1850 
	}
}

1852 
	$ddr_phy_dcu_ã°
 (
ddr_num
)

1854 
ddr_phy_ba£_addr
 = 0xF9100000;

1855 i‡(
ddr_num
==0) {

1856 
ddr_phy_ba£_addr
 = 0xF9100000 ;

1857 } i‡(
ddr_num
==1) {

1858 
ddr_phy_ba£_addr
 = 0xF9101000 ;

1859 } i‡(
ddr_num
==2) {

1860 
ddr_phy_ba£_addr
 = 0xF9102000 ;

1861 } i‡(
ddr_num
==3) {

1862 
ddr_phy_ba£_addr
 = 0xF9103000 ;

1864 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

1866 
ªad_d©a
 = 0;

1877 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_UDDR0
, 0x76543210);

1878 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_UDDR1
, 0xFEDCBA98);

1884 
	`£t_dcu_ˇche_ac˚ss
(
DCU_CCACHE
, 1, 0, 0, 0,
ddr_phy_ba£_addr
);

1885 
	`lﬂd_dcu_comm™d
(
DCU_NORPT
, 
DTP_tRPA
 , 
DCU_NOTAG
 , 
PRECHARGE_ALL
 , 0, 0, 0xf, 
PUB_DATA_0000_0000
,
ddr_phy_ba£_addr
);

1886 
	`lﬂd_dcu_comm™d
(
DCU_NORPT
, 
DTP_tACT2RW
 , 
DCU_NOTAG
 , 
ACTIVATE
 , 0, 0, 0xf, 
PUB_DATA_0000_0000
,
ddr_phy_ba£_addr
);

1887 
	`lﬂd_dcu_comm™d
(
DCU_NORPT
, 
DTP_tWR2RD
 , 
DCU_NOTAG
 , 
SDRAM_WRITE
 , 0, 0, 0xf, 
PUB_DATA_UDDR0
 ,
ddr_phy_ba£_addr
);

1888 
	`lﬂd_dcu_comm™d
(
DCU_NORPT
, 
DTP_tWR2RD
 , 
DCU_NOTAG
 , 
SDRAM_WRITE
 , 0, 0, 0xf, 
PUB_DATA_UDDR1
 ,
ddr_phy_ba£_addr
);

1891 
	`lﬂd_dcu_comm™d
(
DCU_NORPT
, 
DTP_tRDAP2ACT
 , 
DCU_NOTAG
 , 
READ_PRECHG
 , 0, 0, 0xf, 
PUB_DATA_0000_0000
,
ddr_phy_ba£_addr
);

1899 
	`£t_dcu_ˇche_ac˚ss
(
DCU_ECACHE
, 1, 0, 0, 0,
ddr_phy_ba£_addr
);

1902 
ªad_d©a
 = 
PUB_DATA_UDDR0
 | (
PUB_DATA_UDDR1
 << 5);

1903 
	`lﬂd_ex≥˘ed_d©a
(
ªad_d©a
,
ddr_phy_ba£_addr
);

1904 
	`lﬂd_ex≥˘ed_d©a
(0x0,
ddr_phy_ba£_addr
);

1905 
	`lﬂd_ex≥˘ed_d©a
(0x0,
ddr_phy_ba£_addr
);

1910 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCURR
, (1<<0 )

1923 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCUSR0
);

1924 
ªad_d©a
 =Ñead_data & 0x00000001 ;

1927 
ªad_d©a
==0);

1928 
	`¥öt_èsk
("DDR PHY DCUÅest done!\n");

1931 
	`£t_dcu_ˇche_ac˚ss
(
DCU_RCACHE
, 1, 1, 0, 0,
ddr_phy_ba£_addr
);

1932 
	`ªad_dcu_rd©a
(
ddr_phy_ba£_addr
);

1933 
	`ªad_dcu_rd©a
(
ddr_phy_ba£_addr
);

1934 
	`ªad_dcu_rd©a
(
ddr_phy_ba£_addr
);

1935 
	`ªad_dcu_rd©a
(
ddr_phy_ba£_addr
);

1937 
ªad_d©a
 =read_data &0x2 ;

1938 if(
ªad_d©a
 == 0) {

1939 
	`¥öt_èsk
 ("DDR PHY DCUÅestÖass!!!\n" ) ;

1942 
	`¥öt_èsk
("DDR PHY DCUÅest Fail!!!\n") ;

1948 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DCURR
, (2<<0 )

1957 
	}
}

1960 #ifde‡
DDR_BIST_TEST


1964 
	$ddr_phy_bi°_ã°
 (
ddr_phy_ba£_addr
)

1966 
ªad_d©a
 = 0 ;

1967 
	`¥öt_èsk
("phy bist config begin!\n");

1969 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTAR0
,0x00000000);

1970 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTAR1
,0x00000080);

1971 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTAR2
,0x700003F8);

1972 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTAR3
,0x00000000);

1973 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTAR4
,0x00000002);

1978 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTUDPR
,0xFFFF0000);

1981 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTMSKR0
,0x00000000);

1982 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTMSKR1
,0x00000000);

1983 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTMSKR2
,0x00000000);

1986 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTLSR
,0x1234ABCD);

1989 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTWCR
,0x20);

1992 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

1995 
ªad_d©a
 = (read_data & 0xFFFFFFF0) | 0x00000009 ;

1997 
ªad_d©a
 = (read_data & 0xFFFF3FFF) | 0x00004000 ;

2028 
ªad_d©a
 = (read_data & 0xFFC0FFFF) | 0x001E0000 ;

2034 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

2038 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTGSR
);

2039 
ªad_d©a
 =Ñead_data & 0x00000001 ;

2041 
ªad_d©a
 != 1);

2042 
	`¥öt_èsk
("DDR PHY BISTÅest done!\n");

2044 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTGSR
);

2046 if((
ªad_d©a
 & 0xFFFFFFFE) == 0) {

2047 
	`¥öt_èsk
("DDR PHY BISTÅestÖass!\n");

2050 
	`¥öt_èsk
("DDR PHY BISTÅest Fail!!!\n") ;

2054 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

2056 
ªad_d©a
 = (read_data&0xFFFFFFF8) | 0x2 ;

2057 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

2060 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
);

2062 
ªad_d©a
 = (read_data&0xFFFFFFF8) | 0x3 ;

2063 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_BISTRR
,
ªad_d©a
);

2065 
	}
}

2071 
	$ddr_devi˚_öô
 (
ddr_˘æ_ba£_addr
)

2073 
ªad_d©a
 = 0 ;

2075 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_STAT
);

2076 
ªad_d©a
 != 0x00000001) {

2077 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_STAT
);

2079 
	`¥öt_èsk
("DRAM initial done!\n");

2080 
	}
}

2086 
	$mode_ªg_£t
 (
mr_addr
,
mr_d©a
,
ddr_˘æ_ba£_addr
) {

2087 
°©us
 ;

2089 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL1
,
mr_d©a
);

2101 
mr_addªss_shi·
 = 
mr_addr
<<12 ;

2102 
d©a
 = 0x80000010 | 
mr_addªss_shi·
 ;

2103 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL0
,
d©a
);

2106 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2107 
°©us
 = status&0x1 ;

2108 
°©us
!=0) {

2109 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2110 
°©us
 = status&0x1 ;

2112 
	}
}

2117 
	$Õddr_mode_ªg_ªad
 (
mr_addr
,
ddr_˘æ_ba£_addr
) {

2121 
cs
=0x0;

2122 
°©us
 ;

2123 
mr_addr_mr_d©a
 = 
mr_addr
<<8 ;

2124 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL1
,
mr_addr_mr_d©a
);

2126 
cs_shi·
 = 0x1<<
cs
 ;

2127 
cs_shi·2
(
cs_shi·
<<4)+1 ;

2128 
d©a
 = 0x80000000 | 
cs_shi·2
 ;

2129 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL0
,
d©a
);

2131 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2132 
°©us
 = status&0x1 ;

2133 
°©us
!=0) {

2134 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2135 
°©us
 = status&0x1 ;

2137 
	}
}

2142 
	$ddr4_mode_ªg_ªad
 (
mr_addr
,
ddr_˘æ_ba£_addr
) {

2144 
pda
 = 0x0 ;

2145 
m¥
 = 0x1 ;

2146 
cs
=0x0;

2147 
°©us
 ;

2149 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL1
) ;

2150 
°©us
 = status & 0xFFFFFFFC ;

2151 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL1
, 
°©us
);

2153 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL0
,(1<<0)

2154 |(
m¥
<<1)

2155 |(
pda
<<2)

2156 |(
cs
<<4)

2157 |(
mr_addr
<<12)

2161 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2162 
°©us
 = status&0x1 ;

2163 
°©us
!=0) {

2164 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2165 
°©us
 = status&0x1 ;

2167 
	}
}

2174 
	$Õddr_mode_ªg_£t
 (
mr_addr
,
mr_d©a
,
ddr_˘æ_ba£_addr
) {

2177 
cs
=0x0 ;

2178 
°©us
 ;

2179 
mr_addr_mr_d©a
 = (
mr_addr
<<8Ë+ 
mr_d©a
 ;

2180 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL1
,
mr_addr_mr_d©a
);

2182 
cs_shi·
 = 0x1<<
cs
 ;

2183 
cs_shi·2

cs_shi·
<<4 ;

2184 
d©a
 = 0x80000000 | 
cs_shi·2
 ;

2185 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRCTRL0
,
d©a
);

2187 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2188 
°©us
 = status&0x1 ;

2189 
°©us
!=0) {

2190 
°©us
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MRSTAT
);

2191 
°©us
 = status&0x1 ;

2193 
	}
}

2198 
	$ddr_hÆf_∑th
 (
ddr_˘æ_ba£_addr
,
ddr_phy_ba£_addr
)

2200 
ªad_d©a
 = 0 ;

2202 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MSTR
);

2204 
ªad_d©a
 = (read_data & 0xFFFFCFFF) | 0x00001000 ;

2205 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_CTRL_MSTR
, 
ªad_d©a
);

2208 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX2GCR0
);

2210 
ªad_d©a
 =Ñead_data & 0xFFFFFFFE ;

2211 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX2GCR0
, 
ªad_d©a
);

2213 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX3GCR0
);

2215 
ªad_d©a
 =Ñead_data & 0xFFFFFFFE ;

2216 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_DX3GCR0
, 
ªad_d©a
);

2217 
	}
}

2222 
	$phy_dfi_phyupd_dis
(
ddr_˘æ_ba£_addr
)

2224 
ªad_d©a
 = 0;

2226 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_PHY_DSGCR
);

2227 
ªad_d©a
 =Ñead_data | 0x1;

2228 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_PHY_DSGCR
, 
ªad_d©a
);

2229 
	}
}

2234 
	$phy_dfi_phyupd_í
(
ddr_˘æ_ba£_addr
)

2236 
ªad_d©a
 = 0;

2238 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+
DDR_PHY_DSGCR
);

2239 
ªad_d©a
 =Ñead_data & 0xFFFFFFFE;

2240 
	`ªg_wrôe32
(
ddr_˘æ_ba£_addr
+
DDR_PHY_DSGCR
,
ªad_d©a
);

2241 
	}
}

2254 #ifde‡
DDR4_2400


2256 
	$ddr_⁄e_öôül_Êow_åaöög
 (
ddr_num
)

2258 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2259 
ddr_phy_ba£_addr
 = 0xF9100000;

2260 i‡(
ddr_num
==0) {

2261 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2262 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2263 } i‡(
ddr_num
==1) {

2264 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2265 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2266 } i‡(
ddr_num
==2) {

2267 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2268 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2269 } i‡(
ddr_num
==3) {

2270 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2271 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2273 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2275 
ddr_ty≥
 ;

2276 
•ìd
 ;

2277 
ˇ∑côy
 ;

2278 
dev_ty≥
 ;

2279 
skù_åaöög
 ;

2280 
vªf_åaöög
 ;

2281 
ddr_ty≥
 = 0 ;

2282 
•ìd
 = 0 ;

2283 
ˇ∑côy
 = 0 ;

2284 
dev_ty≥
 = 1 ;

2285 
skù_åaöög
 = 0 ;

2286 
vªf_åaöög
 =1 ;

2288 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2289 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2290 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2292 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2294 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2295 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2297 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2299 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2300 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2302 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2304 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2305 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2306 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2307 
	}
}

2309 
	$chùã°_öôül_ddr4_2400
 ()

2317 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2321 
°©us
 ;

2323 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2324 
°©us
 = status&0x1 ;

2326 
°©us
==0x0);

2327 
	`¥öt_èsk
("ÖllÑelocked !\n");

2329 
	`ddr_⁄e_öôül_Êow_åaöög
 (0);

2330 
	}
}

2334 #ifde‡
DDR4_2133


2336 
	$ddr_⁄e_öôül_Êow_åaöög_2133
 (
ddr_num
)

2338 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2339 
ddr_phy_ba£_addr
 = 0xF9100000;

2340 i‡(
ddr_num
==0) {

2341 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2342 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2343 } i‡(
ddr_num
==1) {

2344 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2345 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2346 } i‡(
ddr_num
==2) {

2347 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2348 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2349 } i‡(
ddr_num
==3) {

2350 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2351 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2353 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2355 
ddr_ty≥
 ;

2356 
•ìd
 ;

2357 
ˇ∑côy
 ;

2358 
dev_ty≥
 ;

2359 
skù_åaöög
 ;

2360 
vªf_åaöög
 ;

2361 
ddr_ty≥
 = 0 ;

2362 
•ìd
 = 1 ;

2363 
ˇ∑côy
 = 0 ;

2364 
dev_ty≥
 = 1 ;

2365 
skù_åaöög
 = 0 ;

2366 
vªf_åaöög
 =1 ;

2368 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2369 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2370 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2372 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2374 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2375 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2377 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2379 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2380 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2382 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2384 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2385 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2386 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2387 
	}
}

2389 
	$chùã°_öôül_ddr4_2133
 ()

2398 #i‡
CONFIG_DDR4_2400_SUPPORT


2399 
	`¥öt_èsk
(" _________________2400___________________ !\n");

2400 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2405 
	`¥öt_èsk
(" _________________2133___________________ !\n");

2406 
	`ªg_wrôe32
(0xf9700030, (3<<0 )

2412 
°©us
 ;

2414 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2415 
°©us
 = status&0x1 ;

2417 
°©us
==0x0);

2418 
	`¥öt_èsk
("ÖllÑelocked !\n");

2420 
i
;

2421 
i
 = 0; i < 
CONFIG_NR_DDR_CHANNELS
; i++) {

2422 
	`ddr_⁄e_öôül_Êow_åaöög_2133
(
i
);

2423 i‡(
i
 == 0)

2424 
	`¥ötf
("DDR_PHY_DX0GCR5 = %x\r\n",
	`ªg_ªad32
(0xF9100000+
DDR_PHY_DX0GCR5
));

2427 #ifde‡
CONFIG_CHANNEL_IN_LOW_POWER


2428 
i
 = 
CONFIG_NR_DDR_CHANNELS
; i < 4; i++) {

2429 
	`ddr_⁄e_öôül_Êow_åaöög_2133
(
i
);

2430 
	`ddr_low_powî
(
i
);

2433 
	}
}

2437 #ifde‡
DDR4_1600


2439 
	$ddr_⁄e_öôül_Êow_åaöög_1600
 (
ddr_num
)

2441 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2442 
ddr_phy_ba£_addr
 = 0xF9100000;

2443 i‡(
ddr_num
==0) {

2444 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2445 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2446 } i‡(
ddr_num
==1) {

2447 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2448 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2449 } i‡(
ddr_num
==2) {

2450 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2451 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2452 } i‡(
ddr_num
==3) {

2453 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2454 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2456 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2458 
ddr_ty≥
 ;

2459 
•ìd
 ;

2460 
ˇ∑côy
 ;

2461 
dev_ty≥
 ;

2462 
skù_åaöög
 ;

2463 
vªf_åaöög
 ;

2464 
ddr_ty≥
 = 0 ;

2465 
•ìd
 = 2 ;

2466 
ˇ∑côy
 = 0 ;

2467 
dev_ty≥
 = 1 ;

2468 
skù_åaöög
 = 0 ;

2469 
vªf_åaöög
 =1 ;

2471 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2472 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2473 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2475 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2477 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2478 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2480 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2482 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2483 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2485 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2487 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2488 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2489 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2490 
	}
}

2492 
	$chùã°_öôül_ddr4_1600
 ()

2494 
	`¥öt_èsk
(" begin chiptest_initial_ddr4_1600 !\n");

2503 #ifde‡
__DDR4_2133M__


2504 
	`ªg_wrôe32
(0xf9700030, (3<<0 )

2510 #ifde‡
__DDR4_2000M__


2511 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2517 #ifde‡
__DDR4_1800M__


2518 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2524 #ifde‡
__DDR4_1600M__


2525 
	`¥öt_èsk
(" _________________1600___________________ !\n");

2526 
	`ªg_wrôe32
(0xf9700030, (3<<0 )

2532 #ifde‡
__DDR4_1066M__


2533 
	`¥öt_èsk
(" _________________1066___________________ !\n");

2534 
	`ªg_wrôe32
(0xf9700030, (3<<0 )

2540 #ifde‡
__DDR4_800M__


2541 
	`¥öt_èsk
(" _________________800___________________ !\n");

2542 
	`ªg_wrôe32
(0xf9700030, (3<<0 )

2548 
	`¥ötf
(" 0xf9700030 = 0x%x \r\n",
	`ªg_ªad32
(0xf9700030));

2549 
°©us
 ;

2551 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2552 
°©us
 = status&0x1 ;

2553 }
°©us
==0x0);

2554 
	`¥öt_èsk
("ÖllÑelocked !\n");

2556 
i
;

2557 
i
 = 0; i < 
CONFIG_NR_DDR_CHANNELS
; i++) {

2558 
	`ddr_⁄e_öôül_Êow_åaöög_1600
(
i
);

2559 i‡(
i
 == 0)

2560 
	`¥ötf
("DDR_PHY_DX0GCR5 = %x\r\n",
	`ªg_ªad32
(0xF9100000+
DDR_PHY_DX0GCR5
));

2563 #ifde‡
CONFIG_CHANNEL_IN_LOW_POWER


2564 
i
 = 
CONFIG_NR_DDR_CHANNELS
; i < 4; i++) {

2565 
	`ddr_⁄e_öôül_Êow_åaöög_1600
(
i
);

2566 
	`ddr_low_powî
(
i
);

2569 
	}
}

2574 #ifde‡
DDR3_1600


2576 
	$ddr_⁄e_öôül_Êow_ddr3
 (
ddr_num
)

2578 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2579 
ddr_phy_ba£_addr
 = 0xF9100000;

2580 i‡(
ddr_num
==0) {

2581 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2582 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2583 } i‡(
ddr_num
==1) {

2584 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2585 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2586 } i‡(
ddr_num
==2) {

2587 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2588 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2589 } i‡(
ddr_num
==3) {

2590 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2591 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2593 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2595 
ddr_ty≥
 ;

2596 
•ìd
 ;

2597 
ˇ∑côy
 ;

2598 
dev_ty≥
 ;

2599 
skù_åaöög
 ;

2600 
vªf_åaöög
 ;

2601 
ddr_ty≥
 = 1 ;

2602 
•ìd
 = 2 ;

2603 
ˇ∑côy
 = 0 ;

2604 
dev_ty≥
 = 1 ;

2605 
skù_åaöög
 = 0 ;

2606 
vªf_åaöög
 = 0 ;

2608 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2609 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2610 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2612 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2614 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2615 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2617 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2619 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2620 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2622 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2624 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2625 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2626 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2627 
	}
}

2629 
	$chùã°_öôül_ddr3_1600
 ()

2637 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2641 
°©us
 ;

2643 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2644 
°©us
 = status&0x1 ;

2646 
°©us
==0x0);

2647 
	`¥öt_èsk
("ÖllÑelocked !\n");

2649 
i
;

2650 
i
 = 0; i < 
CONFIG_NR_DDR_CHANNELS
; i++) {

2651 
	`ddr_⁄e_öôül_Êow_ddr3
 (
i
);

2654 #ifde‡
CONFIG_CHANNEL_IN_LOW_POWER


2655 
i
 = 
CONFIG_NR_DDR_CHANNELS
; i < 4; i++) {

2656 
	`ddr_⁄e_öôül_Êow_ddr3
 (
i
);

2657 
	`ddr_low_powî
(
i
);

2660 
	}
}

2667 #ifde‡
DDR3_800


2668 
	$ddr_⁄e_öôül_Êow_ddr3_800
 (
ddr_num
)

2670 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2671 
ddr_phy_ba£_addr
 = 0xF9100000;

2672 i‡(
ddr_num
==0) {

2673 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2674 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2675 } i‡(
ddr_num
==1) {

2676 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2677 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2678 } i‡(
ddr_num
==2) {

2679 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2680 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2681 } i‡(
ddr_num
==3) {

2682 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2683 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2685 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2687 
ddr_ty≥
 ;

2688 
•ìd
 ;

2689 
ˇ∑côy
 ;

2690 
dev_ty≥
 ;

2691 
skù_åaöög
 ;

2692 
vªf_åaöög
 ;

2693 
ddr_ty≥
 = 1 ;

2694 
•ìd
 = 3 ;

2695 
ˇ∑côy
 = 0 ;

2696 
dev_ty≥
 = 1 ;

2697 
skù_åaöög
 = 0 ;

2698 
vªf_åaöög
 = 1 ;

2700 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2701 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2702 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2704 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2706 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2707 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2709 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2711 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2712 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2714 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2716 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2717 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2718 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2719 
	}
}

2721 
	$chùã°_öôül_ddr3_800
 ()

2729 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2733 
°©us
 ;

2735 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2736 
°©us
 = status&0x1 ;

2738 
°©us
==0x0);

2739 
	`¥öt_èsk
("ÖllÑelocked !\n");

2741 
i
;

2742 
i
 = 0; i < 
CONFIG_NR_DDR_CHANNELS
; i++) {

2743 
	`ddr_⁄e_öôül_Êow_ddr3_800
 (
i
);

2745 #ifde‡
CONFIG_CHANNEL_IN_LOW_POWER


2746 
i
 = 
CONFIG_NR_DDR_CHANNELS
; i < 4; i++) {

2747 
	`ddr_⁄e_öôül_Êow_ddr3_800
 (
i
);

2748 
	`ddr_low_powî
(
i
);

2751 
	}
}

2756 #ifde‡
LPDDR3_1866


2758 
	$ddr_⁄e_öôül_Êow_Õddr3
 (
ddr_num
)

2760 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2761 
ddr_phy_ba£_addr
 = 0xF9100000;

2762 i‡(
ddr_num
==0) {

2763 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2764 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2765 } i‡(
ddr_num
==1) {

2766 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2767 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2768 } i‡(
ddr_num
==2) {

2769 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2770 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2771 } i‡(
ddr_num
==3) {

2772 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2773 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2775 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2777 
ddr_ty≥
 ;

2778 
•ìd
 ;

2779 
ˇ∑côy
 ;

2780 
dev_ty≥
 ;

2781 
skù
 ;

2782 
ddr_ty≥
 = 2 ;

2783 
•ìd
 = 0 ;

2784 
ˇ∑côy
 = 0 ;

2785 
dev_ty≥
 = 3 ;

2786 
skù
 = 1 ;

2794 
	`ªg_wrôe32
(0xf9700030, (4<<0 )

2801 
°©us
 ;

2808 
°©us
 = 
	`ªg_ªad32
(0xF970003C);

2809 
°©us
 = status&0x1 ;

2811 
°©us
==0x0);

2812 
	`¥öt_èsk
("ÖllÑelocked !\n");

2814 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2815 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2816 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2818 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2820 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2821 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2823 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù
,
ddr_phy_ba£_addr
);

2825 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2826 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2828 
	`ddr_phy_åaö
(
ddr_ty≥
,0,
skù
,
ddr_phy_ba£_addr
);

2830 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2831 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2832 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2833 
	}
}

2838 
	$ddr_⁄e_öôül_Êow_hÆf_d©a
 (
ddr_num
)

2840 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2841 
ddr_phy_ba£_addr
 = 0xF9100000;

2842 
ddr_hÆf_c⁄fig_addr
 = 0xF9200018;

2843 i‡(
ddr_num
==0) {

2844 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2845 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2846 
ddr_hÆf_c⁄fig_addr
 = 0xF9200018 ;

2847 } i‡(
ddr_num
==1) {

2848 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2849 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2850 
ddr_hÆf_c⁄fig_addr
 = 0xF920001C ;

2851 } i‡(
ddr_num
==2) {

2852 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2853 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2854 
ddr_hÆf_c⁄fig_addr
 = 0xF9200020 ;

2855 } i‡(
ddr_num
==3) {

2856 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2857 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2858 
ddr_hÆf_c⁄fig_addr
 = 0xF9200024 ;

2860 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2862 
ddr_ty≥
 ;

2863 
•ìd
 ;

2864 
ˇ∑côy
 ;

2865 
dev_ty≥
 ;

2866 
skù_åaöög
 ;

2867 
vªf_åaöög
 ;

2868 
ddr_ty≥
 = 0 ;

2869 
•ìd
 = 1 ;

2870 
ˇ∑côy
 = 0 ;

2871 
dev_ty≥
 = 1 ;

2872 
skù_åaöög
 = 0 ;

2873 
vªf_åaöög
 =1 ;

2875 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2876 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2877 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2879 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2881 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2882 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2883 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2886 
	`ddr_hÆf_∑th
 (
ddr_˘æ_ba£_addr
,
ddr_phy_ba£_addr
);

2887 
	`ªg_wrôe32
(
ddr_hÆf_c⁄fig_addr
,0x000C0000);

2888 
	`¥öt_èsk
("half data config done!\n");

2890 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2891 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2893 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2894 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2895 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2896 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2897 
	}
}

2899 #ifde‡
DDR_BIST_TEST


2901 
	$ddr_⁄e_öôül_Êow_phy_bi°
 (
ddr_num
)

2903 
ddr_˘æ_ba£_addr
 = 0xF9000000;

2904 
ddr_phy_ba£_addr
 = 0xF9100000;

2905 i‡(
ddr_num
==0) {

2906 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

2907 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2908 } i‡(
ddr_num
==1) {

2909 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

2910 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2911 } i‡(
ddr_num
==2) {

2912 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

2913 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2914 } i‡(
ddr_num
==3) {

2915 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

2916 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2918 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2920 
ddr_ty≥
 ;

2921 
•ìd
 ;

2922 
ˇ∑côy
 ;

2923 
dev_ty≥
 ;

2924 
skù_åaöög
 ;

2925 
vªf_åaöög
 ;

2926 
ddr_ty≥
 = 0 ;

2927 
•ìd
 = 1 ;

2928 
ˇ∑côy
 = 0 ;

2929 
dev_ty≥
 = 1 ;

2930 
skù_åaöög
 = 0 ;

2931 
vªf_åaöög
 =1 ;

2933 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2934 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2935 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

2937 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

2939 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

2940 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2941 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2943 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

2944 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

2946 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

2949 
	`ddr_phy_bi°_ã°
 (
ddr_phy_ba£_addr
);

2950 
	`¥öt_èsk
("phy bist done!\n");

2952 
	`axi_ª£t_ªÀa£
(
ddr_num
);

2954 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

2955 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

2956 
	}
}

2960 #ifde‡
DDR_LP_TEST


2962 
	$ddr_⁄e_öôül_Êow_˝u_lo›back
 (
ddr_num
)

2965 
ddr_phy_ba£_addr
 = 0xF9100000;

2966 i‡(
ddr_num
==0) {

2968 
ddr_phy_ba£_addr
 = 0xF9100000 ;

2969 } i‡(
ddr_num
==1) {

2971 
ddr_phy_ba£_addr
 = 0xF9101000 ;

2972 } i‡(
ddr_num
==2) {

2974 
ddr_phy_ba£_addr
 = 0xF9102000 ;

2975 } i‡(
ddr_num
==3) {

2977 
ddr_phy_ba£_addr
 = 0xF9103000 ;

2979 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

2981 
ddr_ty≥
 ;

2982 
•ìd
 ;

2985 
skù_åaöög
 ;

2987 
ddr_ty≥
 = 0 ;

2988 
•ìd
 = 1 ;

2991 
skù_åaöög
 = 0 ;

2994 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

2995 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

2997 
	`phy_ª£t_ªÀa£
(
ddr_num
);

2998 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

3001 
	`ddr_phy_Õbk_ã°
(0,0,
ddr_phy_ba£_addr
);

3003 
	`ddr_phy_Õbk_ã°
(0,1,
ddr_phy_ba£_addr
);

3005 
	`ddr_phy_Õbk_ã°
(1,0,
ddr_phy_ba£_addr
);

3007 
	`ddr_phy_Õbk_ã°
(1,1,
ddr_phy_ba£_addr
);

3009 
	`¥öt_èsk
("ddrÜoop_back done!\n");

3011 
	}
}

3014 #ifde‡
DDR_DCU_TEST


3016 
	$ddr_⁄e_öôül_Êow_dcu_ã°
 (
ddr_num
)

3018 
ddr_˘æ_ba£_addr
 = 0xF9000000;

3019 
ddr_phy_ba£_addr
 = 0xF9100000;

3020 i‡(
ddr_num
==0) {

3021 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

3022 
ddr_phy_ba£_addr
 = 0xF9100000 ;

3023 } i‡(
ddr_num
==1) {

3024 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

3025 
ddr_phy_ba£_addr
 = 0xF9101000 ;

3026 } i‡(
ddr_num
==2) {

3027 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

3028 
ddr_phy_ba£_addr
 = 0xF9102000 ;

3029 } i‡(
ddr_num
==3) {

3030 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

3031 
ddr_phy_ba£_addr
 = 0xF9103000 ;

3033 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

3035 
ddr_ty≥
 ;

3036 
•ìd
 ;

3037 
ˇ∑côy
 ;

3038 
dev_ty≥
 ;

3039 
skù_åaöög
 ;

3040 
vªf_åaöög
 ;

3041 
ddr_ty≥
 = 0 ;

3042 
•ìd
 = 0 ;

3043 
ˇ∑côy
 = 0 ;

3044 
dev_ty≥
 = 1 ;

3045 
skù_åaöög
 = 1 ;

3046 
vªf_åaöög
 =1 ;

3048 
	`¥öt_èsk
(" one DDR device initiall begin !\n");

3049 
	`≠b_ª£t_ªÀa£
(
ddr_num
);

3050 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr
) ;

3052 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr
);

3054 
	`dmc_ª£t_ªÀa£
(
ddr_num
);

3055 
	`phy_ª£t_ªÀa£
(
ddr_num
);

3057 
	`ddr_phy_öô
(
ddr_ty≥
,
•ìd
,
skù_åaöög
,
ddr_phy_ba£_addr
);

3059 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr
) ;

3060 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr
);

3062 
	`ddr_phy_åaö
(
ddr_ty≥
,
vªf_åaöög
,
skù_åaöög
,
ddr_phy_ba£_addr
);

3066 
	`¥öt_èsk
(" one DDR device initiallÉnd !\n");

3075 
	}
}

3079 
	$ddr_Æl_öôül_Êow
 ()

3081 
ddr_ty≥
 ;

3082 
•ìd
 ;

3083 
ˇ∑côy
 ;

3084 
dev_ty≥
 ;

3085 
skù
 ;

3086 
vªf_åaö
;

3087 
ddr_ty≥
 = 0 ;

3088 
•ìd
 = 0 ;

3089 
ˇ∑côy
 = 0 ;

3090 
dev_ty≥
 = 1 ;

3091 
skù
 = 0 ;

3092 
vªf_åaö
 =1 ;

3094 
ddr_˘æ_ba£_addr0
 ;

3095 
ddr_˘æ_ba£_addr1
 ;

3096 
ddr_˘æ_ba£_addr2
 ;

3097 
ddr_˘æ_ba£_addr3
 ;

3098 
ddr_phy_ba£_addr0
 ;

3099 
ddr_phy_ba£_addr1
 ;

3100 
ddr_phy_ba£_addr2
 ;

3101 
ddr_phy_ba£_addr3
 ;

3103 
ddr_˘æ_ba£_addr0
 = 0xF9000000 ;

3104 
ddr_phy_ba£_addr0
 = 0xF9100000 ;

3105 
ddr_˘æ_ba£_addr1
 = 0xF9010000 ;

3106 
ddr_phy_ba£_addr1
 = 0xF9101000 ;

3107 
ddr_˘æ_ba£_addr2
 = 0xF9020000 ;

3108 
ddr_phy_ba£_addr2
 = 0xF9102000 ;

3109 
ddr_˘æ_ba£_addr3
 = 0xF9030000 ;

3110 
ddr_phy_ba£_addr3
 = 0xF9103000 ;

3113 
	`≠b_ª£t_ªÀa£_Æl
 ();

3114 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr0
) ;

3115 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr1
) ;

3116 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr2
) ;

3117 
	`dfi_öô_com∂ëe_dis
 (
ddr_˘æ_ba£_addr3
) ;

3119 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr0
);

3120 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr1
);

3121 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr2
);

3122 
	`dmc_öô
(
ddr_ty≥
, 
•ìd
, 
ˇ∑côy
, 
dev_ty≥
,
ddr_˘æ_ba£_addr3
);

3124 
	`dmc_ª£t_ªÀa£_Æl
();

3126 
	`phy_ª£t_ªÀa£_Æl
();

3128 
	`ddr_phy_öô_cfg
 ( 
ddr_ty≥
 , 
•ìd
, 
skù
, 
ddr_phy_ba£_addr0
) ;

3129 
	`ddr_phy_öô_cfg
 ( 
ddr_ty≥
 , 
•ìd
, 
skù
, 
ddr_phy_ba£_addr1
) ;

3130 
	`ddr_phy_öô_cfg
 ( 
ddr_ty≥
 , 
•ìd
, 
skù
, 
ddr_phy_ba£_addr2
) ;

3131 
	`ddr_phy_öô_cfg
 ( 
ddr_ty≥
 , 
•ìd
, 
skù
, 
ddr_phy_ba£_addr3
) ;

3132 
	`ddr_phy_öô_check
 ( 
ddr_phy_ba£_addr0
) ;

3133 
	`ddr_phy_öô_check
 ( 
ddr_phy_ba£_addr1
) ;

3134 
	`ddr_phy_öô_check
 ( 
ddr_phy_ba£_addr2
) ;

3135 
	`ddr_phy_öô_check
 ( 
ddr_phy_ba£_addr3
) ;

3136 
	`¥öt_èsk
("áll DDR deviceÖhy init done !\n");

3138 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr0
) ;

3139 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr1
) ;

3140 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr2
) ;

3141 
	`dfi_öô_com∂ëe_í
 (
ddr_˘æ_ba£_addr3
) ;

3143 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr0
);

3144 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr1
);

3145 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr2
);

3146 
	`ddr_devi˚_öô
(
ddr_˘æ_ba£_addr3
);

3148 
	`ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
, 
skù
 ,
ddr_phy_ba£_addr0
);

3149 
	`ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
, 
skù
 ,
ddr_phy_ba£_addr1
);

3150 
	`ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
, 
skù
 ,
ddr_phy_ba£_addr2
);

3151 
	`ddr_phy_åaö_cfg
 (
ddr_ty≥
 , 
vªf_åaö
, 
skù
 ,
ddr_phy_ba£_addr3
);

3153 
	`ddr_phy_åaö_check
 (
ddr_phy_ba£_addr0
,
ddr_ty≥
,
vªf_åaö
) ;

3154 
	`ddr_phy_åaö_check
 (
ddr_phy_ba£_addr1
,
ddr_ty≥
,
vªf_åaö
) ;

3155 
	`ddr_phy_åaö_check
 (
ddr_phy_ba£_addr2
,
ddr_ty≥
,
vªf_åaö
) ;

3156 
	`ddr_phy_åaö_check
 (
ddr_phy_ba£_addr3
,
ddr_ty≥
,
vªf_åaö
) ;

3157 
	`¥öt_èsk
("áll DDR deviceÖhyÅraining done !\n");

3159 
	`axi_ª£t_ªÀa£_Æl
();

3161 
	`ªg_wrôe32
(0xF9200010 , 0x0000001F);

3162 
	`¥öt_èsk
("áll DDR device initiallÉnd !\n");

3163 
	}
}

3167 #i‚de‡
SOFT_DEBUG_FOR_DDR


3171 
	$ddr_wrôe_ªad_ã°
(
ac˚ss_num
 ,
d©aba£
) {

3172 
i
 ;

3173 
j
 ;

3174 
ba£_addªss
 ;

3175 
ac˚ss_addªss
 ;

3176 
ªad_d©a
 = 0 ;

3177 
wrôe_d©a
 ;

3178 
m
 ;

3179 
n
 ;

3181 
ac˚ss_°ï
 ;

3183 i‡(
d©aba£
==4) {

3184 
ac˚ss_°ï
 = ((0xefffffff/4)/
ac˚ss_num
) - 1;

3185 } i‡(
d©aba£
==1) {

3186 
ac˚ss_°ï
 = ((0x3bffffff/4)/
ac˚ss_num
) - 1;

3189 
ac˚ss_addªss
 = 0;

3190 
i
=0;i<
ac˚ss_num
;i = i + 1 )

3193 
wrôe_d©a
 = 
ac˚ss_addªss
 + 
i
*i ;

3194 
	`ªg_wrôe32
(
ac˚ss_addªss
,
wrôe_d©a
);

3195 
ac˚ss_addªss
 =ác˚ss_addªs†+ 
ac˚ss_°ï
*4;

3198 
	`¥öt_èsk
("sim_note DDR write done ! beginÑead !\n");

3199 
ac˚ss_addªss
 = 0;

3200 
j
=0;j<
ac˚ss_num
;j=j+1)

3202 
ªad_d©a
 = 
	`ªg_ªad32
(
ac˚ss_addªss
) ;

3204 
wrôe_d©a
 = 
ac˚ss_addªss
 + 
j
*j ;

3205 i‡(
wrôe_d©a
==
ªad_d©a
) {

3209 
	`¥ötf
("ªad_d©®%x , wrôe_d©®%x \n",
ªad_d©a
 ,
wrôe_d©a
 );

3210 
	`¥öt_èsk
("sim_note DDR writeándÑeadÅest FAIL !\n");

3213 
ac˚ss_addªss
 =ác˚ss_addªs†+ 
ac˚ss_°ï
*4;

3216 
	}
}

3220 
	$ddr_ac˚ss
 (
d©aba£
)

3222 
a
,
b
,
c
,
d
,
e
,
f
 ;

3223 
ªsu…
 ;

3224 
a
=
	`ddr_wrôe_ªad_ã°
(111,
d©aba£
);

3225 
	`ªad_ªg_dñay
 (100) ;

3227 
b
=
	`ddr_wrôe_ªad_ã°
(222,
d©aba£
);

3228 
	`ªad_ªg_dñay
 (150) ;

3230 
c
=
	`ddr_wrôe_ªad_ã°
(333,
d©aba£
);

3231 
	`ªad_ªg_dñay
 (300) ;

3233 
d
=
	`ddr_wrôe_ªad_ã°
(444,
d©aba£
);

3234 
	`ªad_ªg_dñay
 (100) ;

3236 
e
=
	`ddr_wrôe_ªad_ã°
(555,
d©aba£
);

3237 
	`ªad_ªg_dñay
 (150) ;

3239 
f
=
	`ddr_wrôe_ªad_ã°
(666,
d©aba£
);

3241 
ªsu…
 = 
a
+
b
+
c
+
d
+
e
+
f
 ;

3242  
ªsu…
 ;

3244 
	}
}

3247 
	$ddr_low_powî
 (
ddr_num
)

3250 
ddr_phy_ba£_addr
 = 0xF9100000;

3251 
ddr_phy_ma¸o_gí_addr
 = 0xF9200018;

3252 
ddr_phy_pub_cg_í_addr
 = 0xF920002C;

3253 i‡(
ddr_num
==0) {

3255 
ddr_phy_ba£_addr
 = 0xF9100000 ;

3256 
ddr_phy_ma¸o_gí_addr
 = 0xF9200018 ;

3257 
ddr_phy_pub_cg_í_addr
 = 0xF920002C ;

3258 } i‡(
ddr_num
==1) {

3260 
ddr_phy_ba£_addr
 = 0xF9101000 ;

3261 
ddr_phy_ma¸o_gí_addr
 = 0xF920001C ;

3262 
ddr_phy_pub_cg_í_addr
 = 0xF9200030 ;

3263 } i‡(
ddr_num
==2) {

3265 
ddr_phy_ba£_addr
 = 0xF9102000 ;

3266 
ddr_phy_ma¸o_gí_addr
 = 0xF9200020 ;

3267 
ddr_phy_pub_cg_í_addr
 = 0xF9200034 ;

3268 } i‡(
ddr_num
==3) {

3270 
ddr_phy_ba£_addr
 = 0xF9103000 ;

3271 
ddr_phy_ma¸o_gí_addr
 = 0xF9200024 ;

3272 
ddr_phy_pub_cg_í_addr
 = 0xF9200038 ;

3274 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

3277 
	`¥ötf
("%s: ch™√»%d\n", 
__FUNCTION__
, 
ddr_num
);

3279 
ªad_d©a
 =0;

3282 
ªad_d©a
 = 
	`ªg_ªad32
(0xF9200004) ;

3283 
ªad_d©a
 =Ñód_d©®| (0x1 << (12+
ddr_num
)) ;

3284 
	`ªg_wrôe32
(0xF9200004 ,
ªad_d©a
 );

3286 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR
);

3287 
ªad_d©a
 =Ñead_data |(0x1<<29) ;

3288 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR
,
ªad_d©a
);

3290 
ªad_d©a
 = 
	`ªg_ªad32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR0
);

3291 
ªad_d©a
 =Ñead_data |(0x1<<29) ;

3292 
	`ªg_wrôe32
(
ddr_phy_ba£_addr
+
DDR_PHY_PLLCR0
,
ªad_d©a
);

3294 
	`ªg_wrôe32
(
ddr_phy_pub_cg_í_addr
,0x0);

3296 
	`ªg_wrôe32
(
ddr_phy_ma¸o_gí_addr
,0x7fff);

3300 
	`ªg_wrôe32
(0xF9200008 ,(0x1F << (8*
ddr_num
)));

3302 
	`ªg_wrôe32
(0xF920000C ,(0x1 << 
ddr_num
));

3304 
	}
}

3306 
	$sdøm_öô
()

3308 #i‡
CONFIG_IS_ASIC


3309 
	`ªg_wrôe32
(0xf9700038, 0x0a);

3310 
	`ªg_wrôe32
(0xf9700034, 0x00);

3312 #i‡
CONFIG_DDR4_2400_SUPPORT


3313 
	`¥ötf
("ddr4 2400 init...\n");

3314 
	`chùã°_öôül_ddr4_2133
();

3317 #i‡
CONFIG_DDR4_2133_SUPPORT


3318 
	`¥ötf
("ddr4 2133 201910051028 init...\n");

3319 
	`chùã°_öôül_ddr4_2133
();

3322 #i‡
CONFIG_DDR4_1600_SUPPORT


3323 
	`¥ötf
("ddr4 1600 201910051014 init...\n");

3324 
	`chùã°_öôül_ddr4_1600
();

3327 #i‡
CONFIG_DDR4_800_SUPPORT


3328 
	`¥ötf
("ddr4 800 201910051014 init...\n");

3329 
	`chùã°_öôül_ddr4_1600
();

3332 #i‡
CONFIG_DDR3_1600_SUPPORT


3333 
	`¥ötf
("ddr3 1600 init...\n");

3334 
	`chùã°_öôül_ddr3_1600
();

3337 #i‡
CONFIG_DDR3_800_SUPPORT


3338 
	`¥ötf
("ddr3 800 init...\n");

3339 
	`chùã°_öôül_ddr3_800
();

3343 
	}
}

	@drivers/ddr_all_macro.h

5 
	#CTRL_NOP
 0x0

6 
	#LOAD_MODE
 0x1

7 
	#SELF_REFRESH
 0x2

8 
	#REFRESH
 0x3

9 
	#PRECHARGE
 0x4

10 
	#PRECHARGE_ALL
 0x5

11 
	#ACTIVATE
 0x6

12 
	#SPECIAL_CMD
 0x7

13 
	#SDRAM_WRITE
 0x8

14 
	#WRITE_PRECHG
 0x9

15 
	#SDRAM_READ
 0xA

16 
	#READ_PRECHG
 0xB

17 
	#ZQCAL_SHORT
 0xC

18 
	#READ_MODE
 0xC

19 
	#ZQCAL_LONG
 0xD

20 
	#TERMINATE
 0xD

21 
	#POWER_DOWN
 0xE

22 
	#SDRAM_NOP
 0xF

23 

	)

28 
	#NO_OF_DATA_TYPES
 16

	)

29 
	#PUB_DATA_TYPE_WIDTH
 5

	)

30 
	#PUB_DATA_0000_0000
 0

31 
	#PUB_DATA_FFFF_FFFF
 1

32 
	#PUB_DATA_5555_5555
 2

33 
	#PUB_DATA_AAAA_AAAA
 3

34 
	#PUB_DATA_0000_5500
 4

35 
	#PUB_DATA_5555_0055
 5

36 
	#PUB_DATA_0000_AA00
 6

37 
	#PUB_DATA_AAAA_00AA
 7

38 
	#PUB_DATA_DTDR0
 8

39 
	#PUB_DATA_DTDR1
 9

40 
	#PUB_DATA_UDDR0
 10

41 
	#PUB_DATA_UDDR1
 11

42 
	#PUB_DATA_WALKING_1
 12

43 
	#PUB_DATA_WALKING_0
 13

44 
	#PUB_DATA_USER_PATTERN
 14

45 
	#PUB_DATA_LFSR
 15

46 
	#PUB_DATA_SCHCR0
 16

47 
	#PUB_DATA_FF00_FF00
 17

48 
	#PUB_DATA_FFFF_0000
 18

49 
	#PUB_DATA_0000_FF00
 19

50 
	#PUB_DATA_FFFF_00FF
 20

51 
	#PUB_DATA_00FF_00FF
 21

52 
	#PUB_DATA_F0F0_F0F0
 22

53 
	#PUB_DATA_0F0F_0F0F
 23

54 

	)

58 
	#DTP_tNODTP
 0

	)

59 
	#DTP_tRP
 1

	)

60 
	#DTP_tRAS
 2

	)

61 
	#DTP_tRRD
 3

	)

62 
	#DTP_tRC
 4

	)

63 
	#DTP_tMRD
 5

	)

64 
	#DTP_tMOD
 6

	)

65 
	#DTP_tFAW
 7

	)

66 
	#DTP_tRFC
 8

	)

67 
	#DTP_tWLMRD
 9

	)

68 
	#DTP_tWLO
 10

	)

69 
	#DTP_tXS
 11

	)

70 
	#DTP_tXP
 12

	)

71 
	#DTP_tCKE
 13

	)

72 
	#DTP_tDLLK
 14

	)

73 
	#DTP_tDINITRST
 15

	)

74 
	#DTP_tDINITCKELO
 16

	)

75 
	#DTP_tDINITCKEHI
 17

	)

76 
	#DTP_tDINITZQ
 18

	)

77 
	#DTP_tRPA
 19

	)

78 
	#DTP_tPRE2ACT
 20

	)

79 
	#DTP_tACT2RW
 21

	)

80 
	#DTP_tRD2PRE
 22

	)

81 
	#DTP_tWR2PRE
 23

	)

82 
	#DTP_tRD2WR
 24

	)

83 
	#DTP_tWR2RD
 25

	)

84 
	#DTP_tRDAP2ACT
 26

	)

85 
	#DTP_tWRAP2ACT
 27

	)

86 
	#DTP_tDCUT0
 28

	)

87 
	#DTP_tDCUT1
 29

	)

88 
	#DTP_tDCUT2
 30

	)

89 
	#DTP_tDCUT3
 31

	)

91 
	#DTP_tBCSTAB
 9

	)

92 
	#DTP_tBCMRD
 10

	)

95 
	#DCU_NOP
 0x0

	)

96 
	#DCU_RUN
 0x1

	)

97 
	#DCU_STOP
 0x2

	)

98 
	#DCU_STOP_LOOP
 0x3

	)

99 
	#DCU_RESET
 0x4

	)

101 
	#DCU_READ
 0

	)

102 
	#DCU_WRITE
 1

	)

105 
	#DCU_NORPT
 0

106 
	#DCU_RPT1X
 1

107 
	#DCU_RPT4X
 2

108 
	#DCU_RPT7X
 3

109 
	#DCU_tBL
 4

110 
	#DCU_tDCUT0
 5

111 
	#DCU_tDCUT1
 6

112 
	#DCU_tDCUT2
 7

113 

	)

114 
	#DCU_NOTAG
 0

	)

115 
	#DCU_ALL_RANKS
 1

	)

118 
	#DCU_CCACHE
 0x0

119 
	#DCU_ECACHE
 0x1

120 
	#DCU_RCACHE
 0x2

124 
	#DDR_PHY_RIDR
 (0x000 << 2)

125 
	#DDR_PHY_PIR
 (0x001 << 2)

126 
	#DDR_PHY_CGCR
 (0x002 << 2)

127 
	#DDR_PHY_CGCR1
 (0x003 << 2)

128 
	#DDR_PHY_PGCR0
 (0x004 << 2)

129 
	#DDR_PHY_PGCR1
 (0x005 << 2)

130 
	#DDR_PHY_PGCR2
 (0x006 << 2)

131 
	#DDR_PHY_PGCR3
 (0x007 << 2)

132 
	#DDR_PHY_PGCR4
 (0x008 << 2)

133 
	#DDR_PHY_PGCR5
 (0x009 << 2)

134 
	#DDR_PHY_PGCR6
 (0x00A << 2)

135 
	#DDR_PHY_PGCR7
 (0x00B << 2)

136 
	#DDR_PHY_PGCR8
 (0x00C << 2)

137 
	#DDR_PHY_PGSR0
 (0x00D << 2)

138 
	#DDR_PHY_PGSR1
 (0x00E << 2)

139 
	#DDR_PHY_PTR0
 (0x010 << 2)

140 
	#DDR_PHY_PTR1
 (0x011 << 2)

141 
	#DDR_PHY_PTR2
 (0x012 << 2)

142 
	#DDR_PHY_PTR3
 (0x013 << 2)

143 
	#DDR_PHY_PTR4
 (0x014 << 2)

144 
	#DDR_PHY_PTR5
 (0x015 << 2)

145 
	#DDR_PHY_PTR6
 (0x016 << 2)

146 
	#DDR_PHY_PLLCR0
 (0x01A << 2)

147 
	#DDR_PHY_PLLCR1
 (0x01B << 2)

148 
	#DDR_PHY_PLLCR2
 (0x01C << 2)

149 
	#DDR_PHY_PLLCR3
 (0x01D << 2)

150 
	#DDR_PHY_PLLCR4
 (0x01E << 2)

151 
	#DDR_PHY_PLLCR5
 (0x01F << 2)

152 
	#DDR_PHY_PLLCR
 (0x020 << 2)

153 
	#DDR_PHY_DXCCR
 (0x022 << 2)

154 
	#DDR_PHY_DSGCR
 (0x024 << 2)

155 
	#DDR_PHY_ODTCR
 (0x026 << 2)

156 
	#DDR_PHY_AACR
 (0x028 << 2)

157 
	#DDR_PHY_GPR0
 (0x030 << 2)

158 
	#DDR_PHY_GPR1
 (0x031 << 2)

159 
	#DDR_PHY_DCR
 (0x040 << 2)

160 
	#DDR_PHY_DTPR0
 (0x044 << 2)

161 
	#DDR_PHY_DTPR1
 (0x045 << 2)

162 
	#DDR_PHY_DTPR2
 (0x046 << 2)

163 
	#DDR_PHY_DTPR3
 (0x047 << 2)

164 
	#DDR_PHY_DTPR4
 (0x048 << 2)

165 
	#DDR_PHY_DTPR5
 (0x049 << 2)

166 
	#DDR_PHY_DTPR6
 (0x04A << 2)

167 
	#DDR_PHY_RDIMMGCR0
 (0x050 << 2)

168 
	#DDR_PHY_RDIMMGCR1
 (0x051 << 2)

169 
	#DDR_PHY_RDIMMGCR2
 (0x052 << 2)

170 
	#DDR_PHY_RDIMMCR0
 (0x054 << 2)

171 
	#DDR_PHY_RDIMMCR1
 (0x055 << 2)

172 
	#DDR_PHY_RDIMMCR2
 (0x056 << 2)

173 
	#DDR_PHY_RDIMMCR3
 (0x057 << 2)

174 
	#DDR_PHY_RDIMMCR4
 (0x058 << 2)

175 
	#DDR_PHY_SCHCR0
 (0x05A << 2)

176 
	#DDR_PHY_SCHCR1
 (0x05B << 2)

177 
	#DDR_PHY_MR0
 (0x060 << 2)

178 
	#DDR_PHY_MR1
 (0x061 << 2)

179 
	#DDR_PHY_MR2
 (0x062 << 2)

180 
	#DDR_PHY_MR3
 (0x063 << 2)

181 
	#DDR_PHY_MR4
 (0x064 << 2)

182 
	#DDR_PHY_MR5
 (0x065 << 2)

183 
	#DDR_PHY_MR6
 (0x066 << 2)

184 
	#DDR_PHY_MR7
 (0x067 << 2)

185 
	#DDR_PHY_MR11
 (0x06B << 2)

186 
	#DDR_PHY_DTCR0
 (0x080 << 2)

187 
	#DDR_PHY_DTCR1
 (0x081 << 2)

188 
	#DDR_PHY_DTAR0
 (0x082 << 2)

189 
	#DDR_PHY_DTAR1
 (0x083 << 2)

190 
	#DDR_PHY_DTAR2
 (0x084 << 2)

191 
	#DDR_PHY_DTDR0
 (0x086 << 2)

192 
	#DDR_PHY_DTDR1
 (0x087 << 2)

193 
	#DDR_PHY_UDDR0
 (0x088 << 2)

194 
	#DDR_PHY_UDDR1
 (0x089 << 2)

195 
	#DDR_PHY_DTEDR0
 (0x08C << 2)

196 
	#DDR_PHY_DTEDR1
 (0x08D << 2)

197 
	#DDR_PHY_DTEDR2
 (0x08E << 2)

198 
	#DDR_PHY_VTDR
 (0x08F << 2)

199 
	#DDR_PHY_CATR0
 (0x090 << 2)

200 
	#DDR_PHY_CATR1
 (0x091 << 2)

201 
	#DDR_PHY_DQSDR0
 (0x094 << 2)

202 
	#DDR_PHY_DQSDR1
 (0x095 << 2)

203 
	#DDR_PHY_DQSDR2
 (0x096 << 2)

204 
	#DDR_PHY_DCUAR
 (0x0C0 << 2)

205 
	#DDR_PHY_DCUDR
 (0x0C1 << 2)

206 
	#DDR_PHY_DCURR
 (0x0C2 << 2)

207 
	#DDR_PHY_DCULR
 (0x0C3 << 2)

208 
	#DDR_PHY_DCUGCR
 (0x0C4 << 2)

209 
	#DDR_PHY_DCUTPR
 (0x0C5 << 2)

210 
	#DDR_PHY_DCUSR0
 (0x0C6 << 2)

211 
	#DDR_PHY_DCUSR1
 (0x0C7 << 2)

212 
	#DDR_PHY_BISTRR
 (0x100 << 2)

213 
	#DDR_PHY_BISTWCR
 (0x101 << 2)

214 
	#DDR_PHY_BISTMSKR0
 (0x102 << 2)

215 
	#DDR_PHY_BISTMSKR1
 (0x103 << 2)

216 
	#DDR_PHY_BISTMSKR2
 (0x104 << 2)

217 
	#DDR_PHY_BISTLSR
 (0x105 << 2)

218 
	#DDR_PHY_BISTAR0
 (0x106 << 2)

219 
	#DDR_PHY_BISTAR1
 (0x107 << 2)

220 
	#DDR_PHY_BISTAR2
 (0x108 << 2)

221 
	#DDR_PHY_BISTAR3
 (0x109 << 2)

222 
	#DDR_PHY_BISTAR4
 (0x10A << 2)

223 
	#DDR_PHY_BISTUDPR
 (0x10B << 2)

224 
	#DDR_PHY_BISTGSR
 (0x10C << 2)

225 
	#DDR_PHY_BISTWER0
 (0x10D << 2)

226 
	#DDR_PHY_BISTWER1
 (0x10E << 2)

227 
	#DDR_PHY_BISTBER0
 (0x10F << 2)

228 
	#DDR_PHY_BISTBER1
 (0x110 << 2)

229 
	#DDR_PHY_BISTBER2
 (0x111 << 2)

230 
	#DDR_PHY_BISTBER3
 (0x112 << 2)

231 
	#DDR_PHY_BISTBER4
 (0x113 << 2)

232 
	#DDR_PHY_BISTWCSR
 (0x114 << 2)

233 
	#DDR_PHY_BISTFWR0
 (0x115 << 2)

234 
	#DDR_PHY_BISTFWR1
 (0x116 << 2)

235 
	#DDR_PHY_BISTFWR2
 (0x117 << 2)

236 
	#DDR_PHY_BISTBER5
 (0x118 << 2)

237 
	#DDR_PHY_RANKIDR
 (0x137 << 2)

238 
	#DDR_PHY_RIOCR0
 (0x138 << 2)

239 
	#DDR_PHY_RIOCR1
 (0x139 << 2)

240 
	#DDR_PHY_RIOCR2
 (0x13A << 2)

241 
	#DDR_PHY_RIOCR3
 (0x13B << 2)

242 
	#DDR_PHY_RIOCR4
 (0x13C << 2)

243 
	#DDR_PHY_RIOCR5
 (0x13D << 2)

244 
	#DDR_PHY_ACIOCR0
 (0x140 << 2)

245 
	#DDR_PHY_ACIOCR1
 (0x141 << 2)

246 
	#DDR_PHY_ACIOCR2
 (0x142 << 2)

247 
	#DDR_PHY_ACIOCR3
 (0x143 << 2)

248 
	#DDR_PHY_ACIOCR4
 (0x144 << 2)

249 
	#DDR_PHY_IOVCR0
 (0x148 << 2)

250 
	#DDR_PHY_IOVCR1
 (0x149 << 2)

251 
	#DDR_PHY_VTCR0
 (0x14A << 2)

252 
	#DDR_PHY_VTCR1
 (0x14B << 2)

253 
	#DDR_PHY_ACBDLR0
 (0x150 << 2)

254 
	#DDR_PHY_ACBDLR1
 (0x151 << 2)

255 
	#DDR_PHY_ACBDLR2
 (0x152 << 2)

256 
	#DDR_PHY_ACBDLR3
 (0x153 << 2)

257 
	#DDR_PHY_ACBDLR4
 (0x154 << 2)

258 
	#DDR_PHY_ACBDLR5
 (0x155 << 2)

259 
	#DDR_PHY_ACBDLR6
 (0x156 << 2)

260 
	#DDR_PHY_ACBDLR7
 (0x157 << 2)

261 
	#DDR_PHY_ACBDLR8
 (0x158 << 2)

262 
	#DDR_PHY_ACBDLR9
 (0x159 << 2)

263 
	#DDR_PHY_ACBDLR10
 (0x15A << 2)

264 
	#DDR_PHY_ACBDLR11
 (0x15B << 2)

265 
	#DDR_PHY_ACBDLR12
 (0x15C << 2)

266 
	#DDR_PHY_ACBDLR13
 (0x15D << 2)

267 
	#DDR_PHY_ACBDLR14
 (0x15E << 2)

268 
	#DDR_PHY_ACLCDLR
 (0x160 << 2)

269 
	#DDR_PHY_ACMDLR0
 (0x168 << 2)

270 
	#DDR_PHY_ACMDLR1
 (0x169 << 2)

271 
	#DDR_PHY_ZQCR
 (0x1A0 << 2)

272 
	#DDR_PHY_ZQ0PR
 (0x1A1 << 2)

273 
	#DDR_PHY_ZQ0DR
 (0x1A2 << 2)

274 
	#DDR_PHY_ZQ0SR
 (0x1A3 << 2)

275 
	#DDR_PHY_ZQ1PR
 (0x1A5 << 2)

276 
	#DDR_PHY_ZQ1DR
 (0x1A6 << 2)

277 
	#DDR_PHY_ZQ1SR
 (0x1A7 << 2)

278 
	#DDR_PHY_ZQ2PR
 (0x1A9 << 2)

279 
	#DDR_PHY_ZQ2DR
 (0x1AA << 2)

280 
	#DDR_PHY_ZQ2SR
 (0x1AB << 2)

281 
	#DDR_PHY_ZQ3PR
 (0x1AD << 2)

282 
	#DDR_PHY_ZQ3DR
 (0x1AE << 2)

283 
	#DDR_PHY_ZQ3SR
 (0x1AF << 2)

284 

	)

285 
	#DDR_PHY_DX0GCR0
 (0x1C0 << 2)

286 
	#DDR_PHY_DX0GCR1
 (0x1C1 << 2)

287 
	#DDR_PHY_DX0GCR2
 (0x1C2 << 2)

288 
	#DDR_PHY_DX0GCR3
 (0x1C3 << 2)

289 
	#DDR_PHY_DX0GCR4
 (0x1C4 << 2)

290 
	#DDR_PHY_DX0GCR5
 (0x1C5 << 2)

291 
	#DDR_PHY_DX0GCR6
 (0x1C6 << 2)

292 
	#DDR_PHY_DX0GCR7
 (0x1C7 << 2)

293 
	#DDR_PHY_DX0GCR8
 (0x1C8 << 2)

294 
	#DDR_PHY_DX0GCR9
 (0x1C9 << 2)

295 
	#DDR_PHY_DX0BDLR0
 (0x1D0 << 2)

296 
	#DDR_PHY_DX0BDLR1
 (0x1D1 << 2)

297 
	#DDR_PHY_DX0BDLR2
 (0x1D2 << 2)

298 
	#DDR_PHY_DX0BDLR3
 (0x1D4 << 2)

299 
	#DDR_PHY_DX0BDLR4
 (0x1D5 << 2)

300 
	#DDR_PHY_DX0BDLR5
 (0x1D6 << 2)

301 
	#DDR_PHY_DX0BDLR6
 (0x1D8 << 2)

302 
	#DDR_PHY_DX0BDLR7
 (0x1D9 << 2)

303 
	#DDR_PHY_DX0BDLR8
 (0x1DA << 2)

304 
	#DDR_PHY_DX0BDLR9
 (0x1DB << 2)

305 
	#DDR_PHY_DX0LCDLR0
 (0x1E0 << 2)

306 
	#DDR_PHY_DX0LCDLR1
 (0x1E1 << 2)

307 
	#DDR_PHY_DX0LCDLR2
 (0x1E2 << 2)

308 
	#DDR_PHY_DX0LCDLR3
 (0x1E3 << 2)

309 
	#DDR_PHY_DX0LCDLR4
 (0x1E4 << 2)

310 
	#DDR_PHY_DX0LCDLR5
 (0x1E5 << 2)

311 
	#DDR_PHY_DX0MDLR0
 (0x1E8 << 2)

312 
	#DDR_PHY_DX0MDLR1
 (0x1E9 << 2)

313 
	#DDR_PHY_DX0GTR0
 (0x1F0 << 2)

314 
	#DDR_PHY_DX0RSR0
 (0x1F4 << 2)

315 
	#DDR_PHY_DX0RSR1
 (0x1F5 << 2)

316 
	#DDR_PHY_DX0RSR2
 (0x1F6 << 2)

317 
	#DDR_PHY_DX0RSR3
 (0x1F7 << 2)

318 
	#DDR_PHY_DX0GSR0
 (0x1F8 << 2)

319 
	#DDR_PHY_DX0GSR1
 (0x1F9 << 2)

320 
	#DDR_PHY_DX0GSR2
 (0x1FA << 2)

321 
	#DDR_PHY_DX0GSR3
 (0x1FB << 2)

322 
	#DDR_PHY_DX0GSR4
 (0x1FC << 2)

323 
	#DDR_PHY_DX0GSR5
 (0x1FD << 2)

324 
	#DDR_PHY_DX0GSR6
 (0x1FE << 2)

325 

	)

326 
	#DDR_PHY_DX1GCR0
 (0x200 << 2)

327 
	#DDR_PHY_DX1GCR1
 (0x201 << 2)

328 
	#DDR_PHY_DX1GCR2
 (0x202 << 2)

329 
	#DDR_PHY_DX1GCR3
 (0x203 << 2)

330 
	#DDR_PHY_DX1GCR4
 (0x204 << 2)

331 
	#DDR_PHY_DX1GCR5
 (0x205 << 2)

332 
	#DDR_PHY_DX1GCR6
 (0x206 << 2)

333 
	#DDR_PHY_DX1GCR7
 (0x207 << 2)

334 
	#DDR_PHY_DX1GCR8
 (0x208 << 2)

335 
	#DDR_PHY_DX1GCR9
 (0x209 << 2)

336 
	#DDR_PHY_DX1BDLR0
 (0x210 << 2)

337 
	#DDR_PHY_DX1BDLR1
 (0x211 << 2)

338 
	#DDR_PHY_DX1BDLR2
 (0x212 << 2)

339 
	#DDR_PHY_DX1BDLR3
 (0x214 << 2)

340 
	#DDR_PHY_DX1BDLR4
 (0x215 << 2)

341 
	#DDR_PHY_DX1BDLR5
 (0x216 << 2)

342 
	#DDR_PHY_DX1BDLR6
 (0x218 << 2)

343 
	#DDR_PHY_DX1BDLR7
 (0x219 << 2)

344 
	#DDR_PHY_DX1BDLR8
 (0x21A << 2)

345 
	#DDR_PHY_DX1BDLR9
 (0x21B << 2)

346 
	#DDR_PHY_DX1LCDLR0
 (0x220 << 2)

347 
	#DDR_PHY_DX1LCDLR1
 (0x221 << 2)

348 
	#DDR_PHY_DX1LCDLR2
 (0x222 << 2)

349 
	#DDR_PHY_DX1LCDLR3
 (0x223 << 2)

350 
	#DDR_PHY_DX1LCDLR4
 (0x224 << 2)

351 
	#DDR_PHY_DX1LCDLR5
 (0x225 << 2)

352 
	#DDR_PHY_DX1MDLR0
 (0x228 << 2)

353 
	#DDR_PHY_DX1MDLR1
 (0x229 << 2)

354 
	#DDR_PHY_DX1GTR0
 (0x230 << 2)

355 
	#DDR_PHY_DX1RSR0
 (0x234 << 2)

356 
	#DDR_PHY_DX1RSR1
 (0x235 << 2)

357 
	#DDR_PHY_DX1RSR2
 (0x236 << 2)

358 
	#DDR_PHY_DX1RSR3
 (0x237 << 2)

359 
	#DDR_PHY_DX1GSR0
 (0x238 << 2)

360 
	#DDR_PHY_DX1GSR1
 (0x239 << 2)

361 
	#DDR_PHY_DX1GSR2
 (0x23A << 2)

362 
	#DDR_PHY_DX1GSR3
 (0x23B << 2)

363 
	#DDR_PHY_DX1GSR4
 (0x23C << 2)

364 
	#DDR_PHY_DX1GSR5
 (0x23D << 2)

365 
	#DDR_PHY_DX1GSR6
 (0x23E << 2)

366 

	)

367 
	#DDR_PHY_DX2GCR0
 (0x240 << 2)

368 
	#DDR_PHY_DX2GCR1
 (0x241 << 2)

369 
	#DDR_PHY_DX2GCR2
 (0x242 << 2)

370 
	#DDR_PHY_DX2GCR3
 (0x243 << 2)

371 
	#DDR_PHY_DX2GCR4
 (0x244 << 2)

372 
	#DDR_PHY_DX2GCR5
 (0x245 << 2)

373 
	#DDR_PHY_DX2GCR6
 (0x246 << 2)

374 
	#DDR_PHY_DX2GCR7
 (0x247 << 2)

375 
	#DDR_PHY_DX2GCR8
 (0x248 << 2)

376 
	#DDR_PHY_DX2GCR9
 (0x249 << 2)

377 
	#DDR_PHY_DX2BDLR0
 (0x250 << 2)

378 
	#DDR_PHY_DX2BDLR1
 (0x251 << 2)

379 
	#DDR_PHY_DX2BDLR2
 (0x252 << 2)

380 
	#DDR_PHY_DX2BDLR3
 (0x254 << 2)

381 
	#DDR_PHY_DX2BDLR4
 (0x255 << 2)

382 
	#DDR_PHY_DX2BDLR5
 (0x256 << 2)

383 
	#DDR_PHY_DX2BDLR6
 (0x258 << 2)

384 
	#DDR_PHY_DX2BDLR7
 (0x259 << 2)

385 
	#DDR_PHY_DX2BDLR8
 (0x25A << 2)

386 
	#DDR_PHY_DX2BDLR9
 (0x25B << 2)

387 
	#DDR_PHY_DX2LCDLR0
 (0x260 << 2)

388 
	#DDR_PHY_DX2LCDLR1
 (0x261 << 2)

389 
	#DDR_PHY_DX2LCDLR2
 (0x262 << 2)

390 
	#DDR_PHY_DX2LCDLR3
 (0x263 << 2)

391 
	#DDR_PHY_DX2LCDLR4
 (0x264 << 2)

392 
	#DDR_PHY_DX2LCDLR5
 (0x265 << 2)

393 
	#DDR_PHY_DX2MDLR0
 (0x268 << 2)

394 
	#DDR_PHY_DX2MDLR1
 (0x269 << 2)

395 
	#DDR_PHY_DX2GTR0
 (0x270 << 2)

396 
	#DDR_PHY_DX2RSR0
 (0x274 << 2)

397 
	#DDR_PHY_DX2RSR1
 (0x275 << 2)

398 
	#DDR_PHY_DX2RSR2
 (0x276 << 2)

399 
	#DDR_PHY_DX2RSR3
 (0x277 << 2)

400 
	#DDR_PHY_DX2GSR0
 (0x278 << 2)

401 
	#DDR_PHY_DX2GSR1
 (0x279 << 2)

402 
	#DDR_PHY_DX2GSR2
 (0x27A << 2)

403 
	#DDR_PHY_DX2GSR3
 (0x27B << 2)

404 
	#DDR_PHY_DX2GSR4
 (0x27C << 2)

405 
	#DDR_PHY_DX2GSR5
 (0x27D << 2)

406 
	#DDR_PHY_DX2GSR6
 (0x27E << 2)

407 

	)

408 
	#DDR_PHY_DX3GCR0
 (0x280 << 2)

409 
	#DDR_PHY_DX3GCR1
 (0x281 << 2)

410 
	#DDR_PHY_DX3GCR2
 (0x282 << 2)

411 
	#DDR_PHY_DX3GCR3
 (0x283 << 2)

412 
	#DDR_PHY_DX3GCR4
 (0x284 << 2)

413 
	#DDR_PHY_DX3GCR5
 (0x285 << 2)

414 
	#DDR_PHY_DX3GCR6
 (0x286 << 2)

415 
	#DDR_PHY_DX3GCR7
 (0x287 << 2)

416 
	#DDR_PHY_DX3GCR8
 (0x288 << 2)

417 
	#DDR_PHY_DX3GCR9
 (0x289 << 2)

418 
	#DDR_PHY_DX3BDLR0
 (0x290 << 2)

419 
	#DDR_PHY_DX3BDLR1
 (0x291 << 2)

420 
	#DDR_PHY_DX3BDLR2
 (0x292 << 2)

421 
	#DDR_PHY_DX3BDLR3
 (0x294 << 2)

422 
	#DDR_PHY_DX3BDLR4
 (0x295 << 2)

423 
	#DDR_PHY_DX3BDLR5
 (0x296 << 2)

424 
	#DDR_PHY_DX3BDLR6
 (0x298 << 2)

425 
	#DDR_PHY_DX3BDLR7
 (0x299 << 2)

426 
	#DDR_PHY_DX3BDLR8
 (0x29A << 2)

427 
	#DDR_PHY_DX3BDLR9
 (0x29B << 2)

428 
	#DDR_PHY_DX3LCDLR0
 (0x2A0 << 2)

429 
	#DDR_PHY_DX3LCDLR1
 (0x2A1 << 2)

430 
	#DDR_PHY_DX3LCDLR2
 (0x2A2 << 2)

431 
	#DDR_PHY_DX3LCDLR3
 (0x2A3 << 2)

432 
	#DDR_PHY_DX3LCDLR4
 (0x2A4 << 2)

433 
	#DDR_PHY_DX3LCDLR5
 (0x2A5 << 2)

434 
	#DDR_PHY_DX3MDLR0
 (0x2A8 << 2)

435 
	#DDR_PHY_DX3MDLR1
 (0x2A9 << 2)

436 
	#DDR_PHY_DX3GTR0
 (0x2B0 << 2)

437 
	#DDR_PHY_DX3RSR0
 (0x2B4 << 2)

438 
	#DDR_PHY_DX3RSR1
 (0x2B5 << 2)

439 
	#DDR_PHY_DX3RSR2
 (0x2B6 << 2)

440 
	#DDR_PHY_DX3RSR3
 (0x2B7 << 2)

441 
	#DDR_PHY_DX3GSR0
 (0x2B8 << 2)

442 
	#DDR_PHY_DX3GSR1
 (0x2B9 << 2)

443 
	#DDR_PHY_DX3GSR2
 (0x2BA << 2)

444 
	#DDR_PHY_DX3GSR3
 (0x2BB << 2)

445 
	#DDR_PHY_DX3GSR4
 (0x2BC << 2)

446 
	#DDR_PHY_DX3GSR5
 (0x2BD << 2)

447 
	#DDR_PHY_DX3GSR6
 (0x2BE << 2)

448 

	)

449 
	#DDR_PHY_DX4GCR0
 (0x2C0 << 2)

450 
	#DDR_PHY_DX4GCR1
 (0x2C1 << 2)

451 
	#DDR_PHY_DX4GCR2
 (0x2C2 << 2)

452 
	#DDR_PHY_DX4GCR3
 (0x2C3 << 2)

453 
	#DDR_PHY_DX4GCR4
 (0x2C4 << 2)

454 
	#DDR_PHY_DX4GCR5
 (0x2C5 << 2)

455 
	#DDR_PHY_DX4GCR6
 (0x2C6 << 2)

456 
	#DDR_PHY_DX4GCR7
 (0x2C7 << 2)

457 
	#DDR_PHY_DX4GCR8
 (0x2C8 << 2)

458 
	#DDR_PHY_DX4GCR9
 (0x2C9 << 2)

459 
	#DDR_PHY_DX4BDLR0
 (0x2D0 << 2)

460 
	#DDR_PHY_DX4BDLR1
 (0x2D1 << 2)

461 
	#DDR_PHY_DX4BDLR2
 (0x2D2 << 2)

462 
	#DDR_PHY_DX4BDLR3
 (0x2D4 << 2)

463 
	#DDR_PHY_DX4BDLR4
 (0x2D5 << 2)

464 
	#DDR_PHY_DX4BDLR5
 (0x2D6 << 2)

465 
	#DDR_PHY_DX4BDLR6
 (0x2D8 << 2)

466 
	#DDR_PHY_DX4BDLR7
 (0x2D9 << 2)

467 
	#DDR_PHY_DX4BDLR8
 (0x2DA << 2)

468 
	#DDR_PHY_DX4BDLR9
 (0x2DB << 2)

469 
	#DDR_PHY_DX4LCDLR0
 (0x2E0 << 2)

470 
	#DDR_PHY_DX4LCDLR1
 (0x2E1 << 2)

471 
	#DDR_PHY_DX4LCDLR2
 (0x2E2 << 2)

472 
	#DDR_PHY_DX4LCDLR3
 (0x2E3 << 2)

473 
	#DDR_PHY_DX4LCDLR4
 (0x2E4 << 2)

474 
	#DDR_PHY_DX4LCDLR5
 (0x2E5 << 2)

475 
	#DDR_PHY_DX4MDLR0
 (0x2E8 << 2)

476 
	#DDR_PHY_DX4MDLR1
 (0x2E9 << 2)

477 
	#DDR_PHY_DX4GTR0
 (0x2F0 << 2)

478 
	#DDR_PHY_DX4RSR0
 (0x2F4 << 2)

479 
	#DDR_PHY_DX4RSR1
 (0x2F5 << 2)

480 
	#DDR_PHY_DX4RSR2
 (0x2F6 << 2)

481 
	#DDR_PHY_DX4RSR3
 (0x2F7 << 2)

482 
	#DDR_PHY_DX4GSR0
 (0x2F8 << 2)

483 
	#DDR_PHY_DX4GSR1
 (0x2F9 << 2)

484 
	#DDR_PHY_DX4GSR2
 (0x2FA << 2)

485 
	#DDR_PHY_DX4GSR3
 (0x2FB << 2)

486 
	#DDR_PHY_DX4GSR4
 (0x2FC << 2)

487 
	#DDR_PHY_DX4GSR5
 (0x2FD << 2)

488 
	#DDR_PHY_DX4GSR6
 (0x2FE << 2)

489 

	)

490 
	#DDR_PHY_DX5GCR0
 (0x300 << 2)

491 
	#DDR_PHY_DX5GCR1
 (0x301 << 2)

492 
	#DDR_PHY_DX5GCR2
 (0x302 << 2)

493 
	#DDR_PHY_DX5GCR3
 (0x303 << 2)

494 
	#DDR_PHY_DX5GCR4
 (0x304 << 2)

495 
	#DDR_PHY_DX5GCR5
 (0x305 << 2)

496 
	#DDR_PHY_DX5GCR6
 (0x306 << 2)

497 
	#DDR_PHY_DX5GCR7
 (0x307 << 2)

498 
	#DDR_PHY_DX5GCR8
 (0x308 << 2)

499 
	#DDR_PHY_DX5GCR9
 (0x309 << 2)

500 
	#DDR_PHY_DX5BDLR0
 (0x310 << 2)

501 
	#DDR_PHY_DX5BDLR1
 (0x311 << 2)

502 
	#DDR_PHY_DX5BDLR2
 (0x312 << 2)

503 
	#DDR_PHY_DX5BDLR3
 (0x314 << 2)

504 
	#DDR_PHY_DX5BDLR4
 (0x315 << 2)

505 
	#DDR_PHY_DX5BDLR5
 (0x316 << 2)

506 
	#DDR_PHY_DX5BDLR6
 (0x318 << 2)

507 
	#DDR_PHY_DX5BDLR7
 (0x319 << 2)

508 
	#DDR_PHY_DX5BDLR8
 (0x31A << 2)

509 
	#DDR_PHY_DX5BDLR9
 (0x31B << 2)

510 
	#DDR_PHY_DX5LCDLR0
 (0x320 << 2)

511 
	#DDR_PHY_DX5LCDLR1
 (0x321 << 2)

512 
	#DDR_PHY_DX5LCDLR2
 (0x322 << 2)

513 
	#DDR_PHY_DX5LCDLR3
 (0x323 << 2)

514 
	#DDR_PHY_DX5LCDLR4
 (0x324 << 2)

515 
	#DDR_PHY_DX5LCDLR5
 (0x325 << 2)

516 
	#DDR_PHY_DX5MDLR0
 (0x328 << 2)

517 
	#DDR_PHY_DX5MDLR1
 (0x329 << 2)

518 
	#DDR_PHY_DX5GTR0
 (0x330 << 2)

519 
	#DDR_PHY_DX5RSR0
 (0x334 << 2)

520 
	#DDR_PHY_DX5RSR1
 (0x335 << 2)

521 
	#DDR_PHY_DX5RSR2
 (0x336 << 2)

522 
	#DDR_PHY_DX5RSR3
 (0x337 << 2)

523 
	#DDR_PHY_DX5GSR0
 (0x338 << 2)

524 
	#DDR_PHY_DX5GSR1
 (0x339 << 2)

525 
	#DDR_PHY_DX5GSR2
 (0x33A << 2)

526 
	#DDR_PHY_DX5GSR3
 (0x33B << 2)

527 
	#DDR_PHY_DX5GSR4
 (0x33C << 2)

528 
	#DDR_PHY_DX5GSR5
 (0x33D << 2)

529 
	#DDR_PHY_DX5GSR6
 (0x33E << 2)

530 

	)

531 
	#DDR_PHY_DX6GCR0
 (0x340 << 2)

532 
	#DDR_PHY_DX6GCR1
 (0x341 << 2)

533 
	#DDR_PHY_DX6GCR2
 (0x342 << 2)

534 
	#DDR_PHY_DX6GCR3
 (0x343 << 2)

535 
	#DDR_PHY_DX6GCR4
 (0x344 << 2)

536 
	#DDR_PHY_DX6GCR5
 (0x345 << 2)

537 
	#DDR_PHY_DX6GCR6
 (0x346 << 2)

538 
	#DDR_PHY_DX6GCR7
 (0x347 << 2)

539 
	#DDR_PHY_DX6GCR8
 (0x348 << 2)

540 
	#DDR_PHY_DX6GCR9
 (0x349 << 2)

541 
	#DDR_PHY_DX6BDLR0
 (0x350 << 2)

542 
	#DDR_PHY_DX6BDLR1
 (0x351 << 2)

543 
	#DDR_PHY_DX6BDLR2
 (0x352 << 2)

544 
	#DDR_PHY_DX6BDLR3
 (0x354 << 2)

545 
	#DDR_PHY_DX6BDLR4
 (0x355 << 2)

546 
	#DDR_PHY_DX6BDLR5
 (0x356 << 2)

547 
	#DDR_PHY_DX6BDLR6
 (0x358 << 2)

548 
	#DDR_PHY_DX6BDLR7
 (0x359 << 2)

549 
	#DDR_PHY_DX6BDLR8
 (0x35A << 2)

550 
	#DDR_PHY_DX6BDLR9
 (0x35B << 2)

551 
	#DDR_PHY_DX6LCDLR0
 (0x360 << 2)

552 
	#DDR_PHY_DX6LCDLR1
 (0x361 << 2)

553 
	#DDR_PHY_DX6LCDLR2
 (0x362 << 2)

554 
	#DDR_PHY_DX6LCDLR3
 (0x363 << 2)

555 
	#DDR_PHY_DX6LCDLR4
 (0x364 << 2)

556 
	#DDR_PHY_DX6LCDLR5
 (0x365 << 2)

557 
	#DDR_PHY_DX6MDLR0
 (0x368 << 2)

558 
	#DDR_PHY_DX6MDLR1
 (0x369 << 2)

559 
	#DDR_PHY_DX6GTR0
 (0x370 << 2)

560 
	#DDR_PHY_DX6RSR0
 (0x374 << 2)

561 
	#DDR_PHY_DX6RSR1
 (0x375 << 2)

562 
	#DDR_PHY_DX6RSR2
 (0x376 << 2)

563 
	#DDR_PHY_DX6RSR3
 (0x377 << 2)

564 
	#DDR_PHY_DX6GSR0
 (0x378 << 2)

565 
	#DDR_PHY_DX6GSR1
 (0x379 << 2)

566 
	#DDR_PHY_DX6GSR2
 (0x37A << 2)

567 
	#DDR_PHY_DX6GSR3
 (0x37B << 2)

568 
	#DDR_PHY_DX6GSR4
 (0x37C << 2)

569 
	#DDR_PHY_DX6GSR5
 (0x37D << 2)

570 
	#DDR_PHY_DX6GSR6
 (0x37E << 2)

571 

	)

572 
	#DDR_PHY_DX7GCR0
 (0x380 << 2)

573 
	#DDR_PHY_DX7GCR1
 (0x381 << 2)

574 
	#DDR_PHY_DX7GCR2
 (0x382 << 2)

575 
	#DDR_PHY_DX7GCR3
 (0x383 << 2)

576 
	#DDR_PHY_DX7GCR4
 (0x384 << 2)

577 
	#DDR_PHY_DX7GCR5
 (0x385 << 2)

578 
	#DDR_PHY_DX7GCR6
 (0x386 << 2)

579 
	#DDR_PHY_DX7GCR7
 (0x387 << 2)

580 
	#DDR_PHY_DX7GCR8
 (0x388 << 2)

581 
	#DDR_PHY_DX7GCR9
 (0x389 << 2)

582 
	#DDR_PHY_DX7BDLR0
 (0x390 << 2)

583 
	#DDR_PHY_DX7BDLR1
 (0x391 << 2)

584 
	#DDR_PHY_DX7BDLR2
 (0x392 << 2)

585 
	#DDR_PHY_DX7BDLR3
 (0x394 << 2)

586 
	#DDR_PHY_DX7BDLR4
 (0x395 << 2)

587 
	#DDR_PHY_DX7BDLR5
 (0x396 << 2)

588 
	#DDR_PHY_DX7BDLR6
 (0x398 << 2)

589 
	#DDR_PHY_DX7BDLR7
 (0x399 << 2)

590 
	#DDR_PHY_DX7BDLR8
 (0x39A << 2)

591 
	#DDR_PHY_DX7BDLR9
 (0x39B << 2)

592 
	#DDR_PHY_DX7LCDLR0
 (0x3A0 << 2)

593 
	#DDR_PHY_DX7LCDLR1
 (0x3A1 << 2)

594 
	#DDR_PHY_DX7LCDLR2
 (0x3A2 << 2)

595 
	#DDR_PHY_DX7LCDLR3
 (0x3A3 << 2)

596 
	#DDR_PHY_DX7LCDLR4
 (0x3A4 << 2)

597 
	#DDR_PHY_DX7LCDLR5
 (0x3A5 << 2)

598 
	#DDR_PHY_DX7MDLR0
 (0x3A8 << 2)

599 
	#DDR_PHY_DX7MDLR1
 (0x3A9 << 2)

600 
	#DDR_PHY_DX7GTR0
 (0x3B0 << 2)

601 
	#DDR_PHY_DX7RSR0
 (0x3B4 << 2)

602 
	#DDR_PHY_DX7RSR1
 (0x3B5 << 2)

603 
	#DDR_PHY_DX7RSR2
 (0x3B6 << 2)

604 
	#DDR_PHY_DX7RSR3
 (0x3B7 << 2)

605 
	#DDR_PHY_DX7GSR0
 (0x3B8 << 2)

606 
	#DDR_PHY_DX7GSR1
 (0x3B9 << 2)

607 
	#DDR_PHY_DX7GSR2
 (0x3BA << 2)

608 
	#DDR_PHY_DX7GSR3
 (0x3BB << 2)

609 
	#DDR_PHY_DX7GSR4
 (0x3BC << 2)

610 
	#DDR_PHY_DX7GSR5
 (0x3BD << 2)

611 
	#DDR_PHY_DX7GSR6
 (0x3BE << 2)

612 

	)

617 
	#DDR_CTRL_MSTR
 0x0

	)

618 
	#DDR_CTRL_STAT
 0x4

	)

619 
	#DDR_CTRL_MRCTRL0
 0x10

	)

620 
	#DDR_CTRL_MRCTRL1
 0x14

	)

621 
	#DDR_CTRL_MRSTAT
 0x18

	)

622 
	#DDR_CTRL_MRCTRL2
 0x1c

	)

623 
	#DDR_CTRL_DERATEEN
 0x20

	)

624 
	#DDR_CTRL_DERATEINT
 0x24

	)

625 
	#DDR_CTRL_DERATECTL
 0x2c

	)

626 
	#DDR_CTRL_PWRCTL
 0x30

	)

627 
	#DDR_CTRL_PWRTMG
 0x34

	)

628 
	#DDR_CTRL_HWLPCTL
 0x38

	)

629 
	#DDR_CTRL_RFSHCTL0
 0x50

	)

630 
	#DDR_CTRL_RFSHCTL1
 0x54

	)

631 
	#DDR_CTRL_RFSHCTL3
 0x60

	)

632 
	#DDR_CTRL_RFSHTMG
 0x64

	)

633 
	#DDR_CTRL_RFSHTMG1
 0x68

	)

634 
	#DDR_CTRL_CRCPARCTL0
 0xc0

	)

635 
	#DDR_CTRL_CRCPARCTL1
 0xc4

	)

636 
	#DDR_CTRL_CRCPARSTAT
 0xcc

	)

637 
	#DDR_CTRL_INIT0
 0xd0

	)

638 
	#DDR_CTRL_INIT1
 0xd4

	)

639 
	#DDR_CTRL_INIT2
 0xd8

	)

640 
	#DDR_CTRL_INIT3
 0xdc

	)

641 
	#DDR_CTRL_INIT4
 0xe0

	)

642 
	#DDR_CTRL_INIT5
 0xe4

	)

643 
	#DDR_CTRL_INIT6
 0xe8

	)

644 
	#DDR_CTRL_INIT7
 0xec

	)

645 
	#DDR_CTRL_DIMMCTL
 0xf0

	)

646 
	#DDR_CTRL_RANKCTL
 0xf4

	)

647 
	#DDR_CTRL_DRAMTMG0
 0x100

	)

648 
	#DDR_CTRL_DRAMTMG1
 0x104

	)

649 
	#DDR_CTRL_DRAMTMG2
 0x108

	)

650 
	#DDR_CTRL_DRAMTMG3
 0x10c

	)

651 
	#DDR_CTRL_DRAMTMG4
 0x110

	)

652 
	#DDR_CTRL_DRAMTMG5
 0x114

	)

653 
	#DDR_CTRL_DRAMTMG6
 0x118

	)

654 
	#DDR_CTRL_DRAMTMG7
 0x11c

	)

655 
	#DDR_CTRL_DRAMTMG8
 0x120

	)

656 
	#DDR_CTRL_DRAMTMG9
 0x124

	)

657 
	#DDR_CTRL_DRAMTMG10
 0x128

	)

658 
	#DDR_CTRL_DRAMTMG11
 0x12c

	)

659 
	#DDR_CTRL_DRAMTMG12
 0x130

	)

660 
	#DDR_CTRL_DRAMTMG13
 0x134

	)

661 
	#DDR_CTRL_DRAMTMG14
 0x138

	)

662 
	#DDR_CTRL_DRAMTMG15
 0x13c

	)

663 
	#DDR_CTRL_ZQCTL0
 0x180

	)

664 
	#DDR_CTRL_ZQCTL1
 0x184

	)

665 
	#DDR_CTRL_ZQCTL2
 0x188

	)

666 
	#DDR_CTRL_ZQSTAT
 0x18c

	)

667 
	#DDR_CTRL_DFITMG0
 0x190

	)

668 
	#DDR_CTRL_DFITMG1
 0x194

	)

669 
	#DDR_CTRL_DFILPCFG0
 0x198

	)

670 
	#DDR_CTRL_DFILPCFG1
 0x19c

	)

671 
	#DDR_CTRL_DFIUPD0
 0x1a0

	)

672 
	#DDR_CTRL_DFIUPD1
 0x1a4

	)

673 
	#DDR_CTRL_DFIUPD2
 0x1a8

	)

674 
	#DDR_CTRL_DFIMISC
 0x1b0

	)

675 
	#DDR_CTRL_DFITMG2
 0x1b4

	)

676 
	#DDR_CTRL_DFITMG3
 0x1b8

	)

677 
	#DDR_CTRL_DFISTAT
 0x1bc

	)

678 
	#DDR_CTRL_DBICTL
 0x1c0

	)

679 
	#DDR_CTRL_DFIPHYMSTR
 0x1c4

	)

680 
	#DDR_CTRL_ADDRMAP0
 0x200

	)

681 
	#DDR_CTRL_ADDRMAP1
 0x204

	)

682 
	#DDR_CTRL_ADDRMAP2
 0x208

	)

683 
	#DDR_CTRL_ADDRMAP3
 0x20c

	)

684 
	#DDR_CTRL_ADDRMAP4
 0x210

	)

685 
	#DDR_CTRL_ADDRMAP5
 0x214

	)

686 
	#DDR_CTRL_ADDRMAP6
 0x218

	)

687 
	#DDR_CTRL_ADDRMAP7
 0x21c

	)

688 
	#DDR_CTRL_ADDRMAP8
 0x220

	)

689 
	#DDR_CTRL_ADDRMAP9
 0x224

	)

690 
	#DDR_CTRL_ADDRMAP10
 0x228

	)

691 
	#DDR_CTRL_ADDRMAP11
 0x22c

	)

692 
	#DDR_CTRL_ODTCFG
 0x240

	)

693 
	#DDR_CTRL_ODTMAP
 0x244

	)

694 
	#DDR_CTRL_SCHED
 0x250

	)

695 
	#DDR_CTRL_SCHED1
 0x254

	)

696 
	#DDR_CTRL_PERFHPR1
 0x25c

	)

697 
	#DDR_CTRL_PERFLPR1
 0x264

	)

698 
	#DDR_CTRL_PERFWR1
 0x26c

	)

699 
	#DDR_CTRL_DBG0
 0x300

	)

700 
	#DDR_CTRL_DBG1
 0x304

	)

701 
	#DDR_CTRL_DBGCAM
 0x308

	)

702 
	#DDR_CTRL_DBGCMD
 0x30c

	)

703 
	#DDR_CTRL_DBGSTAT
 0x310

	)

704 
	#DDR_CTRL_SWCTL
 0x320

	)

705 
	#DDR_CTRL_SWSTAT
 0x324

	)

706 
	#DDR_CTRL_POISONCFG
 0x36c

	)

707 
	#DDR_CTRL_POISONSTAT
 0x370

	)

708 
	#DDR_CTRL_DERATESTAT
 0x3f0

	)

709 
	#DDR_CTRL_PSTAT
 0x3fc

	)

710 
	#DDR_CTRL_PCCFG
 0x400

	)

711 
	#DDR_CTRL_PCFGR_0
 0x404

	)

712 
	#DDR_CTRL_PCFGW_0
 0x408

	)

713 
	#DDR_CTRL_PCTRL_0
 0x490

	)

714 
	#DDR_CTRL_PCFGQOS0_0
 0x494

	)

715 
	#DDR_CTRL_PCFGQOS1_0
 0x498

	)

716 
	#DDR_CTRL_PCFGWQOS0_0
 0x49c

	)

717 
	#DDR_CTRL_PCFGWQOS1_0
 0x4a0

	)

718 
	#DDR_CTRL_PCFGR_1
 0x404 + 0x0b0

	)

719 
	#DDR_CTRL_PCFGW_1
 0x408 + 0x0b0

	)

720 
	#DDR_CTRL_PCTRL_1
 0x490 + 0x0b0

	)

721 
	#DDR_CTRL_PCFGQOS0_1
 0x494 + 0x0b0

	)

722 
	#DDR_CTRL_PCFGQOS1_1
 0x498 + 0x0b0

	)

723 
	#DDR_CTRL_PCFGWQOS0_1
 0x49¯+ 0x0b0

	)

724 
	#DDR_CTRL_PCFGWQOS1_1
 0x4a0 + 0x0b0

	)

725 
	#DDR_CTRL_PCFGR_2
 0x404 + (0x0b0 * 2)

	)

726 
	#DDR_CTRL_PCFGW_2
 0x408 + (0x0b0 * 2)

	)

727 
	#DDR_CTRL_PCTRL_2
 0x490 + (0x0b0 * 2)

	)

728 
	#DDR_CTRL_PCFGQOS0_2
 0x494 + (0x0b0 * 2)

	)

729 
	#DDR_CTRL_PCFGQOS1_2
 0x498 + (0x0b0 * 2)

	)

730 
	#DDR_CTRL_PCFGWQOS0_2
 0x49¯+ (0x0b0 * 2)

	)

731 
	#DDR_CTRL_PCFGWQOS1_2
 0x4a0 + (0x0b0 * 2)

	)

732 
	#DDR_CTRL_PCFGR_3
 0x404 + (0x0b0 * 3)

	)

733 
	#DDR_CTRL_PCFGW_3
 0x408 + (0x0b0 * 3)

	)

734 
	#DDR_CTRL_PCTRL_3
 0x490 + (0x0b0 * 3)

	)

735 
	#DDR_CTRL_PCFGQOS0_3
 0x494 + (0x0b0 * 3)

	)

736 
	#DDR_CTRL_PCFGQOS1_3
 0x498 + (0x0b0 * 3)

	)

737 
	#DDR_CTRL_PCFGWQOS0_3
 0x49¯+ (0x0b0 * 3)

	)

738 
	#DDR_CTRL_PCFGWQOS1_3
 0x4a0 + (0x0b0 * 3)

	)

739 
	#DDR_CTRL_PCFGR_4
 0x404 + (0x0b0 * 4)

	)

740 
	#DDR_CTRL_PCFGW_4
 0x408 + (0x0b0 * 4)

	)

741 
	#DDR_CTRL_PCTRL_4
 0x490 + (0x0b0 * 4)

	)

742 
	#DDR_CTRL_PCFGQOS0_4
 0x494 + (0x0b0 * 4)

	)

743 
	#DDR_CTRL_PCFGQOS1_4
 0x498 + (0x0b0 * 4)

	)

744 
	#DDR_CTRL_PCFGWQOS0_4
 0x49¯+ (0x0b0 * 4)

	)

745 
	#DDR_CTRL_PCFGWQOS1_4
 0x4a0 + (0x0b0 * 4)

	@drivers/ddr_chiptest_define.h

4 
	#DDR4_2400


	)

5 
	#DDR4_2133


	)

6 
	#DDR4_1600


	)

7 
	#DDR3_1600


	)

8 
	#DDR3_800


	)

9 
	#LPDDR3_1866


	)

14 
	#DDR_LP_TEST


	)

15 
	#DDR_DCU_TEST


	)

16 
	#DDR_BIST_TEST


	)

23 
	#DDR4_RTT_NOM_DIS
 0

	)

24 
	#DDR4_RTT_NOM_4
 1

	)

25 
	#DDR4_RTT_NOM_2
 2

	)

26 
	#DDR4_RTT_NOM_6
 3

	)

27 
	#DDR4_RTT_NOM_1
 4

	)

28 
	#DDR4_RTT_NOM_5
 5

	)

29 
	#DDR4_RTT_NOM_3
 6

	)

30 
	#DDR4_RTT_NOM_7
 7

	)

32 
	#DDR4_RTT_WR_ODT_OFF
 0

	)

33 
	#DDR4_RTT_WR_2
 1

	)

34 
	#DDR4_RTT_WR_1
 2

	)

35 
	#DDR4_RTT_WR_Z
 3

	)

36 
	#DDR4_RTT_WR_4
 4

	)

38 
	#DDR4_RTT_PARK_DIS
 0

	)

39 
	#DDR4_RTT_PARK_4
 1

	)

40 
	#DDR4_RTT_PARK_2
 2

	)

41 
	#DDR4_RTT_PARK_6
 3

	)

42 
	#DDR4_RTT_PARK_1
 4

	)

43 
	#DDR4_RTT_PARK_5
 5

	)

44 
	#DDR4_RTT_PARK_3
 6

	)

45 
	#DDR4_RTT_PARK_7
 7

	)

47 
	#DDR4_VREFDQ_RANGE
 0

	)

48 
	#DDR4_VREFDQ_VALUE
 0x1D

	)

49 
	#DDR4_OUTPUT_DRIVE_IMP_7
 0

50 
	#DDR4_OUTPUT_DRIVE_IMP_5
 1

51 

	)

65 
	#DDR4_2400_MODE_REG0
 0x0834

	)

66 
	#DDR4_2133_MODE_REG0
 0x0624

	)

67 
	#DDR4_1600_MODE_REG0
 0x0214

	)

69 
	#DDR4_2400_MODE_REG1
 ((1<<0)|(
DDR4_OUTPUT_DRIVE_IMP_7
<<1)|(
DDR4_RTT_NOM_4
<<8))

	)

70 
	#DDR4_2133_MODE_REG1
 ((1<<0)|(
DDR4_OUTPUT_DRIVE_IMP_7
<<1)|(
DDR4_RTT_NOM_4
<<8))

	)

71 
	#DDR4_1600_MODE_REG1
 ((1<<0)|(
DDR4_OUTPUT_DRIVE_IMP_7
<<1)|(
DDR4_RTT_NOM_4
<<8))

72 

	)

73 
	#DDR4_2400_MODE_REG2
 ((3<<3)|(
DDR4_RTT_WR_ODT_OFF
<<9))

	)

74 
	#DDR4_2133_MODE_REG2
 ((3<<3)|(
DDR4_RTT_WR_ODT_OFF
<<9))

	)

75 
	#DDR4_1600_MODE_REG2
 ((2<<3)|(
DDR4_RTT_WR_ODT_OFF
<<9))

	)

77 
	#DDR4_2400_MODE_REG3
 0x0200

	)

78 
	#DDR4_2133_MODE_REG3
 0x0200

	)

79 
	#DDR4_1600_MODE_REG3
 0x0

	)

81 
	#DDR4_2400_MODE_REG4
 0x0200

	)

82 
	#DDR4_2133_MODE_REG4
 0x0200

	)

83 
	#DDR4_1600_MODE_REG4
 0x0200

	)

85 
	#DDR4_2400_MODE_REG5
 ((1<<10)|(
DDR4_RTT_PARK_DIS
<<6))

	)

86 
	#DDR4_2133_MODE_REG5
 ((1<<10)|(
DDR4_RTT_PARK_DIS
<<6))

	)

87 
	#DDR4_1600_MODE_REG5
 ((1<<10)|(
DDR4_RTT_PARK_DIS
<<6))

	)

89 
	#DDR4_2400_MODE_REG6
 (
DDR4_VREFDQ_VALUE
<<0)|(
DDR4_VREFDQ_RANGE
<<6)|(2<<10)

	)

90 
	#DDR4_2133_MODE_REG6
 (
DDR4_VREFDQ_VALUE
<<0)|(
DDR4_VREFDQ_RANGE
<<6)|(2<<10)

	)

91 
	#DDR4_1600_MODE_REG6
 (
DDR4_VREFDQ_VALUE
<<0)|(
DDR4_VREFDQ_RANGE
<<6)|(1<<10)

	)

94 
	#DDR3_1600_MODE_REG0
 0x1D70

	)

95 
	#DDR3_800_MODE_REG0
 0x1D70

	)

97 
	#DDR3_1600_MODE_REG1
 0x0004

	)

98 
	#DDR3_800_MODE_REG1
 0x0004

	)

100 
	#DDR3_1600_MODE_REG2
 0x0018

	)

101 
	#DDR3_800_MODE_REG2
 0x0018

	)

103 
	#DDR3_1600_MODE_REG3
 0x0

	)

104 
	#DDR3_800_MODE_REG3
 0x0

	)

114 
	#PHY_ODTCR
 ((0 <<0Ë| (0x1 <<16))

	)

115 
	#PHY_AACR
 0

	)

116 
	#PHY_DTCR0
 ((8<<28)|(2<<14)|(1<<13)|(1<<12)|(1<<7)|(7<<0))

	)

117 
	#PHY_DTCR1
 ((1<<16)|(1<<11)|(2<<8)|(3<<4)|(1<<2)|(1<<1)|(1<<0))

	)

118 
	#PHY_DTAR0
 (4<<24)

	)

119 
	#PHY_DTAR1
 (1<<16)

	)

120 
	#PHY_DTAR2
 ((3<<16)|(2<<0))

	)

121 
	#PHY_ACIOCR0
 ((1<<29)|(1<<28)|(1<<4))

	)

122 
	#PHY_ACIOCR1
 0

	)

124 
	#PHY_ACIOCR3
 0

	)

126 
	#PHY_IOVCR0
 ((3<<26)|(1<<25)|(1<<24)|(9<<0))

	)

127 
	#PHY_IOVCR1
 ((1<<8)|(0x9<<0))

	)

128 
	#PHY_DXnGCR0
 ((1<<30)|(1<<9)|(1<<2)|(1<<0))

	)

129 
	#PHY_DXnGCR1
 0

	)

130 
	#PHY_DXnGCR2
 0

	)

131 
	#PHY_DXnGCR3
 0xfffc0000

	)

132 
	#PHY_DXnGCR4
 ((3<<26)|(1<<25)|(0xf<<2))

	)

135 
	#DDR4_ZPROG_ASYM_DRV_PD
 0xb

	)

136 
	#DDR4_ZPROG_ASYM_DRV_PU
 0xb

	)

137 
	#DDR4_ZPROG_PU_ODT_ONLY
 0x7

	)

139 
	#DDR3_ZPROG_ASYM_DRV_PD
 0xb

	)

140 
	#DDR3_ZPROG_ASYM_DRV_PU
 0xb

	)

141 
	#DDR3_ZPROG_PU_ODT_ONLY
 0x7

	)

143 
	#DX_VREF
 0x21

144 
	#PHY_DXnGCR5
 (
DX_VREF
<<24)|(DX_VREF<<16)|(DX_VREF<<8)|(DX_VREF<<0)

	)

	@drivers/ddr_debug_reg.h

1 
¥öt_èsk
 (
°rög
[]);

3 
	$ddr_debug_èsk
 (
ddr_num
)

6 
ddr_˘æ_ba£_addr
 ;

7 
ddr_phy_ba£_addr
 ;

8 i‡(
ddr_num
==0) {

9 
ddr_˘æ_ba£_addr
 = 0xF9000000 ;

10 
ddr_phy_ba£_addr
 = 0xF9100000 ;

11 } i‡(
ddr_num
==1) {

12 
ddr_˘æ_ba£_addr
 = 0xF9010000 ;

13 
ddr_phy_ba£_addr
 = 0xF9101000 ;

14 } i‡(
ddr_num
==2) {

15 
ddr_˘æ_ba£_addr
 = 0xF9020000 ;

16 
ddr_phy_ba£_addr
 = 0xF9102000 ;

17 } i‡(
ddr_num
==3) {

18 
ddr_˘æ_ba£_addr
 = 0xF9030000 ;

19 
ddr_phy_ba£_addr
 = 0xF9103000 ;

21 
	`¥öt_èsk
("Un-spuuort DDR deviceÇumber!\n");

24 
ªad_d©a
 ;

28 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x0 );

29 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_MSTR = 0x%x",
ªad_d©a
);

30 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4 );

31 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_STAT = 0x%x",
ªad_d©a
);

32 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x10 );

33 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_MRCTRL0 = 0x%x",
ªad_d©a
);

34 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x14 );

35 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_MRCTRL1 = 0x%x",
ªad_d©a
);

36 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x18 );

37 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_MRSTAT = 0x%x",
ªad_d©a
);

38 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1c );

39 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_MRCTRL2 = 0x%x",
ªad_d©a
);

40 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x20 );

41 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DERATEEN = 0x%x",
ªad_d©a
);

42 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x24 );

43 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DERATEINT = 0x%x",
ªad_d©a
);

44 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x2c );

45 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DERATECTL = 0x%x",
ªad_d©a
);

46 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x30 );

47 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PWRCTL = 0x%x",
ªad_d©a
);

48 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x34 );

49 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PWRTMG = 0x%x",
ªad_d©a
);

50 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x38 );

51 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_HWLPCTL = 0x%x",
ªad_d©a
);

52 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x50 );

53 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RFSHCTL0 = 0x%x",
ªad_d©a
);

54 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x54 );

55 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RFSHCTL1 = 0x%x",
ªad_d©a
);

56 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x60 );

57 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RFSHCTL3 = 0x%x",
ªad_d©a
);

58 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x64 );

59 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RFSHTMG = 0x%x",
ªad_d©a
);

60 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x68 );

61 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RFSHTMG1 = 0x%x",
ªad_d©a
);

62 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xc0 );

63 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_CRCPARCTL0 = 0x%x",
ªad_d©a
);

64 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xc4 );

65 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_CRCPARCTL1 = 0x%x",
ªad_d©a
);

66 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xcc );

67 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_CRCPARSTAT = 0x%x",
ªad_d©a
);

68 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xd0 );

69 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT0 = 0x%x",
ªad_d©a
);

70 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xd4 );

71 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT1 = 0x%x",
ªad_d©a
);

72 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xd8 );

73 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT2 = 0x%x",
ªad_d©a
);

74 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xdc );

75 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT3 = 0x%x",
ªad_d©a
);

76 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xe0 );

77 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT4 = 0x%x",
ªad_d©a
);

78 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xe4 );

79 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT5 = 0x%x",
ªad_d©a
);

80 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xe8 );

81 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT6 = 0x%x",
ªad_d©a
);

82 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xec );

83 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_INIT7 = 0x%x",
ªad_d©a
);

84 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xf0 );

85 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DIMMCTL = 0x%x",
ªad_d©a
);

86 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0xf4 );

87 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_RANKCTL = 0x%x",
ªad_d©a
);

88 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x100 );

89 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG0 = 0x%x",
ªad_d©a
);

90 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x104 );

91 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG1 = 0x%x",
ªad_d©a
);

92 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x108 );

93 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG2 = 0x%x",
ªad_d©a
);

94 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x10c );

95 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG3 = 0x%x",
ªad_d©a
);

96 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x110 );

97 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG4 = 0x%x",
ªad_d©a
);

98 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x114 );

99 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG5 = 0x%x",
ªad_d©a
);

100 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x118 );

101 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG6 = 0x%x",
ªad_d©a
);

102 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x11c );

103 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG7 = 0x%x",
ªad_d©a
);

104 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x120 );

105 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG8 = 0x%x",
ªad_d©a
);

106 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x124 );

107 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG9 = 0x%x",
ªad_d©a
);

108 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x128 );

109 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG10 = 0x%x",
ªad_d©a
);

110 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x12c );

111 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG11 = 0x%x",
ªad_d©a
);

112 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x130 );

113 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG12 = 0x%x",
ªad_d©a
);

114 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x134 );

115 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG13 = 0x%x",
ªad_d©a
);

116 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x138 );

117 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG14 = 0x%x",
ªad_d©a
);

118 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x13c );

119 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DRAMTMG15 = 0x%x",
ªad_d©a
);

120 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x180 );

121 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ZQCTL0 = 0x%x",
ªad_d©a
);

122 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x184 );

123 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ZQCTL1 = 0x%x",
ªad_d©a
);

124 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x188 );

125 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ZQCTL2 = 0x%x",
ªad_d©a
);

126 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x18c );

127 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ZQSTAT = 0x%x",
ªad_d©a
);

128 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x190 );

129 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFITMG0 = 0x%x",
ªad_d©a
);

130 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x194 );

131 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFITMG1 = 0x%x",
ªad_d©a
);

132 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x198 );

133 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFILPCFG0 = 0x%x",
ªad_d©a
);

134 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x19c );

135 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFILPCFG1 = 0x%x",
ªad_d©a
);

136 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1a0 );

137 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFIUPD0 = 0x%x",
ªad_d©a
);

138 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1a4 );

139 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFIUPD1 = 0x%x",
ªad_d©a
);

140 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1a8 );

141 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFIUPD2 = 0x%x",
ªad_d©a
);

142 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1b0 );

143 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFIMISC = 0x%x",
ªad_d©a
);

144 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1b4 );

145 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFITMG2 = 0x%x",
ªad_d©a
);

146 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1b8 );

147 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFITMG3 = 0x%x",
ªad_d©a
);

148 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1bc );

149 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFISTAT = 0x%x",
ªad_d©a
);

150 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1c0 );

151 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBICTL = 0x%x",
ªad_d©a
);

152 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x1c4 );

153 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DFIPHYMSTR = 0x%x",
ªad_d©a
);

154 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x200 );

155 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP0 = 0x%x",
ªad_d©a
);

156 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x204 );

157 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP1 = 0x%x",
ªad_d©a
);

158 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x208 );

159 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP2 = 0x%x",
ªad_d©a
);

160 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x20c );

161 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP3 = 0x%x",
ªad_d©a
);

162 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x210 );

163 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP4 = 0x%x",
ªad_d©a
);

164 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x214 );

165 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP5 = 0x%x",
ªad_d©a
);

166 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x218 );

167 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP6 = 0x%x",
ªad_d©a
);

168 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x21c );

169 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP7 = 0x%x",
ªad_d©a
);

170 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x220 );

171 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP8 = 0x%x",
ªad_d©a
);

172 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x224 );

173 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP9 = 0x%x",
ªad_d©a
);

174 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x228 );

175 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP10 = 0x%x",
ªad_d©a
);

176 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x22c );

177 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ADDRMAP11 = 0x%x",
ªad_d©a
);

178 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x240 );

179 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ODTCFG = 0x%x",
ªad_d©a
);

180 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x244 );

181 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_ODTMAP = 0x%x",
ªad_d©a
);

182 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x250 );

183 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_SCHED = 0x%x",
ªad_d©a
);

184 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x254 );

185 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_SCHED1 = 0x%x",
ªad_d©a
);

186 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x25c );

187 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PERFHPR1 = 0x%x",
ªad_d©a
);

188 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x264 );

189 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PERFLPR1 = 0x%x",
ªad_d©a
);

190 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x26c );

191 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PERFWR1 = 0x%x",
ªad_d©a
);

192 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x300 );

193 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBG0 = 0x%x",
ªad_d©a
);

194 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x304 );

195 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBG1 = 0x%x",
ªad_d©a
);

196 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x308 );

197 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBGCAM = 0x%x",
ªad_d©a
);

198 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x30c );

199 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBGCMD = 0x%x",
ªad_d©a
);

200 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x310 );

201 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DBGSTAT = 0x%x",
ªad_d©a
);

202 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x320 );

203 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_SWCTL = 0x%x",
ªad_d©a
);

204 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x324 );

205 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_SWSTAT = 0x%x",
ªad_d©a
);

206 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x36c );

207 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_POISONCFG = 0x%x",
ªad_d©a
);

208 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x370 );

209 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_POISONSTAT = 0x%x",
ªad_d©a
);

210 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x3f0 );

211 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_DERATESTAT = 0x%x",
ªad_d©a
);

212 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x3fc );

213 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PSTAT = 0x%x",
ªad_d©a
);

214 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x400 );

215 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCCFG = 0x%x",
ªad_d©a
);

216 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x404 );

217 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGR_0 = 0x%x",
ªad_d©a
);

218 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x408 );

219 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGW_0 = 0x%x",
ªad_d©a
);

220 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x490 );

221 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCTRL_0 = 0x%x",
ªad_d©a
);

222 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x494 );

223 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS0_0 = 0x%x",
ªad_d©a
);

224 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x498 );

225 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS1_0 = 0x%x",
ªad_d©a
);

226 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x49c );

227 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS0_0 = 0x%x",
ªad_d©a
);

228 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4a0 );

229 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS1_0 = 0x%x",
ªad_d©a
);

230 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x404 + 0x0b0 );

231 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGR_1 = 0x%x",
ªad_d©a
);

232 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x408 + 0x0b0 );

233 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGW_1 = 0x%x",
ªad_d©a
);

234 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x490 + 0x0b0 );

235 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCTRL_1 = 0x%x",
ªad_d©a
);

236 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x494 + 0x0b0 );

237 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS0_1 = 0x%x",
ªad_d©a
);

238 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x498 + 0x0b0 );

239 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS1_1 = 0x%x",
ªad_d©a
);

240 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x49c + 0x0b0 );

241 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS0_1 = 0x%x",
ªad_d©a
);

242 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4a0 + 0x0b0 );

243 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS1_1 = 0x%x",
ªad_d©a
);

244 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x404 + (0x0b0 * 2) );

245 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGR_2 = 0x%x",
ªad_d©a
);

246 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x408 + (0x0b0 * 2) );

247 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGW_2 = 0x%x",
ªad_d©a
);

248 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x490 + (0x0b0 * 2) );

249 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCTRL_2 = 0x%x",
ªad_d©a
);

250 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x494 + (0x0b0 * 2) );

251 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS0_2 = 0x%x",
ªad_d©a
);

252 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x498 + (0x0b0 * 2) );

253 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS1_2 = 0x%x",
ªad_d©a
);

254 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x49c + (0x0b0 * 2) );

255 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS0_2 = 0x%x",
ªad_d©a
);

256 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4a0 + (0x0b0 * 2) );

257 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS1_2 = 0x%x",
ªad_d©a
);

258 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x404 + (0x0b0 * 3) );

259 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGR_3 = 0x%x",
ªad_d©a
);

260 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x408 + (0x0b0 * 3) );

261 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGW_3 = 0x%x",
ªad_d©a
);

262 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x490 + (0x0b0 * 3) );

263 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCTRL_3 = 0x%x",
ªad_d©a
);

264 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x494 + (0x0b0 * 3) );

265 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS0_3 = 0x%x",
ªad_d©a
);

266 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x498 + (0x0b0 * 3) );

267 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS1_3 = 0x%x",
ªad_d©a
);

268 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x49c + (0x0b0 * 3) );

269 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS0_3 = 0x%x",
ªad_d©a
);

270 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4a0 + (0x0b0 * 3) );

271 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS1_3 = 0x%x",
ªad_d©a
);

272 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x404 + (0x0b0 * 4) );

273 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGR_4 = 0x%x",
ªad_d©a
);

274 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x408 + (0x0b0 * 4) );

275 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGW_4 = 0x%x",
ªad_d©a
);

276 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x490 + (0x0b0 * 4) );

277 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCTRL_4 = 0x%x",
ªad_d©a
);

278 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x494 + (0x0b0 * 4) );

279 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS0_4 = 0x%x",
ªad_d©a
);

280 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x498 + (0x0b0 * 4) );

281 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGQOS1_4 = 0x%x",
ªad_d©a
);

282 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x49c + (0x0b0 * 4) );

283 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS0_4 = 0x%x",
ªad_d©a
);

284 
ªad_d©a

	`ªg_ªad32
(
ddr_˘æ_ba£_addr
+0x4a0 + (0x0b0 * 4) );

285 
	`¥ötf
("DDR_CFG_DEBUG : DDR_CTRL_PCFGWQOS1_4 = 0x%x",
ªad_d©a
);

291 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x000 << 2));

292 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIDR = 0x%x",
ªad_d©a
);

293 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x001 << 2));

294 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PIR = 0x%x",
ªad_d©a
);

295 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x002 << 2));

296 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_CGCR = 0x%x",
ªad_d©a
);

297 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x003 << 2));

298 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_CGCR1 = 0x%x",
ªad_d©a
);

299 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x004 << 2));

300 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR0 = 0x%x",
ªad_d©a
);

301 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x005 << 2));

302 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR1 = 0x%x",
ªad_d©a
);

303 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x006 << 2));

304 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR2 = 0x%x",
ªad_d©a
);

305 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x007 << 2));

306 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR3 = 0x%x",
ªad_d©a
);

307 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x008 << 2));

308 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR4 = 0x%x",
ªad_d©a
);

309 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x009 << 2));

310 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR5 = 0x%x",
ªad_d©a
);

311 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x00A << 2));

312 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR6 = 0x%x",
ªad_d©a
);

313 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x00B << 2));

314 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR7 = 0x%x",
ªad_d©a
);

315 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x00C << 2));

316 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGCR8 = 0x%x",
ªad_d©a
);

317 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x00D << 2));

318 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGSR0 = 0x%x",
ªad_d©a
);

319 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x00E << 2));

320 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PGSR1 = 0x%x",
ªad_d©a
);

321 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x010 << 2));

322 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR0 = 0x%x",
ªad_d©a
);

323 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x011 << 2));

324 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR1 = 0x%x",
ªad_d©a
);

325 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x012 << 2));

326 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR2 = 0x%x",
ªad_d©a
);

327 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x013 << 2));

328 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR3 = 0x%x",
ªad_d©a
);

329 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x014 << 2));

330 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR4 = 0x%x",
ªad_d©a
);

331 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x015 << 2));

332 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR5 = 0x%x",
ªad_d©a
);

333 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x016 << 2));

334 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PTR6 = 0x%x",
ªad_d©a
);

335 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01A << 2));

336 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR0 = 0x%x",
ªad_d©a
);

337 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01B << 2));

338 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR1 = 0x%x",
ªad_d©a
);

339 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01C << 2));

340 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR2 = 0x%x",
ªad_d©a
);

341 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01D << 2));

342 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR3 = 0x%x",
ªad_d©a
);

343 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01E << 2));

344 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR4 = 0x%x",
ªad_d©a
);

345 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x01F << 2));

346 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR5 = 0x%x",
ªad_d©a
);

347 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x020 << 2));

348 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_PLLCR = 0x%x",
ªad_d©a
);

349 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x022 << 2));

350 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DXCCR = 0x%x",
ªad_d©a
);

351 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x024 << 2));

352 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DSGCR = 0x%x",
ªad_d©a
);

353 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x026 << 2));

354 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ODTCR = 0x%x",
ªad_d©a
);

355 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x028 << 2));

356 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_AACR = 0x%x",
ªad_d©a
);

357 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x030 << 2));

358 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_GPR0 = 0x%x",
ªad_d©a
);

359 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x031 << 2));

360 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_GPR1 = 0x%x",
ªad_d©a
);

361 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x040 << 2));

362 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCR = 0x%x",
ªad_d©a
);

363 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x044 << 2));

364 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR0 = 0x%x",
ªad_d©a
);

365 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x045 << 2));

366 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR1 = 0x%x",
ªad_d©a
);

367 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x046 << 2));

368 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR2 = 0x%x",
ªad_d©a
);

369 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x047 << 2));

370 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR3 = 0x%x",
ªad_d©a
);

371 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x048 << 2));

372 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR4 = 0x%x",
ªad_d©a
);

373 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x049 << 2));

374 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR5 = 0x%x",
ªad_d©a
);

375 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x04A << 2));

376 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTPR6 = 0x%x",
ªad_d©a
);

377 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x050 << 2));

378 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMGCR0 = 0x%x",
ªad_d©a
);

379 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x051 << 2));

380 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMGCR1 = 0x%x",
ªad_d©a
);

381 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x052 << 2));

382 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMGCR2 = 0x%x",
ªad_d©a
);

383 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x054 << 2));

384 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMCR0 = 0x%x",
ªad_d©a
);

385 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x055 << 2));

386 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMCR1 = 0x%x",
ªad_d©a
);

387 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x056 << 2));

388 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMCR2 = 0x%x",
ªad_d©a
);

389 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x057 << 2));

390 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMCR3 = 0x%x",
ªad_d©a
);

391 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x058 << 2));

392 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RDIMMCR4 = 0x%x",
ªad_d©a
);

393 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x05A << 2));

394 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_SCHCR0 = 0x%x",
ªad_d©a
);

395 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x05B << 2));

396 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_SCHCR1 = 0x%x",
ªad_d©a
);

397 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x060 << 2));

398 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR0 = 0x%x",
ªad_d©a
);

399 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x061 << 2));

400 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR1 = 0x%x",
ªad_d©a
);

401 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x062 << 2));

402 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR2 = 0x%x",
ªad_d©a
);

403 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x063 << 2));

404 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR3 = 0x%x",
ªad_d©a
);

405 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x064 << 2));

406 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR4 = 0x%x",
ªad_d©a
);

407 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x065 << 2));

408 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR5 = 0x%x",
ªad_d©a
);

409 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x066 << 2));

410 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR6 = 0x%x",
ªad_d©a
);

411 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x067 << 2));

412 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR7 = 0x%x",
ªad_d©a
);

413 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x06B << 2));

414 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_MR11 = 0x%x",
ªad_d©a
);

415 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x080 << 2));

416 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTCR0 = 0x%x",
ªad_d©a
);

417 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x081 << 2));

418 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTCR1 = 0x%x",
ªad_d©a
);

419 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x082 << 2));

420 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTAR0 = 0x%x",
ªad_d©a
);

421 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x083 << 2));

422 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTAR1 = 0x%x",
ªad_d©a
);

423 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x084 << 2));

424 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTAR2 = 0x%x",
ªad_d©a
);

425 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x086 << 2));

426 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTDR0 = 0x%x",
ªad_d©a
);

427 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x087 << 2));

428 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTDR1 = 0x%x",
ªad_d©a
);

429 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x088 << 2));

430 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_UDDR0 = 0x%x",
ªad_d©a
);

431 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x089 << 2));

432 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_UDDR1 = 0x%x",
ªad_d©a
);

433 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x08C << 2));

434 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTEDR0 = 0x%x",
ªad_d©a
);

435 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x08D << 2));

436 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTEDR1 = 0x%x",
ªad_d©a
);

437 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x08E << 2));

438 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DTEDR2 = 0x%x",
ªad_d©a
);

439 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x08F << 2));

440 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_VTDR = 0x%x",
ªad_d©a
);

441 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x090 << 2));

442 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_CATR0 = 0x%x",
ªad_d©a
);

443 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x091 << 2));

444 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_CATR1 = 0x%x",
ªad_d©a
);

445 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x094 << 2));

446 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DQSDR0 = 0x%x",
ªad_d©a
);

447 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x095 << 2));

448 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DQSDR1 = 0x%x",
ªad_d©a
);

449 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x096 << 2));

450 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DQSDR2 = 0x%x",
ªad_d©a
);

451 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C0 << 2));

452 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUAR = 0x%x",
ªad_d©a
);

453 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C1 << 2));

454 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUDR = 0x%x",
ªad_d©a
);

455 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C2 << 2));

456 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCURR = 0x%x",
ªad_d©a
);

457 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C3 << 2));

458 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCULR = 0x%x",
ªad_d©a
);

459 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C4 << 2));

460 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUGCR = 0x%x",
ªad_d©a
);

461 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C5 << 2));

462 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUTPR = 0x%x",
ªad_d©a
);

463 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C6 << 2));

464 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUSR0 = 0x%x",
ªad_d©a
);

465 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x0C7 << 2));

466 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DCUSR1 = 0x%x",
ªad_d©a
);

467 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x100 << 2));

468 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTRR = 0x%x",
ªad_d©a
);

469 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x101 << 2));

470 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTWCR = 0x%x",
ªad_d©a
);

471 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x102 << 2));

472 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTMSKR0 = 0x%x",
ªad_d©a
);

473 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x103 << 2));

474 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTMSKR1 = 0x%x",
ªad_d©a
);

475 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x104 << 2));

476 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTMSKR2 = 0x%x",
ªad_d©a
);

477 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x105 << 2));

478 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTLSR = 0x%x",
ªad_d©a
);

479 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x106 << 2));

480 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTAR0 = 0x%x",
ªad_d©a
);

481 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x107 << 2));

482 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTAR1 = 0x%x",
ªad_d©a
);

483 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x108 << 2));

484 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTAR2 = 0x%x",
ªad_d©a
);

485 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x109 << 2));

486 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTAR3 = 0x%x",
ªad_d©a
);

487 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10A << 2));

488 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTAR4 = 0x%x",
ªad_d©a
);

489 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10B << 2));

490 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTUDPR = 0x%x",
ªad_d©a
);

491 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10C << 2));

492 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTGSR = 0x%x",
ªad_d©a
);

493 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10D << 2));

494 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTWER0 = 0x%x",
ªad_d©a
);

495 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10E << 2));

496 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTWER1 = 0x%x",
ªad_d©a
);

497 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x10F << 2));

498 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER0 = 0x%x",
ªad_d©a
);

499 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x110 << 2));

500 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER1 = 0x%x",
ªad_d©a
);

501 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x111 << 2));

502 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER2 = 0x%x",
ªad_d©a
);

503 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x112 << 2));

504 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER3 = 0x%x",
ªad_d©a
);

505 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x113 << 2));

506 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER4 = 0x%x",
ªad_d©a
);

507 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x114 << 2));

508 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTWCSR = 0x%x",
ªad_d©a
);

509 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x115 << 2));

510 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTFWR0 = 0x%x",
ªad_d©a
);

511 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x116 << 2));

512 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTFWR1 = 0x%x",
ªad_d©a
);

513 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x117 << 2));

514 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTFWR2 = 0x%x",
ªad_d©a
);

515 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x118 << 2));

516 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_BISTBER5 = 0x%x",
ªad_d©a
);

517 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x137 << 2));

518 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RANKIDR = 0x%x",
ªad_d©a
);

519 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x138 << 2));

520 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR0 = 0x%x",
ªad_d©a
);

521 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x139 << 2));

522 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR1 = 0x%x",
ªad_d©a
);

523 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x13A << 2));

524 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR2 = 0x%x",
ªad_d©a
);

525 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x13B << 2));

526 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR3 = 0x%x",
ªad_d©a
);

527 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x13C << 2));

528 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR4 = 0x%x",
ªad_d©a
);

529 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x13D << 2));

530 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_RIOCR5 = 0x%x",
ªad_d©a
);

531 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x140 << 2));

532 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACIOCR0 = 0x%x",
ªad_d©a
);

533 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x141 << 2));

534 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACIOCR1 = 0x%x",
ªad_d©a
);

535 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x142 << 2));

536 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACIOCR2 = 0x%x",
ªad_d©a
);

537 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x143 << 2));

538 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACIOCR3 = 0x%x",
ªad_d©a
);

539 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x144 << 2));

540 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACIOCR4 = 0x%x",
ªad_d©a
);

541 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x148 << 2));

542 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_IOVCR0 = 0x%x",
ªad_d©a
);

543 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x149 << 2));

544 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_IOVCR1 = 0x%x",
ªad_d©a
);

545 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x14A << 2));

546 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_VTCR0 = 0x%x",
ªad_d©a
);

547 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x14B << 2));

548 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_VTCR1 = 0x%x",
ªad_d©a
);

549 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x150 << 2));

550 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR0 = 0x%x",
ªad_d©a
);

551 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x151 << 2));

552 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR1 = 0x%x",
ªad_d©a
);

553 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x152 << 2));

554 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR2 = 0x%x",
ªad_d©a
);

555 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x153 << 2));

556 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR3 = 0x%x",
ªad_d©a
);

557 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x154 << 2));

558 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR4 = 0x%x",
ªad_d©a
);

559 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x155 << 2));

560 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR5 = 0x%x",
ªad_d©a
);

561 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x156 << 2));

562 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR6 = 0x%x",
ªad_d©a
);

563 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x157 << 2));

564 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR7 = 0x%x",
ªad_d©a
);

565 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x158 << 2));

566 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR8 = 0x%x",
ªad_d©a
);

567 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x159 << 2));

568 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR9 = 0x%x",
ªad_d©a
);

569 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x15A << 2));

570 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR10 = 0x%x",
ªad_d©a
);

571 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x15B << 2));

572 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR11 = 0x%x",
ªad_d©a
);

573 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x15C << 2));

574 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR12 = 0x%x",
ªad_d©a
);

575 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x15D << 2));

576 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR13 = 0x%x",
ªad_d©a
);

577 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x15E << 2));

578 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACBDLR14 = 0x%x",
ªad_d©a
);

579 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x160 << 2));

580 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACLCDLR = 0x%x",
ªad_d©a
);

581 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x168 << 2));

582 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACMDLR0 = 0x%x",
ªad_d©a
);

583 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x169 << 2));

584 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ACMDLR1 = 0x%x",
ªad_d©a
);

585 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A0 << 2));

586 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQCR = 0x%x",
ªad_d©a
);

587 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A1 << 2));

588 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ0PR = 0x%x",
ªad_d©a
);

589 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A2 << 2));

590 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ0DR = 0x%x",
ªad_d©a
);

591 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A3 << 2));

592 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ0SR = 0x%x",
ªad_d©a
);

593 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A5 << 2));

594 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ1PR = 0x%x",
ªad_d©a
);

595 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A6 << 2));

596 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ1DR = 0x%x",
ªad_d©a
);

597 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A7 << 2));

598 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ1SR = 0x%x",
ªad_d©a
);

599 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1A9 << 2));

600 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ2PR = 0x%x",
ªad_d©a
);

601 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1AA << 2));

602 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ2DR = 0x%x",
ªad_d©a
);

603 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1AB << 2));

604 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ2SR = 0x%x",
ªad_d©a
);

605 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1AD << 2));

606 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ3PR = 0x%x",
ªad_d©a
);

607 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1AE << 2));

608 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ3DR = 0x%x",
ªad_d©a
);

609 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1AF << 2));

610 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_ZQ3SR = 0x%x",
ªad_d©a
);

611 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C0 << 2));

612 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR0 = 0x%x",
ªad_d©a
);

613 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C1 << 2));

614 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR1 = 0x%x",
ªad_d©a
);

615 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C2 << 2));

616 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR2 = 0x%x",
ªad_d©a
);

617 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C3 << 2));

618 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR3 = 0x%x",
ªad_d©a
);

619 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C4 << 2));

620 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR4 = 0x%x",
ªad_d©a
);

621 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C5 << 2));

622 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR5 = 0x%x",
ªad_d©a
);

623 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C6 << 2));

624 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR6 = 0x%x",
ªad_d©a
);

625 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C7 << 2));

626 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR7 = 0x%x",
ªad_d©a
);

627 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C8 << 2));

628 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR8 = 0x%x",
ªad_d©a
);

629 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1C9 << 2));

630 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GCR9 = 0x%x",
ªad_d©a
);

631 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D0 << 2));

632 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR0 = 0x%x",
ªad_d©a
);

633 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D1 << 2));

634 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR1 = 0x%x",
ªad_d©a
);

635 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D2 << 2));

636 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR2 = 0x%x",
ªad_d©a
);

637 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D4 << 2));

638 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR3 = 0x%x",
ªad_d©a
);

639 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D5 << 2));

640 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR4 = 0x%x",
ªad_d©a
);

641 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D6 << 2));

642 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR5 = 0x%x",
ªad_d©a
);

643 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D8 << 2));

644 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR6 = 0x%x",
ªad_d©a
);

645 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1D9 << 2));

646 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR7 = 0x%x",
ªad_d©a
);

647 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1DA << 2));

648 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR8 = 0x%x",
ªad_d©a
);

649 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1DB << 2));

650 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0BDLR9 = 0x%x",
ªad_d©a
);

651 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E0 << 2));

652 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR0 = 0x%x",
ªad_d©a
);

653 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E1 << 2));

654 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR1 = 0x%x",
ªad_d©a
);

655 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E2 << 2));

656 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR2 = 0x%x",
ªad_d©a
);

657 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E3 << 2));

658 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR3 = 0x%x",
ªad_d©a
);

659 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E4 << 2));

660 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR4 = 0x%x",
ªad_d©a
);

661 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E5 << 2));

662 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0LCDLR5 = 0x%x",
ªad_d©a
);

663 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E8 << 2));

664 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0MDLR0 = 0x%x",
ªad_d©a
);

665 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1E9 << 2));

666 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0MDLR1 = 0x%x",
ªad_d©a
);

667 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F0 << 2));

668 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GTR0 = 0x%x",
ªad_d©a
);

669 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F4 << 2));

670 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0RSR0 = 0x%x",
ªad_d©a
);

671 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F5 << 2));

672 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0RSR1 = 0x%x",
ªad_d©a
);

673 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F6 << 2));

674 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0RSR2 = 0x%x",
ªad_d©a
);

675 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F7 << 2));

676 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0RSR3 = 0x%x",
ªad_d©a
);

677 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F8 << 2));

678 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR0 = 0x%x",
ªad_d©a
);

679 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1F9 << 2));

680 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR1 = 0x%x",
ªad_d©a
);

681 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1FA << 2));

682 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR2 = 0x%x",
ªad_d©a
);

683 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1FB << 2));

684 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR3 = 0x%x",
ªad_d©a
);

685 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1FC << 2));

686 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR4 = 0x%x",
ªad_d©a
);

687 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1FD << 2));

688 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR5 = 0x%x",
ªad_d©a
);

689 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x1FE << 2));

690 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX0GSR6 = 0x%x",
ªad_d©a
);

691 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x200 << 2));

692 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR0 = 0x%x",
ªad_d©a
);

693 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x201 << 2));

694 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR1 = 0x%x",
ªad_d©a
);

695 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x202 << 2));

696 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR2 = 0x%x",
ªad_d©a
);

697 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x203 << 2));

698 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR3 = 0x%x",
ªad_d©a
);

699 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x204 << 2));

700 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR4 = 0x%x",
ªad_d©a
);

701 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x205 << 2));

702 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR5 = 0x%x",
ªad_d©a
);

703 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x206 << 2));

704 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR6 = 0x%x",
ªad_d©a
);

705 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x207 << 2));

706 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR7 = 0x%x",
ªad_d©a
);

707 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x208 << 2));

708 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR8 = 0x%x",
ªad_d©a
);

709 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x209 << 2));

710 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GCR9 = 0x%x",
ªad_d©a
);

711 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x210 << 2));

712 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR0 = 0x%x",
ªad_d©a
);

713 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x211 << 2));

714 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR1 = 0x%x",
ªad_d©a
);

715 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x212 << 2));

716 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR2 = 0x%x",
ªad_d©a
);

717 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x214 << 2));

718 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR3 = 0x%x",
ªad_d©a
);

719 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x215 << 2));

720 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR4 = 0x%x",
ªad_d©a
);

721 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x216 << 2));

722 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR5 = 0x%x",
ªad_d©a
);

723 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x218 << 2));

724 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR6 = 0x%x",
ªad_d©a
);

725 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x219 << 2));

726 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR7 = 0x%x",
ªad_d©a
);

727 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x21A << 2));

728 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR8 = 0x%x",
ªad_d©a
);

729 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x21B << 2));

730 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1BDLR9 = 0x%x",
ªad_d©a
);

731 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x220 << 2));

732 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR0 = 0x%x",
ªad_d©a
);

733 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x221 << 2));

734 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR1 = 0x%x",
ªad_d©a
);

735 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x222 << 2));

736 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR2 = 0x%x",
ªad_d©a
);

737 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x223 << 2));

738 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR3 = 0x%x",
ªad_d©a
);

739 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x224 << 2));

740 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR4 = 0x%x",
ªad_d©a
);

741 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x225 << 2));

742 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1LCDLR5 = 0x%x",
ªad_d©a
);

743 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x228 << 2));

744 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1MDLR0 = 0x%x",
ªad_d©a
);

745 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x229 << 2));

746 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1MDLR1 = 0x%x",
ªad_d©a
);

747 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x230 << 2));

748 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GTR0 = 0x%x",
ªad_d©a
);

749 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x234 << 2));

750 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1RSR0 = 0x%x",
ªad_d©a
);

751 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x235 << 2));

752 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1RSR1 = 0x%x",
ªad_d©a
);

753 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x236 << 2));

754 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1RSR2 = 0x%x",
ªad_d©a
);

755 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x237 << 2));

756 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1RSR3 = 0x%x",
ªad_d©a
);

757 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x238 << 2));

758 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR0 = 0x%x",
ªad_d©a
);

759 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x239 << 2));

760 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR1 = 0x%x",
ªad_d©a
);

761 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x23A << 2));

762 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR2 = 0x%x",
ªad_d©a
);

763 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x23B << 2));

764 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR3 = 0x%x",
ªad_d©a
);

765 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x23C << 2));

766 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR4 = 0x%x",
ªad_d©a
);

767 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x23D << 2));

768 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR5 = 0x%x",
ªad_d©a
);

769 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x23E << 2));

770 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX1GSR6 = 0x%x",
ªad_d©a
);

771 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x240 << 2));

772 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR0 = 0x%x",
ªad_d©a
);

773 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x241 << 2));

774 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR1 = 0x%x",
ªad_d©a
);

775 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x242 << 2));

776 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR2 = 0x%x",
ªad_d©a
);

777 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x243 << 2));

778 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR3 = 0x%x",
ªad_d©a
);

779 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x244 << 2));

780 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR4 = 0x%x",
ªad_d©a
);

781 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x245 << 2));

782 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR5 = 0x%x",
ªad_d©a
);

783 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x246 << 2));

784 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR6 = 0x%x",
ªad_d©a
);

785 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x247 << 2));

786 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR7 = 0x%x",
ªad_d©a
);

787 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x248 << 2));

788 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR8 = 0x%x",
ªad_d©a
);

789 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x249 << 2));

790 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GCR9 = 0x%x",
ªad_d©a
);

791 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x250 << 2));

792 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR0 = 0x%x",
ªad_d©a
);

793 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x251 << 2));

794 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR1 = 0x%x",
ªad_d©a
);

795 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x252 << 2));

796 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR2 = 0x%x",
ªad_d©a
);

797 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x254 << 2));

798 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR3 = 0x%x",
ªad_d©a
);

799 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x255 << 2));

800 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR4 = 0x%x",
ªad_d©a
);

801 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x256 << 2));

802 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR5 = 0x%x",
ªad_d©a
);

803 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x258 << 2));

804 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR6 = 0x%x",
ªad_d©a
);

805 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x259 << 2));

806 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR7 = 0x%x",
ªad_d©a
);

807 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x25A << 2));

808 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR8 = 0x%x",
ªad_d©a
);

809 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x25B << 2));

810 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2BDLR9 = 0x%x",
ªad_d©a
);

811 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x260 << 2));

812 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR0 = 0x%x",
ªad_d©a
);

813 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x261 << 2));

814 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR1 = 0x%x",
ªad_d©a
);

815 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x262 << 2));

816 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR2 = 0x%x",
ªad_d©a
);

817 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x263 << 2));

818 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR3 = 0x%x",
ªad_d©a
);

819 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x264 << 2));

820 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR4 = 0x%x",
ªad_d©a
);

821 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x265 << 2));

822 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2LCDLR5 = 0x%x",
ªad_d©a
);

823 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x268 << 2));

824 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2MDLR0 = 0x%x",
ªad_d©a
);

825 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x269 << 2));

826 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2MDLR1 = 0x%x",
ªad_d©a
);

827 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x270 << 2));

828 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GTR0 = 0x%x",
ªad_d©a
);

829 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x274 << 2));

830 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2RSR0 = 0x%x",
ªad_d©a
);

831 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x275 << 2));

832 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2RSR1 = 0x%x",
ªad_d©a
);

833 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x276 << 2));

834 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2RSR2 = 0x%x",
ªad_d©a
);

835 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x277 << 2));

836 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2RSR3 = 0x%x",
ªad_d©a
);

837 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x278 << 2));

838 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR0 = 0x%x",
ªad_d©a
);

839 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x279 << 2));

840 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR1 = 0x%x",
ªad_d©a
);

841 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x27A << 2));

842 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR2 = 0x%x",
ªad_d©a
);

843 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x27B << 2));

844 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR3 = 0x%x",
ªad_d©a
);

845 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x27C << 2));

846 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR4 = 0x%x",
ªad_d©a
);

847 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x27D << 2));

848 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR5 = 0x%x",
ªad_d©a
);

849 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x27E << 2));

850 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX2GSR6 = 0x%x",
ªad_d©a
);

851 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x280 << 2));

852 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR0 = 0x%x",
ªad_d©a
);

853 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x281 << 2));

854 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR1 = 0x%x",
ªad_d©a
);

855 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x282 << 2));

856 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR2 = 0x%x",
ªad_d©a
);

857 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x283 << 2));

858 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR3 = 0x%x",
ªad_d©a
);

859 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x284 << 2));

860 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR4 = 0x%x",
ªad_d©a
);

861 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x285 << 2));

862 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR5 = 0x%x",
ªad_d©a
);

863 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x286 << 2));

864 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR6 = 0x%x",
ªad_d©a
);

865 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x287 << 2));

866 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR7 = 0x%x",
ªad_d©a
);

867 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x288 << 2));

868 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR8 = 0x%x",
ªad_d©a
);

869 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x289 << 2));

870 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GCR9 = 0x%x",
ªad_d©a
);

871 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x290 << 2));

872 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR0 = 0x%x",
ªad_d©a
);

873 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x291 << 2));

874 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR1 = 0x%x",
ªad_d©a
);

875 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x292 << 2));

876 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR2 = 0x%x",
ªad_d©a
);

877 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x294 << 2));

878 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR3 = 0x%x",
ªad_d©a
);

879 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x295 << 2));

880 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR4 = 0x%x",
ªad_d©a
);

881 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x296 << 2));

882 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR5 = 0x%x",
ªad_d©a
);

883 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x298 << 2));

884 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR6 = 0x%x",
ªad_d©a
);

885 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x299 << 2));

886 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR7 = 0x%x",
ªad_d©a
);

887 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x29A << 2));

888 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR8 = 0x%x",
ªad_d©a
);

889 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x29B << 2));

890 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3BDLR9 = 0x%x",
ªad_d©a
);

891 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A0 << 2));

892 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR0 = 0x%x",
ªad_d©a
);

893 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A1 << 2));

894 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR1 = 0x%x",
ªad_d©a
);

895 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A2 << 2));

896 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR2 = 0x%x",
ªad_d©a
);

897 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A3 << 2));

898 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR3 = 0x%x",
ªad_d©a
);

899 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A4 << 2));

900 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR4 = 0x%x",
ªad_d©a
);

901 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A5 << 2));

902 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3LCDLR5 = 0x%x",
ªad_d©a
);

903 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A8 << 2));

904 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3MDLR0 = 0x%x",
ªad_d©a
);

905 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2A9 << 2));

906 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3MDLR1 = 0x%x",
ªad_d©a
);

907 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B0 << 2));

908 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GTR0 = 0x%x",
ªad_d©a
);

909 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B4 << 2));

910 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3RSR0 = 0x%x",
ªad_d©a
);

911 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B5 << 2));

912 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3RSR1 = 0x%x",
ªad_d©a
);

913 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B6 << 2));

914 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3RSR2 = 0x%x",
ªad_d©a
);

915 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B7 << 2));

916 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3RSR3 = 0x%x",
ªad_d©a
);

917 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B8 << 2));

918 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR0 = 0x%x",
ªad_d©a
);

919 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2B9 << 2));

920 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR1 = 0x%x",
ªad_d©a
);

921 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2BA << 2));

922 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR2 = 0x%x",
ªad_d©a
);

923 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2BB << 2));

924 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR3 = 0x%x",
ªad_d©a
);

925 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2BC << 2));

926 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR4 = 0x%x",
ªad_d©a
);

927 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2BD << 2));

928 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR5 = 0x%x",
ªad_d©a
);

929 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2BE << 2));

930 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX3GSR6 = 0x%x",
ªad_d©a
);

931 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C0 << 2));

932 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR0 = 0x%x",
ªad_d©a
);

933 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C1 << 2));

934 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR1 = 0x%x",
ªad_d©a
);

935 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C2 << 2));

936 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR2 = 0x%x",
ªad_d©a
);

937 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C3 << 2));

938 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR3 = 0x%x",
ªad_d©a
);

939 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C4 << 2));

940 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR4 = 0x%x",
ªad_d©a
);

941 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C5 << 2));

942 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR5 = 0x%x",
ªad_d©a
);

943 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C6 << 2));

944 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR6 = 0x%x",
ªad_d©a
);

945 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C7 << 2));

946 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR7 = 0x%x",
ªad_d©a
);

947 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C8 << 2));

948 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR8 = 0x%x",
ªad_d©a
);

949 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2C9 << 2));

950 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GCR9 = 0x%x",
ªad_d©a
);

951 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D0 << 2));

952 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR0 = 0x%x",
ªad_d©a
);

953 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D1 << 2));

954 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR1 = 0x%x",
ªad_d©a
);

955 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D2 << 2));

956 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR2 = 0x%x",
ªad_d©a
);

957 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D4 << 2));

958 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR3 = 0x%x",
ªad_d©a
);

959 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D5 << 2));

960 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR4 = 0x%x",
ªad_d©a
);

961 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D6 << 2));

962 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR5 = 0x%x",
ªad_d©a
);

963 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D8 << 2));

964 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR6 = 0x%x",
ªad_d©a
);

965 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2D9 << 2));

966 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR7 = 0x%x",
ªad_d©a
);

967 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2DA << 2));

968 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR8 = 0x%x",
ªad_d©a
);

969 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2DB << 2));

970 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4BDLR9 = 0x%x",
ªad_d©a
);

971 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E0 << 2));

972 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR0 = 0x%x",
ªad_d©a
);

973 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E1 << 2));

974 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR1 = 0x%x",
ªad_d©a
);

975 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E2 << 2));

976 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR2 = 0x%x",
ªad_d©a
);

977 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E3 << 2));

978 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR3 = 0x%x",
ªad_d©a
);

979 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E4 << 2));

980 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR4 = 0x%x",
ªad_d©a
);

981 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E5 << 2));

982 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4LCDLR5 = 0x%x",
ªad_d©a
);

983 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E8 << 2));

984 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4MDLR0 = 0x%x",
ªad_d©a
);

985 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2E9 << 2));

986 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4MDLR1 = 0x%x",
ªad_d©a
);

987 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F0 << 2));

988 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GTR0 = 0x%x",
ªad_d©a
);

989 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F4 << 2));

990 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4RSR0 = 0x%x",
ªad_d©a
);

991 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F5 << 2));

992 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4RSR1 = 0x%x",
ªad_d©a
);

993 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F6 << 2));

994 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4RSR2 = 0x%x",
ªad_d©a
);

995 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F7 << 2));

996 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4RSR3 = 0x%x",
ªad_d©a
);

997 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F8 << 2));

998 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR0 = 0x%x",
ªad_d©a
);

999 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2F9 << 2));

1000 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR1 = 0x%x",
ªad_d©a
);

1001 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2FA << 2));

1002 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR2 = 0x%x",
ªad_d©a
);

1003 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2FB << 2));

1004 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR3 = 0x%x",
ªad_d©a
);

1005 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2FC << 2));

1006 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR4 = 0x%x",
ªad_d©a
);

1007 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2FD << 2));

1008 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR5 = 0x%x",
ªad_d©a
);

1009 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x2FE << 2));

1010 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX4GSR6 = 0x%x",
ªad_d©a
);

1011 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x300 << 2));

1012 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR0 = 0x%x",
ªad_d©a
);

1013 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x301 << 2));

1014 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR1 = 0x%x",
ªad_d©a
);

1015 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x302 << 2));

1016 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR2 = 0x%x",
ªad_d©a
);

1017 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x303 << 2));

1018 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR3 = 0x%x",
ªad_d©a
);

1019 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x304 << 2));

1020 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR4 = 0x%x",
ªad_d©a
);

1021 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x305 << 2));

1022 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR5 = 0x%x",
ªad_d©a
);

1023 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x306 << 2));

1024 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR6 = 0x%x",
ªad_d©a
);

1025 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x307 << 2));

1026 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR7 = 0x%x",
ªad_d©a
);

1027 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x308 << 2));

1028 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR8 = 0x%x",
ªad_d©a
);

1029 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x309 << 2));

1030 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GCR9 = 0x%x",
ªad_d©a
);

1031 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x310 << 2));

1032 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR0 = 0x%x",
ªad_d©a
);

1033 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x311 << 2));

1034 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR1 = 0x%x",
ªad_d©a
);

1035 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x312 << 2));

1036 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR2 = 0x%x",
ªad_d©a
);

1037 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x314 << 2));

1038 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR3 = 0x%x",
ªad_d©a
);

1039 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x315 << 2));

1040 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR4 = 0x%x",
ªad_d©a
);

1041 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x316 << 2));

1042 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR5 = 0x%x",
ªad_d©a
);

1043 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x318 << 2));

1044 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR6 = 0x%x",
ªad_d©a
);

1045 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x319 << 2));

1046 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR7 = 0x%x",
ªad_d©a
);

1047 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x31A << 2));

1048 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR8 = 0x%x",
ªad_d©a
);

1049 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x31B << 2));

1050 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5BDLR9 = 0x%x",
ªad_d©a
);

1051 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x320 << 2));

1052 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR0 = 0x%x",
ªad_d©a
);

1053 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x321 << 2));

1054 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR1 = 0x%x",
ªad_d©a
);

1055 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x322 << 2));

1056 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR2 = 0x%x",
ªad_d©a
);

1057 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x323 << 2));

1058 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR3 = 0x%x",
ªad_d©a
);

1059 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x324 << 2));

1060 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR4 = 0x%x",
ªad_d©a
);

1061 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x325 << 2));

1062 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5LCDLR5 = 0x%x",
ªad_d©a
);

1063 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x328 << 2));

1064 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5MDLR0 = 0x%x",
ªad_d©a
);

1065 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x329 << 2));

1066 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5MDLR1 = 0x%x",
ªad_d©a
);

1067 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x330 << 2));

1068 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GTR0 = 0x%x",
ªad_d©a
);

1069 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x334 << 2));

1070 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5RSR0 = 0x%x",
ªad_d©a
);

1071 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x335 << 2));

1072 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5RSR1 = 0x%x",
ªad_d©a
);

1073 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x336 << 2));

1074 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5RSR2 = 0x%x",
ªad_d©a
);

1075 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x337 << 2));

1076 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5RSR3 = 0x%x",
ªad_d©a
);

1077 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x338 << 2));

1078 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR0 = 0x%x",
ªad_d©a
);

1079 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x339 << 2));

1080 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR1 = 0x%x",
ªad_d©a
);

1081 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x33A << 2));

1082 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR2 = 0x%x",
ªad_d©a
);

1083 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x33B << 2));

1084 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR3 = 0x%x",
ªad_d©a
);

1085 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x33C << 2));

1086 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR4 = 0x%x",
ªad_d©a
);

1087 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x33D << 2));

1088 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR5 = 0x%x",
ªad_d©a
);

1089 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x33E << 2));

1090 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX5GSR6 = 0x%x",
ªad_d©a
);

1091 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x340 << 2));

1092 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR0 = 0x%x",
ªad_d©a
);

1093 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x341 << 2));

1094 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR1 = 0x%x",
ªad_d©a
);

1095 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x342 << 2));

1096 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR2 = 0x%x",
ªad_d©a
);

1097 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x343 << 2));

1098 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR3 = 0x%x",
ªad_d©a
);

1099 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x344 << 2));

1100 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR4 = 0x%x",
ªad_d©a
);

1101 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x345 << 2));

1102 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR5 = 0x%x",
ªad_d©a
);

1103 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x346 << 2));

1104 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR6 = 0x%x",
ªad_d©a
);

1105 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x347 << 2));

1106 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR7 = 0x%x",
ªad_d©a
);

1107 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x348 << 2));

1108 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR8 = 0x%x",
ªad_d©a
);

1109 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x349 << 2));

1110 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GCR9 = 0x%x",
ªad_d©a
);

1111 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x350 << 2));

1112 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR0 = 0x%x",
ªad_d©a
);

1113 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x351 << 2));

1114 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR1 = 0x%x",
ªad_d©a
);

1115 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x352 << 2));

1116 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR2 = 0x%x",
ªad_d©a
);

1117 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x354 << 2));

1118 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR3 = 0x%x",
ªad_d©a
);

1119 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x355 << 2));

1120 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR4 = 0x%x",
ªad_d©a
);

1121 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x356 << 2));

1122 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR5 = 0x%x",
ªad_d©a
);

1123 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x358 << 2));

1124 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR6 = 0x%x",
ªad_d©a
);

1125 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x359 << 2));

1126 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR7 = 0x%x",
ªad_d©a
);

1127 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x35A << 2));

1128 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR8 = 0x%x",
ªad_d©a
);

1129 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x35B << 2));

1130 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6BDLR9 = 0x%x",
ªad_d©a
);

1131 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x360 << 2));

1132 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR0 = 0x%x",
ªad_d©a
);

1133 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x361 << 2));

1134 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR1 = 0x%x",
ªad_d©a
);

1135 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x362 << 2));

1136 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR2 = 0x%x",
ªad_d©a
);

1137 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x363 << 2));

1138 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR3 = 0x%x",
ªad_d©a
);

1139 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x364 << 2));

1140 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR4 = 0x%x",
ªad_d©a
);

1141 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x365 << 2));

1142 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6LCDLR5 = 0x%x",
ªad_d©a
);

1143 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x368 << 2));

1144 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6MDLR0 = 0x%x",
ªad_d©a
);

1145 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x369 << 2));

1146 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6MDLR1 = 0x%x",
ªad_d©a
);

1147 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x370 << 2));

1148 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GTR0 = 0x%x",
ªad_d©a
);

1149 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x374 << 2));

1150 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6RSR0 = 0x%x",
ªad_d©a
);

1151 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x375 << 2));

1152 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6RSR1 = 0x%x",
ªad_d©a
);

1153 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x376 << 2));

1154 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6RSR2 = 0x%x",
ªad_d©a
);

1155 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x377 << 2));

1156 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6RSR3 = 0x%x",
ªad_d©a
);

1157 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x378 << 2));

1158 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR0 = 0x%x",
ªad_d©a
);

1159 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x379 << 2));

1160 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR1 = 0x%x",
ªad_d©a
);

1161 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x37A << 2));

1162 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR2 = 0x%x",
ªad_d©a
);

1163 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x37B << 2));

1164 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR3 = 0x%x",
ªad_d©a
);

1165 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x37C << 2));

1166 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR4 = 0x%x",
ªad_d©a
);

1167 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x37D << 2));

1168 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR5 = 0x%x",
ªad_d©a
);

1169 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x37E << 2));

1170 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX6GSR6 = 0x%x",
ªad_d©a
);

1171 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x380 << 2));

1172 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR0 = 0x%x",
ªad_d©a
);

1173 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x381 << 2));

1174 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR1 = 0x%x",
ªad_d©a
);

1175 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x382 << 2));

1176 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR2 = 0x%x",
ªad_d©a
);

1177 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x383 << 2));

1178 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR3 = 0x%x",
ªad_d©a
);

1179 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x384 << 2));

1180 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR4 = 0x%x",
ªad_d©a
);

1181 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x385 << 2));

1182 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR5 = 0x%x",
ªad_d©a
);

1183 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x386 << 2));

1184 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR6 = 0x%x",
ªad_d©a
);

1185 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x387 << 2));

1186 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR7 = 0x%x",
ªad_d©a
);

1187 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x388 << 2));

1188 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR8 = 0x%x",
ªad_d©a
);

1189 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x389 << 2));

1190 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GCR9 = 0x%x",
ªad_d©a
);

1191 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x390 << 2));

1192 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR0 = 0x%x",
ªad_d©a
);

1193 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x391 << 2));

1194 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR1 = 0x%x",
ªad_d©a
);

1195 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x392 << 2));

1196 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR2 = 0x%x",
ªad_d©a
);

1197 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x394 << 2));

1198 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR3 = 0x%x",
ªad_d©a
);

1199 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x395 << 2));

1200 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR4 = 0x%x",
ªad_d©a
);

1201 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x396 << 2));

1202 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR5 = 0x%x",
ªad_d©a
);

1203 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x398 << 2));

1204 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR6 = 0x%x",
ªad_d©a
);

1205 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x399 << 2));

1206 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR7 = 0x%x",
ªad_d©a
);

1207 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x39A << 2));

1208 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR8 = 0x%x",
ªad_d©a
);

1209 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x39B << 2));

1210 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7BDLR9 = 0x%x",
ªad_d©a
);

1211 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A0 << 2));

1212 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR0 = 0x%x",
ªad_d©a
);

1213 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A1 << 2));

1214 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR1 = 0x%x",
ªad_d©a
);

1215 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A2 << 2));

1216 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR2 = 0x%x",
ªad_d©a
);

1217 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A3 << 2));

1218 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR3 = 0x%x",
ªad_d©a
);

1219 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A4 << 2));

1220 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR4 = 0x%x",
ªad_d©a
);

1221 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A5 << 2));

1222 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7LCDLR5 = 0x%x",
ªad_d©a
);

1223 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A8 << 2));

1224 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7MDLR0 = 0x%x",
ªad_d©a
);

1225 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3A9 << 2));

1226 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7MDLR1 = 0x%x",
ªad_d©a
);

1227 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B0 << 2));

1228 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GTR0 = 0x%x",
ªad_d©a
);

1229 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B4 << 2));

1230 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7RSR0 = 0x%x",
ªad_d©a
);

1231 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B5 << 2));

1232 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7RSR1 = 0x%x",
ªad_d©a
);

1233 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B6 << 2));

1234 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7RSR2 = 0x%x",
ªad_d©a
);

1235 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B7 << 2));

1236 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7RSR3 = 0x%x",
ªad_d©a
);

1237 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B8 << 2));

1238 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR0 = 0x%x",
ªad_d©a
);

1239 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3B9 << 2));

1240 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR1 = 0x%x",
ªad_d©a
);

1241 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3BA << 2));

1242 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR2 = 0x%x",
ªad_d©a
);

1243 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3BB << 2));

1244 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR3 = 0x%x",
ªad_d©a
);

1245 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3BC << 2));

1246 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR4 = 0x%x",
ªad_d©a
);

1247 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3BD << 2));

1248 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR5 = 0x%x",
ªad_d©a
);

1249 
ªad_d©a
=
	`ªg_ªad32
(
ddr_phy_ba£_addr
+ (0x3BE << 2));

1250 
	`¥ötf
("DDR_CFG_DEBUG : DDR_PHY_DX7GSR6 = 0x%x",
ªad_d©a
);

1252 
	}
}

	@drivers/dvi.c

2 
	~"dvi.h
"

3 
	~"ADV7511.h
"

4 
	~"ck810.h
"

5 
	~"ADV7611.h
"

6 
	~"mùi_subsys.h
"

8 
	#__SCAN_MODE__


	)

17 #ifde‡
__FOUR_CHANNEL__


18 
	#__SD_MODE__


	)

24 
	#__480P_MODE__


	)

26 #ifde‡
__SD_MODE__


27 
	gimage_timög_∑ø
 = 2;

28 #ñi‡
deföed
(
__480P_MODE__
)

29 
	gimage_timög_∑ø
 = 0;

30 #ñi‡
deföed
(
__720P_MODE__
)

31 
	gimage_timög_∑ø
 = 3;

32 #ñi‡
deföed
(
__1080P_MODE__
)

33 
	gimage_timög_∑ø
 = 1;

35 
	gimage_timög_∑ø
 = 1;

38 
TIMING_PARAMETER
 
	gimage_timög
[5] =

48 
	$dvp_öô
()

50 
vÆ
;

51 
uv_off£t
;

53 
	`wrôe_mªg32
(
VI_CTRL_REG0
,(1L << 14)|(1L << 3));

54 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000001);

55 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0xffff0000);

56 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
,0x00000000);

57 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
,0x00000000);

58 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

59 
	`wrôe_mªg32
(
ISP_SEL
, 
DVP_MODE
);

60 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

61 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
, 
MIPI_Y_BASEADDR
);

62 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
);

64 #ifde‡
__NEW_VERSION__


65 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
, 
MIPI_Y1_BASEADDR
);

66 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
);

69 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

70 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

71 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
, 0x7);

72 
	`wrôe_mªg32
(
VI_DMA_CTL
, 0x0000);

73 #ifde‡
__SCAN_MODE__


74 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

77 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

79 
	`¥ötf
(" 2222222222222Ñód_mªg32(IRQ_STATUSË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_STATUS
));

80 
	`wrôe_mªg32
(
IRQ_EN
,0xffffffff);

81 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
);

82 #ifde‡
__SCAN_MODE__


83 
	`wrôe_mªg32
(
VI_DMA_CTL
, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

86 
	`wrôe_mªg32
(
VI_DMA_CTL
, 
vÆ
 |
DMA_EN
);

88 
	`¥ötf
(" 111111111111Ñód_mªg32(IRQ_STATUSË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_STATUS
));

90 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG0
),VI_CTRL_REG0);

91 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
ISP_SEL
),ISP_SEL);

92 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_Y
),VI_IMG_OUT_BADDR_Y);

93 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_UV
),VI_IMG_OUT_BADDR_UV);

94 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSIZE
),VI_IMG_OUT_PIX_HSIZE);

95 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_VSIZE
),VI_IMG_OUT_PIX_VSIZE);

96 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BLENTH
),VI_IMG_OUT_BLENTH);

97 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
),VI_IMG_OUT_PIX_HSTRIDE);

98 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_DMA_CTL
),VI_DMA_CTL);

99 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_EN
),IRQ_EN);

100 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG2
),VI_CTRL_REG2);

101 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG1
),VI_CTRL_REG1);

104 
	`¥ötf
(" 3333Ñód_mªg32(IRQ_STATUSË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_STATUS
));

105 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

107 
	}
}

108 
	$sdi_öô
()

110 
vÆ
;

111 
i
 ;

112 
uv_off£t
;

113 #ifde‡
__FOUR_CHANNEL__


117 
i
=0;i<3; i++)

121 
	`wrôe_mªg32
(
VI_CTRL_REG0
+
i
*0x400,0x00000430);

122 
	`wrôe_mªg32
(
VI_CTRL_REG1
+
i
*0x400,0x00000000);

123 
	`wrôe_mªg32
(
VI_CTRL_REG2
+
i
*0x400,(0x000000ff<<(8*i)));

125 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
+
i
*0x400,0x00000000);

126 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
+
i
*0x400,0x00000000);

127 
	`wrôe_mªg32
(
IRQ_CLR
+
i
*0x400,0xffffffff);

128 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

129 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
+
i
*0x400, 
MIPI_Y_BASEADDR
+0x1000000*i);

130 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
+
i
*0x400, 
MIPI_Y_BASEADDR
 + 
uv_off£t
+0x1000000*i);

131 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+
i
*0x400, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

132 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+
i
*0x400, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

133 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
+
i
*0x400, 0x7);

134 
	`wrôe_mªg32
(
VI_DMA_CTL
+
i
*0x400, 0x0000);

135 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+
i
*0x400, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

136 
	`wrôe_mªg32
(
IRQ_EN
+
i
*0x400,0xffffffff);

144 #ifde‡
__CHANNEL0__


146 #ifde‡
__576i__


147 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000230);

149 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000630);

152 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000000);

153 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0x000000ff);

155 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
,0x00000000);

156 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
,0x00000000);

157 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

158 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

159 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
, 
MIPI_Y_BASEADDR
);

160 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
);

161 #ifde‡
__NEW_VERSION__


162 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
, 
MIPI_Y1_BASEADDR
);

163 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
);

165 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

166 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

167 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
, 0x7);

168 
	`wrôe_mªg32
(
VI_DMA_CTL
, 0x0000);

169 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

170 
	`wrôe_mªg32
(
IRQ_EN
,0xffffffff);

172 #ifde‡
__CHANNEL1__


175 
	`wrôe_mªg32
(
VI_CTRL_REG0
+0x400,0x00000430);

176 
	`wrôe_mªg32
(
VI_CTRL_REG1
+0x400,0x00000000);

177 
	`wrôe_mªg32
(
VI_CTRL_REG2
+0x400,0x0000ff00);

179 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
+0x400,0x00000000);

180 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
+0x400,0x00000000);

181 
	`wrôe_mªg32
(
IRQ_CLR
+0x400,0xffffffff);

182 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

183 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
+0x400, 
MIPI_Y_BASEADDR
+0x1000000);

184 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
+0x400, 
MIPI_Y_BASEADDR
 + 
uv_off£t
+0x1000000);

185 #ifde‡
__NEW_VERSION__


186 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
+0x400, 
MIPI_Y1_BASEADDR
+0x1000000);

187 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
+0x400, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
+0x1000000);

189 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0x400, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

190 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0x400, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

191 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
+0x400, 0x7);

192 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x400, 0x0000);

193 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0x400, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

194 
	`wrôe_mªg32
(
IRQ_EN
+0x400,0xffffffff);

196 #ifde‡
__CHANNEL2__


198 
	`wrôe_mªg32
(
VI_CTRL_REG0
+0x800,0x00000430);

199 
	`wrôe_mªg32
(
VI_CTRL_REG1
+0x800,0x00000000);

200 
	`wrôe_mªg32
(
VI_CTRL_REG2
+0x800,0x00ff0000);

202 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
+0x800,0x00000000);

203 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
+0x800,0x00000000);

204 
	`wrôe_mªg32
(
IRQ_CLR
+0x800,0xffffffff);

205 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

206 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
+0x800, 
MIPI_Y_BASEADDR
+0x2000000);

207 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
+0x800, 
MIPI_Y_BASEADDR
 + 
uv_off£t
+0x2000000);

208 #ifde‡
__NEW_VERSION__


209 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
+0x800, 
MIPI_Y1_BASEADDR
+0x2000000);

210 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
+0x800, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
+0x2000000);

212 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0x800, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

213 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0x800, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

214 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
+0x800, 0x7);

215 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 0x0000);

216 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0x800, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

217 
	`wrôe_mªg32
(
IRQ_EN
+0x800,0xffffffff);

220 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG0
+0x800),VI_CTRL_REG0+0x800);

222 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_Y
+0x800),VI_IMG_OUT_BADDR_Y+0x800);

223 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_UV
+0x800),VI_IMG_OUT_BADDR_UV+0x800);

224 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0x800),VI_IMG_OUT_PIX_HSIZE+0x800);

225 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0x800),VI_IMG_OUT_PIX_VSIZE+0x800);

226 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BLENTH
+0x800),VI_IMG_OUT_BLENTH+0x800);

227 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0x800),VI_IMG_OUT_PIX_HSTRIDE+0x800);

228 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_DMA_CTL
+0x800),VI_DMA_CTL+0x800);

229 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_EN
+0x800),IRQ_EN+0x800);

230 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG2
+0x800),VI_CTRL_REG2+0x800);

231 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG1
+0x800),VI_CTRL_REG1+0x800);

235 #ifde‡
__CHANNEL3__


236 
	`wrôe_mªg32
(
VI_CTRL_REG0
+0xc00,0x00000430);

237 
	`wrôe_mªg32
(
VI_CTRL_REG1
+0xc00,0x00000000);

238 
	`wrôe_mªg32
(
VI_CTRL_REG2
+0xc00,0xff000000);

240 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
+0xc00,0x00000000);

241 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
+0xc00,0x00000000);

242 
	`wrôe_mªg32
(
IRQ_CLR
+0xc00,0xffffffff);

243 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

244 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
+0xc00, 
MIPI_Y_BASEADDR
+0x3000000);

245 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
+0xc00, 
MIPI_Y_BASEADDR
 + 
uv_off£t
+0x3000000);

246 #ifde‡
__NEW_VERSION__


247 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
+0xc00, 
MIPI_Y1_BASEADDR
+0x3000000);

248 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
+0xc00, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
+0x3000000);

250 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0xc00, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

251 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0xc00, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

252 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
+0xc00, 0x7);

253 
	`wrôe_mªg32
(
VI_DMA_CTL
+0xc00, 0x0000);

254 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0xc00, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

255 
	`wrôe_mªg32
(
IRQ_EN
+0xc00,0xffffffff);

257 #ifde‡
__CHANNEL0__


258 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
);

259 
	`wrôe_mªg32
(
VI_DMA_CTL
, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

262 #ifde‡
__CHANNEL1__


263 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
+0x400);

264 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x400, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

267 #ifde‡
__CHANNEL2__


268 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
+0x800);

269 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

272 #ifde‡
__CHANNEL3__


273 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
+0xc00);

274 
	`wrôe_mªg32
(
VI_DMA_CTL
+0xc00, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

282 
	`wrôe_mªg32
(
VI_WR_BD_CTL
, 0);

283 #ifde‡
__SD_MODE__


284 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000430);

285 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000000);

286 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0x000000ff);

287 #ñi‡
	`deföed
(
__480P_MODE__
)

288 
	`wrôe_mªg32
(
VI_CTRL_REG0
, 0x00000210);

289 
	`wrôe_mªg32
(
VI_CTRL_REG1
, 0x00000001);

290 
	`wrôe_mªg32
(
VI_CTRL_REG2
, 0xffff0000);

291 #ñi‡
	`deföed
(
__720P_MODE__
)

292 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000010);

293 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000001);

294 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0xffff0000);

295 #ñi‡
	`deföed
(
__1080P_MODE__
)

296 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000010);

297 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000001);

298 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0xffff0000);

300 
	`wrôe_mªg32
(
VI_CTRL_REG0
,0x00000010);

301 
	`wrôe_mªg32
(
VI_CTRL_REG1
,0x00000001);

302 
	`wrôe_mªg32
(
VI_CTRL_REG2
,0xffff0000);

304 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
,0x00000000);

305 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
,0x00000000);

306 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

307 
	`wrôe_mªg32
(
ISP_SEL
, 
DVP_MODE
);

308 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

309 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
, 
MIPI_Y_BASEADDR
);

310 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
);

311 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
, 0);

312 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
, 0);

314 #ifde‡
__SD_MODE__


315 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

316 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y0
, 
MIPI_Y_BASEADDR
);

317 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV0
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
);

318 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
 * 2);

319 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
, 
MIPI_Y_BASEADDR
 + 
uv_off£t
 * 3);

322 #ifde‡
__NEW_VERSION__


326 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

327 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

328 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
, 0x7);

330 
	`wrôe_mªg32
(
VI_DMA_CTL
, 0x0000);

331 #ifde‡
__SCAN_MODE__


332 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

334 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

337 
	`wrôe_mªg32
(
IRQ_EN
,0xffffffff);

338 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
);

339 #ifde‡
__SCAN_MODE__


340 
	`wrôe_mªg32
(
VI_DMA_CTL
, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

342 
	`wrôe_mªg32
(
VI_DMA_CTL
, 
vÆ
 |
DMA_EN
);

346 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG0
),VI_CTRL_REG0);

347 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
ISP_SEL
),ISP_SEL);

348 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_Y
),VI_IMG_OUT_BADDR_Y);

349 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_UV
),VI_IMG_OUT_BADDR_UV);

350 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_Y1
),VI_IMG_OUT_BADDR_Y1);

351 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_UV1
),VI_IMG_OUT_BADDR_UV1);

352 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSIZE
),VI_IMG_OUT_PIX_HSIZE);

353 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_VSIZE
),VI_IMG_OUT_PIX_VSIZE);

354 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BLENTH
),VI_IMG_OUT_BLENTH);

355 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
),VI_IMG_OUT_PIX_HSTRIDE);

356 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_DMA_CTL
),VI_DMA_CTL);

357 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_EN
),IRQ_EN);

358 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG2
),VI_CTRL_REG2);

359 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG1
),VI_CTRL_REG1);

366 
	}
}

369 
	$yuv422•_image_å™s„r
(
image_size
)

371 
h_size
;

372 
v_size
;

373 
y_addr
;

374 
uv_addr
;

375 
des_addr
;

376 
i
, 
tmp1
, 
tmp2
, 
tmp3
, 
tmp4
;

378 
	`¥ötf
("YUV422SP -> UYVY\n");

379 
h_size
 = 
image_timög
[
image_size
].
HACTIVE
;

380 
v_size
 = 
image_timög
[
image_size
].
VACTIVE
;

381 
	`mem˝y
(0x12000000, 
MIPI_Y_BASEADDR
+0x2000000, 
h_size
 * 
v_size
 * 2);

382 
y_addr
 = 0x12000000;

383 
uv_addr
 = 
y_addr
 + 
h_size
 * 
v_size
;

384 
des_addr
 = 
MIPI_Y_BASEADDR
+0x2000000;

386 
i
 = 0; i < 
v_size
 * 
h_size
 / 4; i++)

388 
tmp1
 = 
	`ªad_mªg32
(
y_addr
);

389 
tmp2
 = 
	`ªad_mªg32
(
uv_addr
);

391 
tmp3
 = ((
tmp1
 & 0xff) << 8) | ((tmp1 & 0xff00) << 16)

392 | (
tmp2
 & 0xff) | ((tmp2 & 0xff00) << 8);

393 
tmp4
 = ((
tmp1
 & 0xff0000) >> 8) | (tmp1 & 0xff000000)

394 | ((
tmp2
 & 0xff0000) >> 16) | ((tmp2 & 0xff000000) >> 8);

395 
	`wrôe_mªg32
(
des_addr
, 
tmp3
);

396 
	`wrôe_mªg32
(
des_addr
 + 0x4, 
tmp4
);

397 
y_addr
 += 4;

398 
uv_addr
 += 4;

399 
des_addr
 += 8;

401 
	}
}

404 
	$dvi_ã°
()

406 
vÆ
,
i
,
j
;

407 
	`dvp_öô
();

408 
	`ADV7511_Inôül
();

409 
	`adv7611_öô
();

411 
i
 = 0 ;

414 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
);

415 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

417 
i
++;

418 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

420 
	`¥ötf
(" vÆ =0x%x \r\n",
vÆ
);

428 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

430 
	`wrôe_mªg32
(
VI_DMA_CTL
, 0x00000000);

431 #ifde‡
__SCAN_MODE__


434 
	`yuv422•_image_å™s„r
(0);

436 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
image_timög
[0].
HACTIVE
 * image_timög[0].
VACTIVE
 * 2,
i
 );

439 
	}
}

441 
	$sdi_ã°
()

443 
vÆ
,
i
,
j
;

445 
	`adv7611_öô
();

446 
	`sdi_öô
();

447 
	`¥ötf
("sdi_test!!!\r\n");

448 #ifde‡
__FOUR_CHANNEL__


449 #ifde‡
__CHANNEL0__


450 
i
 = 0 ;

453 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
);

454 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

456 
i
++;

457 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

459 
	`¥ötf
(" ch0 vÆ =0x%x \r\n",
vÆ
);

462 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

464 
	`wrôe_mªg32
(
VI_DMA_CTL
, 0x00000000);

467 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,0x20000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

469 #ifde‡
__CHANNEL1__


470 
i
 = 0 ;

473 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0x400);

474 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

476 
i
++;

477 
	`wrôe_mªg32
(
IRQ_CLR
+0x400,0xffffffff);

479 
	`¥ötf
(" ch1 vÆ =0x%x \r\n",
vÆ
);

482 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

484 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x400, 0x00000000);

487 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,0x20000000+0x1000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

489 #ifde‡
__CHANNEL3__


490 
i
 = 0 ;

493 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0xc00);

494 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

496 
i
++;

497 
	`wrôe_mªg32
(
IRQ_CLR
+0xc00,0xffffffff);

499 
	`¥ötf
(" ch3 vÆ =0x%x \r\n",
vÆ
);

502 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

504 
	`wrôe_mªg32
(
VI_DMA_CTL
+0xc00, 0x00000000);

507 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,0x20000000+0x3000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

511 #ifde‡
__CHANNEL2__


512 
i
 = 0 ;

515 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0x800);

516 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

518 
i
++;

519 
	`wrôe_mªg32
(
IRQ_CLR
+0x800,0xffffffff);

521 
	`¥ötf
(" ch2 vÆ =0x%x \r\n",
vÆ
);

525 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

527 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 0x00000000);

529 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,0x20000000+0x2000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

534 
i
 = 0;

535 
uv_off£t
;

537 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
);

539 if(
vÆ
 & 
FS
) {

540 
i
++;

541 
	`wrôe_mªg32
(
IRQ_CLR
, 0xffffffff);

544 
uv_off£t
 = 720 * 480;

545 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
, 
MIPI_Y_BASEADDR
 + 0x100000 * 
i
);

546 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
, 
MIPI_Y_BASEADDR
 + 0x100000 * 
i
 + 
uv_off£t
);

552 if((
vÆ
 & 
DMA_DONE
) == DMA_DONE) {

553 
i
++;

554 
	`wrôe_mªg32
(
IRQ_CLR
, 0xffffffff);

557 
uv_off£t
 = 720 * 480;

558 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
, 
MIPI_Y_BASEADDR
 + 0x100000 * 
i
);

559 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
, 
MIPI_Y_BASEADDR
 + 0x100000 * 
i
 + 
uv_off£t
);

562 
	`¥ötf
("dm®d⁄êvÆ = 0x%x\r\n", 
vÆ
);

565 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<10));

568 #ifde‡
__SCAN_MODE__


571 
	`yuv422•_image_å™s„r
(
image_timög_∑ø
);

574 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x %d 0x%x i=%d\r\n",
vÆ
,
image_timög_∑ø
,
image_timög
[image_timög_∑ø].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

577 
	}
}

579 
	$SögÀ_Adv7611_ã°
()

582 
vÆ
,
i
,
j
; 
uv_off£t
;

584 
	`adv7611_öô
();

586 
i
 = 0 ;i < 4; i++) {

587 
	`wrôe_mªg32
(
MIPI_Y_BASEADDR
+0x2000000+4*
i
,0xFFFFFFFF) ;

588 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+0x2000000+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+0x2000000+4*i));

591 #ifde‡
__ADV7611_SD__


592 
	`wrôe_mªg32
(
VI_CTRL_REG0
+0x800,0x00000630);

593 
	`wrôe_mªg32
(
VI_CTRL_REG1
+0x800,0x00000000);

594 
	`wrôe_mªg32
(
VI_CTRL_REG2
+0x800,0xff000000);

597 
	`wrôe_mªg32
(
VI_CTRL_REG0
+0x800,0x00000010);

598 
	`wrôe_mªg32
(
VI_CTRL_REG1
+0x800,0x00000001);

599 
	`wrôe_mªg32
(
VI_CTRL_REG2
+0x800,0xffff0000);

602 
	`wrôe_mªg32
(
VI_TIMESTAMP_CTL
+0x800,0x00000000);

603 
	`wrôe_mªg32
(
VI_TIMESTAMP_BADDR
+0x800,0x00000000);

604 
	`wrôe_mªg32
(
IRQ_CLR
+0x800,0xffffffff);

606 
uv_off£t
 = (
image_timög
[
image_timög_∑ø
].
HACTIVE
Ë* (image_timög[image_timög_∑ø].
VACTIVE
);

607 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y
+0x800, 
MIPI_Y_BASEADDR
+0x2000000);

608 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV
+0x800, 
MIPI_Y_BASEADDR
 + 
uv_off£t
+0x2000000);

609 #ifde‡
__NEW_VERSION__


610 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_Y1
+0x800, 
MIPI_Y1_BASEADDR
+0x2000000);

611 
	`wrôe_mªg32
(
VI_IMG_OUT_BADDR_UV1
+0x800, 
MIPI_Y1_BASEADDR
 + 
uv_off£t
+0x2000000);

613 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0x800, 
image_timög
[
image_timög_∑ø
].
HACTIVE
 - 1);

614 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0x800, 
image_timög
[
image_timög_∑ø
].
VACTIVE
 - 1);

615 
	`wrôe_mªg32
(
VI_IMG_OUT_BLENTH
+0x800, 0x7);

616 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 0x0000);

617 
	`wrôe_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0x800, 
image_timög
[
image_timög_∑ø
].
HACTIVE
*2 - 1);

618 
	`wrôe_mªg32
(
IRQ_EN
+0x800,0xffffffff);

621 
	`wrôe_mªg32
(
IRQ_EN
+0x800,0xffffffff);

622 
vÆ
 = 
	`ªad_mªg32
(
VI_DMA_CTL
+0x800);

623 #ifde‡
__SCAN_MODE__


624 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 
vÆ
 |
DMA_EN
|
PIXEL_TYPE
);

626 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 
vÆ
 |
DMA_EN
);

628 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG0
+0x800),VI_CTRL_REG0+0x800);

630 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_Y
+0x800),VI_IMG_OUT_BADDR_Y+0x800);

631 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BADDR_UV
+0x800),VI_IMG_OUT_BADDR_UV+0x800);

632 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSIZE
+0x800),VI_IMG_OUT_PIX_HSIZE+0x800);

633 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_VSIZE
+0x800),VI_IMG_OUT_PIX_VSIZE+0x800);

634 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_BLENTH
+0x800),VI_IMG_OUT_BLENTH+0x800);

635 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_IMG_OUT_PIX_HSTRIDE
+0x800),VI_IMG_OUT_PIX_HSTRIDE+0x800);

636 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_DMA_CTL
+0x800),VI_DMA_CTL+0x800);

637 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
IRQ_EN
+0x800),IRQ_EN+0x800);

638 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG2
+0x800),VI_CTRL_REG2+0x800);

639 
	`¥ötf
(" 0x%x (vÆË=0x%x \r\n",
	`ªad_mªg32
(
VI_CTRL_REG1
+0x800),VI_CTRL_REG1+0x800);

646 
i
 = 0 ;

649 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0x800);

650 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

652 
i
++;

653 
	`wrôe_mªg32
(
IRQ_CLR
+0x800,0xffffffff);

655 
	`¥ötf
(" ch3 vÆ =0x%x \r\n",
vÆ
);

658 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<200));

660 #ifde‡
__SCAN_MODE__


661 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 
PIXEL_TYPE
);

663 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 0);

667 
i
 = 0 ;i < 4; i++) {

669 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+0x2000000+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+0x2000000+4*i));

672 #ifde‡
__SCAN_MODE__


675 
	`yuv422•_image_å™s„r
(
image_timög_∑ø
);

678 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
MIPI_Y_BASEADDR
+0x2000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

681 
	}
}

685 
	#GS2971_RST1
 6

	)

686 
	#GS2971_RST0
 9

	)

687 
	$dsi_dvp_ã°
()

690 
vÆ
,
i
,
j
;

692 
i
 = 0 ;i < 4; i++) {

693 
	`wrôe_mªg32
(
MIPI_Y_BASEADDR
+4*
i
,0xFFFFFFFF) ;

694 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

696 
	`sdi_öô
();

697 
	`¥ötf
("dsi_dvp_test!!!\r\n");

699 
	`CK_Gpio_Ouçut
(
GS2971_RST0
, 0);

700 
	`CK_Gpio_Ouçut
(
GS2971_RST1
, 0);

703 
	`udñay
(100 * 1000);

704 
	`CK_Gpio_Ouçut
(
GS2971_RST0
, 1);

705 
	`CK_Gpio_Ouçut
(
GS2971_RST1
, 1);

709 #ifde‡
__CHANNEL0__


710 
i
 = 0 ;

713 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
);

714 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

716 
i
++;

717 
	`wrôe_mªg32
(
IRQ_CLR
,0xffffffff);

719 
	`¥ötf
(" ch0 vÆ =0x%x \r\n",
vÆ
);

722 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

725 
i
 = 0 ;i < 4; i++) {

727 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

730 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
MIPI_Y_BASEADDR
+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

732 #ifde‡
__CHANNEL1__


733 
i
 = 0 ;i < 4; i++) {

734 
	`wrôe_mªg32
(
MIPI_Y_BASEADDR
+4*
i
,0xFFFFFFFF) ;

735 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

737 
i
 = 0 ;

740 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0x400);

741 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

743 
i
++;

744 
	`wrôe_mªg32
(
IRQ_CLR
+0x400,0xffffffff);

746 
	`¥ötf
(" ch1 vÆ =0x%x \r\n",
vÆ
);

749 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

752 
i
 = 0 ;i < 4; i++) {

754 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

757 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
MIPI_Y_BASEADDR
+0x1000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

759 #ifde‡
__CHANNEL3__


760 
i
 = 0 ;

763 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0xc00);

764 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

766 
i
++;

767 
	`wrôe_mªg32
(
IRQ_CLR
+0xc00,0xffffffff);

769 
	`¥ötf
(" ch3 vÆ =0x%x \r\n",
vÆ
);

772 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

774 
	`wrôe_mªg32
(
VI_DMA_CTL
+0xc00, 0x00000000);

777 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
MIPI_Y_BASEADDR
+0x3000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

781 #ifde‡
__CHANNEL2__


782 
i
 = 0 ;

785 
vÆ
 = 
	`ªad_mªg32
(
IRQ_STATUS
+0x800);

786 if((
vÆ
&
DMA_DONE
) == DMA_DONE)

788 
i
++;

789 
	`wrôe_mªg32
(
IRQ_CLR
+0x800,0xffffffff);

791 
	`¥ötf
(" ch2 vÆ =0x%x \r\n",
vÆ
);

795 }((
vÆ
&
DMA_DONE
Ë!DMA_DONE)||(
i
<6));

797 
	`wrôe_mªg32
(
VI_DMA_CTL
+0x800, 0x00000000);

799 
	`¥ötf
("dv∞íd !!!!!!!!!!!!!!!!!!!!!!! vÆ =0x%x 0x%x i=%d\r\n",
vÆ
,
MIPI_Y_BASEADDR
+0x2000000+
image_timög
[
image_timög_∑ø
].
HACTIVE
 * image_timög[image_timög_∑ø].
VACTIVE
 * 2,
i
 );

805 
	}
}

	@drivers/dvi.h

1 #i‚de‡
__DVI_H__


2 
	#__DVI_H__


	)

4 
	#__NEW_VERSION__


	)

6 
	#DVP_CH0_BASE_ADDR
 (
CK_MIPI_Sœve
+0x0000)

	)

7 
	#DVP_CH1_BASE_ADDR
 (
CK_MIPI_Sœve
+0x0400)

	)

8 
	#DVP_CH2_BASE_ADDR
 (
CK_MIPI_Sœve
+0x0800)

	)

9 
	#DVP_CH3_BASE_ADDR
 (
CK_MIPI_Sœve
+0x0C00)

	)

11 
	#DVP_BASE_ADDR
 
DVP_CH0_BASE_ADDR


	)

14 
	#VI_DMA_ARB_MODE
 (
DVP_BASE_ADDR
+0x0000)

	)

15 
	#VI_DMA_WEIGHT_WR_0
 (
DVP_BASE_ADDR
+0x0004)

	)

16 
	#VI_DMA_WEIGHT_WR_1
 (
DVP_BASE_ADDR
+0x0008)

	)

17 
	#VI_DMA_WEIGHT_RD_0
 (
DVP_BASE_ADDR
+0x000C)

	)

18 
	#VI_DMA_WEIGHT_RD_1
 (
DVP_BASE_ADDR
+0x0010)

	)

19 
	#VI_DMA_PRIORTY_WR
 (
DVP_BASE_ADDR
+0x0014)

	)

20 
	#VI_DMA_PRIORTY_RD
 (
DVP_BASE_ADDR
+0x0018)

	)

21 
	#VI_DMA_ID_RD
 (
DVP_BASE_ADDR
+0x001C)

	)

22 
	#VI_DMA_ID_WR
 (
DVP_BASE_ADDR
+0x0020)

	)

23 
	#VI_WR_BD_CTL
 (
DVP_BASE_ADDR
+0x0024)

	)

24 
	#VI_CTRL_REG0
 (
DVP_BASE_ADDR
+0x0028)

	)

25 
	#CCIR
 0x0010

	)

26 
	#VIDEO_INTERLANCE_MODE
 0x0020

	)

28 
	#VI_CTRL_REG1
 (
DVP_BASE_ADDR
+0x002C)

	)

29 
	#VI_CTRL_REG2
 (
DVP_BASE_ADDR
+0x0030)

	)

31 
	#VI_TIMESTAMP_CTL
 (
DVP_BASE_ADDR
+0x0034)

	)

32 
	#VI_TIMESTAMP_BADDR
 (
DVP_BASE_ADDR
+0x0038)

	)

33 
	#VI_DMA_CTL
 (
DVP_BASE_ADDR
+0x003C)

	)

34 
	#DMA_EN
 0x0001

	)

35 
	#PIXEL_TYPE
 (1L << 1)

	)

37 #ifde‡
__NEW_VERSION__


39 
	#VI_IMG_OUT_BADDR_Y
 (
DVP_BASE_ADDR
+0x0040)

	)

40 
	#VI_IMG_OUT_BADDR_UV
 (
DVP_BASE_ADDR
+0x0044)

	)

42 
	#VI_IMG_OUT_BADDR_Y0
 (
DVP_BASE_ADDR
+0x0040)

	)

43 
	#VI_IMG_OUT_BADDR_UV0
 (
DVP_BASE_ADDR
+0x0044)

	)

45 
	#VI_IMG_OUT_BADDR_Y1
 (
DVP_BASE_ADDR
+0x0048)

	)

46 
	#VI_IMG_OUT_BADDR_UV1
 (
DVP_BASE_ADDR
+0x004C)

	)

49 
	#VI_IMG_OUT_PIX_HSIZE
 (
DVP_BASE_ADDR
+0x0050)

	)

50 
	#VI_IMG_OUT_PIX_VSIZE
 (
DVP_BASE_ADDR
+0x0054)

	)

51 
	#VI_IMG_OUT_PIX_HSTRIDE
 (
DVP_BASE_ADDR
+0x0058)

	)

52 
	#VI_IMG_OUT_BLENTH
 (
DVP_BASE_ADDR
+0x005C)

	)

53 
	#VI_STATUS
 (
DVP_BASE_ADDR
+0x0060)

	)

54 
	#FS
 0x0001

	)

55 
	#DMA_DONE
 0x0002

	)

58 
	#IRQ_EN
 (
DVP_BASE_ADDR
+0x0064)

	)

59 
	#IRQ_CLR
 (
DVP_BASE_ADDR
+0x0068)

	)

60 
	#IRQ_STATUS
 (
DVP_BASE_ADDR
+0x006C)

	)

61 
	#ISP_SEL
 (
DVP_BASE_ADDR
+0x0070)

	)

62 
	#DVP_MODE
 0x0001

	)

64 
	#VI_VSIZE_2ND_OFFSET
 (
DVP_BASE_ADDR
+0x0074)

	)

68 
	#VI_IMG_OUT_BADDR_Y
 (
DVP_BASE_ADDR
+0x0040)

	)

69 
	#VI_IMG_OUT_BADDR_UV
 (
DVP_BASE_ADDR
+0x0044)

	)

72 
	#VI_IMG_OUT_PIX_HSIZE
 (
DVP_BASE_ADDR
+0x0048)

	)

73 
	#VI_IMG_OUT_PIX_VSIZE
 (
DVP_BASE_ADDR
+0x004C)

	)

74 
	#VI_IMG_OUT_PIX_HSTRIDE
 (
DVP_BASE_ADDR
+0x0050)

	)

75 
	#VI_IMG_OUT_BLENTH
 (
DVP_BASE_ADDR
+0x0054)

	)

76 
	#VI_STATUS
 (
DVP_BASE_ADDR
+0x0058)

	)

77 
	#FS
 0x0001

	)

78 
	#DMA_DONE
 0x0002

	)

81 
	#IRQ_EN
 (
DVP_BASE_ADDR
+0x005C)

	)

82 
	#IRQ_CLR
 (
DVP_BASE_ADDR
+0x0060)

	)

83 
	#IRQ_STATUS
 (
DVP_BASE_ADDR
+0x0064)

	)

84 
	#ISP_SEL
 (
DVP_BASE_ADDR
+0x0068)

	)

85 
	#DVP_MODE
 0x0001

	)

89 
dvi_ã°
();

	@drivers/dw_apb_i2s.c

14 
	~<°rög.h
>

15 
	~"ck810.h
"

16 
	~"dw_≠b_i2s.h
"

17 
	~"¢d_pcm.h
"

18 
	~"d©©y≥.h
"

19 
	~"misc.h
"

20 
	~"soc_dai.h
"

24 vﬁ©ûê
	gi2s_ioba£_li°
[
MAX_I2S_NUM_ON_CHIP
] = {

25 
I2S0_BASE
,

26 
I2S1_BASE
,

27 
I2S2_BASE
,

28 
I2S3_BASE
,

29 
I2S4_BASE


33 
	#dw_pcm_tx_‚
(
ßm∂e_bôs
Ë\

	)

34 
	gdw_pcm_tx_
##
ßm∂e_bôs
(
dw_i2s_dev
 *
dev
, \

35 
¢d_pcm_sub°ªam
 *
sub°ªam
) \

37 c⁄° 
	gu
##
ßm∂e_bôs
 *
	gp
 = (
u
##ßm∂e_bô†*)
sub°ªam
->
d©a_ba£
; \

38 
	gi
; \

40 
	gi
 = 0; i < 1; i++) { \

41 
wrôe_mªg32
(
dev
->
i2s_ba£
 + 
LRBR_LTHR
(0), *(
p
 + 
sub°ªam
->
±r
++)); \

42 
wrôe_mªg32
(
dev
->
i2s_ba£
 + 
RRBR_RTHR
(0), *(
p
 + 
sub°ªam
->
±r
++)); \

43 i‡(
	gsub°ªam
->
	g±r
 >
sub°ªam
->
sz_tx
) \

49 
	#dw_pcm_rx_‚
(
ßm∂e_bôs
Ë\

	)

50 
	gdw_pcm_rx_
##
ßm∂e_bôs
(
dw_i2s_dev
 *
dev
, \

51 
¢d_pcm_sub°ªam
 *
sub°ªam
) \

53 
	gu
##
ßm∂e_bôs
 *
	gp
 = (
u
##ßm∂e_bô†*)
sub°ªam
->
d©a_ba£
; \

54 
	gi
; \

56 
	gi
 = 0; i < 1; i++) { \

57 *(
	gp
 + 
	gsub°ªam
->
	g±r
++Ë
ªad_mªg32
(
dev
->
i2s_ba£
 + 
LRBR_LTHR
(0)); \

58 *(
	gp
 + 
	gsub°ªam
->
	g±r
++Ë
ªad_mªg32
(
dev
->
i2s_ba£
 + 
RRBR_RTHR
(0)); \

59 i‡(
	gsub°ªam
->
	g±r
 >
sub°ªam
->
sz_rx
) \

65 #i‚de‡
_I2S_DEBUG_


67 
dw_pcm_tx_‚
(16);

68 
dw_pcm_tx_‚
(32);

69 
dw_pcm_rx_‚
(16);

70 
dw_pcm_rx_‚
(32);

74 
	$dw_pcm_tx_32
(
dw_i2s_dev
 *
dev
,

75 
¢d_pcm_sub°ªam
 *
sub°ªam
)

77 
u32
 *
p
 = (u32 *)
sub°ªam
->
d©a_ba£
;

78 
i
;

79 
i
 = 0; i < 1; i++) {

80 
	`wrôe_mªg32
(
dev
->
i2s_ba£
 + 
	`LRBR_LTHR
(0), *(
p
 + 
sub°ªam
->
±r
++));

81 
	`wrôe_mªg32
(
dev
->
i2s_ba£
 + 
	`RRBR_RTHR
(0), *(
p
 + 
sub°ªam
->
±r
++));

82 i‡(
sub°ªam
->
±r
 >sub°ªam->
sz_tx
)

86 
	}
}

88 
	$dw_pcm_tx_16
(
dw_i2s_dev
 *
dev
,

89 
¢d_pcm_sub°ªam
 *
sub°ªam
)

91 
u16
 *
p
 = (u16 *)
sub°ªam
->
d©a_ba£
;

92 
i
;

93 
i
 = 0; i < 1; i++) {

94 
	`wrôe_mªg32
(
dev
->
i2s_ba£
 + 
	`LRBR_LTHR
(0), *(
p
 + 
sub°ªam
->
±r
++));

95 
	`wrôe_mªg32
(
dev
->
i2s_ba£
 + 
	`RRBR_RTHR
(0), *(
p
 + 
sub°ªam
->
±r
++));

96 i‡(
sub°ªam
->
±r
 >sub°ªam->
sz_tx
)

100 
	}
}

103 
	$dw_pcm_rx_16
(
dw_i2s_dev
 *
dev
,

104 
¢d_pcm_sub°ªam
 *
sub°ªam
)

106 
u16
 *
p
 = (u16 *)
sub°ªam
->
d©a_ba£
;

107 
i
;

109 
i
 = 0; i < 1; i++) {

110 *(
p
 + 
sub°ªam
->
±r
++Ë
	`ªad_mªg32
(
dev
->
i2s_ba£
 + 
	`LRBR_LTHR
(0));

111 *(
p
 + 
sub°ªam
->
±r
++Ë
	`ªad_mªg32
(
dev
->
i2s_ba£
 + 
	`RRBR_RTHR
(0));

112 i‡(
sub°ªam
->
±r
 >sub°ªam->
sz_rx
)

116 
	}
}

118 
	$dw_pcm_rx_32
(
dw_i2s_dev
 *
dev
,

119 
¢d_pcm_sub°ªam
 *
sub°ªam
)

121 
u32
 *
p
 = (u32 *)
sub°ªam
->
d©a_ba£
;

122 
i
;

124 
i
 = 0; i < 1; i++) {

125 *(
p
 + 
sub°ªam
->
±r
++Ë
	`ªad_mªg32
(
dev
->
i2s_ba£
 + 
	`LRBR_LTHR
(0));

126 *(
p
 + 
sub°ªam
->
±r
++Ë
	`ªad_mªg32
(
dev
->
i2s_ba£
 + 
	`RRBR_RTHR
(0));

127 i‡(
sub°ªam
->
±r
 >sub°ªam->
sz_rx
)

131 
	}
}

135 #unde‡
dw_pcm_tx_‚


136 #unde‡
dw_pcm_rx_‚


139 
ölöe
 
	$i2s_wrôe_ªg
(*
io_ba£
, 
ªg
, 
u32
 
vÆ
)

141 
	`wrôe_mªg32
(
io_ba£
 + 
ªg
, 
vÆ
);

142 
	}
}

144 
ölöe
 
u32
 
	$i2s_ªad_ªg
(*
io_ba£
, 
ªg
)

146  
	`ªad_mªg32
(
io_ba£
 + 
ªg
);

147 
	}
}

149 
ölöe
 
	$i2s_dißbÀ_ch™√ls
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
)

151 
u32
 
i
 = 0;

153 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

154 
i
 = 0; i < 4; i++)

155 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`TER
(
i
), 0);

157 
i
 = 0; i < 4; i++)

158 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`RER
(
i
), 0);

160 
	}
}

162 
ölöe
 
	$i2s_˛ór_úqs
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
)

164 
u32
 
i
 = 0;

166 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

167 
i
 = 0; i < 4; i++)

168 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`TOR
(
i
));

170 
i
 = 0; i < 4; i++)

171 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ROR
(
i
));

173 
	}
}

175 
ölöe
 
	$i2s_dißbÀ_úqs
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
,

176 
ch™_ƒ
)

178 
u32
 
i
, 
úq
;

180 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

181 
i
 = 0; i < (
ch™_ƒ
 / 2); i++) {

182 
úq
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
));

183 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
), 
úq
 | 0x30);

186 
i
 = 0; i < (
ch™_ƒ
 / 2); i++) {

187 
úq
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
));

188 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
), 
úq
 | 0x03);

191 
	}
}

193 
ölöe
 
	$i2s_íabÀ_úqs
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
,

194 
ch™_ƒ
)

196 
u32
 
i
, 
úq
;

198 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

199 
i
 = 0; i < (
ch™_ƒ
 / 2); i++) {

200 
úq
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
));

201 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
), 
úq
 & ~0x30);

204 
i
 = 0; i < (
ch™_ƒ
 / 2); i++) {

205 
úq
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
));

206 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(
i
), 
úq
 & ~0x03);

209 
	}
}

211 
	$dw_pcm_å™s„r
(
dw_i2s_dev
 *
dev
, 
boﬁ
 
push
)

213 
¢d_pcm_sub°ªam
 *
sub°ªam
 = 
dev
->substream;

214 
ªt
;

216 i‡(
push
) {

217 
ªt
 = 
dev
->
	`tx_‚
(dev, 
sub°ªam
);

219 
ªt
 = 
dev
->
	`rx_‚
(dev, 
sub°ªam
);

221 if(
ªt
)

222 
sub°ªam
->
d⁄e
 = 1;

223 
	}
}

225 
	$dw_pcm_push_tx
(
dw_i2s_dev
 *
dev
)

227 
	`dw_pcm_å™s„r
(
dev
, 
åue
);

228 
	}
}

230 
	$dw_pcm_p›_rx
(
dw_i2s_dev
 *
dev
)

232 
	`dw_pcm_å™s„r
(
dev
, 
Ál£
);

233 
	}
}

236 
	$i2s_pﬁl
(
dw_i2s_dev
 *
dev
)

238 
boﬁ
 
úq_vÆid
 = 
Ál£
;

239 
u32
 
i§
[4];

240 
i
;

242 
i
 = 0; i < 4; i++) {

243 
i§
[
i
] = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ISR
(i));

246 
	`i2s_˛ór_úqs
(
dev
, 
SNDRV_PCM_STREAM_PLAYBACK
);

247 
	`i2s_˛ór_úqs
(
dev
, 
SNDRV_PCM_STREAM_CAPTURE
);

249 
i
 = 0; i < 4; i++) {

254 i‡((
i§
[
i
] & 
ISR_TXFE
Ë&& (ò=0Ë&& 
dev
->
u£_pio
) {

255 
	`dw_pcm_push_tx
(
dev
);

262 i‡((
i§
[
i
] & 
ISR_RXDA
Ë&& (ò=0Ë&& 
dev
->
u£_pio
) {

263 
	`dw_pcm_p›_rx
(
dev
);

264 
úq_vÆid
 = 
åue
;

268 i‡(
i§
[
i
] & 
ISR_TXFO
) {

269 
	`¥ötf
("TX ovîru¿(ch_id=%d)\n", 
i
);

270 
úq_vÆid
 = 
åue
;

274 i‡(
i§
[
i
] & 
ISR_RXFO
) {

275 
	`¥ötf
("RX ovîru¿(ch_id=%d)\n", 
i
);

276 
úq_vÆid
 = 
åue
;

281 i‡(
úq_vÆid
)

285 
	}
}

287 
	$i2s_pﬁl_rx
(
dw_i2s_dev
 *
dev
)

289 
u32
 
i§
;

290 
¢d_pcm_sub°ªam
 *
sub°ªam
 = 
dev
->substream;

291 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ROR
(0));

292 !
sub°ªam
->
d⁄e
) {

293 
i§
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ISR
(0));

294 if(
i§
 & 
ISR_RXDA
)

295 
	`dw_pcm_p›_rx
(
dev
);

297 if(
i§
 & 
ISR_RXFO
) {

298 
	`¥ötf
("#");

299 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ROR
(0));

303 
	}
}

305 
	$i2s_pﬁl_tx
(
dw_i2s_dev
 *
dev
)

307 
u32
 
i§
;

308 
¢d_pcm_sub°ªam
 *
sub°ªam
 = 
dev
->substream;

309 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`TOR
(0));

310 !
sub°ªam
->
d⁄e
) {

311 
i§
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`ISR
(0));

312 if(
i§
 & 
ISR_TXFE
)

313 
	`dw_pcm_push_tx
(
dev
);

314 if(
i§
 & 
ISR_TXFO
) {

315 
	`¥ötf
("@");

316 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`TOR
(0));

320 
	}
}

323 
	$dw_i2s_dump_ªgs
(
dw_i2s_dev
 *
dev
)

325 
	`¥ötf
("IER : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
CER
));

326 
	`¥ötf
("CCR : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
CCR
));

327 
	`¥ötf
("DMACR : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
DMACR
));

328 
	`¥ötf
("ITER : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
ITER
));

329 
	`¥ötf
("CER : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
CER
));

330 
	`¥ötf
("IMR0 : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`IMR
(0)));

331 
	`¥ötf
("TFCR0 : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`TFCR
(0)));

332 
	`¥ötf
("TER0 : 0x%x\n", 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
	`TER
(0)));

333 
	}
}

335 
	$i2s_°¨t
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
)

337 
i2s_˛k_c⁄fig_d©a
 *
c⁄fig
 = &
dev
->config;

339 if(!
dev
->
u£_pio
) {

340 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
)

341 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
DMACR
, 0x00020000);

343 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
DMACR
, 0x00010000);

346 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
IER
, 1);

347 
	`i2s_íabÀ_úqs
(
dev
, 
°ªam
, 
c⁄fig
->
ch™_ƒ
);

349 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
)

350 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
ITER
, 1);

352 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
IRER
, 1);

354 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
CER
, 1);

356 
	}
}

358 
	$i2s_°›
(
dw_i2s_dev
 *
dev
, 
u32
 
°ªam
)

360 
	`i2s_˛ór_úqs
(
dev
, 
°ªam
);

361 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
)

362 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
ITER
, 0);

364 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
IRER
, 0);

366 
	`i2s_dißbÀ_úqs
(
dev
, 
°ªam
, 8);

369 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
CER
, 0);

370 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
IER
, 0);

372 
	}
}

374 
	$dw_i2s_°¨tup
(
¢d_soc_dai_dev
 *
dai_dev
,

375 
¢d_pcm_sub°ªam
 *
sub°ªam
)

377 
dw_i2s_dev
 *
dev
 = (dw_i2s_dev *)
dai_dev
->
˝u_dai
;

378 i‡(!(
dev
->
ˇ∑bûôy
 & 
DWC_I2S_RECORD
) &&

379 (
sub°ªam
->
°ªam
 =
SNDRV_PCM_STREAM_CAPTURE
))

382 i‡(!(
dev
->
ˇ∑bûôy
 & 
DWC_I2S_PLAY
) &&

383 (
sub°ªam
->
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
))

386 
	}
}

388 
	$dw_i2s_c⁄fig
(
dw_i2s_dev
 *
dev
, 
°ªam
)

390 
u32
 
ch_ªg
;

391 
i2s_˛k_c⁄fig_d©a
 *
c⁄fig
 = &
dev
->config;

394 
	`i2s_dißbÀ_ch™√ls
(
dev
, 
°ªam
);

396 
ch_ªg
 = 0; ch_ªg < (
c⁄fig
->
ch™_ƒ
 / 2); ch_reg++) {

397 i‡(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

398 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`TCR
(
ch_ªg
),

399 
dev
->
x„r_ªsﬁuti⁄
);

400 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`TFCR
(
ch_ªg
),

402 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`TER
(
ch_ªg
), 1);

404 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`RCR
(
ch_ªg
),

405 
dev
->
x„r_ªsﬁuti⁄
);

406 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`RFCR
(
ch_ªg
),

408 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
	`RER
(
ch_ªg
), 1);

411 
	}
}

413 
	$dw_i2s_˛k_cfg
(
i2s_˛k_c⁄fig_d©a
 *
c⁄fig
)

415 
m˛k
, 
s˛k
, 
mdiv
, 
sdiv
;

416 
ªg
 = 0;

418 
s˛k
 = 
c⁄fig
->
ch™_ƒ
 * c⁄fig->
d©a_width
 * c⁄fig->
ßm∂e_øã
;

419 #ifde‡
CONFIG_AUDIO_MCLK_FROM_PLL


421 
m˛k
 = 
c⁄fig
->
ßm∂e_øã
 << 8;

422 
mdiv
 = 
AUDIO_MCLK_BASE_FREQ
 / 
m˛k
 - 1;

423 
sdiv
 = 
m˛k
 / 
s˛k
 - 1;

424 
ªg
 |
I2S_SCLK_FROM_PLL
;

426 
m˛k
 = 
AUDIO_MCLK_BASE_FREQ
;

427 
mdiv
 = 0;

428 
sdiv
 = 
m˛k
 / 
s˛k
 - 1;

429 
ªg
 |
I2S_SCLK_FROM_EXT
;

431 
ªg
 |(
mdiv
 | 
sdiv
 << 12);

433 
	`wrôe_mªg32
(
CK_CRM_ADDR
 + 
CRM_I2S_CLK_CFG_REG
, 
ªg
);

436 
	}
}

439 
	$dw_i2s_hw_∑øms
(
¢d_soc_dai_dev
 *
dai_dev
,

440 
¢d_pcm_sub°ªam
 *
sub°ªam
)

442 
dw_i2s_dev
 *
dev
 = (dw_i2s_dev *)
dai_dev
->
˝u_dai
;

443 
i2s_˛k_c⁄fig_d©a
 *
c⁄fig
 = &
dev
->config;

444 
ªt
;

446 
sub°ªam
->
∑øms
.
d©a_width
) {

448 
c⁄fig
->
d©a_width
 = 16;

449 
dev
->
c¸
 = 0x00;

450 
dev
->
x„r_ªsﬁuti⁄
 = 0x02;

451 
dev
->
tx_‚
 = 
dw_pcm_tx_16
;

452 
dev
->
rx_‚
 = 
dw_pcm_rx_16
;

456 
c⁄fig
->
d©a_width
 = 24;

457 
dev
->
c¸
 = 0x08;

458 
dev
->
x„r_ªsﬁuti⁄
 = 0x04;

459 
dev
->
tx_‚
 = 
dw_pcm_tx_32
;

460 
dev
->
rx_‚
 = 
dw_pcm_rx_32
;

464 
c⁄fig
->
d©a_width
 = 32;

465 
dev
->
c¸
 = 0x10;

466 
dev
->
x„r_ªsﬁuti⁄
 = 0x05;

467 
dev
->
tx_‚
 = 
dw_pcm_tx_32
;

468 
dev
->
rx_‚
 = 
dw_pcm_rx_32
;

472 
	`¥ötf
("designware-i2s: unsupported PCM fmt");

476 
c⁄fig
->
ch™_ƒ
 = 
sub°ªam
->
∑øms
.chan_nr;

478 
c⁄fig
->
ch™_ƒ
) {

479 
EIGHT_CHANNEL_SUPPORT
:

480 
SIX_CHANNEL_SUPPORT
:

481 
FOUR_CHANNEL_SUPPORT
:

482 
TWO_CHANNEL_SUPPORT
:

485 
	`¥ötf
("channelÇot supported\n");

489 
	`dw_i2s_c⁄fig
(
dev
, 
sub°ªam
->
°ªam
);

491 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
CCR
, dev->
c¸
);

493 
c⁄fig
->
ßm∂e_øã
 = 
sub°ªam
->
∑øms
.sample_rate;

495 i‡(
dev
->
i2s_˛k_cfg
) {

496 
ªt
 = 
dev
->
	`i2s_˛k_cfg
(
c⁄fig
);

497 i‡(
ªt
 < 0) {

498 
	`¥ötf
("runtimeáudio clk config fail\n");

499  
ªt
;

502 
	`¥ötf
("canÇot config clock\n");

506 
	}
}

508 
	$dw_i2s_¥ï¨e
(
¢d_soc_dai_dev
 *
dai_dev
,

509 
¢d_pcm_sub°ªam
 *
sub°ªam
)

511 
dw_i2s_dev
 *
dev
 = (dw_i2s_dev *)
dai_dev
->
˝u_dai
;

512 i‡(
sub°ªam
->
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
)

513 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
TXFFR
, 1);

515 
	`i2s_wrôe_ªg
(
dev
->
i2s_ba£
, 
RXFFR
, 1);

518 
	}
}

520 
	$dw_i2s_åiggî
(
¢d_soc_dai_dev
 *
dai_dev
, 
u32
 
cmd
,

521 
¢d_pcm_sub°ªam
 *
sub°ªam
)

523 
dw_i2s_dev
 *
dev
 = (dw_i2s_dev *)
dai_dev
->
˝u_dai
;

524 
ªt
 = 0;

525 
cmd
) {

526 
SNDRV_PCM_TRIGGER_START
:

527 
	`i2s_°¨t
(
dev
, 
sub°ªam
->
°ªam
);

530 
SNDRV_PCM_TRIGGER_STOP
:

531 
	`i2s_°›
(
dev
, 
sub°ªam
->
°ªam
);

534 
ªt
 = -1;

537  
ªt
;

538 
	}
}

540 c⁄° 
¢d_soc_dai_›s
 
	gdw_i2s_dai_›s
 = {

541 .
°¨tup
 = 
dw_i2s_°¨tup
,

542 .
	ghw_∑øms
 = 
dw_i2s_hw_∑øms
,

543 .
	g¥ï¨e
 = 
dw_i2s_¥ï¨e
,

544 .
	gåiggî
 = 
dw_i2s_åiggî
,

547 
	$dw_c⁄figuª_by_comp
(
dw_i2s_dev
 *
dev
)

549 
u32
 
comp1
 = 
	`i2s_ªad_ªg
(
dev
->
i2s_ba£
, 
I2S_COMP_PARAM_1
);

551 
u32
 
fifo_dïth
 = 1 << (1 + 
	`COMP1_FIFO_DEPTH_GLOBAL
(
comp1
));

553 i‡(
	`COMP1_MODE_EN
(
comp1
)) {

554 
	`¥ötf
("i2s master mode supported\n");

555 
dev
->
ˇ∑bûôy
 |
DW_I2S_MASTER
;

557 
	`¥ötf
("i2s slave mode supported\n");

558 
dev
->
ˇ∑bûôy
 |
DW_I2S_SLAVE
;

561 i‡(
	`COMP1_TX_ENABLED
(
comp1
)) {

562 
dev
->
ˇ∑bûôy
 |
DWC_I2S_PLAY
;

564 i‡(
	`COMP1_RX_ENABLED
(
comp1
)) {

565 
dev
->
ˇ∑bûôy
 |
DWC_I2S_RECORD
;

568 
dev
->
fifo_th
 = 
fifo_dïth
;

571 
	}
}

574 
dw_i2s_dev
 
	gi2s_dev
[
MAX_I2S_NUM_ON_CHIP
];

576 
	$dw_≠b_i2s_¥obe
(
¢d_soc_dai_dev
 *
dai_dev
,

577 
id
)

579 
dw_i2s_dev
 *
dev
;

581 if(
id
 >
MAX_I2S_NUM_ON_CHIP
) {

582 
	`¥ötf
("Bad i2s id\n");

586 
dev
 = &
i2s_dev
[
id
];

588 
	`mem£t
(
dev
, 0 , (
dw_i2s_dev
));

590 
dev
->
i2s_ba£
 = 
i2s_ioba£_li°
[
id
];

591 
dev
->
dai_›s
 = &
dw_i2s_dai_›s
;

593 
dai_dev
->
˝u_dai
 = 
dev
;

595 if(
	`dw_c⁄figuª_by_comp
(
dev
))

596 
îr‹
;

598 
dev
->
i2s_˛k_cfg
 = 
dw_i2s_˛k_cfg
;

599 
dev
->
c⁄fig
.
m˛k
 = 
dai_dev
->
sys˛k
;

600 if(
dev
->
ˇ∑bûôy
 & 
DW_I2S_MASTER
)

601 
dev
->
pﬁl
 = 
i2s_pﬁl_tx
;

603 
dev
->
pﬁl
 = 
i2s_pﬁl_rx
;

605 
dev
->
u£_pio
 = 
åue
;

607 
	`¥ötf
("i2s.0x%x %sÖrobe done, use %s\n",

608 ()
dev
->
i2s_ba£
,

609 
dev
->
ˇ∑bûôy
 & 
DW_I2S_MASTER
 ? "master" : "slave",

610 
dev
->
u£_pio
 =
åue
 ? "pio" : "ahb dma");

614 
îr‹
:

616 
	}
}

	@drivers/dw_apb_i2s.h

1 #i‚de‡
_DW_APB_I2S_H_


2 
	#_DW_APB_I2S_H_


	)

4 
	~"d©©y≥.h
"

5 
	~"¢d_pcm.h
"

6 
	~"soc_dai.h
"

8 
	#MAX_I2S_NUM_ON_CHIP
 5

	)

10 
	#I2S_FOR_PLAY
 4

	)

13 
	#IER
 0x000

	)

14 
	#IRER
 0x004

	)

15 
	#ITER
 0x008

	)

16 
	#CER
 0x00C

	)

17 
	#CCR
 0x010

	)

18 
	#RXFFR
 0x014

	)

19 
	#TXFFR
 0x018

	)

22 
	#ISR_TXFO
 
	`BIT
(5)

	)

23 
	#ISR_TXFE
 
	`BIT
(4)

	)

24 
	#ISR_RXFO
 
	`BIT
(1)

	)

25 
	#ISR_RXDA
 
	`BIT
(0)

	)

28 
	#LRBR_LTHR
(
x
Ë(0x40 * x + 0x020)

	)

29 
	#RRBR_RTHR
(
x
Ë(0x40 * x + 0x024)

	)

30 
	#RER
(
x
Ë(0x40 * x + 0x028)

	)

31 
	#TER
(
x
Ë(0x40 * x + 0x02C)

	)

32 
	#RCR
(
x
Ë(0x40 * x + 0x030)

	)

33 
	#TCR
(
x
Ë(0x40 * x + 0x034)

	)

34 
	#ISR
(
x
Ë(0x40 * x + 0x038)

	)

35 
	#IMR
(
x
Ë(0x40 * x + 0x03C)

	)

36 
	#ROR
(
x
Ë(0x40 * x + 0x040)

	)

37 
	#TOR
(
x
Ë(0x40 * x + 0x044)

	)

38 
	#RFCR
(
x
Ë(0x40 * x + 0x048)

	)

39 
	#TFCR
(
x
Ë(0x40 * x + 0x04C)

	)

40 
	#RFF
(
x
Ë(0x40 * x + 0x050)

	)

41 
	#TFF
(
x
Ë(0x40 * x + 0x054)

	)

44 
	#I2S_COMP_PARAM_2
 0x01F0

	)

45 
	#I2S_COMP_PARAM_1
 0x01F4

	)

46 
	#I2S_COMP_VERSION
 0x01F8

	)

47 
	#I2S_COMP_TYPE
 0x01FC

	)

50 
	#DMACR
 0x0200

	)

51 
	#RXDMA_CH
(
x
Ë(0x40 * x + 0x0204)

	)

52 
	#TXDMA_CH
(
x
Ë(0x40 * x + 0x0214)

	)

54 
	#DMA_TXBLOCK_EN
 (1 << 17)

	)

55 
	#DMAEN_TXCH0
 (1 << 8)

	)

56 
	#DMAEN_TXCH1
 (1 << 9)

	)

57 
	#DMAEN_TXCH2
 (1 << 10)

	)

58 
	#DMAEN_TXCH3
 (1 << 11)

	)

60 
	#DMA_RXBLOCK_EN
 (1 << 16)

	)

61 
	#DMAEN_RXCH0
 (1 << 0)

	)

62 
	#DMAEN_RXCH1
 (1 << 1)

	)

63 
	#DMAEN_RXCH2
 (1 << 2)

	)

64 
	#DMAEN_RXCH3
 (1 << 3)

	)

70 
	#COMP1_TX_WORDSIZE_3
(
r
Ë((‘Ë& 
	`GENMASK
(27, 25)Ë>> 25)

	)

71 
	#COMP1_TX_WORDSIZE_2
(
r
Ë((‘Ë& 
	`GENMASK
(24, 22)Ë>> 22)

	)

72 
	#COMP1_TX_WORDSIZE_1
(
r
Ë((‘Ë& 
	`GENMASK
(21, 19)Ë>> 19)

	)

73 
	#COMP1_TX_WORDSIZE_0
(
r
Ë((‘Ë& 
	`GENMASK
(18, 16)Ë>> 16)

	)

74 
	#COMP1_TX_CHANNELS
(
r
Ë((‘Ë& 
	`GENMASK
(10, 9)Ë>> 9)

	)

75 
	#COMP1_RX_CHANNELS
(
r
Ë((‘Ë& 
	`GENMASK
(8, 7)Ë>> 7)

	)

76 
	#COMP1_RX_ENABLED
(
r
Ë((‘Ë& 
	`BIT
(6)Ë>> 6)

	)

77 
	#COMP1_TX_ENABLED
(
r
Ë((‘Ë& 
	`BIT
(5)Ë>> 5)

	)

78 
	#COMP1_MODE_EN
(
r
Ë((‘Ë& 
	`BIT
(4)Ë>> 4)

	)

79 
	#COMP1_FIFO_DEPTH_GLOBAL
(
r
Ë((‘Ë& 
	`GENMASK
(3, 2)Ë>> 2)

	)

80 
	#COMP1_APB_DATA_WIDTH
(
r
Ë((‘Ë& 
	`GENMASK
(1, 0)Ë>> 0)

	)

82 
	#COMP2_RX_WORDSIZE_3
(
r
Ë((‘Ë& 
	`GENMASK
(12, 10)Ë>> 10)

	)

83 
	#COMP2_RX_WORDSIZE_2
(
r
Ë((‘Ë& 
	`GENMASK
(9, 7)Ë>> 7)

	)

84 
	#COMP2_RX_WORDSIZE_1
(
r
Ë((‘Ë& 
	`GENMASK
(5, 3)Ë>> 3)

	)

85 
	#COMP2_RX_WORDSIZE_0
(
r
Ë((‘Ë& 
	`GENMASK
(2, 0)Ë>> 0)

	)

88 
	#COMP_MAX_WORDSIZE
 (1 << 3)

	)

89 
	#COMP_MAX_DATA_WIDTH
 (1 << 2)

	)

91 
	#MAX_CHANNEL_NUM
 8

	)

92 
	#MIN_CHANNEL_NUM
 2

	)

94 
	#CONFIG_AUDIO_MCLK_FROM_PLL


	)

95 
	#MCLK_IN_FREQ
 12288000

	)

96 
	#CRM_I2S_CLK_CFG_REG
 (0x120)

	)

97 #ifde‡
CONFIG_AUDIO_MCLK_FROM_PLL


98 
	#AUDIO_MCLK_BASE_FREQ
 1536000000

	)

100 
	#AUDIO_MCLK_BASE_FREQ
 12288000

	)

102 
	#I2S_SCLK_FROM_PLL
 (0 << 20)

	)

103 
	#I2S_SCLK_FROM_EXT
 (1 << 20)

	)

107 c⁄° 
u32
 
	gfifo_width
[
COMP_MAX_WORDSIZE
] = {

111 
	edma_¶ave_buswidth
 {

112 
	mDMA_SLAVE_BUSWIDTH_UNDEFINED
 = 0,

113 
	mDMA_SLAVE_BUSWIDTH_1_BYTE
 = 1,

114 
	mDMA_SLAVE_BUSWIDTH_2_BYTES
 = 2,

115 
	mDMA_SLAVE_BUSWIDTH_3_BYTES
 = 3,

116 
	mDMA_SLAVE_BUSWIDTH_4_BYTES
 = 4,

117 
	mDMA_SLAVE_BUSWIDTH_8_BYTES
 = 8,

118 
	mDMA_SLAVE_BUSWIDTH_16_BYTES
 = 16,

119 
	mDMA_SLAVE_BUSWIDTH_32_BYTES
 = 32,

120 
	mDMA_SLAVE_BUSWIDTH_64_BYTES
 = 64,

124 c⁄° 
u32
 
	gbus_widths
[
COMP_MAX_DATA_WIDTH
] = {

125 
DMA_SLAVE_BUSWIDTH_1_BYTE
,

126 
DMA_SLAVE_BUSWIDTH_2_BYTES
,

127 
DMA_SLAVE_BUSWIDTH_4_BYTES
,

128 
DMA_SLAVE_BUSWIDTH_UNDEFINED


132 
	#TWO_CHANNEL_SUPPORT
 2

	)

133 
	#FOUR_CHANNEL_SUPPORT
 4

	)

134 
	#SIX_CHANNEL_SUPPORT
 6

	)

135 
	#EIGHT_CHANNEL_SUPPORT
 8

	)

138 
	sdw_i2s_dev
 {

139 *
	mi2s_ba£
;

140 
	#DWC_I2S_PLAY
 (1 << 0)

	)

141 
	#DWC_I2S_RECORD
 (1 << 1)

	)

142 
	#DW_I2S_SLAVE
 (1 << 2)

	)

143 
	#DW_I2S_MASTER
 (1 << 3)

	)

144 
	mˇ∑bûôy
;

145 
u32
 
	mc¸
;

146 
u32
 
	mx„r_ªsﬁuti⁄
;

147 
u32
 
	mfifo_th
;

149 
i2s_˛k_c⁄fig_d©a
 
	mc⁄fig
;

150 (*
	mi2s_˛k_cfg
)(
i2s_˛k_c⁄fig_d©a
 *
	mc⁄fig
);

152 
boﬁ
 
	mu£_pio
;

153 (*
	mtx_‚
)(
	mdw_i2s_dev
 *,

154 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

155 (*
	mrx_‚
)(
	mdw_i2s_dev
 *,

156 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

158 (*
	mpﬁl
)(
	mdw_i2s_dev
 *);

160 
¢d_pcm_sub°ªam
 *
	msub°ªam
;

161 c⁄° 
¢d_soc_dai_›s
 *
	mdai_›s
;

165 
dw_≠b_i2s_¥obe
(
¢d_soc_dai_dev
 *
dai_dev
, 
id
);

	@drivers/gd25q128.c

2 
	~"d©©y≥.h
"

3 
	~"misc.h
"

4 
	~"gd25q128.h
"

5 
	~"•i_n‹.h
"

6 
	~<°rög.h
>

8 
	#NOR_TARGET_ADDR
 0xFFC000

9 
	#M2M_TEST_SRC
 0xF0040000

	)

10 
	#M2M_TEST_DEST
 0xF0050000

	)

12 
•i_n‹_öt_mode
;

13 
•i_ªad_byã_dma_x4
(
CK_UINT32
 
d°_d©a
, CK_UINT32 
Àngth
,

14 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
);

15 
•i_wrôe_byã_dma
(
CK_UINT32
 
d°_mem
, CK_UINT32 
d©a_Àngth
, CK_UINT32 
addr
, 
CK_UINT8
 
P‹tN
);

16 
•i_ªad_byã_dma
(
CK_UINT32
 
d°_d©a
, CK_UINT32 
Àngth
, CK_UINT32 
off£t
, 
CK_UINT8
 
P‹tN
);

21 
	$Run_GD25Q128
(
CK_UINT8
 
P‹tN
)

23 
CK_UINT8
 
d°_mem
[
NOR_TEST_LEN
] = {

33 
CK_UINT8
 
ªad_mem
[
NOR_TEST_LEN
] = {0};

34 
CK_UINT32
 
id
;

35 
CK_UINT32
 
i
;

37 
	`•i_öô
(
P‹tN
);

38 
	`¥ötf
("\nSPI c⁄åﬁÀ∏w‹k i¿%dHz\n", 
QSPI_DEFAULT_FREQ
/
	`ªad_mªg32
(
SPI_SPBRG
));

41 
id
 = 
	`SPI_READID
(
P‹tN
);

42 i‡(
id
 !
NOR_FLASH_ID
) {

43 
	`¥ötf
("\tCheck SPI NOR flash ID(0x%x,Éxpect 0x%x) --- FAIL\n",

44 
id
, 
NOR_FLASH_ID
);

46 
	`¥ötf
("\tCheck SPI NOR fœsh ID(0x%xË--- PASS\n", 
id
);

49 
id
 = 
	`SPI_READMID
(
P‹tN
);

50 
	`¥ötf
("\t\tMID i†0x%x\n", 
id
);

52 
	`Êash_checkbusy
(
P‹tN
);

53 
	`•i_îa£_£˘‹
(
P‹tN
, 
NOR_TARGET_ADDR
);

55 
	`•i_ªad_byã
(
ªad_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

56 
i
 = 0; i < 
NOR_TEST_LEN
; i++) {

57 i‡(
ªad_mem
[
i
] != 0xff) {

58 
	`¥ötf
("\tErase SPI NOR flash sector (got [%d]=0x%x) --- FAIL\n",

59 
i
, 
ªad_mem
[i]);

63 i‡(
i
 >
NOR_TEST_LEN
)

64 
	`¥ötf
("\tErase SPI NOR flash sector --- PASS\n");

66 
	`•i_wrôe_byã
(
d°_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

67 
	`•i_wrôe_byã
(
d°_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN, 
P‹tN
);

68 
	`•i_wrôe_byã
(
d°_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN * 2, 
P‹tN
);

72 
	`mem£t
(&
ªad_mem
[0], 0x00, (read_mem));

73 
	`•i_ªad_byã
(
ªad_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

74 
i
 = 0; i < 
NOR_TEST_LEN
; i++) {

75 i‡(
d°_mem
[
i
] !
ªad_mem
[i]) {

76 
	`¥ötf
("\tNormalÑead SPI NOR flash (WDATA=0x%x, RDATA=0x%x) --- FAIL\n" ,

77 
d°_mem
[
i
], 
ªad_mem
[i]);

81 i‡(
i
 >
NOR_TEST_LEN
)

82 
	`¥ötf
("\tNormal write/read SPI NOR flash --- PASS\n");

84 
	`mem£t
(&
ªad_mem
[0], 0x00, (read_mem));

85 
	`•i_duÆ_ªad_byã
(
ªad_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN, 
P‹tN
);

86 
i
 = 0; i < 
NOR_TEST_LEN
; i++) {

87 i‡(
d°_mem
[
i
] !
ªad_mem
[i]) {

88 
	`¥ötf
("\tDual I/O fastÑead SPI NOR flash (WDATA=0x%x, RDATA=0x%x) --- FAIL\n" ,

89 
d°_mem
[
i
], 
ªad_mem
[i]);

93 i‡(
i
 >
NOR_TEST_LEN
)

94 
	`¥ötf
("\tDual I/O fastÑead SPI NOR flash --- PASS\n");

96 
	`mem£t
(&
ªad_mem
[0], 0x00, (read_mem));

97 
	`•i_Á°_ªad_byã
(
ªad_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN * 2, 
P‹tN
);

98 
i
 = 0; i < 
NOR_TEST_LEN
; i++) {

99 i‡(
d°_mem
[
i
] !
ªad_mem
[i]) {

100 
	`¥ötf
("\tDual Output fastÑead(0x3b) SPI NOR flash (WDATA=0x%x, RDATA=0x%x) --- FAIL\n" ,

101 
d°_mem
[
i
], 
ªad_mem
[i]);

105 i‡(
i
 >
NOR_TEST_LEN
)

106 
	`¥ötf
("\tDual Output fastÑead(0x3b) SPI NOR flash --- PASS\n");

108 
BOOL
 
ªt
;

109 
ªt
 = 
	`•i_quad_íabÀ
(
P‹tN
);

110 i‡(
ªt
) {

111 
	`•i_quad_wrôe_byã
(
d°_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN * 3, 
P‹tN
);

112 
	`mem£t
(&
ªad_mem
[0], 0x00, (read_mem));

113 
	`•i_quad_Á°_ªad_byã
(
ªad_mem
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
 + NOR_TEST_LEN * 3, 
P‹tN
);

114 
i
 = 0; i < 
NOR_TEST_LEN
; i++) {

115 i‡(
d°_mem
[
i
] !
ªad_mem
[i]) {

116 
	`¥ötf
("\tQuad Output fastÑead(0x6b) SPI NOR flash (WDATA=0x%x, RDATA=0x%x) --- FAIL\n" ,

117 
d°_mem
[
i
], 
ªad_mem
[i]);

121 i‡(
i
 >
NOR_TEST_LEN
)

122 
	`¥ötf
("\tQuad Output fast write(0x32)/read(0x6b) SPI NOR flash --- PASS\n");

123 
ªt
 = 
	`•i_quad_dißbÀ
(
P‹tN
);

125 i‡(
•i_n‹_öt_mode
) {

126 
	`•i_uƒegi°î_i§
();

128 
	}
}

130 
	$AXI_DMA_SPI_TEST
(
CK_UINT8
 
P‹tN
){

131 
CK_UINT32
 
˙t
;

132 
˙t
 = 0; c¡ < 
NOR_TEST_LEN
; cnt++)

133 
	`wrôe_mªg8
(
M2M_TEST_SRC
 + 
˙t
, cnt);

135 
	`mem£t
((*)
M2M_TEST_DEST
, 0, 
NOR_TEST_LEN
);

137 
CK_UINT32
 
id
;

139 
	`•i_öô
(
P‹tN
);

140 
	`¥ötf
("\nSPI c⁄åﬁÀ∏w‹k i¿%dHz\n", 
QSPI_DEFAULT_FREQ
/
	`ªad_mªg32
(
SPI_SPBRG
));

143 
id
 = 
	`SPI_READID
(
P‹tN
);

144 i‡(
id
 !
NOR_FLASH_ID
) {

145 
	`¥ötf
("\tCheck SPI NOR flash ID(0x%x,Éxpect 0x%x) --- FAIL\n",

146 
id
, 
NOR_FLASH_ID
);

148 
	`¥ötf
("\tCheck SPI NOR fœsh ID(0x%xË--- PASS\n", 
id
);

151 
id
 = 
	`SPI_READMID
(
P‹tN
);

152 
	`¥ötf
("\t\tMID i†0x%x\n", 
id
);

154 
	`Êash_checkbusy
(
P‹tN
);

155 
	`•i_îa£_£˘‹
(
P‹tN
, 
NOR_TARGET_ADDR
);

158 
	`•i_ªad_byã_dma
(
M2M_TEST_DEST
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

159 
˙t
 = 0; c¡ < 
NOR_TEST_LEN
; cnt++) {

160 i‡(
	`ªad_mªg8
(
M2M_TEST_DEST
 + 
˙t
) != 0xff) {

161 
	`¥ötf
("\tEø£ SPI NOR fœsh se˘‹ (gŸ [%d]=0x%xË--- FAIL\n",
˙t
 , 
	`ªad_mªg8
(
M2M_TEST_DEST
 + cnt));

165 i‡(
˙t
 >
NOR_TEST_LEN
)

166 
	`¥ötf
("\tErase SPI NOR flash sector --- PASS\n");

168 
	`mem£t
((*)
M2M_TEST_DEST
, 0, 
NOR_TEST_LEN
);

170 
	`•i_wrôe_byã_dma
(
M2M_TEST_SRC
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

172 
	`•i_ªad_byã_dma
(
M2M_TEST_DEST
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

173 
˙t
 = 0; c¡ < 
NOR_TEST_LEN
; cnt++) {

174 i‡(
	`ªad_mªg8
(
M2M_TEST_SRC
 + 
˙t
Ë!ªad_mªg8(
M2M_TEST_DEST
 + cnt)) {

175 
	`¥ötf
("\tN‹mÆÑód SPI NOR fœsh %d (WDATA=0x%x, RDATA=0x%xË--- FAIL\n" ,
	`ªad_mªg8
(
M2M_TEST_SRC
 + 
˙t
),Ñód_mªg8(
M2M_TEST_DEST
 + cnt));

179 i‡(
˙t
 >
NOR_TEST_LEN
)

180 
	`¥ötf
("\tNormalÑead SPI NOR flash --- PASS\n");

182 
BOOL
 
ªt
;

183 
ªt
 = 
	`•i_quad_íabÀ
(
P‹tN
);

184 i‡(
ªt
) {

185 
	`mem£t
((*)
M2M_TEST_DEST
, 0, 
NOR_TEST_LEN
);

186 
	`•i_ªad_byã_dma_x4
(
M2M_TEST_DEST
, 
NOR_TEST_LEN
, 
NOR_TARGET_ADDR
, 
P‹tN
);

188 
˙t
 = 0; c¡ < 
NOR_TEST_LEN
; cnt++) {

189 i‡(
	`ªad_mªg8
(
M2M_TEST_SRC
 + 
˙t
Ë!ªad_mªg8(
M2M_TEST_DEST
 + cnt)) {

190 
	`¥ötf
("\tN‹mÆÑód SPI NOR fœsh %d (WDATA=0x%x, RDATA=0x%xË--- FAIL\n" ,
	`ªad_mªg8
(
M2M_TEST_SRC
 + 
˙t
),Ñód_mªg8(
M2M_TEST_DEST
 + cnt));

194 i‡(
˙t
 >
NOR_TEST_LEN
)

195 
	`¥ötf
("\tQuad Output fastÑead(0x6b) SPI NOR flash --- PASS\n");

196 
ªt
 = 
	`•i_quad_dißbÀ
(
P‹tN
);

199 
	}
}

204 
	$SPI_Ma°î_GD25Q128_APP
(
CK_UINT8
 
P‹tN
)

206 
	`¥ötf
("\tStart SPI NOR flashÅest . . .\n");

207 
	`¥ötf
("\nRunÅest with interrupt disabled:\n");

208 
•i_n‹_öt_mode
 = 0;

209 
	`Run_GD25Q128
(
P‹tN
);

211 
	`¥ötf
("\nRunÅest with interruptÉnabled:\n");

212 
•i_n‹_öt_mode
 = 1;

213 
	`Run_GD25Q128
(
P‹tN
);

215 
	`¥ötf
("\n\tSPI NOR flashÅest done . . .\n");

217 
	`¥ötf
("\nAXI DMA & SPI TEST...\n");

218 
•i_n‹_öt_mode
 = 0;

219 
	`AXI_DMA_SPI_TEST
(0);

220 
	`¥ötf
("\nAXI DMA & SPI TEST done...\n");

221 
	}
}

	@drivers/gd25q128.h

1 #i‚de‡
_GD25Q128_H__


2 
	#_GD25Q128_H__


	)

4 
SPI_Ma°î_GD25Q128_APP
(
CK_UINT8
 
P‹tN
);

	@drivers/gpio.c

1 
	~"ck810.h
"

2 
	~"d©©y≥.h
"

3 
	~"misc.h
"

4 
	~"ötc.h
"

5 
	~"gpio.h
"

6 
	~"timî.h
"

8 
	#GPIO_SWPORTA_DR
 0x00

	)

9 
	#GPIO_SWPORTA_DDR
 0x04

	)

10 
	#GPIO_SWPORTB_DR
 0x0c

	)

11 
	#GPIO_SWPORTB_DDR
 0x10

	)

12 
	#GPIO_SWPORTC_DR
 0x18

	)

13 
	#GPIO_SWPORTC_DDR
 0x1c

	)

14 
	#GPIO_SWPORTD_DR
 0x24

	)

15 
	#GPIO_SWPORTD_DDR
 0x28

	)

16 
	#GPIO_INTEN
 0x30

	)

17 
	#GPIO_INTMASK
 0x34

	)

18 
	#GPIO_INTTYPE_LEVEL
 0x38

	)

19 
	#GPIO_INT_POLARITY
 0x3c

	)

20 
	#GPIO_INTSTATUS
 0x40

	)

21 
	#GPIO_RAW_INTSTATUS
 0x44

	)

22 
	#GPIO_PORTA_DEBOUNCE
 0x48

	)

23 
	#GPIO_PORTA_EOI
 0x4c

	)

24 
	#GPIO_EXT_PORTA
 0x50

	)

25 
	#GPIO_EXT_PORTB
 0x54

	)

26 
	#GPIO_EXT_PORTC
 0x58

	)

27 
	#GPIO_EXT_PORTD
 0x5c

	)

28 
	#GPIO_ID_CODE
 0x64

	)

29 
	#GPIO_INT_BOTHEDGE
 0x68

	)

30 
	#GPIO_VER_ID_CODE
 0x6c

	)

31 
	#GPIO_CONFIG_REG1
 0x74

	)

32 
	#GPIO_CONFIG_REG2
 0x70

	)

34 
	#GPIO_INTC_ACTIVE_LOW
 0

	)

35 
	#GPIO_INTC_ACTIVE_HIGH
 1

	)

36 
	#GPIO_INTC_ACTIVE_BOTH
 2

	)

38 
ölöe
 
	$gpio_ªg_ªad
(
off£t
)

40  
	`ªad_mªg32
(
CK_GPIO_ADDR
 + 
off£t
);

41 
	}
}

43 
ölöe
 
	$gpio_ªg_wrôe
(
off£t
, 
vÆ
)

45 
	`wrôe_mªg32
(
CK_GPIO_ADDR
 + 
off£t
, 
vÆ
);

46 
	}
}

48 
ölöe
 
	$gpio_ªg_£t_bô
(
off£t
, 
bô
) {

49 
	`gpio_ªg_wrôe
(
off£t
, 
	`gpio_ªg_ªad
(off£tË| (0x1 << 
bô
));

50 
	}
}

52 
ölöe
 
	$gpio_ªg_˛ór_bô
(
off£t
, 
bô
) {

53 
	`gpio_ªg_wrôe
(
off£t
, 
	`gpio_ªg_ªad
(off£tË& (~(0x1 << 
bô
)));

54 
	}
}

56 
ölöe
 
	$gpio_ªg_ªad_bô
(
off£t
, 
bô
) {

57  ((
	`gpio_ªg_ªad
(
off£t
Ë>> 
bô
) & 0x1);

58 
	}
}

61 
ölöe
 
BOOL
 
	$¥ess_pb13
() {

62  (
	`CK_Gpio_I≈ut
(1) == 0) ;

63 
	}
}

65 
	$CK_Gpio_Inô
() {

66 
c⁄fig_ªg1
, 
c⁄fig_ªg2
;

68 
	`¥ötf
 ("[%s:%d], ID=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`gpio_ªg_ªad
(
GPIO_ID_CODE
));

69 
	`¥ötf
 ("[%s:%d], VER=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`gpio_ªg_ªad
(
GPIO_VER_ID_CODE
));

71 
c⁄fig_ªg1
 = 
	`gpio_ªg_ªad
(
GPIO_CONFIG_REG1
);

72 
	`¥ötf
 ("[%s:%d], c⁄fig1=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
c⁄fig_ªg1
);

73 
	`¥ötf
 ("[%s:%d], APB_DATA_WIDTH=%d\n", 
__FUNCTION__
, 
__LINE__
, 0x8 << (
c⁄fig_ªg1
 & 0x3));

74 
	`¥ötf
 ("[%s:%d], NUM_PORTS=%d\n", 
__FUNCTION__
, 
__LINE__
, ((
c⁄fig_ªg1
 >> 2) & 0x3) + 1);

76 
c⁄fig_ªg2
 = 
	`gpio_ªg_ªad
(
GPIO_CONFIG_REG2
);

77 
	`¥ötf
 ("[%s:%d], c⁄fig2=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
c⁄fig_ªg2
);

78 
	`¥ötf
 ("[%s:%d], PWIDTH_A=%d\n", 
__FUNCTION__
, 
__LINE__
, 
c⁄fig_ªg2
 & 0x1f);

79 
	`¥ötf
 ("[%s:%d], PWIDTH_B=%d\n", 
__FUNCTION__
, 
__LINE__
, (
c⁄fig_ªg2
 >> 5) & 0x1f);

80 
	`¥ötf
 ("[%s:%d], PWIDTH_C=%d\n", 
__FUNCTION__
, 
__LINE__
, (
c⁄fig_ªg2
 >> 10) & 0x1f);

81 
	`¥ötf
 ("[%s:%d], PWIDTH_D=%d\n", 
__FUNCTION__
, 
__LINE__
, (
c⁄fig_ªg2
 >> 15) & 0x1f);

82 
	}
}

84 
	$CK_Gpio_Ouçut
(
pö
, 
vÆ
) {

86 
	`gpio_ªg_£t_bô
(
GPIO_SWPORTA_DDR
, 
pö
);

89 i‡(
vÆ
 == 0) {

90 
	`gpio_ªg_˛ór_bô
(
GPIO_SWPORTA_DR
, 
pö
);

92 
	`gpio_ªg_£t_bô
(
GPIO_SWPORTA_DR
, 
pö
);

94 
	}
}

96 
	$dw_Gpio_Ouçut
(
p‹t
, 
pö
, 
vÆ
) {

98 
	`gpio_ªg_£t_bô
(
GPIO_SWPORTA_DDR
 + (
p‹t
 * 0xc), 
pö
);

101 i‡(
vÆ
 == 0) {

102 
	`gpio_ªg_˛ór_bô
(
GPIO_SWPORTA_DR
 + (
p‹t
 * 0xc), 
pö
);

104 
	`gpio_ªg_£t_bô
(
GPIO_SWPORTA_DR
 + (
p‹t
 * 0xc), 
pö
);

106 
	}
}

108 
	$dw_Gpio_I≈ut
(
p‹t
, 
pö
) {

110 
	`gpio_ªg_˛ór_bô
(
GPIO_SWPORTA_DDR
 + (
p‹t
 * 0xc), 
pö
);

113  
	`gpio_ªg_ªad_bô
(
GPIO_EXT_PORTA
 + (
p‹t
 >> 2), 
pö
);

114 
	}
}

117 
	$CK_Gpio_Te°_Ouçut
() {

118 
Áûed
 = 0;

120 
	`¥ötf
 ("\n[%s:%d], -----GPIO ouçuàã° begö-----\n", 
__FUNCTION__
, 
__LINE__
);

121 
	`¥ötf
 ("[%s:%d], ***∂ó£ check d9&d10Üed sètus***", 
__FUNCTION__
, 
__LINE__
);

123 
	`CK_Gpio_Ouçut
(26, 1);

124 
	`¥ötf
 ("\n\t Is d9Üed on? [y/n] ");

125 i‡(
	`CK_WaôF‹Rïly
() != 1) {

126 
Áûed
 = 1;

129 
	`CK_Gpio_Ouçut
(26, 0);

130 
	`¥ötf
 ("\n\t Is d9Üed off? [y/n] ");

131 i‡(
	`CK_WaôF‹Rïly
() != 1) {

132 
Áûed
 = 1;

135 
	`CK_Gpio_Ouçut
(27, 1);

136 
	`¥ötf
 ("\n\t Is d10Üed on? [y/n] ");

137 i‡(
	`CK_WaôF‹Rïly
() != 1) {

138 
Áûed
 = 1;

141 
	`CK_Gpio_Ouçut
(27, 0);

142 
	`¥ötf
 ("\n\t Is d10Üed off? [y/n] ");

143 i‡(
	`CK_WaôF‹Rïly
() != 1) {

144 
Áûed
 = 1;

147 i‡(
Áûed
 == 1) {

148 
	`¥ötf
 ("\n\t - - -FAILURE\n");

150 
	`¥ötf
 ("\n\t - - -PASS\n");

152 
	`¥ötf
 ("[%s:%d], -----GPIO ouçuàã°Énd-----\n", 
__FUNCTION__
, 
__LINE__
);

153 
	}
}

155 
	$CK_Gpio_I≈ut
(
pö
) {

157 
	`gpio_ªg_˛ór_bô
(
GPIO_SWPORTA_DDR
, 
pö
);

160  
	`gpio_ªg_ªad_bô
(
GPIO_EXT_PORTA
, 
pö
);

161 
	}
}

168 
	$CK_Gpio_Te°_I≈ut
() {

169 
gpio0
, 
gpio1
;

170 
gpio0_ﬁd
, 
gpio1_ﬁd
;

171 
∑s£d
 = 0;

173 
	`¥ötf
 ("\n[%s:%d], -----GPIO i≈uàã° begö-----\n", 
__FUNCTION__
, 
__LINE__
);

174 
	`¥ötf
("ForÅhisÅestÅoÑun correctly, connect\n"

177 
	`¥ötf
("connection done, continue? - - - [y/n] ");

178 
	`CK_WaôF‹Rïly
() != 1) {

179 
	`¥ötf
 ("\n\t StartÅest? [y/n] ");

181 
	`¥ötf
 ("[%s:%d], ***¸é + cÅÿexôÅe°***\n", 
__FUNCTION__
, 
__LINE__
);

182 
	`CK_Gpio_Ouçut
(17, 1);

183 
	`CK_Gpio_Ouçut
(19, 1);

185 
gpio0
 = 
	`CK_Gpio_I≈ut
(16);

186 
gpio1
 = 
	`CK_Gpio_I≈ut
(18);

187 
	`¥ötf
 ("[%s:%d], gpio0=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio0
);

188 
	`¥ötf
 ("[%s:%d], gpio1=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio1
);

189 
gpio0_ﬁd
 = 
gpio0
;

190 
gpio1_ﬁd
 = 
gpio1
;

192 
	`CK_Gpio_Ouçut
(17, 0);

193 
	`CK_Gpio_Ouçut
(19, 0);

195 
gpio0
 = 
	`CK_Gpio_I≈ut
(16);

196 
gpio1
 = 
	`CK_Gpio_I≈ut
(18);

197 i‡(
gpio0
 !
gpio0_ﬁd
) {

198 
∑s£d
 = 1;

199 
	`¥ötf
 ("[%s:%d], gpio0=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio0
);

200 
gpio0_ﬁd
 = 
gpio0
;

202 i‡(
gpio1
 !
gpio1_ﬁd
) {

203 
∑s£d
 = 1;

204 
	`¥ötf
 ("[%s:%d], gpio1=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio1
);

205 
gpio1_ﬁd
 = 
gpio1
;

207 i‡(0x03 =
	`gëch¨
())

210 i‡(
∑s£d
 == 0) {

211 
	`¥ötf
 ("\t - - -FAILURE\n");

213 
	`¥ötf
 ("\t - - -PASS\n");

215 
	`¥ötf
 ("[%s:%d], -----GPIO i≈uàã°Énd-----\n", 
__FUNCTION__
, 
__LINE__
);

219 
	}
}

221 vﬁ©ûê
	ggpio_ötc_cou¡
;

223 
	$CK_Gpio_I¡c_H™dÀr
() {

224 
	`¥ötf
 ("[%s:%d], i¡°©us=%d,Ñaw_öt°©us=%d\n", 
__FUNCTION__
, 
__LINE__
,

225 
	`gpio_ªg_ªad
(
GPIO_INTSTATUS
), gpio_ªg_ªad(
GPIO_RAW_INTSTATUS
));

226 
	`¥ötf
 ("[%s:%d], cÀ¨ i¡îru±\n", 
__FUNCTION__
, 
__LINE__
);

227 
	`gpio_ªg_wrôe
(
GPIO_PORTA_EOI
, 0xffffffff);

228 
	`¥ötf
 ("[%s:%d], i¡°©us=%d,Ñaw_öt°©us=%d\n", 
__FUNCTION__
, 
__LINE__
,

229 
	`gpio_ªg_ªad
(
GPIO_INTSTATUS
), gpio_ªg_ªad(
GPIO_RAW_INTSTATUS
));

230 
gpio_ötc_cou¡
++;

231 
	}
}

233 
CKSåu˘_IRQH™dÀr
 
	ggpio_úq_öfo
 = {

234 .
dev«me
 = "GPIO",

235 .
	gúqid
 = 
CK_INTC_GPIO
,

236 .
	g¥i‹ôy
 = 
CK_INTC_GPIO
,

237 .
	gh™dÀr
 = 
CK_Gpio_I¡c_H™dÀr
,

238 .
	gbÁ°
 = 
FALSE
,

239 .
	g√xt
 = 
NULL


242 
	$CK_Gpio_I¡c_Së
(
pö
, 
BOOL
 
Àvñ
, 
a˘ive
) {

243 
	`¥ötf
 ("\n[%s:%d], -----GPIO i¡îru±Åe° begö-----\n", 
__FUNCTION__
, 
__LINE__
);

246 
	`gpio_ªg_˛ór_bô
(
GPIO_INTEN
, 
pö
);

248 i‡(
Àvñ
) {

249 
	`gpio_ªg_˛ór_bô
(
GPIO_INTTYPE_LEVEL
, 
pö
);

250 
	`¥ötf
 ("[%s:%d], sëÜevñ-£nsôive\n", 
__FUNCTION__
, 
__LINE__
);

252 
	`gpio_ªg_£t_bô
(
GPIO_INTTYPE_LEVEL
, 
pö
);

253 
	`¥ötf
 ("[%s:%d], sëÉdge-£nsôive\n", 
__FUNCTION__
, 
__LINE__
);

256 i‡(!
Àvñ
 && (
a˘ive
 =
GPIO_INTC_ACTIVE_BOTH
)) {

258 
	`¥ötf
 ("[%s:%d], së bŸhÉdge\n", 
__FUNCTION__
, 
__LINE__
);

259 
	`gpio_ªg_£t_bô
(
GPIO_INT_BOTHEDGE
, 
pö
);

261 i‡(
a˘ive
 =
GPIO_INTC_ACTIVE_LOW
) {

262 
	`¥ötf
 ("[%s:%d], sëá˘ive-low\n", 
__FUNCTION__
, 
__LINE__
);

263 
	`gpio_ªg_˛ór_bô
(
GPIO_INT_POLARITY
, 
pö
);

264 } i‡(
a˘ive
 =
GPIO_INTC_ACTIVE_HIGH
) {

265 
	`¥ötf
 ("[%s:%d], sëá˘ive-high\n", 
__FUNCTION__
, 
__LINE__
);

266 
	`gpio_ªg_£t_bô
(
GPIO_INT_POLARITY
, 
pö
);

271 
	`gpio_ªg_£t_bô
(
GPIO_PORTA_DEBOUNCE
, 
pö
);

273 
	`gpio_ªg_£t_bô
(
GPIO_INTEN
, 
pö
);

275 
	`gpio_ªg_˛ór_bô
(
GPIO_INTMASK
, 
pö
);

278 
	`gpio_ªg_wrôe
(
GPIO_PORTA_EOI
, 0xffffffff);

280 
	`¥ötf
 ("\t StartÅest? [y/n] ");

281 
	`CK_WaôF‹Rïly
() != 1) {

282 
	`¥ötf
 ("\n\t StartÅest? [y/n] ");

284 
	`¥ötf
 ("\n");

287 
	`CK_INTC_Reque°Irq
(&
gpio_úq_öfo
, 
AUTO_MODE
);

288 
gpio_ötc_cou¡
 = 0;

289 
	}
}

291 
	$CK_Gpio_I¡c_Check
(
pö
, 
BOOL
 
eví
) {

292 
∑s£d
 = 0;

294 
	`CK_Gpio_Ouçut
(17, 1);

295 
	`timî_udñay
(1000);

296 
	`CK_Gpio_Ouçut
(17, 0);

297 
	`timî_udñay
(1000);

298 i‡(
gpio_ötc_cou¡
 > 3) {

299 i‡(
gpio_ötc_cou¡
 > 0) {

300 i‡(
eví
) {

301 i‡((
gpio_ötc_cou¡
 % 2) == 0) {

302 
∑s£d
 = 1;

305 
∑s£d
 = 1;

309 i‡(
∑s£d
 == 0) {

310 
	`¥ötf
 ("\t - - -FAILURE\n");

312 
	`¥ötf
 ("\t - - -PASS\n");

314 
	`¥ötf
 ("[%s:%d], -----GPIO i¡îru±Åe°Énd-----\n", 
__FUNCTION__
, 
__LINE__
);

320 
	`CK_INTC_FªeIrq
(&
gpio_úq_öfo
, 
AUTO_MODE
);

321 
	}
}

325 
	$CK_Gpio_Te°_I¡c
() {

328 
	`CK_Gpio_Ouçut
(17, 1);

329 
	`CK_Gpio_I¡c_Së
(16, 
åue
, 
GPIO_INTC_ACTIVE_LOW
);

330 
	`CK_Gpio_I¡c_Check
(16, 
Ál£
);

333 
	`CK_Gpio_I¡c_Së
(16, 
åue
, 
GPIO_INTC_ACTIVE_HIGH
);

334 
	`CK_Gpio_I¡c_Check
(16, 
Ál£
);

337 
	`CK_Gpio_I¡c_Së
(16, 
Ál£
, 
GPIO_INTC_ACTIVE_LOW
);

338 
	`CK_Gpio_I¡c_Check
(16, 
Ál£
);

341 
	`CK_Gpio_I¡c_Së
(16, 
Ál£
, 
GPIO_INTC_ACTIVE_HIGH
);

342 
	`CK_Gpio_I¡c_Check
(16, 
Ál£
);

345 
	`CK_Gpio_I¡c_Së
(16, 
Ál£
, 
GPIO_INTC_ACTIVE_BOTH
);

346 
	`CK_Gpio_I¡c_Check
(16, 
åue
);

347 
	}
}

349 
	$CK_Gpio_Te°
() {

350 
	`CK_Gpio_Inô
();

352 
	`CK_Gpio_Te°_Ouçut
();

353 
	`CK_Gpio_Te°_I≈ut
();

354 
	`CK_Gpio_Te°_I¡c
();

355 
	}
}

	@drivers/gs2971.c

1 
	~"gs2971.h
"

2 
	~"ck810.h
"

3 
	~"d©©y≥.h
"

8 
	$gs2971_ªad_ªgi°î
–
off£t
, * 
vÆue
)

10 
°©us
;

11 
CK_UINT8
 
d°_d©a
[2];

12 
	`•i_gs2971_ªad_byã
(
d°_d©a
, 2,
off£t
, 0);

13 *
vÆue
 = 
d°_d©a
[1];

14 *
vÆue
 = (*vÆue<< 8 ) | 
d°_d©a
[0];

15  
°©us
;

16 
	}
}

18 
	$gs2971_wrôe_ªgi°î
(
off£t
, 
vÆue
)

20 
CK_UINT8
 
d°_mem
[2];

21 
d°_mem
[1] = 
vÆue
 & 0xFF;

22 
d°_mem
[0] = (
vÆue
 >> 8) & 0xFF;

23 
	`•i_gs2971_wrôe_byã
(
d°_mem
, 2,
off£t
,0);

25 
	}
}

28 
	$gë_°d
()

31 
°d_lock_vÆue
;

32 
sync_lock_vÆue
;

33 
w‹ds_≥r_a˘löe_vÆue
;

34 
w‹ds_≥r_löe_vÆue
;

35 
löes_≥r_‰ame_vÆue
;

36 
a˘löes_≥r_‰ame_vÆue
;

37 
öãæa˚d_Êag
;

38 
°©us
;

39 
ds1
, 
ds2
;

41 
	`¥ötf
("-> I¿fun˘i⁄ %s\n", 
__func__
);

45 
°©us
 = 
	`gs2971_ªad_ªgi°î
(
GS2971_RASTER_STRUCT4
, &
°d_lock_vÆue
);

46 
a˘löes_≥r_‰ame_vÆue
 = 
°d_lock_vÆue
 & 
GS_RS4_ACTLINES_PER_FIELD
;

47 
öãæa˚d_Êag
 = 
°d_lock_vÆue
 & 
GS_RS4_INT_nPROG
;

49 
°©us
 = 
	`gs2971_ªad_ªgi°î
(
GS2971_FLYWHEEL_STATUS
, &
sync_lock_vÆue
);

50 i‡(
°©us
)

51  
°©us
;

52 
	`¥ötf
("-->Üock_vÆuê%x\n", 
sync_lock_vÆue
);

53 i‡(!
sync_lock_vÆue
) {

54 
	`¥ötf
("%s:Çÿlock, gs2971\n", 
__func__
);

58 
°©us
 = 
	`gs2971_ªad_ªgi°î
(
GS2971_DATA_FORMAT_DS1
, &
ds1
);

59 i‡(
°©us
)

60  
°©us
;

61 
°©us
 = 
	`gs2971_ªad_ªgi°î
(
GS2971_DATA_FORMAT_DS2
, &
ds2
);

62 i‡(
°©us
)

63  
°©us
;

64 
	`¥ötf
("--> ds1=%x\n--> ds2=%x\n", 
ds1
, 
ds2
);

66 
°©us
 =

67 
	`gs2971_ªad_ªgi°î
(
GS2971_RASTER_STRUCT1
,

68 &
w‹ds_≥r_a˘löe_vÆue
);

69 i‡(
°©us
)

70  
°©us
;

71 
w‹ds_≥r_a˘löe_vÆue
 &
GS_RS1_WORDS_PER_ACTLINE
;

73 
°©us
 =

74 
	`gs2971_ªad_ªgi°î
(
GS2971_RASTER_STRUCT2
,

75 &
w‹ds_≥r_löe_vÆue
);

76 i‡(
°©us
)

77  
°©us
;

78 
w‹ds_≥r_löe_vÆue
 &
GS_RS2_WORDS_PER_LINE
;

80 
°©us
 =

81 
	`gs2971_ªad_ªgi°î
(
GS2971_RASTER_STRUCT3
,

82 &
löes_≥r_‰ame_vÆue
);

83 i‡(
°©us
)

84  
°©us
;

85 
löes_≥r_‰ame_vÆue
 &
GS_RS3_LINES_PER_FRAME
;

87 
	`¥ötf
("--> WordsÖerÜine %u/%u LinesÖer frame %u/%u\n",

88 ()
w‹ds_≥r_a˘löe_vÆue
,

89 ()
w‹ds_≥r_löe_vÆue
,

90 ()
a˘löes_≥r_‰ame_vÆue
,

91 ()
löes_≥r_‰ame_vÆue
);

92 
	`¥ötf
("--> SyncLock: %s %s StdLock: 0x%04x\n",

93 (
sync_lock_vÆue
 & 
GS_FLY_V_LOCK_DS1
) ? "Vsync" : "NoVsync",

94 (
sync_lock_vÆue
 & 
GS_FLY_H_LOCK_DS1
) ? "Hsync" : "NoHsync",

95 ()(
°d_lock_vÆue
));

100 i‡(!
löes_≥r_‰ame_vÆue
) {

101 
	`¥ötf
("%s: 0 fømêsize\n", 
__func__
);

106 i‡(
öãæa˚d_Êag
 && 
löes_≥r_‰ame_vÆue
 == 525) {

107 
	`¥ötf
("--> V4L2_STD_525_60\n");

109 } i‡(
öãæa˚d_Êag
 && 
löes_≥r_‰ame_vÆue
 == 625) {

110 
	`¥ötf
("--> V4L2_STD_625_50\n");

112 } i‡(
öãæa˚d_Êag
 && 
löes_≥r_‰ame_vÆue
 == 525) {

113 
	`¥ötf
("--> V4L2_STD_525P_60\n");

115 } i‡(
öãæa˚d_Êag
 && 
löes_≥r_‰ame_vÆue
 == 625) {

116 
	`¥ötf
("--> V4L2_STD_625P_50\n");

118 } i‡(!
öãæa˚d_Êag
 && 749 <
löes_≥r_‰ame_vÆue


119 && 
löes_≥r_‰ame_vÆue
 <= 750) {

120 i‡(
w‹ds_≥r_löe_vÆue
 > 1650) {

121 
	`¥ötf
("--> V4L2_STD_720P_50\n");

124 
	`¥ötf
("--> V4L2_STD_720P_60\n");

128 } i‡(!
öãæa˚d_Êag
 && 1124 <
löes_≥r_‰ame_vÆue


129 && 
löes_≥r_‰ame_vÆue
 <= 1125) {

132 i‡(
w‹ds_≥r_löe_vÆue
 >= 2200 + 550) {

133 
	`¥ötf
("--> V4L2_STD_1080P_24\n");

135 } i‡(
w‹ds_≥r_löe_vÆue
 >= 2200 + 440) {

136 
	`¥ötf
("--> V4L2_STD_1080P_25\n");

139 
	`¥ötf
("--> V4L2_STD_1080P_60\n");

142 } i‡(
öãæa˚d_Êag
 && 1124 <
löes_≥r_‰ame_vÆue


143 && 
löes_≥r_‰ame_vÆue
 <= 1125) {

146 i‡(
w‹ds_≥r_löe_vÆue
 >= 2200 + 440) {

147 
	`¥ötf
("--> V4L2_STD_1080I_50\n");

150 
	`¥ötf
("--> V4L2_STD_1080I_60\n");

154 
	`¥ötf
("Std detection failed: interlaced_flag: %u wordsÖerÜine %u/%u LinesÖer frame %u/%u SyncLock: %s %s StdLock: 0x%04x\n",

155 ()
öãæa˚d_Êag
,

156 ()
w‹ds_≥r_a˘löe_vÆue
,

157 ()
w‹ds_≥r_löe_vÆue
,

158 ()
a˘löes_≥r_‰ame_vÆue
,

159 ()
löes_≥r_‰ame_vÆue
,

160 (
sync_lock_vÆue
 & 
GS_FLY_V_LOCK_DS1
) ? "Vsync" :

162 (
sync_lock_vÆue
 & 
GS_FLY_H_LOCK_DS1
) ? "Hsync" :

163 "NoHsync", ()(
°d_lock_vÆue
));

169 
°©us
 =

170 
	`gs2971_wrôe_ªgi°î
(
GS2971_ANC_CONTROL
, 
ANCCTL_ANC_DATA_DEL
);

171 i‡(
°©us
)

172  
°©us
;

173 
	`¥ötf
("-->Ñemoveánc data\n");

176 
	}
}

184 
	$gs2971_öôülize
()

186 
°©us
 = 0;

187 
ªåy
 = 0;

188 
vÆue
;

190 
cfg
 = 
GS_VCFG1_861_PIN_DISABLE_MASK
;

193 
cfg
 |
GS_VCFG1_TIMING_861_MASK
;

195 
	`¥ötf
("-> I¿fun˘i⁄ %s\n", 
__func__
);

198 
°©us
 = 
	`gs2971_wrôe_ªgi°î
(
GS2971_VCFG1
, 
cfg
);

199 i‡(
°©us
)

200  
°©us
;

202 
°©us
 = 
	`gs2971_ªad_ªgi°î
(
GS2971_VCFG1
, &
vÆue
);

203 i‡(
°©us
)

204  
°©us
;

205 i‡(
vÆue
 =
cfg
)

207 
	`¥ötf
("°©us=%x,Ñód vÆuêo‡0x%04x,Éx≥˘ed 0x%04x\n", 
°©us
,()
vÆue
, 
cfg
);

208 i‡(
ªåy
++ >= 20)

210 
	`udñay
(50 * 1000);

213 
°©us
 = 
	`gs2971_wrôe_ªgi°î
(
GS2971_VCFG2
, 0);

214 i‡(
°©us
)

215  
°©us
;

217 
°©us
 = 
	`gs2971_wrôe_ªgi°î
(
GS2971_IO_CONFIG
,(
GS_IOCFG_HSYNC
 << 0Ë| (
GS_IOCFG_VSYNC
<< 5Ë|(
GS_IOCFG_DE
 << 10));

218 i‡(
°©us
)

219  
°©us
;

221 
°©us
 = 
	`gs2971_wrôe_ªgi°î
(
GS2971_IO_CONFIG2
,(
GS_IOCFG_LOCKED
 << 0Ë| (
GS_IOCFG_Y_ANC
<< 5Ë|(
GS_IOCFG_DATA_ERROR
 << 10));

222 i‡(
°©us
)

223  
°©us
;

225 
°©us
 =

226 
	`gs2971_wrôe_ªgi°î
(
GS2971_TIM_861_CFG
, 
GS_TIMCFG_TRS_861
);

227 i‡(
°©us
)

228  
°©us
;

230 
	}
}

235 
	$gs2971_¥obe
()

237 
ªt
 = 0;

238 
	`¥ötf
("-> I¿fun˘i⁄ %s\n", 
__func__
);

239 
	`•i_öô
(0);

240 
ªt
 = 
	`gs2971_öôülize
();

241 
	`gë_°d
();

242 
	`¥ötf
("-> Ouàfun˘i⁄ %s(0x%x)\n", 
__func__
,
ªt
);

243  
ªt
;

245 
	}
}

	@drivers/gs2971.h

1 #i‚de‡
__GS2971_H__


2 
	#__GS2971_H__


	)

7 
	mGS2971_VID_STD_1920_1080_60FPS
 = 0x2B,

8 
	mGS2971_VID_STD_1920_1080_50FPS
 = 0x2D,

9 
	mGS2971_VID_STD_1920_1080_60FPS_DBLSAMPLED
 = 0x2A,

10 
	mGS2971_VID_STD_1920_1080_50FPS_DBLSAMPLED
 = 0x2C,

11 
	mGS2971_VID_STD_1280_720_60FPS
 = 0x20,

12 
	mGS2971_VID_STD_1280_720_50FPS
 = 0x24,

14 
	mGS2971_VID_STD_1920_1080_30FPS
 = 0x0B,

15 
	mGS2971_VID_STD_1920_1080_25FPS
 = 0x0D,

16 } 
	tgs2971_vid_°d_t
;

18 
	egs2971_mode
 {

19 
	mgs2971_mode_720p
 = 0,

20 
	mgs2971_mode_1080p
 = 1,

21 
	mgs2971_mode_MAX
 = 
gs2971_mode_1080p
,

22 
	mgs2971_mode_deÁu…
 = 
gs2971_mode_720p
,

23 
	mgs2971_mode_nŸ_suµ‹ãd
 = 
gs2971_mode_MAX
 + 1

28 
	mwidth
;

29 
	mheight
;

30 } 
	tvideo_ªs_t
;

32 
video_ªs_t
 
	ggs2971_ªs
[] = {

34 .
width
 = 1280,

35 .
	gheight
 = 720,

38 .
	gwidth
 = 1920,

39 .
	gheight
 = 1080,

43 
	egs2971_‰ame_øã
 {

44 
	mgs2971_30_Âs
 = 0,

45 
	mgs2971_60_Âs
 = 1,

46 
	mgs2971_deÁu…_Âs
 = 
gs2971_60_Âs


49 
	ggs2971_‰amî©es
[] = {

50 [
gs2971_30_Âs
] = 30,

51 [
gs2971_60_Âs
] = 60,

54 
	#DEFAULT_FPS
 60

	)

56 
	#GS2971_NUM_CHANNELS
 1

	)

58 
	#GS2971_MAX_NO_CONTROLS
 0

	)

59 
	#GS2971_MAX_NO_INPUTS
 1

	)

60 
	#GS2971_MAX_NO_STANDARDS
 11

	)

64 
	#GS2971_VCFG1
 0x00

	)

66 
	#GS_VCFG1_TRS_REMAP_DISABLE_MASK
 0x4000

	)

67 
	#GS_VCFG1_EDH_FLAG_DISABLE_MASK
 0x1000

	)

68 
	#GS_VCFG1_EDH_CRC_DISABLE_MASK
 0x0800

	)

69 
	#GS_VCFG1_H_CONFIG_MASK
 0x0400

	)

71 
	#GS_VCFG1_ANC_DATA_DISABLE_MASK
 0x0200

	)

72 
	#GS_VCFG1_AUDIO_DISABLE_MASK
 0x0100

	)

73 
	#GS_VCFG1_861_PIN_DISABLE_MASK
 0x0080

	)

74 
	#GS_VCFG1_TIMING_861_MASK
 0x0040

	)

75 
	#GS_VCFG1_ILLEGAL_REMAP_DISABLE_MASK
 0x0010

	)

76 
	#GS_VCFG1_ANC_CRC_DISABLE_MASK
 0x0008

	)

77 
	#GS_VCFG1_CRC_INS_DISABLE_MASK
 0x0004

	)

78 
	#GS_VCFG1_LINENUM_INS_DISABLE_MASK
 0x0002

	)

79 
	#GS_VCFG1_TRS_INS_DISABLE_MASK
 0x0001

	)

81 
	#GS2971_VCFG2
 0x01

	)

82 
	#GS_VCFG2_TRS_WORD_REMAP_DS2_DISABLE
 (1 << 12)

	)

83 
	#GS_VCFG2_REGEN_352M_MASK
 (1 << 10)

	)

84 
	#GS_VCFG2_DS_SWAP_3G
 (1 << 9)

	)

85 
	#GS_VCFG2_LEVEL_B2A_CONV_DISABLE_MASK
 (1 << 8)

	)

86 
	#GS_VCFG2_ANC_EXT_SEL_DS2_nDS1
 (1 << 7)

	)

87 
	#GS_VCFG2_AUDIO_SEL_DS2_nDS1
 (1 << 6)

	)

88 
	#GS_VCFG2_ILLEGAL_WORD_REMAP_DS2_MASK
 (1 << 4)

	)

89 
	#GS_VCFG2_ANC_CHECKSUM_INSERTION_DS2_MASK
 (1 << 3)

	)

90 
	#GS_VCFG2_CRC_INS_DS2_MASK
 (1 << 2)

	)

91 
	#GS_VCFG2_LNUM_INS_DS2_MASK
 (1 << 1)

	)

92 
	#GS_VCFG2_TRS_INS_DS2_MASK
 (1 << 0)

	)

94 
	#GS2971_ERROR_STAT_1
 0x02

	)

95 
	#GS2971_ERROR_STAT_2
 0x03

	)

96 
	#GS2971_EDH_FLAG_IN
 0x04

	)

97 
	#GS2971_EDH_FLAG_OUT
 0x05

	)

99 
	#GS2971_DATA_FORMAT_DS1
 0x06

	)

100 
	#GS2971_DATA_FORMAT_DS2
 0x07

	)

101 
	#GS_DF_VD_STD
 0x3f00

	)

103 
	#GS2971_IO_CONFIG
 0x08

	)

104 
	#GS2971_IO_CONFIG2
 0x09

	)

105 
	#GS_IOCFG_HSYNC
 0x00

106 
	#GS_IOCFG_VSYNC
 0x01

107 
	#GS_IOCFG_DE
 0x02

108 
	#GS_IOCFG_LOCKED
 0x03

109 
	#GS_IOCFG_Y_ANC
 0x04

110 
	#GS_IOCFG_C_ANC
 0x05

111 
	#GS_IOCFG_DATA_ERROR
 0x06

112 
	#GS_IOCFG_VIDEO_ERROR
 0x07

113 
	#GS_IOCFG_AUDIO_ERROR
 0x08

114 
	#GS_IOCFG_EDH_DETECT
 0x09

115 
	#GS_IOCFG_CARRIER_DETECT
 0x0A

116 
	#GS_IOCFG_RATE_DET0
 0x0B

117 
	#GS_IOCFG_RATE_DET1
 0x0C

118 

	)

119 
	#GS2971_ANC_CONTROL
 0x0a

	)

120 
	#ANCCTL_ANC_DATA_SWITCH
 (1 << 3)

	)

121 
	#ANCCTL_ANC_DATA_DEL
 (1 << 2)

	)

123 
	#GS2971_ANC_LINE_A
 0x0b

	)

124 
	#GS2971_ANC_LINE_B
 0x0c

	)

126 
	#GS2971_ANC_TYPE_1_AP1
 0x0f

	)

127 
	#GS2971_ANC_TYPE_2_AP1
 0x10

	)

128 
	#GS2971_ANC_TYPE_3_AP1
 0x11

	)

129 
	#GS2971_ANC_TYPE_4_AP1
 0x12

	)

130 
	#GS2971_ANC_TYPE_5_AP1
 0x13

	)

131 
	#GS2971_ANC_TYPE_1_AP2
 0x14

	)

132 
	#GS2971_ANC_TYPE_2_AP2
 0x15

	)

133 
	#GS2971_ANC_TYPE_3_AP2
 0x16

	)

134 
	#GS2971_ANC_TYPE_4_AP2
 0x17

	)

135 
	#GS2971_ANC_TYPE_5_AP2
 0x18

	)

137 
	#GS2971_VIDEO_FORMAT_352_A_1
 0x19

	)

138 
	#GS2971_VIDEO_FORMAT_352_B_1
 0x1a

	)

139 
	#GS2971_VIDEO_FORMAT_352_A_2
 0x1b

	)

140 
	#GS2971_VIDEO_FORMAT_352_B_2
 0x1c

	)

141 
	#GS2971_VIDEO_FORMAT_352_INS_A
 0x1d

	)

142 
	#GS2971_VIDEO_FORMAT_352_INS_B
 0x1e

	)

144 
	#GS2971_RASTER_STRUCT1
 0x1f

145 
	#GS_RS1_WORDS_PER_ACTLINE
 0x3fff

	)

147 
	#GS2971_RASTER_STRUCT2
 0x20

148 
	#GS_RS2_WORDS_PER_LINE
 0x3fff

	)

150 
	#GS2971_RASTER_STRUCT3
 0x21

151 
	#GS_RS3_LINES_PER_FRAME
 0x7ff

	)

153 
	#GS2971_RASTER_STRUCT4
 0x22

	)

154 
	#GS_RS4_RATE_SEL_READBACK
 (3 << 14)

	)

155 
	#GS_RS4_RATE_SEL_HD
 (0 << 14)

	)

156 
	#GS_RS4_RATE_SEL_SD1
 (1 << 14)

	)

157 
	#GS_RS4_RATE_SEL_3G
 (2 << 14)

	)

158 
	#GS_RS4_RATE_SEL_SD2
 (3 << 14)

	)

160 
	#GS_RS4_M
 (1 << 13)

	)

161 
	#GS_RS4_STD_LOCK
 (1 << 12)

	)

162 
	#GS_RS4_INT_nPROG
 (1 << 11)

	)

163 
	#GS_RS4_ACTLINES_PER_FIELD
 0x7ff

	)

165 
	#GS2971_FLYWHEEL_STATUS
 0x23

	)

166 
	#GS_FLY_V_LOCK_DS2
 (1 << 4)

	)

167 
	#GS_FLY_H_LOCK_DS2
 (1 << 3)

	)

168 
	#GS_FLY_V_LOCK_DS1
 (1 << 1)

	)

169 
	#GS_FLY_H_LOCK_DS1
 (1 << 0)

	)

171 
	#GS2971_RATE_SEL
 0x24

	)

172 
	#GS_RS_AUTO_nMAN
 (1 << 2)

	)

173 
	#GS_RS_RATE_SEL_TOP
 (3 << 0)

	)

175 
	#GS2971_TIM_861_FORMAT
 0x25

	)

176 
	#GS2971_TIM_861_CFG
 0x26

	)

177 
	#GS_TIMCFG_VSYNC_INVERT
 (1 << 2)

	)

178 
	#GS_TIMCFG_HSYNC_INVERT
 (1 << 1)

	)

179 
	#GS_TIMCFG_TRS_861
 (1 << 0Ë

	)

181 
	#GS2971_ERROR_MASK_1
 0x37

	)

182 
	#GS2971_ERROR_MASK_2
 0x38

	)

183 
	#GS2971_ACGEN_CTRL
 0x39

	)

184 
	#GS_ACGEN_SCLK_INV
 (1 << 4)

	)

185 
	#GS_ACGEN_AMCLK_INV
 (1 << 3)

	)

186 
	#GS_ACGEN_AMCLK_SEL
 (3 << 0)

	)

187 
	#GS_ACGEN_AMCLK_SEL_128FS
 (0 << 0)

	)

188 
	#GS_ACGEN_AMCLK_SEL_256FS
 (1 << 0)

	)

189 
	#GS_ACGEN_AMCLK_SEL_512FS
 (2 << 0)

	)

191 
	#GS2971_CLK_GEN
 0x6c

	)

192 
	#GS_DEL_LINE_CLK_SEL
 (1 << 5)

	)

193 
	#GS2971_IO_DRIVE_STRENGTH
 0x6d

	)

194 
	#GS_IODS_DOUT_MSB
 (3 << 4)

	)

195 
	#GS_IODS_STAT
 (3 << 2)

	)

196 
	#GS_IODS_DOUT_LSB
 (3 << 0)

	)

197 
	#GS_IODS_DOUT_LSB_4MA
 (0 << 0)

	)

198 
	#GS_IODS_DOUT_LSB_6MA
 (1 << 0)

	)

199 
	#GS_IODS_DOUT_LSB_8MA
 (2 << 0)

	)

200 
	#GS_IODS_DOUT_LSB_10MA
 (3 << 0)

	)

202 
	#GS2971_EQ_BYPASS
 0x73

	)

206 
	#GS2971_HD_CFG_AUD
 0x200

	)

207 
	#GS2971_HD_ACS_DET
 0x201

	)

208 
	#GS2971_HD_AUD_DET1
 0x202

	)

209 
	#GS2971_HD_AUD_DET2
 0x203

	)

210 
	#GS2971_HD_REGEN
 0x204

	)

211 
	#GS2971_HD_CH_MUTE
 0x205

	)

212 
	#GS2971_HD_CH_VALID
 0x206

	)

216 
	#GS2971_CFG_AUD
 0x400

	)

217 
	#GS2971_DBN_ERR
 0x401

	)

218 
	#GS2971_REGEN
 0x402

	)

219 
	#GS2971_AUD_DET
 0x403

	)

220 
	#GS2971_CSUM_ERR_DET
 0x404

	)

221 
	#GS2971_CH_MUTE
 0x405

	)

222 
	#GS2971_CH_VALID
 0x406

	)

223 
	#GS2971_SD_AUDIO_ERROR_MASK
 0x407

	)

225 
	#GS2971_CFG_OUTPUT
 0x408

	)

226 
	#GS2971_OUTPUT_SEL_1
 0x409

	)

227 
	#GS2971_OUTPUT_SEL_2
 0x40a

	)

229 
	#GS2971_AFNA12
 0x420

	)

230 
	#GS2971_AFNA34
 0x421

	)

231 
	#GS2971_RATEA
 0x422

	)

232 
	#GS2971_ACT_A
 0x423

	)

233 
	#GS2971_PRIM_AUD_DELAY_1
 0x424

	)

234 
	#GS2971_PRIM_AUD_DELAY_2
 0x425

	)

235 
	#GS2971_PRIM_AUD_DELAY_3
 0x426

	)

236 
	#GS2971_PRIM_AUD_DELAY_4
 0x427

	)

237 
	#GS2971_PRIM_AUD_DELAY_5
 0x428

	)

238 
	#GS2971_PRIM_AUD_DELAY_6
 0x429

	)

239 
	#GS2971_PRIM_AUD_DELAY_7
 0x42a

	)

240 
	#GS2971_PRIM_AUD_DELAY_8
 0x42b

	)

241 
	#GS2971_PRIM_AUD_DELAY_9
 0x42c

	)

242 
	#GS2971_PRIM_AUD_DELAY_10
 0x42d

	)

243 
	#GS2971_PRIM_AUD_DELAY_11
 0x42e

	)

244 
	#GS2971_PRIM_AUD_DELAY_12
 0x42f

	)

246 
	#GS2971_AFNB12
 0x430

	)

247 
	#GS2971_AFNB34
 0x431

	)

248 
	#GS2971_RATEB
 0x432

	)

249 
	#GS2971_ACT_B
 0x433

	)

250 
	#GS2971_SEC_AUD_DELAY_1
 0x434

	)

251 
	#GS2971_SEC_AUD_DELAY_2
 0x435

	)

252 
	#GS2971_SEC_AUD_DELAY_3
 0x436

	)

253 
	#GS2971_SEC_AUD_DELAY_4
 0x437

	)

254 
	#GS2971_SEC_AUD_DELAY_5
 0x438

	)

255 
	#GS2971_SEC_AUD_DELAY_6
 0x439

	)

256 
	#GS2971_SEC_AUD_DELAY_7
 0x43a

	)

257 
	#GS2971_SEC_AUD_DELAY_8
 0x43b

	)

258 
	#GS2971_SEC_AUD_DELAY_9
 0x43c

	)

259 
	#GS2971_SEC_AUD_DELAY_10
 0x43d

	)

260 
	#GS2971_SEC_AUD_DELAY_11
 0x43e

	)

261 
	#GS2971_SEC_AUD_DELAY_12
 0x43f

	)

263 
	#GS2971_ACSR1_2A_BYTE
(
byã
Ë(0x440 + ((byãË>> 1)Ë

	)

264 
	#GS2971_ACSR3_4A_BYTE
(
byã
Ë(0x450 + ((byãË>> 1)Ë

	)

265 
	#GS2971_ACSR1_2B_BYTE
(
byã
Ë(0x460 + ((byãË>> 1)Ë

	)

266 
	#GS2971_ACSR3_4B_BYTE
(
byã
Ë(0x470 + ((byãË>> 1)Ë

	)

267 
	#GS2971_ACSR_BYTE
(
byã
Ë(0x480 + (byã)Ë

	)

270 
	#GS2971_ANC_BANK_REG
 0x800

	)

272 
	#GS2971_ANC_BANK_SIZE
 0x400

	)

274 
	#GS2971_SPI_TRANSFER_MAX
 1024

	)

	@drivers/iic-slave.c

14 
	~"d©©y≥.h
"

15 
	~"iic.h
"

16 
	~"ckiic.h
"

18 
	#I2C_TEST_SLAVE
 0

	)

19 
	#I2C_TEST_MASTER
 1

	)

21 vﬁ©ûê
	giic_¶ave_öå_Êag
 = 1;

23 
CKSåu˘_I2CInfo
 
CK_I2C_TabÀ
[];

25 
CK_UINT8
 
	grd_d©a
[8] = {15, 223, 236, 94, 116, 83, 139, 34};

26 
CK_UINT8
 
	gwr_d©a
[8] = {192, 12, 237, 227, 116, 186, 65, 104};

28 
	$i2c_¶ave_h™dÀ
(
CK_UINT32
 
úq
) {

29 
tmp
;

30 
CK_UINT8
 
i
 = 0;

31 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

32 
pi2c
 = 
CK_I2C_TabÀ
[
úq
 - 
CK_INTC_I2C0
].
addr
;

34 
tmp
 = 
pi2c
->
ic_öå_°©
;

36 i‡((
tmp
 & 
IC_RD_REQ
) != 0) {

37 
	`¥ötf
("send out dataÖerÑeadÑequest from master\n");

38 
i
 = 0; i < 8; i++) {

39 
pi2c
->
ic_cmd_d©a
 = 
rd_d©a
[
i
];

41 
tmp
 = 
pi2c
->
ic_˛r_rd_ªq
;

42 } i‡((
tmp
 & 
IC_RX_FULL
) != 0) {

43 
	`¥ötf
("receive data for write from master\n");

44 
i
 = 0; i < 8; i++) {

45 
tmp
 = (
pi2c
->
ic_cmd_d©a
 & 0xff);

46 i‡(
tmp
 !
wr_d©a
[
i
]) {

47 
	`¥ötf
("\tslaveÑeceived %d: %d isÇotÉqualÅo wr_data %d\n",

48 
i
, 
tmp
, 
wr_d©a
[i]);

49 
	`¥ötf
(" - - - FAIL.\n");

50 
	`exô
(1);

53 
tmp
 = 
pi2c
->
ic_˛r_öå
;

54 
iic_¶ave_öå_Êag
=0;

56 
	}
}

58 
	$dw_i2c_¶ave_öô
(
CK_UINT32
 
id
) {

59 
PCKSåu˘_I2CInfo
 
öfo
 = 
NULL
;

60 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

61 
öfo
 = &(
CK_I2C_TabÀ
[
id
]);

62 
pi2c
 = 
öfo
->
addr
;

64 
pi2c
->
ic_íabÀ
 &~
IC_ENABLE_0B
;

65 (
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
) != 0);

67 
pi2c
->
ic_rx_é
 = 7;

68 
pi2c
->
ic_tx_é
 = 0x0;

70 
pi2c
->
ic_c⁄
 = 
IC_CON_SPD_HS
;

71 
pi2c
->
ic_öå_mask
 = 0;

72 
pi2c
->
ic_ßr
 = 0xb;

74 
öfo
->
úqh™dÀr
.
dev«me
 = "I2C-SLAVE";

75 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

76 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = info->
úq
;

77 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
i2c_¶ave_h™dÀ
;

78 
öfo
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

79 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

81 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

83 
pi2c
->
ic_íabÀ
 = 
IC_ENABLE_0B
;

84 
	}
}

86 
	$CK_I2C_Sœve_Te°
() {

87 
CK_UINT32
 
ªt
 = 0;

88 
CK_UINT8
 
i
 = 0;

89 
CK_UINT32
 
gë
 = 0;

90 
CK_UINT8
 
ªcv_d©a
[8] = {0};

92 
PCKPSåu˘_I2C
 
pi2c_s
 = 
NULL
;

93 
pi2c_s
 = 
CK_I2C_TabÀ
[
I2C_TEST_SLAVE
].
addr
;

95 
	`dw_i2c_¶ave_öô
(
I2C_TEST_SLAVE
);

96 
	`dw_i2c_£t_bus_•ìd
(
I2C_TEST_SLAVE
, 
I2C_MAX_SPEED
);

99 
	`dw_i2c_öô
(
I2C_TEST_MASTER
, 
I2C_MAX_SPEED
, 1);

101 
	`¥ötf
("ForÅhisÅestÅoÑun correctly, connect\n"

104 
	`¥ötf
("connection done, continue? - - - [y/n] ");

106 
gë
 = 
	`CK_WaôF‹Rïly
();

107 i‡(
gë
 == 1) {

109 } i‡(
gë
 == 0) {

112 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n'");

116 
	`¥ötf
("\ntest start!\n");

117 
pi2c_s
->
ic_öå_mask
 |(
IC_RD_REQ
 | 
IC_RX_FULL
);

119 
	`¥ötf
("i2¯¶avê%d waôög f‹ d©®wrôê‰om ma°î . . .\n", 
I2C_TEST_SLAVE
);

121 
ªt
 = 
	`dw_i2c_wrôe
(
I2C_TEST_MASTER
, 0xb, 0, 0, &
wr_d©a
, 8);

122 i‡(
ªt
 != 0) {

123 
	`¥ötf
("failed writingÅo slave\n");

124 
	`¥ötf
(" - - - FAIL.\n");

128 
iic_¶ave_öå_Êag
 != 0);

129 
	`¥ötf
("i2¯¶avê%d gŸáŒ d©®‰om ma°î!\n", 
I2C_TEST_SLAVE
);

131 
	`¥ötf
("i2¯¶avê%d waôög f‹ d©®ªad from ma°î . . .\n", 
I2C_TEST_SLAVE
);

133 
ªt
 = 
	`dw_i2c_ªad
(
I2C_TEST_MASTER
, 0xb, 0, 0, &
ªcv_d©a
, 8);

134 i‡(
ªt
 != 0) {

135 
	`¥ötf
("failedÑeading from slave\n");

136 
	`¥ötf
(" - - - FAIL.\n");

140 
i
 = 0; i < 8; i ++) {

141 i‡(
ªcv_d©a
[
i
] !
rd_d©a
[i]) {

142 
	`¥ötf
("\tmasterÑeceived %d: %d isÇotÉqualÅoÑd_data %d\n",

143 
i
, 
ªcv_d©a
[i], 
rd_d©a
[i]);

144 
	`¥ötf
(" - - - FAIL.\n");

149 
	`¥ötf
("i2¯¶avê%d síàÆ»d©®tÿma°î!\n", 
I2C_TEST_SLAVE
);

150 
	`¥ötf
(" - - - PASS.\n");

151 
	}
}

	@drivers/iic.c

14 
	~"ck810.h
"

15 
	~"iic.h
"

16 
	~"ckiic.h
"

17 
	~"ötc.h
"

18 
	~"d©©y≥.h
"

19 
	~"ahbdma.h
"

21 
CKSåu˘_I2CInfo
 
	gCK_I2C_TabÀ
[] = {

22 {0, (
PCKPSåu˘_I2C
)
CK_I2C0_BASSADDR
, 
CK_INTC_I2C0
, 
FALSE
},

23 {1, (
PCKPSåu˘_I2C
)
CK_I2C1_BASSADDR
, 
CK_INTC_I2C1
, 
FALSE
},

24 {2, (
PCKPSåu˘_I2C
)
CK_I2C2_BASSADDR
, 
CK_INTC_I2C2
, 
FALSE
},

25 {3, (
PCKPSåu˘_I2C
)
CK_I2C3_BASSADDR
, 
CK_INTC_I2C3
, 
FALSE
},

29 
	#FIFO_DEPTH
 64

	)

30 
CK_UINT8
 *
	gtx_buf
 = 
NULL
;

31 
CK_UINT8
 *
	grx_buf
 = 
NULL
;

32 
CK_UINT32
 
	gtx_rx_Àn
 = 0;

33 
CK_UINT32
 
	gtx_Àn
 = 0;

34 
CK_UINT32
 
	grx_Àn
 = 0;

36 
CK_UINT32
 
	$i2c_dw_ªad_˛ór_öåbôs
(
CK_UINT32
 
id
) {

37 
CK_UINT32
 
°©
 = 0;

38 
CK_UINT32
 
tmp32
 = 0;

39 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

41 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

43 
°©
 = 
pi2c
->
ic_øw_öå_°©
;

45 i‡((
°©
 & 
IC_RX_UNDER
) != 0) {

46 
tmp32
 = 
pi2c
->
ic_˛r_rx_undî
;

48 i‡((
°©
 & 
IC_RX_OVER
) != 0) {

49 
tmp32
 = 
pi2c
->
ic_˛r_rx_ovî
;

51 i‡((
°©
 & 
IC_TX_OVER
) != 0) {

52 
tmp32
 = 
pi2c
->
ic_˛r_tx_ovî
;

54 i‡((
°©
 & 
IC_RD_REQ
) != 0) {

55 
tmp32
 = 
pi2c
->
ic_˛r_rd_ªq
;

57 i‡((
°©
 & 
IC_TX_ABRT
) != 0) {

58 
tmp32
 = 
pi2c
->
ic_tx_abπ_sour˚
;

59 
tmp32
 = 
pi2c
->
ic_˛r_tx_abπ
;

61 i‡((
°©
 & 
IC_RX_DONE
) != 0) {

62 
tmp32
 = 
pi2c
->
ic_˛r_rx_d⁄e
;

64 i‡((
°©
 & 
IC_ACTIVITY
) != 0) {

65 
tmp32
 = 
pi2c
->
ic_˛r_a˘ivôy
;

67 i‡((
°©
 & 
IC_START_DET
) != 0) {

68 
tmp32
 = 
pi2c
->
ic_˛r_°¨t_dë
;

70 i‡((
°©
 & 
IC_GEN_CALL
) != 0) {

71 
tmp32
 = 
pi2c
->
ic_˛r_gí_ˇŒ
;

74  
°©
;

75 
	}
}

81 
	$i2c_h™dÀ_comm⁄
(
CK_UINT32
 
id
) {

82 
CK_UINT32
 
°©
 = 0;

83 
CK_UINT32
 
íabÀd
 = 0;

84 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

86 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

88 
íabÀd
 = 
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
;

89 
°©
 = 
pi2c
->
ic_øw_öå_°©
;

91 i‡((!
íabÀd
Ë|| (!(
°©
 & (~
IC_ACTIVITY
)))) {

92 
	`¥ötf
("I2C %d i†nŸÉ«bÀd, o∏nÿöîru± issued\n", 
id
);

95 
°©
 = 
	`i2c_dw_ªad_˛ór_öåbôs
(
id
);

98 
°©
 = 
pi2c
->
ic_öå_°©
;

100 i‡((
°©
 & 
IC_RX_FULL
Ë|| (°© & 
IC_STOP_DET
)) {

104 (
rx_Àn
 < 
tx_rx_Àn
) &&

105 ((
pi2c
->
ic_°©us
 & 
IC_STATUS_RFNE
) != 0)) {

106 
rx_buf
[
rx_Àn
] = 
pi2c
->
ic_cmd_d©a
;

107 
rx_Àn
++;

109 i‡(
rx_Àn
 =
tx_rx_Àn
) {

111 
pi2c
->
ic_öå_mask
 &~(
IC_RX_FULL
 | 
IC_STOP_DET
);

116 i‡(
°©
 & 
IC_TX_EMPTY
) {

117 
CK_UINT32
 
i
 = 0;

118 
CK_UINT32
 
tmp_Àn
 = 
FIFO_DEPTH
 - 
pi2c
->
ic_rxÊr
;

119 (
tx_Àn
 < 
tx_rx_Àn
) &&

120 ((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0)) {

121 i‡(
i
 >
tmp_Àn
) {

124 i‡(
tx_Àn
 < (
tx_rx_Àn
 - 1)) {

125 i‡(
rx_Àn
 !
tx_rx_Àn
) {

126 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
;

128 
pi2c
->
ic_cmd_d©a
 = 
tx_buf
[
tx_Àn
];

132 i‡(
rx_Àn
 !
tx_rx_Àn
) {

133 
pi2c
->
ic_cmd_d©a
 = 
IC_STOP
 | 
IC_CMD
;

135 
pi2c
->
ic_cmd_d©a
 = 
IC_STOP
 | 
tx_buf
[
tx_Àn
];

138 
tx_Àn
++;

139 
i
++;

141 i‡(
tx_Àn
 =
tx_rx_Àn
) {

143 
pi2c
->
ic_öå_mask
 &~
IC_TX_EMPTY
;

146 
	}
}

148 
	$i2c0_h™dÀ
(
CK_UINT32
 
úq
) {

149 
	`i2c_h™dÀ_comm⁄
(0);

150 
	}
}

152 
	$i2c1_h™dÀ
(
CK_UINT32
 
úq
) {

153 
	`i2c_h™dÀ_comm⁄
(1);

154 
	}
}

156 
	$i2c2_h™dÀ
(
CK_UINT32
 
úq
) {

157 
	`i2c_h™dÀ_comm⁄
(2);

158 
	}
}

160 
	$i2c3_h™dÀ
(
CK_UINT32
 
úq
) {

161 
	`i2c_h™dÀ_comm⁄
(3);

162 
	}
}

171 
	$£t_•ìd
(
CK_UINT32
 
id
, CK_UINT32 
i2c_•d
) {

172 
CK_UINT32
 
˙é
 = 0;

173 
CK_UINT32
 
h˙t
 = 0;

174 
CK_UINT32
 
l˙t
 = 0;

175 
CK_UINT32
 
íbl
 = 0;

176 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

178 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

181 
íbl
 = 
pi2c
->
ic_íabÀ
;

182 
íbl
 &~
IC_ENABLE_0B
;

183 
pi2c
->
ic_íabÀ
 = 
íbl
;

187 (
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
) != 0);

189 
˙é
 = (
pi2c
->
ic_c⁄
Ë& (~
IC_CON_SPD_MSK
);

191 
i2c_•d
) {

192 
IC_SPEED_MODE_MAX
:

193 
˙é
 |
IC_CON_SPD_HS
;

194 
h˙t
 = (
IC_CLK
 * 
MIN_HS_SCL_HIGHTIME
Ë/ 
NANO_TO_MICRO
;

195 
pi2c
->
ic_hs_s˛_h˙t
 = 
h˙t
;

196 
l˙t
 = (
IC_CLK
 * 
MIN_HS_SCL_LOWTIME
Ë/ 
NANO_TO_MICRO
;

197 
pi2c
->
ic_hs_s˛_l˙t
 = 
l˙t
;

199 
IC_SPEED_MODE_STANDARD
:

200 
˙é
 |
IC_CON_SPD_SS
;

201 
h˙t
 = (
IC_CLK
 * 
MIN_SS_SCL_HIGHTIME
Ë/ 
NANO_TO_MICRO
;

202 
pi2c
->
ic_ss_s˛_h˙t
 = 
h˙t
;

203 
l˙t
 = (
IC_CLK
 * 
MIN_SS_SCL_LOWTIME
Ë/ 
NANO_TO_MICRO
;

204 
pi2c
->
ic_ss_s˛_l˙t
 = 
l˙t
;

206 
IC_SPEED_MODE_FAST_PLUS
:

207 
˙é
 |
IC_CON_SPD_FS
;

208 
h˙t
 = (
IC_CLK
 * 
MIN_FS_PLUS_SCL_HIGHTIME
Ë/ 
NANO_TO_MICRO
;

209 
pi2c
->
ic_fs_s˛_h˙t
 = 
h˙t
;

210 
l˙t
 = (
IC_CLK
 * 
MIN_FS_PLUS_SCL_LOWTIME
Ë/ 
NANO_TO_MICRO
;

211 
pi2c
->
ic_fs_s˛_l˙t
 = 
l˙t
;

213 
IC_SPEED_MODE_FAST
:

215 
˙é
 |
IC_CON_SPD_FS
;

216 
h˙t
 = (
IC_CLK
 * 
MIN_FS_SCL_HIGHTIME
Ë/ 
NANO_TO_MICRO
;

217 
pi2c
->
ic_fs_s˛_h˙t
 = 
h˙t
;

218 
l˙t
 = (
IC_CLK
 * 
MIN_FS_SCL_LOWTIME
Ë/ 
NANO_TO_MICRO
;

219 
pi2c
->
ic_fs_s˛_l˙t
 = 
l˙t
;

223 
pi2c
->
ic_c⁄
 = 
˙é
;

226 
íbl
 |
IC_ENABLE_0B
;

227 
pi2c
->
ic_íabÀ
 = 
íbl
;

228 
	}
}

237 
CK_UINT32
 
	$dw_i2c_£t_bus_•ìd
(
CK_UINT32
 
id
, CK_UINT32 
•ìd
) {

238 
CK_UINT32
 
i2c_•d
 = 0;

240 i‡(
•ìd
 >
I2C_MAX_SPEED
) {

241 
i2c_•d
 = 
IC_SPEED_MODE_MAX
;

242 } i‡(
•ìd
 >
I2C_FAST_PLUS_SPEED
) {

243 
i2c_•d
 = 
IC_SPEED_MODE_FAST_PLUS
;

244 } i‡(
•ìd
 >
I2C_FAST_SPEED
) {

245 
i2c_•d
 = 
IC_SPEED_MODE_FAST
;

247 
i2c_•d
 = 
IC_SPEED_MODE_STANDARD
;

249 
	`£t_•ìd
(
id
, 
i2c_•d
);

252 
	}
}

262 
	$dw_i2c_öô
(
CK_UINT32
 
id
, CK_UINT32 
•ìd
, 
CK_UINT8
 
öt_í
) {

263 
PCKSåu˘_I2CInfo
 
öfo
 = 
NULL
;

264 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

266 
öfo
 = &(
CK_I2C_TabÀ
[
id
]);

267 
pi2c
 = 
öfo
->
addr
;

270 
pi2c
->
ic_íabÀ
 &~
IC_ENABLE_0B
;

274 (
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
) != 0);

276 
pi2c
->
ic_c⁄
 = 
IC_CON_SD
 | 
IC_CON_RE
 | 
IC_CON_SPD_FS
 | 
IC_CON_MM
;

277 
pi2c
->
ic_rx_é
 = 
IC_RX_TL
;

278 
pi2c
->
ic_tx_é
 = 
IC_TX_TL
;

279 
pi2c
->
ic_öå_mask
 = 0;

280 
	`dw_i2c_£t_bus_•ìd
(
id
, 
•ìd
);

281 i‡(
öt_í
 == 1) {

282 
öfo
->
úqh™dÀr
.
dev«me
 = "I2C";

283 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

284 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = info->
úq
;

285 i‡(
id
 == 0) {

286 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
i2c0_h™dÀ
;

287 } i‡(
id
 == 1) {

288 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
i2c1_h™dÀ
;

289 } i‡(
id
 == 2) {

290 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
i2c2_h™dÀ
;

292 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
i2c3_h™dÀ
;

294 
öfo
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

295 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

297 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

300 
pi2c
->
ic_íabÀ
 = 
IC_ENABLE_0B
;

301 
	}
}

310 
	$i2c_£èddªss
(
CK_UINT32
 
id
, 
i2c_addr
) {

311 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

313 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

316 
pi2c
->
ic_íabÀ
 &~
IC_ENABLE_0B
;

320 (
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
) != 0);

322 
pi2c
->
ic_èr
 = 
i2c_addr
;

325 
pi2c
->
ic_íabÀ
 |
IC_ENABLE_0B
;

326 
	}
}

334 
	$i2c_Êush_rxfifo
(
CK_UINT32
 
id
) {

335 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

336 
CK_UINT32
 
tmp32
 = 0;

338 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

340 (
pi2c
->
ic_°©us
 & 
IC_STATUS_RFNE
) != 0) {

341 
tmp32
 = 
pi2c
->
ic_cmd_d©a
;

343 
	}
}

350 
CK_UINT32
 
	$i2c_waô_f‹_bb
(
CK_UINT32
 
id
) {

351 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

352 
CK_UINT32
 
timeout
 = 0 ;

354 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

356 ((
pi2c
->
ic_°©us
 & 
IC_STATUS_MA
) != 0) ||

357 ((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFE
) == 0)) {

359 i‡(
timeout
++ > 0x5000) {

365 
	}
}

367 
CK_UINT8
 
	$i2c_gë_ack
(
CK_UINT32
 
id
) {

368 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

369 
CK_UINT32
 
tmp32
 = 0;

370 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

373 (
pi2c
->
ic_øw_öå_°©
 & 
IC_MST_ON_HOLD
) == 0) {

374 i‡((
pi2c
->
ic_øw_öå_°©
 & 
IC_STOP_DET
) != 0) {

376 i‡((
pi2c
->
ic_tx_abπ_sour˚
 & 
IC_ABRT_7B_ADDR_NOACK
) != 0) {

378 
tmp32
 = 
pi2c
->
ic_˛r_tx_abπ
;

379 
tmp32
 = 
pi2c
->
ic_˛r_°›_dë
;

390 
	}
}

400 
CK_UINT32
 
	$i2c_x„r_öô
(
CK_UINT32
 
id
, CK_UINT32 
chù
, CK_UINT32 
addr
,

401 
CK_UINT32
 
Æí
) {

402 
CK_UINT32
 
vÆue
 = 0;

403 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

404 
CK_UINT32
 
timeout
 = 0;

405 
CK_UINT32
 
Àn
 = 
Æí
;

406 
CK_UINT32
 
tmp32
 = 0;

408 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

410 i‡(
	`i2c_waô_f‹_bb
(
id
)) {

414 
	`i2c_£èddªss
(
id
, 
chù
);

416 
Æí
) {

417 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0) {

418 
Æí
--;

420 
vÆue
 = ((
addr
 >> (
Æí
 * 8)) & 0xff);

422 
pi2c
->
ic_cmd_d©a
 = 
vÆue
;

423 i‡(
Æí
 =
Àn
 - 1) {

424 
tmp32
 = 
	`i2c_gë_ack
(
id
);

425 i‡(
tmp32
 == 1) {

426 
timeout
++;

427 i‡(
timeout
 > 0x5000) {

428 
	`¥ötf
("Timeout, NÿACK f‹áddªs†0x%x \n", 
chù
);

431 
Æí
 = 
Àn
;

439 
	}
}

442 
CK_UINT32
 
	$i2c_x„r_föish
(
CK_UINT32
 
id
) {

443 
CK_UINT32
 
timeout
 = 0;

444 
CK_UINT32
 
tmp32
 = 0;

445 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

447 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

450 i‡((
pi2c
->
ic_øw_öå_°©
 & 
IC_STOP_DET
) != 0) {

451 
tmp32
 = 
pi2c
->
ic_˛r_°›_dë
;

453 } i‡(
timeout
++> 0x5000) {

454 
	`¥ötf
("Timed out waiting for STOP_DET\n");

459 i‡(
	`i2c_waô_f‹_bb
(
id
)) {

460 
	`¥ötf
("Timed out waiting for bus\n");

465 
	`i2c_Êush_rxfifo
(
id
);

468 
pi2c
->
ic_íabÀ
 &~
IC_ENABLE_0B
;

471 (
pi2c
->
ic_íabÀ_°©us
 & 
IC_ENABLE_0B
) != 0);

474 
	}
}

487 
CK_UINT32
 
	$dw_i2c_ªad
(
CK_UINT32
 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

488 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
) {

489 
CK_UINT32
 
timeout
 = 0;

490 
CK_UINT32
 
timeout_ack
 = 0;

491 
CK_UINT32
 
tmp32
 = 0;

492 
CK_UINT32
 
tmp_Àn
 = 
Àn
;

493 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

495 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

497 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

500 
Àn
) {

501 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0) {

502 i‡(
Àn
 == 1) {

503 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
 | 
IC_STOP
;

505 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
;

508 i‡((
Æí
 =0Ë&& (
Àn
 =
tmp_Àn
)) {

509 
tmp32
 = 
	`i2c_gë_ack
(
id
);

510 i‡(
tmp32
 == 1) {

511 
timeout_ack
++;

512 i‡(
timeout_ack
 > 0x5000) {

513 
	`¥ötf
("Timeout, NÿACK f‹áddªs†%x \n", 
dev
);

522 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_RFNE
) != 0) {

523 *
buf„r
 = (
pi2c
->
ic_cmd_d©a
 & 0xff);

524 
buf„r
++;

525 
Àn
--;

526 
timeout
 = 0;

528 } i‡(
timeout
++ > 0x5000) {

529 
	`¥ötf
("Timed out. i2cÑead Failed\n");

535  
	`i2c_x„r_föish
(
id
);

536 
	}
}

549 
CK_UINT32
 
	$dw_i2c_wrôe
(
CK_UINT32
 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

550 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
) {

551 
CK_UINT32
 
timeout
 = 0;

552 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

554 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

556 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

560 
Àn
) {

561 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0) {

562 i‡(--
Àn
 == 0) {

563 
pi2c
->
ic_cmd_d©a
 = *
buf„r
 | 
IC_STOP
;

565 
pi2c
->
ic_cmd_d©a
 = *
buf„r
;

567 
buf„r
++;

568 
timeout
 = 0;

569 } i‡(
timeout
++ > 0x5000) {

570 
	`¥ötf
("Timed out. i2c write Failed\n");

575  
	`i2c_x„r_föish
(
id
);

576 
	}
}

593 
CK_UINT32
 
	$dw_i2c_dma_ªad_¥e
(
CK_UINT32
 
dma_id
,

594 
CK_UINT32
 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

595 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

596 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
rdÃ
) {

597 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

599 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

601 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

605 
pi2c
->
ic_dma_¸
 = 
IC_DMA_CR_RDMAE
;

606 
pi2c
->
ic_dma_rdÃ
 = 
rdÃ
;

608 
	`DMAPîùhîÆ2MemO≥n
(
dma_id
, 
dma_ch
, (
CK_UINT32
)
buf„r
,

609 
Àn
, 
	`≥rùhîÆ_i2c_rx
(
id
),

610 
dma_öå
, 0, 0, 0);

612 
	}
}

624 
CK_UINT32
 
	$dw_i2c_dma_ªad_po°
(
CK_UINT32
 
dma_id
,

625 
CK_UINT32
 
id
, CK_UINT32 
Àn
,

626 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
) {

627 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

629 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

631 
Àn
) {

632 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0) {

633 i‡(
Àn
 == 1) {

634 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
 | 
IC_STOP
;

636 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
;

638 
Àn
--;

642 !(
	`DMAC_CheckD⁄e
(
dma_id
, 
dma_ch
, 
dma_öå
)));

643 
	`DMAC_Clo£
(
dma_id
, 
dma_ch
);

645  
	`i2c_x„r_föish
(
id
);

646 
	}
}

663 
CK_UINT32
 
	$dw_i2c_dma_ªad
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
,

664 
CK_UINT32
 
dev
, CK_UINT32 
addr
,

665 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

666 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
rdÃ
) {

667 
CK_UINT8
 
ªt
 = 0;

668 
	`DMAC_Inô
(
dma_id
);

670 
ªt
 = 
	`dw_i2c_dma_ªad_¥e
(
dma_id
, 
id
, 
dev
, 
addr
, 
Æí
, 
buf„r
, 
Àn
, 
dma_ch
,

671 
dma_öå
, 
rdÃ
);

672 i‡(
ªt
 != 0) {

675 
	`DMAC_Sèπ
(
dma_id
, 
dma_ch
);

677 
ªt
 = 
	`dw_i2c_dma_ªad_po°
(
dma_id
, 
id
, 
Àn
, 
dma_ch
, 
dma_öå
);

678  
ªt
;

679 
	}
}

698 
CK_UINT32
 
	$dw_i2c_dma_wrôe_¥e
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
,

699 
CK_UINT32
 
dev
, CK_UINT32 
addr
,

700 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

701 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
tdÃ
,

702 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

704 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

706 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

708 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

712 
pi2c
->
ic_dma_¸
 = 
IC_DMA_CR_TDMAE
;

713 
pi2c
->
ic_dma_tdÃ
 = 
tdÃ
;

715 
	`DMAMem2PîùhîÆO≥n
(
dma_id
, 
dma_ch
, (
CK_UINT32
)
buf„r
, 
Àn
 - 1,

716 
	`≥rùhîÆ_i2c_tx
(
id
),

717 
dma_öå
, 0, 0, 0, 
d°_å_width
, 
d°_msize
);

719 
	}
}

733 
CK_UINT32
 
	$dw_i2c_dma_wrôe_po°
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
,

734 
CK_UINT8
 *
buf„r
, 
CK_UINT32
 
Àn
,

735 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
,

736 
CK_UINT32
 
d°_å_width
) {

737 
CK_UINT32
 
timeout
 = 0;

738 
CK_UINT32
 
ª°_Àn
 = 4;

740 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

742 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

745 i‡(
	`DMAC_CheckD⁄e
(
dma_id
, 
dma_ch
, 
dma_öå
) == 1) {

748 i‡(
timeout
++ > 0x5000) {

749 
	`¥ötf
("\n\t%s: waôög f‹ DMA D⁄êtimeout!\n", 
__func__
);

750 
	`¥ötf
(" - - - FAIL.\n");

751 
pi2c
->
ic_dma_¸
 = 0;

752 
pi2c
->
ic_íabÀ
 |
IC_ENABLE_ABORT
;

758 
	`DMAC_Clo£
(
dma_id
, 
dma_ch
);

760 
ª°_Àn
 != 0) {

761 i‡(
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) {

762 i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH8
) {

763 i‡(
ª°_Àn
 == 1) {

764 
pi2c
->
ic_cmd_d©a
 = 
buf„r
[
Àn
 * 4 - 
ª°_Àn
] | 
IC_STOP
;

766 
pi2c
->
ic_cmd_d©a
 = 
buf„r
[
Àn
 * 4 - 
ª°_Àn
];

768 
ª°_Àn
--;

769 } i‡(
d°_å_width
 =
DMAC_CTL_DST_TR_WIDTH32
) {

770 
pi2c
->
ic_cmd_d©a
 = 
buf„r
[(
Àn
 - 1Ë* 4] | 
IC_STOP
;

771 
ª°_Àn
 = 0;

773 
	`¥ötf
("\n\tDMAC_CTL_DST_TR_WIDTH %dÇot supported"

775 
	`DST_TR_WIDTH
(
d°_å_width
));

778 } i‡(
timeout
++ > 0x5000) {

779 
	`¥ötf
("\n\tTimed out. i2c write Failed\n");

784  
	`i2c_x„r_föish
(
id
);

785 
	}
}

804 
CK_UINT32
 
	$dw_i2c_dma_wrôe
(
CK_UINT32
 
dma_id
, CK_UINT32 
id
,

805 
CK_UINT32
 
dev
, CK_UINT32 
addr
,

806 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

807 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
tdÃ
,

808 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
) {

809 
CK_UINT8
 
ªt
 = 0;

811 
	`DMAC_Inô
(
dma_id
);

813 
ªt
 = 
	`dw_i2c_dma_wrôe_¥e
(
dma_id
, 
id
, 
dev
, 
addr
, 
Æí
, 
buf„r
, 
Àn
,

814 
dma_ch
, 
dma_öå
, 
tdÃ
, 
d°_å_width
,

815 
d°_msize
);

816 i‡(
ªt
 != 0) {

820 
	`DMAC_Sèπ
(
dma_id
, 
dma_ch
);

822 
ªt
 = 
	`dw_i2c_dma_wrôe_po°
(
dma_id
, 
id
, 
buf„r
, 
Àn
, 
dma_ch
,

823 
dma_öå
, 
d°_å_width
);

824  
ªt
;

825 
	}
}

838 
CK_UINT32
 
	$dw_i2c_ªad_öt
(
CK_UINT32
 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

839 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
) {

840 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

841 
CK_UINT8
 
ªt
 = 0;

842 
CK_UINT8
 
timeout_ack
 = 0;

843 
CK_UINT32
 
tmp32
 = 0;

844 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

846 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

849 
tx_Àn
 = 0;

850 
rx_Àn
 = 0;

851 
tx_rx_Àn
 = 
Àn
;

852 
rx_buf
 = 
buf„r
;

855 
pi2c
->
ic_tx_é
 = 
IC_TL4
;

858 
pi2c
->
ic_rx_é
 = 
IC_TL3
;

861 i‡(
Æí
 == 0) {

863 i‡((
pi2c
->
ic_°©us
 & 
IC_STATUS_TFNF
) != 0) {

864 i‡(
Àn
 == 1) {

865 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
 | 
IC_STOP
;

867 
pi2c
->
ic_cmd_d©a
 = 
IC_CMD
;

869 
tmp32
 = 
	`i2c_gë_ack
(
id
);

870 i‡(
tmp32
 == 1) {

871 
timeout_ack
++;

872 i‡(
timeout_ack
 > 0x5000) {

873 
	`¥ötf
("Timeout, NÿACK f‹áddªs†%x \n", 
dev
);

881 
tx_Àn
 = 1;

884 
pi2c
->
ic_öå_mask
 = 
IC_RX_FULL
 | 
IC_TX_EMPTY
 | 
IC_STOP_DET
;

886 
ªt
 = 
	`i2c_x„r_föish
(
id
);

887  
ªt
;

888 
	}
}

901 
CK_UINT32
 
	$dw_i2c_wrôe_öt
(
CK_UINT32
 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
,

902 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
) {

903 
PCKPSåu˘_I2C
 
pi2c
 = 
NULL
;

905 
pi2c
 = 
CK_I2C_TabÀ
[
id
].
addr
;

907 i‡(
	`i2c_x„r_öô
(
id
, 
dev
, 
addr
, 
Æí
)) {

911 
tx_Àn
 = 0;

913 
rx_Àn
 = 
Àn
;

914 
tx_rx_Àn
 = 
Àn
;

915 
tx_buf
 = 
buf„r
;

918 
pi2c
->
ic_tx_é
 = 
IC_TL4
;

920 
pi2c
->
ic_öå_mask
 = 
IC_TX_EMPTY
;

923  
	`i2c_x„r_föish
(
id
);

924 
	}
}

	@drivers/intc.c

11 
	~"ck810.h
"

12 
	~"d©©y≥.h
"

13 
	~"ötc.h
"

14 
	~"ckötc.h
"

15 
	~"misc.h
"

16 
	~"ˇche.h
"

18 
CK_Comm⁄_H™dÀr
();

27 
PCKSåu˘_IRQH™dÀr
 
	gn‹mÆ_úq_li°
[
NR_IRQS
];

28 
PCKSåu˘_IRQH™dÀr
 
	gÁ°_úq_li°
[
NR_IRQS
];

31 vﬁ©ûê
CKSåu˘_INTC
 *
	gi¸p
 = 
PCK_INTC
;

33 *
	gex˚±i⁄_«mes
[] =

54 
CK_UINT32
 
	mpc
;

55 
CK_UINT32
 
	mp§
;

56 
CK_UINT32
 
	mr1
;

57 
CK_UINT32
 
	mr2
;

58 
CK_UINT32
 
	mr3
;

59 
CK_UINT32
 
	mr4
;

60 
CK_UINT32
 
	mr5
;

61 
CK_UINT32
 
	mr6
;

62 
CK_UINT32
 
	mr7
;

63 
CK_UINT32
 
	mr8
;

64 
CK_UINT32
 
	mr9
;

65 
CK_UINT32
 
	mr10
;

66 
CK_UINT32
 
	mr11
;

67 
CK_UINT32
 
	mr12
;

68 
CK_UINT32
 
	mr13
;

69 
CK_UINT32
 
	mr14
;

70 
CK_UINT32
 
	mr15
;

71 } 
	t__©åibuã__
 ((
	tÆig√d
, 
	t∑cked
)Ë
	tCkc‹e_SavedRegi°îs
;

73 
deÁu…_ex˚±i⁄_h™dÀr
();

74 
hw_v§_deÁu…_ex˚±i⁄
();

75 
hw_v§_autovec
();

76 
hw_v§_Á°autovec
();

77 
hw_v§_ébmiss
();

78 
hw_v§_vec
();

79 
hw_v§_Á°vec
();

80 
CK_Fa°0_Ve˘‹_H™dÀr
();

81 
CK_N‹mÆ0_Ve˘‹_H™dÀr
();

82 
CK_N‹mÆ63_Ve˘‹_H™dÀr
();

83 
CK_Fa°63_H™dÀr
();

85 
ölöe
 
	$CK_Cache_Flush
()

87 #i‡
CONFIG_CKCPU_MMU


88 
	`CK_Cache_FlushAŒ
();

90 
	}
}

102 
	$CK_INTC_Inô
(
IN
 
CK_UINT32
 
mode
)

104 
i
;

106 
i¸p
->
ICR_ISR
 = 0;

108 
mode
) {

109 
AUTO_MODE
:

110 
i
 = 0; i < 
NR_IRQS
; i++)

112 
n‹mÆ_úq_li°
[
i
] = 
NULL
;

115 
i
 = 0;ò< 
NR_IRQS
; i++)

117 
Á°_úq_li°
[
i
] = 
NULL
;

119 
i¸p
->
ICR_ISR
 |
ICR_AVE
;

121 
VECTOR_SHARE_MODE
:

122 
i¸p
->
ICR_ISR
 &~(
ICR_AVE
 | 
ICR_FVE
);

124 
VECTOR_UNIQUE_MODE
:

125 #i‡
CK_128_INTC


126 
	`¥ötf
("128 intc doesÇot support UNIQUE MODE");

128 
i¸p
->
ICR_ISR
 &~
ICR_AVE
;

129 
i¸p
->
ICR_ISR
 |
ICR_FVE
;

133 
	`¥ötf
("îr‹: unsuµ‹ãd modê0x%x", 
mode
);

137 
i¸p
->
PR
[0] = 0x00010203;

138 
i¸p
->
PR
[1] = 0x04050607;

139 
i¸p
->
PR
[2] = 0x08090a0b;

140 
i¸p
->
PR
[3] = 0x0c0d0e0f;

141 
i¸p
->
PR
[4] = 0x10111213;

142 
i¸p
->
PR
[5] = 0x14151617;

143 
i¸p
->
PR
[6] = 0x18191a1b;

144 
i¸p
->
PR
[7] = 0x1c1d1e1f;

145 
i¸p
->
PR
[8] = 0x20212223;

146 
i¸p
->
PR
[9] = 0x24252627;

147 
i¸p
->
PR
[10] = 0x28292a2b;

148 
i¸p
->
PR
[11] = 0x2c2d2e2f;

149 
i¸p
->
PR
[12] = 0x30313233;

150 
i¸p
->
PR
[13] = 0x34353637;

151 
i¸p
->
PR
[14] = 0x38393a3b;

152 
i¸p
->
PR
[15] = 0x3c3d3e3f;

153 #i‡
CK_128_INTC


155 
i¸p
->
PR1
[0] = 0x00010203;

156 
i¸p
->
PR1
[1] = 0x04050607;

157 
i¸p
->
PR1
[2] = 0x08090a0b;

158 
i¸p
->
PR1
[3] = 0x0c0d0e0f;

159 
i¸p
->
PR1
[4] = 0x10111213;

160 
i¸p
->
PR1
[5] = 0x14151617;

161 
i¸p
->
PR1
[6] = 0x18191a1b;

162 
i¸p
->
PR1
[7] = 0x1c1d1e1f;

163 
i¸p
->
PR1
[8] = 0x20212223;

164 
i¸p
->
PR1
[9] = 0x24252627;

165 
i¸p
->
PR1
[10] = 0x28292a2b;

166 
i¸p
->
PR1
[11] = 0x2c2d2e2f;

167 
i¸p
->
PR1
[12] = 0x30313233;

168 
i¸p
->
PR1
[13] = 0x34353637;

169 
i¸p
->
PR1
[14] = 0x38393a3b;

170 
i¸p
->
PR1
[15] = 0x3c3d3e3f;

173 
	}
}

181 
	$CK_INTC_EnN‹mÆIrq
(
IN
 
CK_UINT32
 
úq_num
) {

182 
CK_UINT32
 
p§bk
;

184 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

186 i‡(
úq_num
 > 63) {

187 i‡((
úq_num
 - 64) > 31) {

188 
i¸p
->
NIERH1
 |(1 << (
úq_num
 - 64 - 32));

189 #i‡
CK_INTC_DEBUG


190 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERH1 = 0x%x\n", 
i¸p
->
NIERH1
);

193 
i¸p
->
NIERL1
 |(1 << (
úq_num
 - 64));

194 #i‡
CK_INTC_DEBUG


195 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERL1 = 0x%x\n", 
i¸p
->
NIERL1
);

199 i‡(
úq_num
 > 31) {

200 
i¸p
->
NIERH
 |(1 << (
úq_num
 - 32));

201 #i‡
CK_INTC_DEBUG


202 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERH = 0x%x\n", 
i¸p
->
NIERH
);

205 
i¸p
->
NIERL
 |(1 << 
úq_num
);

206 #i‡
CK_INTC_DEBUG


207 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERL = 0x%x\n", 
i¸p
->
NIERL
);

212 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

213 
	}
}

221 
	$CK_INTC_DisN‹mÆIrq
(
IN
 
CK_UINT32
 
úq_num
) {

222 
CK_UINT32
 
p§bk
;

224 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

226 i‡(
úq_num
 > 63) {

227 i‡((
úq_num
 - 64) > 31) {

228 
i¸p
->
NIERH1
 &~(1 << (
úq_num
 - 64 - 32));

229 #i‡
CK_INTC_DEBUG


230 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERH1 = 0x%x\n", 
i¸p
->
NIERH1
);

233 
i¸p
->
NIERL1
 &~(1 << (
úq_num
 - 64));

234 #i‡
CK_INTC_DEBUG


235 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERL1 = 0x%x\n", 
i¸p
->
NIERL1
);

239 i‡(
úq_num
 > 31) {

240 
i¸p
->
NIERH
 &~(1 << (
úq_num
 - 32));

241 #i‡
CK_INTC_DEBUG


242 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERH = 0x%x\n", 
i¸p
->
NIERH
);

245 
i¸p
->
NIERL
 &~(1 << 
úq_num
);

246 #i‡
CK_INTC_DEBUG


247 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq NIERL = 0x%x\n", 
i¸p
->
NIERL
);

252 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

253 
	}
}

261 
	$CK_INTC_EnFa°Irq
(
IN
 
CK_UINT32
 
úq_num
) {

262 
CK_UINT32
 
p§bk
;

264 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

266 i‡(
úq_num
 > 63) {

267 i‡((
úq_num
 - 64) > 31) {

268 
i¸p
->
FIERH1
 |(1 << (
úq_num
 - 64 - 32));

269 #i‡
CK_INTC_DEBUG


270 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERH1 = 0x%x\n", 
i¸p
->
FIERH1
);

273 
i¸p
->
FIERL1
 |(1 << (
úq_num
 - 64));

274 #i‡
CK_INTC_DEBUG


275 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERL1 = 0x%x\n", 
i¸p
->
FIERL1
);

279 i‡(
úq_num
 > 31) {

280 
i¸p
->
FIERH
 |(1 << (
úq_num
 - 32));

281 #i‡
CK_INTC_DEBUG


282 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERH = 0x%x\n", 
i¸p
->
FIERH
);

285 
i¸p
->
FIERL
 |(1 << 
úq_num
);

286 #i‡
CK_INTC_DEBUG


287 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERL = 0x%x\n", 
i¸p
->
FIERL
);

292 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

293 
	}
}

301 
	$CK_INTC_DisFa°Irq
(
IN
 
CK_UINT32
 
úq_num
) {

302 
CK_UINT32
 
p§bk
;

304 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

306 i‡(
úq_num
 > 63) {

307 i‡((
úq_num
 - 64) > 31) {

308 
i¸p
->
FIERH1
 &~(1 << (
úq_num
 - 64 - 32));

309 #i‡
CK_INTC_DEBUG


310 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERH1 = 0x%x\n", 
i¸p
->
FIERH1
);

313 
i¸p
->
FIERL1
 &~(1 << (
úq_num
 - 64));

314 #i‡
CK_INTC_DEBUG


315 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERL1 = 0x%x\n", 
i¸p
->
FIERL1
);

319 i‡(
úq_num
 > 31) {

320 
i¸p
->
FIERH
 &~(1 << (
úq_num
 - 32));

321 #i‡
CK_INTC_DEBUG


322 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERH = 0x%x\n", 
i¸p
->
FIERH
);

325 
i¸p
->
FIERL
 &~(1 << 
úq_num
);

326 #i‡
CK_INTC_DEBUG


327 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq FIERL = 0x%x\n", 
i¸p
->
FIERL
);

332 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

333 
	}
}

341 
	$CK_INTC_MaskN‹mÆIrq
(
IN
 
CK_UINT32
 
¥imask
)

343 
IN
 
CK_UINT32
 
ãmp_i¸
;

344 
CK_UINT32
 
p§bk
;

346 
ãmp_i¸
 = 
i¸p
->
ICR_ISR
;

352 if((
ãmp_i¸
 &= 0x10000000) == 0x10000000)

354 #i‡
CK_INTC_DEBUG


355 
	`¥ötf
("JJJ_DEBUG CK_INTC_MaskNormalIrq 0x00\n");

359 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

360 
i¸p
->
ICR_ISR
 &= 0xffe0ffff;

361 #i‡
CK_128_INTC


362 i‡(
¥imask
 > 63) {

363 i‡((
¥imask
 - 63) > 31) {

364 
i¸p
->
IMASKRH1
 |(1 << (
¥imask
 - 64 - 32));

365 #i‡
CK_INTC_DEBUG


366 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH1 = 0x%x\n", 
i¸p
->
IMASKRH1
);

369 
i¸p
->
IMASKRL1
 |(1 << (
¥imask
 - 64));

370 #i‡
CK_INTC_DEBUG


371 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL1 = 0x%x\n", 
i¸p
->
IMASKRL1
);

375 i‡(
¥imask
 > 31) {

376 
i¸p
->
IMASKRH
 |(1 << (
¥imask
 - 32));

377 #i‡
CK_INTC_DEBUG


378 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH = 0x%x\n", 
i¸p
->
IMASKRH
);

381 
i¸p
->
IMASKRL
 |(1 << 
¥imask
);

382 #i‡
CK_INTC_DEBUG


383 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL = 0x%x\n", 
i¸p
->
IMASKRL
);

388 
i¸p
->
ICR_ISR
 |((
¥imask
 & 0x0000001f) << 16);

390 
i¸p
->
ICR_ISR
 |
ICR_ME
;

391 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

392 #i‡
CK_INTC_DEBUG


393 
	`¥ötf
("JJJ_DEBUG CK_INTC_MaskN‹mÆIrq ICR_ISR = 0x%x\n", 
i¸p
->
ICR_ISR
);

396 
	}
}

404 
	$CK_INTC_UnMaskN‹mÆIrq
(
IN
 
CK_UINT32
 
¥imask
)

406 
CK_UINT32
 
p§bk
;

408 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

409 
i¸p
->
ICR_ISR
 &= 0xffe0ffff;

410 #i‡
CK_128_INTC


411 i‡(
¥imask
 > 63) {

412 i‡((
¥imask
 - 63) > 31) {

413 
i¸p
->
IMASKRH1
 &~(1 << (
¥imask
 - 64 - 32));

414 #i‡
CK_INTC_DEBUG


415 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH1 = 0x%x\n", 
i¸p
->
IMASKRH1
);

418 
i¸p
->
IMASKRL1
 &~(1 << (
¥imask
 - 64));

419 #i‡
CK_INTC_DEBUG


420 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL1 = 0x%x\n", 
i¸p
->
IMASKRL1
);

424 i‡(
¥imask
 > 31) {

425 
i¸p
->
IMASKRH
 &~(1 << (
¥imask
 - 32));

426 #i‡
CK_INTC_DEBUG


427 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH = 0x%x\n", 
i¸p
->
IMASKRH
);

430 
i¸p
->
IMASKRL
 &~(1 << 
¥imask
);

431 #i‡
CK_INTC_DEBUG


432 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL = 0x%x\n", 
i¸p
->
IMASKRL
);

437 
i¸p
->
ICR_ISR
 &~((
¥imask
 & 0x0000001f) << 16);

439 
i¸p
->
ICR_ISR
 &~
ICR_ME
;

440 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

441 #i‡
CK_INTC_DEBUG


442 
	`¥ötf
("JJJ_DEBUG CK_INTC_UnMaskN‹mÆIrq ICR_ISR = 0x%x\n", 
i¸p
->
ICR_ISR
);

444 
	}
}

453 
	$CK_INTC_MaskFa°Irq
(
IN
 
CK_UINT32
 
¥imask
)

455 
CK_UINT32
 
p§bk
;

457 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

458 
i¸p
->
ICR_ISR
 &= 0xffe0ffff;

459 #i‡
CK_128_INTC


460 i‡(
¥imask
 > 63) {

461 i‡((
¥imask
 - 63) > 31) {

462 
i¸p
->
IMASKRH1
 |(1 << (
¥imask
 - 64 - 32));

463 #i‡
CK_INTC_DEBUG


464 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH1 = 0x%x\n", 
i¸p
->
IMASKRH1
);

467 
i¸p
->
IMASKRL1
 |(1 << (
¥imask
 - 64));

468 #i‡
CK_INTC_DEBUG


469 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL1 = 0x%x\n", 
i¸p
->
IMASKRL1
);

473 i‡(
¥imask
 > 31) {

474 
i¸p
->
IMASKRH
 |(1 << (
¥imask
 - 32));

475 #i‡
CK_INTC_DEBUG


476 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH = 0x%x\n", 
i¸p
->
IMASKRH
);

479 
i¸p
->
IMASKRL
 |(1 << 
¥imask
);

480 #i‡
CK_INTC_DEBUG


481 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL = 0x%x\n", 
i¸p
->
IMASKRL
);

486 
i¸p
->
ICR_ISR
 |((
¥imask
 & 0x0000001f) << 16);

488 
i¸p
->
ICR_ISR
 |
ICR_MFI
;

489 
i¸p
->
ICR_ISR
 |
ICR_ME
;

490 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

491 #i‡
CK_INTC_DEBUG


492 
	`¥ötf
("JJJ_DEBUG CK_INTC_MaskFa°Irq ICR_ISR = 0x%x\n", 
i¸p
->
ICR_ISR
);

494 
	}
}

502 
	$CK_INTC_UnMaskFa°Irq
(
IN
 
CK_UINT32
 
¥imask
)

504 
CK_UINT32
 
p§bk
;

506 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

507 
i¸p
->
ICR_ISR
 &= 0xffe0ffff;

508 #i‡
CK_128_INTC


509 i‡(
¥imask
 > 63) {

510 i‡((
¥imask
 - 63) > 31) {

511 
i¸p
->
IMASKRH1
 &~(1 << (
¥imask
 - 64 - 32));

512 #i‡
CK_INTC_DEBUG


513 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH1 = 0x%x\n", 
i¸p
->
IMASKRH1
);

516 
i¸p
->
IMASKRL1
 &~(1 << (
¥imask
 - 64));

517 #i‡
CK_INTC_DEBUG


518 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL1 = 0x%x\n", 
i¸p
->
IMASKRL1
);

522 i‡(
¥imask
 > 31) {

523 
i¸p
->
IMASKRH
 &~(1 << (
¥imask
 - 32));

524 #i‡
CK_INTC_DEBUG


525 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRH = 0x%x\n", 
i¸p
->
IMASKRH
);

528 
i¸p
->
IMASKRL
 &~(1 << 
¥imask
);

529 #i‡
CK_INTC_DEBUG


530 
	`¥ötf
("JJJ_DEBUG CK_INTC_EnN‹mÆIrq IMASKRL = 0x%x\n", 
i¸p
->
IMASKRL
);

535 
i¸p
->
ICR_ISR
 &~((
¥imask
 & 0x0000001f) << 16);

537 
i¸p
->
ICR_ISR
 &~
ICR_ME
;

538 
i¸p
->
ICR_ISR
 &~
ICR_MFI
;

539 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

540 #i‡
CK_INTC_DEBUG


541 
	`¥ötf
("JJJ_DEBUG CK_INTC_UnMaskFa°Irq ICR_ISR = 0x%x\n", 
i¸p
->
ICR_ISR
);

543 
	}
}

557 
CK_INT32
 
	$CK_INTC_Reque°Irq
(
PCKSåu˘_IRQH™dÀr
 
púqh™dÀr
, 
IN
 
CK_UINT32
 
mode
)

559 
CK_UINT32
 
¥_ödex
;

560 
CK_UINT32
 
shi·
;

561 
CK_UINT32
 
p§bk
;

564 if((
NULL
 =
púqh™dÀr
) ||

565 (
púqh™dÀr
->
h™dÀr
 =
NULL
) ||

566 (
púqh™dÀr
->
¥i‹ôy
 < 0 ||Öirqhandler->priority > 63) ||

567 ((
púqh™dÀr
->
úqid
 < 0Ë||Öúqh™dÀr->úqid > 
NR_IRQS
))

569  
FAILURE
;

572 #i‡
CK_INTC_DEBUG


573 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq modê0x%x\n", 
mode
);

574 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq irqid=0x%x\n", 
púqh™dÀr
->
úqid
);

578 
¥_ödex
 = (
púqh™dÀr
->
úqid
) / 4;

579 
shi·
 = (3-(
púqh™dÀr
->
úqid
) % 4) * 8;

580 
	`CK_CPU_E¡îCrôiˇl
(&
p§bk
);

582 i‡(
¥_ödex
 > 15) {

583 
i¸p
->
PR1
[
¥_ödex
 - 16] &~(0x000000f‡<< 
shi·
);

584 
i¸p
->
PR1
[
¥_ödex
 - 16] |((
púqh™dÀr
->
¥i‹ôy
Ë<< 
shi·
);

586 
i¸p
->
PR
[
¥_ödex
] &~(0x000000f‡<< 
shi·
);

587 
i¸p
->
PR
[
¥_ödex
] |((
púqh™dÀr
->
¥i‹ôy
Ë<< 
shi·
);

589 #i‡
CK_INTC_DEBUG


590 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°IrqÖr_ödex=%d\n", 
¥_ödex
);

591 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq shi·=0x%x\n", 
shi·
);

592 i‡(
¥_ödex
 > 15)

593 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq i¸p->PR1[%d]=0x%x\n", 
¥_ödex
, 
i¸p
->
PR1
[pr_index - 16]);

595 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq i¸p->PR[%d]=0x%x\n", 
¥_ödex
, 
i¸p
->
PR
[pr_index]);

598 
mode
) {

599 
AUTO_MODE
:

601 i‡(!(
púqh™dÀr
->
bÁ°
))

604 if(
NULL
 =(
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
]))

607 
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
] =Öirqhandler;

608 
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
]->
√xt
 = 
NULL
;

609 
	`CK_INTC_EnN‹mÆIrq
–
púqh™dÀr
->
úqid
 );

616 
púqh™dÀr
->
√xt
 = 
n‹mÆ_úq_li°
[púqh™dÀr->
úqid
];

617 
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
] =Öirqhandler;

625 i‡(
NULL
 =(
Á°_úq_li°
[
púqh™dÀr
->
úqid
]))

627 
Á°_úq_li°
[
púqh™dÀr
->
úqid
] =Öirqhandler;

628 
Á°_úq_li°
[
púqh™dÀr
->
úqid
]->
√xt
 = 
NULL
;

629 
	`CK_INTC_EnFa°Irq
(
púqh™dÀr
->
úqid
);

634 
púqh™dÀr
->
√xt
 = 
Á°_úq_li°
[púqh™dÀr->
úqid
];

635 
Á°_úq_li°
[
púqh™dÀr
->
úqid
] =Öirqhandler;

639 
VECTOR_SHARE_MODE
:

641 #i‡
CK_INTC_DEBUG


642 
	`¥ötf
("JJJ_DEBUG CK_INTC_Reque°Irq VECTOR_SHARE_MODE irqid=%d\n", 
púqh™dÀr
->
úqid
);

645 i‡(!(
púqh™dÀr
->
bÁ°
)) {

646 #i‡
CK_INTC_DEBUG


647 
	`¥ötf
("JJJ_DEBUG CK_INTC_RequestIrq VECTOR_SHARE_MODEÇormal\n");

649 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_SYS
 + 
púqh™dÀr
->
úqid
]

650 (
CK_UINT32
Ë
hw_v§_vec
;

651 
	`CK_Cache_Flush
();

652 
	`CK_INTC_EnN‹mÆIrq
–
púqh™dÀr
->
úqid
 );

656 #i‡
CK_INTC_DEBUG


657 
	`¥ötf
("JJJ_DEBUG CK_INTC_RequestIrq VECTOR_SHARE_MODE fast\n");

659 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_SYS
 + 
púqh™dÀr
->
úqid
]

660 (
CK_UINT32
Ë
hw_v§_Á°vec
;

661 
	`CK_Cache_Flush
();

662 
	`CK_INTC_EnFa°Irq
–
púqh™dÀr
->
úqid
 );

665 
VECTOR_UNIQUE_MODE
:

666 #i‡
CK_128_INTC


667 
	`¥ötf
("128 intc doesÇot support UNIQUE MODE");

670 i‡(!(
púqh™dÀr
->
bÁ°
))

672 #i‡
CK_INTC_DEBUG


673 
	`¥ötf
("JJJ_DEBUG CK_INTC_RequestIrq VECTOR_UNIQUE_MODEÇormal\n");

675 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_SYS
 + 
púqh™dÀr
->
¥i‹ôy
]

676 =(
CK_UINT32
Ë
hw_v§_vec
;

677 
	`CK_Cache_Flush
();

678 
	`CK_INTC_EnN‹mÆIrq
–
púqh™dÀr
->
úqid
 );

683 #i‡
CK_INTC_DEBUG


684 
	`¥ötf
("JJJ_DEBUG CK_INTC_RequestIrq VECTOR_UNIQUE_MODE fast\n");

686 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_FASTVEC
 + 
púqh™dÀr
->
¥i‹ôy
]

687 =(
CK_UINT32
Ë
hw_v§_Á°vec
;

688 
	`CK_Cache_Flush
();

689 
	`CK_INTC_EnFa°Irq
–
púqh™dÀr
->
úqid
 );

694 
	`¥ötf
("îr‹: unsuµ‹ãd modê0x%x", 
mode
);

696 
	`CK_CPU_ExôCrôiˇl
(
p§bk
);

697  
SUCCESS
;

698 
	}
}

714 
CK_INT32
 
	$CK_INTC_FªeIrq
(
INOUT
 
PCKSåu˘_IRQH™dÀr
 
púqh™dÀr
, 
IN
 
CK_UINT32
 
mode
)

716 
PCKSåu˘_IRQH™dÀr
 
±emp
;

717 
PCKSåu˘_IRQH™dÀr
 
¥e_node
 = 
NULL
;

719 #i‡
CK_INTC_DEBUG


720 
	`¥ötf
("JJJ_DEBUG CK_INTC_FªeIrq irqid=0x%x,Öri‹ôy=0x%x\n", 
púqh™dÀr
->
úqid
,Öúqh™dÀr->
¥i‹ôy
);

723 #i‡
CK_INTC_DEBUG


724 i‡(
púqh™dÀr
 =
NULL
)

725 
	`¥ötf
("JJJ_DEBUGÖirqhandler == NULL\n");

727 i‡(
púqh™dÀr
->
h™dÀr
 =
NULL
)

728 
	`¥ötf
("JJJ_DEBUGÖirqhandler->handler == NULL\n");

732 if((
púqh™dÀr
 =
NULL
) ||

733 (
púqh™dÀr
->
h™dÀr
 =
NULL
) ||

734 ((
púqh™dÀr
->
úqid
 < 0Ë|| (púqh™dÀr->úqid > 
NR_IRQS
)))

736 #i‡
CK_INTC_DEBUG


737 
	`¥ötf
("JJJ_DEBUG CK_INTC_FreeIrq FAILURE\n");

739  
FAILURE
;

742 
mode
) {

743 
AUTO_MODE
:

745 i‡(!(
púqh™dÀr
->
bÁ°
))

747 i‡(
NULL
 =
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
])

749  
FAILURE
;

751 
¥e_node
 = 
±emp
 = 
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
];

753 
±emp
 !
púqh™dÀr
)

755 
¥e_node
 = 
±emp
;

756 
±emp
 =Öãmp->
√xt
;

759 i‡(
±emp
 =
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
])

761 
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
] = 
±emp
->
√xt
;

763 i‡(
NULL
 !
±emp
)

765 
¥e_node
->
√xt
 = 
±emp
->next;

769  
FAILURE
;

773 i‡(
NULL
 =
n‹mÆ_úq_li°
[
púqh™dÀr
->
úqid
])

775 
	`CK_INTC_DisN‹mÆIrq
(
púqh™dÀr
->
úqid
);

782 i‡(
NULL
 =
Á°_úq_li°
[
púqh™dÀr
->
úqid
])

784  
FAILURE
;

786 
¥e_node
 = 
±emp
 = 
Á°_úq_li°
[
púqh™dÀr
->
úqid
];

789 
±emp
 !
púqh™dÀr
)

791 
¥e_node
 = 
±emp
;

792 
±emp
 =Öãmp->
√xt
;

796 i‡(
±emp
 =
Á°_úq_li°
[
púqh™dÀr
->
úqid
])

798 
Á°_úq_li°
[
púqh™dÀr
->
úqid
] = 
±emp
->
√xt
;

800 i‡(
NULL
 !
±emp
)

802 
¥e_node
->
√xt
 = 
±emp
->next;

806  
FAILURE
;

810 i‡(
NULL
 =
Á°_úq_li°
[
púqh™dÀr
->
úqid
])

812 
	`CK_INTC_DisFa°Irq
(
púqh™dÀr
->
úqid
);

815 
±emp
 = 
NULL
;

817 
VECTOR_SHARE_MODE
:

818 #i‡
CK_INTC_DEBUG


819 
	`¥ötf
("JJJ_DEBUG CK_INTC_FreeIrq VECTOR_SHARE_MODE 0x00\n");

821 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_SYS
 + 
púqh™dÀr
->
úqid
]

822 =(
CK_UINT32
Ë
deÁu…_ex˚±i⁄_h™dÀr
;

823 
	`CK_Cache_Flush
();

824 #i‡
CK_INTC_DEBUG


825 
	`¥ötf
("JJJ_DEBUG CK_INTC_FreeIrq VECTOR_SHARE_MODE 0x01\n");

828 i‡(!(
púqh™dÀr
->
bÁ°
))

829 
	`CK_INTC_DisN‹mÆIrq
–
púqh™dÀr
->
úqid
 );

832 
	`CK_INTC_DisFa°Irq
–
púqh™dÀr
->
úqid
 );

833 #i‡
CK_INTC_DEBUG


834 
	`¥ötf
("JJJ_DEBUG CK_INTC_FreeIrq VECTOR_SHARE_MODE 0x02\n");

837 
VECTOR_UNIQUE_MODE
:

838 #i‡
CK_128_INTC


839 
	`¥ötf
("128 intc doesÇot support UNIQUE MODE");

842 i‡(!(
púqh™dÀr
->
bÁ°
))

844 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_SYS
 + 
púqh™dÀr
->
¥i‹ôy
]

845 =(
CK_UINT32
Ë
deÁu…_ex˚±i⁄_h™dÀr
;

846 
	`CK_Cache_Flush
();

847 
	`CK_INTC_DisN‹mÆIrq
–
púqh™dÀr
->
úqid
 );

852 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_FASTVEC
 + 
púqh™dÀr
->
¥i‹ôy
]

853 =(
CK_UINT32
Ë
deÁu…_ex˚±i⁄_h™dÀr
;

854 
	`CK_Cache_Flush
();

855 
	`CK_INTC_DisFa°Irq
–
púqh™dÀr
->
úqid
 );

860 
	`¥ötf
("îr‹: unsuµ‹ãd modê0x%x", 
mode
);

863  
SUCCESS
;

864 
	}
}

878 
	$CK_DeÁu…_Ex˚±i⁄_H™dÀr
(
ve˘‹
, 
Ckc‹e_SavedRegi°îs
 *
ªgs
)

880 
	`¥ötf
("Ex˚±i⁄: %s\n", 
ex˚±i⁄_«mes
[
ve˘‹
]);

881 
	}
}

892 
	$CK_Ex˚±i⁄_Inô
 ()

894 
i
;

897 
i
 = 0; i < 
CKCORE_VECTOR_SYS
; i++)

899 
ck˝u_v§_èbÀ
[
i
] =(
CK_UINT32
Ë
hw_v§_deÁu…_ex˚±i⁄
;

903 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_AUTOVEC
] = (
CK_UINT32
Ë
hw_v§_autovec
;

907 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_FASTAUTOVEC
] = (
CK_UINT32
)
hw_v§_Á°autovec
;

908 #i‡
CONFIG_CKCPU_MMU


910 
ck˝u_v§_èbÀ
[
CKCORE_VECTOR_TLBMISS
] = (
CK_UINT32
Ë
hw_v§_ébmiss
;

913 
	`CK_Cache_Flush
();

914 
	`CK_CPU_EnAŒN‹mÆIrq
();

915 
	`CK_CPU_EnAŒFa°Irq
();

916 
	}
}

929 
	$CK_INTC_I¡îru±Sîvi˚
 (
off£t
)

931 
PCKSåu˘_IRQH™dÀr
 
ph™dÀr
;

933 
ph™dÀr
 = 
n‹mÆ_úq_li°
[
off£t
];

934 #i‡
CK_INTC_DEBUG


935 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ off£à0x%x\n", 
off£t
);

938  
ph™dÀr
 !
NULL
) {

939 
	`CK_INTC_MaskN‹mÆIrq
(
off£t
);

940 #i‡
CK_INTC_DEBUG


941 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ irqid = 0x%x\n", 
ph™dÀr
->
úqid
);

944 
ph™dÀr
 -> 
	`h™dÀr
’h™dÀr->
úqid
);

945 
ph™dÀr
 =Öh™dÀr->
√xt
;

947 i‡(
off£t
 > 63) {

948 i‡((
off£t
 - 32 )> 31) {

949 
i¸p
->
IFRH1
 &~(1 << (
off£t
 - 64 - 32));

951 
i¸p
->
IFRL1
 &~(1 << (
off£t
 - 64));

953 #i‡
CK_INTC_DEBUG


954 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ IFRL1 = 0x%x; IFRH1 = 0x%x\n", 
i¸p
->
IFRL
, i¸p->
IFRH
);

958 i‡(
off£t
 > 31) {

959 
i¸p
->
IFRH
 &~(1 << (
off£t
 - 32));

961 
i¸p
->
IFRL
 &~(1 << 
off£t
);

963 #i‡
CK_INTC_DEBUG


964 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ IFRL = 0x%x; IFRH = 0x%x\n", 
i¸p
->
IFRL
, i¸p->
IFRH
);

967 
	`CK_INTC_UnMaskN‹mÆIrq
(
off£t
);

969 
	}
}

981 
	$CK_INTC_Fa°I¡îru±Sîvi˚
 (
off£t
)

983 
PCKSåu˘_IRQH™dÀr
 
ph™dÀr
;

985 
ph™dÀr
 = 
Á°_úq_li°
[
off£t
];

986 #i‡
CK_INTC_DEBUG


987 
	`¥ötf
("JJJ_DEBUG CK_INTC_Fa°I¡îru±Sîvi˚ off£à0x%x\n", 
off£t
);

990  
ph™dÀr
 !
NULL
) {

991 
	`CK_INTC_MaskFa°Irq
(
off£t
);

992 #i‡
CK_INTC_DEBUG


993 
	`¥ötf
("JJJ_DEBUG CK_INTC_Fa°I¡îru±Sîvi˚ irqid = 0x%x\n", 
ph™dÀr
->
úqid
);

996 
ph™dÀr
 -> 
	`h™dÀr
’h™dÀr->
úqid
);

997 
ph™dÀr
 =Öh™dÀr->
√xt
;

998 i‡(
off£t
 > 63) {

999 i‡((
off£t
 - 32 )> 31) {

1000 
i¸p
->
IFRH1
 &~(1 << (
off£t
 - 64 - 32));

1002 
i¸p
->
IFRL1
 &~(1 << (
off£t
 - 64));

1004 #i‡
CK_INTC_DEBUG


1005 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ IFRL1 = 0x%x; IFRH1 = 0x%x\n", 
i¸p
->
IFRL
, i¸p->
IFRH
);

1008 i‡(
off£t
 > 31) {

1009 
i¸p
->
IFRH
 &~(1 << (
off£t
 - 32));

1011 
i¸p
->
IFRL
 &~(1 << 
off£t
);

1013 #i‡
CK_INTC_DEBUG


1014 
	`¥ötf
("JJJ_DEBUG CK_INTC_I¡îru±Sîvi˚ IFRL = 0x%x; IFRH = 0x%x\n", 
i¸p
->
IFRL
, i¸p->
IFRH
);

1017 
	`CK_INTC_UnMaskFa°Irq
(
off£t
);

1019 
	}
}

1028 
	$CK_INTC_N‹mÆVe˘‹ISR
 ()

1030 
	`CK_Comm⁄_H™dÀr
();

1031 
	}
}

1040 
	$CK_INTC_Fa°Ve˘‹ISR
 ()

1042 
	`CK_Comm⁄_H™dÀr
();

1043 
	}
}

1055 
	$CK_CPU_EnAŒN‹mÆIrq
()

1057 
	`asm
 ("psrsetÉe,ie");

1058 
	}
}

1070 
	$CK_CPU_DisAŒN‹mÆIrq
()

1072 
	`asm
 ("psrclr ie");

1073 
	}
}

1084 
	$CK_CPU_EnAŒFa°Irq
()

1086 
	`asm
 ("psrset fe");

1087 
	}
}

1098 
	$CK_CPU_DisAŒFa°Irq
()

1100 
	`asm
 ("psrclr fe");

1101 
	}
}

1115 
	$CK_CPU_E¡îCrôiˇl
(
CK_UINT32
 *
p§
)

1117 
asm
 volatile ("mfcr %0,Ösr\n\r"

1119 : "Ù" (*
p§
) );

1120 
	}
}

1132 
	$CK_CPU_ExôCrôiˇl
(
CK_UINT32
 
p§
)

1134 
asm
 volatile ("mtcr %0,Ösr"

1136 :"r"(
p§
));

1137 
	}
}

	@drivers/isp.c

1 
	~"i•.h
"

2 
	~"ck810.h
"

3 
	~"mùi_subsys.h
"

6 
	$I•_func_WDR2_On
()

8 
i
;

9 
vÆ
 ;

10 #ifde‡
MIPI_ISP_CH1


12 
vÆ
 = 
	`ªad_mªg32
(
CK_SYS_CTRL_ADDR
+0x88) ;

13 
	`¥ötf
("I•_func_WDR2_O¿ i• cå»0x%x\n", 
vÆ
);

17 
i
 = 0; i < 
	`ARRAY_SIZE
(
I•_On_P¨ams
); i++)

31 if(
I•_On_P¨ams
[
i
].
addr
 == 0x00000404)

33 
	`wrôe_mªg32
(
CK_ISP1_Sœve
+
I•_On_P¨ams
[
i
].
addr
, 0x00000007);

35 }if(
I•_On_P¨ams
[
i
].
addr
 == 0x00001400)

37 
	`wrôe_mªg32
(
CK_ISP1_Sœve
+
I•_On_P¨ams
[
i
].
addr
, (I•_On_P¨ams[i].
vÆ
&0xFF3FFFFF)|0x00800000);

40 
	`wrôe_mªg32
(
CK_ISP1_Sœve
+
I•_On_P¨ams
[
i
].
addr
, I•_On_P¨ams[i].
vÆ
);

43 
	`wrôe_mªg32
(
CK_ISP1_Sœve
+
I•_On_P¨ams
[
i
].
addr
, I•_On_P¨ams[i].
vÆ
);

46 
	`¥ötf
("I•_func_WDR2_O¿ (0x%x)0x%x\n", 
I•_On_P¨ams
[
i
].
vÆ
,
	`ªad_mªg32
(
CK_ISP1_Sœve
+I•_On_P¨ams[i].
addr
));

48 
	`¥ötf
("I•_func_WDR2_O¿ (0x404===========0x%x\n", 
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x404));

51 
vÆ
 = 
	`ªad_mªg32
(
CK_SYS_CTRL_ADDR
+0x88) ;

52 
	`¥ötf
("I•_func_WDR2_O¿ i• cå»0x%x\n", 
vÆ
);

55 
i
 = 0; i < 
	`ARRAY_SIZE
(
I•_On_P¨ams
); i++)

69 if(
I•_On_P¨ams
[
i
].
addr
 == 0x00000404)

71 
	`wrôe_mªg32
(
CK_ISP0_Sœve
+
I•_On_P¨ams
[
i
].
addr
, 0x00000007);

73 }if(
I•_On_P¨ams
[
i
].
addr
 == 0x00001400)

75 
	`wrôe_mªg32
(
CK_ISP0_Sœve
+
I•_On_P¨ams
[
i
].
addr
, (I•_On_P¨ams[i].
vÆ
&0xFF3FFFFF)|0x00800000);

78 
	`wrôe_mªg32
(
CK_ISP0_Sœve
+
I•_On_P¨ams
[
i
].
addr
, I•_On_P¨ams[i].
vÆ
);

81 
	`wrôe_mªg32
(
CK_ISP0_Sœve
+
I•_On_P¨ams
[
i
].
addr
, I•_On_P¨ams[i].
vÆ
);

84 
	`¥ötf
("I•_func_WDR2_O¿ (0x%x)0x%x\n", 
I•_On_P¨ams
[
i
].
vÆ
,
	`ªad_mªg32
(
CK_ISP0_Sœve
+I•_On_P¨ams[i].
addr
));

88 
	}
}

90 
	$I•_func_WDR2_Off
()

92 
i
;

93 
vÆ
;

94 #ifde‡
MIPI_ISP_CH1


95 
vÆ
 = 
	`ªad_mªg32
(
CK_SYS_CTRL_ADDR
+0x88) ;

96 
	`¥ötf
("I•_func_WDR2_O¿ i• cå»0x%x\n", 
vÆ
);

99 
	`¥ötf
("I•_func_WDR2_Of‡0x10 = 0x%x\n", 
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x10));

100 
	`¥ötf
("I•_func_WDR2_Of‡0x414 = 0x%x\n", 
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x414));

101 
	`¥ötf
("I•_func_WDR2_Of‡0x41¯0x%x\n", 
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x41c));

102 
i
 = 0; i < 
	`ARRAY_SIZE
(
I•_Off_P¨ams
); i++)

104 
	`wrôe_mªg32
(
CK_ISP1_Sœve
+
I•_Off_P¨ams
[
i
].
addr
, I•_Off_P¨ams[i].
vÆ
);

107 
vÆ
 = 
	`ªad_mªg32
(
CK_SYS_CTRL_ADDR
+0x88) ;

108 
	`¥ötf
("I•_func_WDR2_O¿ i• cå»0x%x\n", 
vÆ
);

111 
	`¥ötf
("I•_func_WDR2_Of‡0x10 = 0x%x\n", 
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x10));

112 
	`¥ötf
("I•_func_WDR2_Of‡0x414 = 0x%x\n", 
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x414));

113 
	`¥ötf
("I•_func_WDR2_Of‡0x41¯0x%x\n", 
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x41c));

114 
i
 = 0; i < 
	`ARRAY_SIZE
(
I•_Off_P¨ams
); i++)

116 
	`wrôe_mªg32
(
CK_ISP0_Sœve
+
I•_Off_P¨ams
[
i
].
addr
, I•_Off_P¨ams[i].
vÆ
);

120 
	}
}

124 
	$I•_Check_°©us
()

126 
vÆ
;

127 
	`¥ötf
("start waiting ....... Isp_Check_status \r\n");

128 #ifde‡
MIPI_ISP_CH1


132 
vÆ
 = 
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x1500);

134 if((
vÆ
&0x03))

137 
	`¥ötf
("Suc˚ed I•_Check_°©u†vÆ = 0x%x \r\n",
vÆ
);

141 
vÆ
 = 
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x1500);

143 if((
vÆ
&0x03))

146 
	`¥ötf
("Suc˚ed I•_Check_°©u†vÆ = 0x%x \r\n",
vÆ
);

149 
	}
}

	@drivers/isp.h

1 #i‚de‡
__ISP_H__


2 
	#__ISP_H__


	)

3 
	~"d©©y≥.h
"

5 
I•_func_WDR2_On
() ;

6 
I•_func_WDR2_Off
();

7 
I•_Check_°©us
();

9 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

11 
	si•_ªgvÆ_li°
 {

12 
	maddr
;

13 
	mvÆ
;

17 c⁄° 
i•_ªgvÆ_li°
 
	gI•_On_P¨ams
[] =

521 c⁄° 
i•_ªgvÆ_li°
 
	gI•_Off_P¨ams
[] =

	@drivers/mipi_dphy.c

1 
	~"d©©y≥.h
"

2 
	~"ck810.h
"

3 
	~"mùi_subsys.h
"

4 
	~"OV_5640.h
"

6 
	#R_CSI2_DPHY_SHUTDOWNZ
 
MIPI_HOST_PHY_SHUTDOWNZ


	)

7 
	#R_CSI2_DPHY_RSTZ
 
MIPI_HOST_DPHY_RSTZ


	)

8 
	#R_CSI2_DPHY_RX
 
MIPI_HOST_PHY_RX


	)

9 
	#R_CSI2_DPHY_STOPSTATE
 
MIPI_HOST_PHY_STOPSTATE


	)

10 
	#R_CSI2_DPHY_TST_CTRL0
 
MIPI_HOST_PHY_TEST_CTRL0


	)

11 
	#R_CSI2_DPHY_TST_CTRL1
 
MIPI_HOST_PHY_TEST_CTRL1


	)

12 
	#R_CSI2_DPHY2_TST_CTRL0
 
MIPI_HOST_PHY2_TEST_CTRL0


	)

13 
	#R_CSI2_DPHY2_TST_CTRL1
 
MIPI_HOST_PHY2_TEST_CTRL1


	)

15 
	#ADDR_MIPI_PHY_CFGCLKFREQRANGE
 (
MIPI_IPI2AXI_BASE
 + 0x28)

	)

16 
	#ADDR_MIPI_PHY_HSFREQRANGE
 (
MIPI_IPI2AXI_BASE
 + 0x2C)

	)

19 
	ghs‰eqønges
[63] = {

86 
	ghs‰eqønges_ulim
[63] = {

104 
	gtb_osc_‰eq_èrgë
[63] = {

118 
	$¢ps_dphy_ã_wrôe
(
code
,
d©
)

121 
codeH
 = (
code
 >> 8) &0x0F;

122 
codeL
 = 
code
 & 0xFF ;

123 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0);

124 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,0);

125 
	`udñay
(100 * 1000);

126 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,(1L << 16)|0x00000000);

127 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

129 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0x00000000);

131 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,0x00000000|
codeH
);

133 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

135 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0);

136 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,(1L << 16)|
codeL
);

137 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

139 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0x00000000);

140 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,
d©
);

141 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

143 
	}
}

145 
	$¢ps_dphy_ã_ªad
(
code
,*
d©
)

148 
codeH
 = (
code
 >> 8) &0x0F;

149 
codeL
 = 
code
 & 0xFF ;

150 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0);

151 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,0);

152 
	`udñay
(100 * 1000);

153 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,(1L << 16)|0x00000000);

154 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

156 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0x00000000);

158 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,0x00000000);

160 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,
codeH
);

162 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

164 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0);

165 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,(1L << 16)|
codeL
);

166 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,(1L << 1)|0x00000000);

168 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
,0x00000000);

169 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL1
,0x00000000);

171 *
d©
 = 
	`ªad_mªg32
(
R_CSI2_DPHY_TST_CTRL1
)>>8;

173 
	}
}

176 
	$°¨t_r°_dphy
()

179 
	`wrôe_mªg32
(
R_CSI2_DPHY_SHUTDOWNZ
 , 0x00000000);

180 
	`wrôe_mªg32
(
R_CSI2_DPHY_RSTZ
 , 0x00000000);

181 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
, 0x00000000);

182 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
, 0x00000001);

183 
	`wrôe_mªg32
(
R_CSI2_DPHY_TST_CTRL0
, 0x00000000);

185 
	}
}

187 
	$ch™ge‰eqønge
–
‰eq
 )

189 
hs‰eqønge
;

190 
osc_‰eq_èrgë
;

191 
i
;

193  
i
=0; i<63; i=i+1) {

194 i‡–
‰eq
 <
hs‰eqønges_ulim
[
i
])

198 
hs‰eqønge
 = 
hs‰eqønges
[
i
];

200 
	`wrôe_mªg32
(
ADDR_MIPI_PHY_CFGCLKFREQRANGE
,0x0000001c);

201 
	`wrôe_mªg32
(
ADDR_MIPI_PHY_HSFREQRANGE
 ,
hs‰eqønge
);

203 
hs‰eqønge
) {

204 0x00 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 0];  ;

205 0x10 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 1];  ;

206 0x20 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 2];  ;

207 0x30 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 3];  ;

208 0x01 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 4];  ;

209 0x11 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 5];  ;

210 0x21 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 6];  ;

211 0x31 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 7];  ;

212 0x02 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 8];  ;

213 0x12 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [ 9];  ;

214 0x22 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [10];  ;

215 0x32 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [11];  ;

216 0x03 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [12];  ;

217 0x13 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [13];  ;

218 0x23 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [14];  ;

219 0x33 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [15];  ;

220 0x04 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [16];  ;

221 0x14 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [17];  ;

222 0x25 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [18];  ;

223 0x35 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [19];  ;

224 0x05 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [20];  ;

225 0x16 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [21];  ;

226 0x26 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [22];  ;

227 0x37 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [23];  ;

228 0x07 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [24];  ;

229 0x18 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [25];  ;

230 0x28 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [26];  ;

231 0x39 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [27];  ;

232 0x09 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [28];  ;

233 0x19 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [29];  ;

234 0x29 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [30];  ;

235 0x3® : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [31];  ;

236 0x0® : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [32];  ;

237 0x1® : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [33];  ;

238 0x2® : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [34];  ;

239 0x3b : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [35];  ;

240 0x0b : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [36];  ;

241 0x1b : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [37];  ;

242 0x2b : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [38];  ;

243 0x3¯ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [39];  ;

244 0x0¯ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [40];  ;

245 0x1¯ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [41];  ;

246 0x2¯ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [42];  ;

247 0x3d : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [43];  ;

248 0x0d : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [44];  ;

249 0x1d : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [45];  ;

250 0x2ê : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [46];  ;

251 0x3ê : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [47];  ;

252 0x0ê : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [48];  ;

253 0x1ê : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [49];  ;

254 0x2‡ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [50];  ;

255 0x3‡ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [51];  ;

256 0x0‡ : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [52];  ;

257 0x40 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [53];  ;

258 0x41 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [54];  ;

259 0x42 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [55];  ;

260 0x43 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [56];  ;

261 0x44 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [57];  ;

262 0x45 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [58];  ;

263 0x46 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [59];  ;

264 0x47 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [60];  ;

265 0x48 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [61];  ;

266 0x49 : 
osc_‰eq_èrgë
 = 
tb_osc_‰eq_èrgë
 [62];  ;

269 
	`¢ps_dphy_ã_wrôe
(0xe2,()(
osc_‰eq_èrgë
&0xFF));

270 
	`¢ps_dphy_ã_wrôe
(0xe3,()(
osc_‰eq_èrgë
 >> 8));

272 
	`¢ps_dphy_ã_wrôe
(0xe4,0x11);

273 
	`¢ps_dphy_ã_wrôe
(0xe5,0x01);

277 
	}
}

279 
	$dphy_öô
(
‰eq
)

281 
vÆ
;

282 
	`¥ötf
("dphy_init ----1 \r\n");

283 
	`ch™ge‰eqønge
(
‰eq
);

284 
	`¥ötf
("dphy_init ----2 \r\n");

285 
	`¢ps_dphy_ã_wrôe
(0x08,0x38);

286 
	`¢ps_dphy_ã_ªad
(0x08,&
vÆ
);

287 
	`¥ötf
("dphy_öô 0x080x%x \r\n",
vÆ
&0xFF);

288 
	`wrôe_mªg32
(
R_CSI2_DPHY_SHUTDOWNZ
 ,0x00000001);

289 
	`wrôe_mªg32
(
R_CSI2_DPHY_RSTZ
,0x00000001);

292 
vÆ
 = 
	`ªad_mªg32
(
R_CSI2_DPHY_STOPSTATE
);

293 
	`¥ötf
("vÆ = 0x%x \r\n",
vÆ
);

294 }–
vÆ
 & 0x0001000f ) != 0x0001000f );

296 
	`udñay
(100*1000);

298 
	`¥ötf
("dphy_init ----4 \r\n");

299 
	}
}

301 
	$dphy_ˇl_check
(
‰eq
)

303 
ªs_îr‹
;

304 
√º‹s
;

305 
ã°dout
;

306 
ddl_ã°_œ√s
;

307 
off£t_ã°_œ√s
;

308 
skew_ã°_œ√s
;

310 
	`¥ötf
("[INFO] Preforming calibration check...\n");

311 
ªs_îr‹
 =0;

312 
√º‹s
 =0;

316 
	`¢ps_dphy_ã_ªad
(0x222,&
ã°dout
);

317 i‡––
ã°dout
 & 0x01 ) == 0x01 ) {

318 
ªs_îr‹
 = 1;

321 
ªs_îr‹
 = 0;

323 
	`¢ps_dphy_ã_ªad
(0x221,&
ã°dout
);

324 i‡–(
ã°dout
 & 0x80) == 0x00 ) {

325 
√º‹s
 =Çerrors + 1;

326 
	`¥ötf
("[ERROR] Resistor Calibration Failed\n");

329 i‡–
ªs_îr‹
 == 0 ) {

330 
	`¥ötf
("[INFO] Resistor Calibration PASS\n");

333 
	`¥ötf
("[ERROR] Resistor Calibration Failed\n");

338 
off£t_ã°_œ√s
 = 0x0;

339 
	`¢ps_dphy_ã_ªad
(0x039d,&
ã°dout
);

341 i‡–––
ã°dout
 & 0x01 ) == 0x01 ) & ( (Åestdout >>1 ) != 0x08 )) {

342 
off£t_ã°_œ√s
 = offset_test_lanes | 0x01;

345 
off£t_ã°_œ√s
 = offset_test_lanes & 0xfe;

349 
	`¢ps_dphy_ã_ªad
(0x059f,&
ã°dout
);

352 i‡–––
ã°dout
 & 0x02) == 0x02 ) & ( (Åestdout & 0x04 ) == 0x00 ) ) {

353 
off£t_ã°_œ√s
 = offset_test_lanes | 0x02;

356 
off£t_ã°_œ√s
 = offset_test_lanes & 0xfd;

360 
	`¢ps_dphy_ã_ªad
(0x079f,&
ã°dout
);

362 i‡–––
ã°dout
 & 0x02) == 0x02 ) & ( (Åestdout & 0x04 ) == 0x00 ) ) {

363 
off£t_ã°_œ√s
 = offset_test_lanes | 0x04;

366 
off£t_ã°_œ√s
 = offset_test_lanes & 0xfb;

370 
	`¢ps_dphy_ã_ªad
(0x099f,&
ã°dout
);

372 i‡–––
ã°dout
 & 0x02) == 0x02 ) & ( (Åestdout & 0x04 ) == 0x00 ) ) {

373 
off£t_ã°_œ√s
 = offset_test_lanes | 0x08;

376 
off£t_ã°_œ√s
 = offset_test_lanes & 0xf7;

380 
	`¢ps_dphy_ã_ªad
(0x0b9f,&
ã°dout
);

382 i‡–––
ã°dout
 & 0x02) == 0x02 ) & ( (Åestdout & 0x04 ) == 0x00 ) ) {

383 
off£t_ã°_œ√s
 = offset_test_lanes | 0x10;

386 
off£t_ã°_œ√s
 = offset_test_lanes & 0xef;

390 i‡–
off£t_ã°_œ√s
 == 0x00 ) {

391 
√º‹s
 =Çerrors +1;

392 
	`¥ötf
("[ERROR] Offset calibration machine FAILED\n");

395 
	`¥ötf
("[INFO] Offset calibration machine PASS\n");

400 
	`¢ps_dphy_ã_ªad
(0x05e0,&
ã°dout
);

402 
ddl_ã°_œ√s
 =0;

405 i‡––
ã°dout
 & 0x04 ) == 0x04 ) {

406 
ddl_ã°_œ√s
 = ddl_test_lanes | 0x01;

409 
ddl_ã°_œ√s
 = ddl_test_lanes & 0xfe;

413 
	`¢ps_dphy_ã_ªad
(0x07e0,&
ã°dout
);

415 i‡––
ã°dout
 & 0x04 ) == 0x04 ) {

416 
ddl_ã°_œ√s
 = ddl_test_lanes | 0x02;

419 
ddl_ã°_œ√s
 = ddl_test_lanes & 0xfd;

424 
	`¢ps_dphy_ã_ªad
(0x09e0,&
ã°dout
);

426 i‡––
ã°dout
 & 0x04 ) == 0x04 ) {

427 
ddl_ã°_œ√s
 = ddl_test_lanes | 0x04;

430 
ddl_ã°_œ√s
 = ddl_test_lanes & 0xfb;

435 
	`¢ps_dphy_ã_ªad
(0x0be0,&
ã°dout
);

437 i‡–(
ã°dout
 & 0x04) == 0x04 ) {

438 
ddl_ã°_œ√s
 = ddl_test_lanes | 0x08;

441 
ddl_ã°_œ√s
 = ddl_test_lanes & 0xf7;

444 i‡–
ddl_ã°_œ√s
 ==0 ) {

445 
√º‹s
 =Çerrors + 1;

446 
	`¥ötf
("[ERROR] DDL calibration machine FAILED\n");

449 
	`¥ötf
("[INFO] DDL calibration machine PASS\n");

453 if–
‰eq
 <= 1500 ) {

455 
	`¢ps_dphy_ã_ªad
(0x052f,&
ã°dout
);

456 
skew_ã°_œ√s
 = 0;

458 i‡––(
ã°dout
 & 0x08) == 0x08 ) & ( (Åestdout & 0x10 ) == 0x00 )) {

459 
skew_ã°_œ√s
 = skew_test_lanes | 0x01;

462 
skew_ã°_œ√s
 = skew_test_lanes & 0xfe;

465 
	`¢ps_dphy_ã_ªad
(0x072f,&
ã°dout
);

467 i‡––(
ã°dout
 & 0x08) == 0x08 ) & ( (Åestdout & 0x10 ) == 0x00 )) {

468 
skew_ã°_œ√s
 = skew_test_lanes | 0x02;

471 
skew_ã°_œ√s
 = skew_test_lanes & 0xfd;

476 
	`¢ps_dphy_ã_ªad
(0x092f,&
ã°dout
);

478 i‡––(
ã°dout
 & 0x08) == 0x08 ) & ( (Åestdout & 0x10 ) == 0x00 )) {

479 
skew_ã°_œ√s
 = skew_test_lanes | 0x04;

482 
skew_ã°_œ√s
 = skew_test_lanes & 0xfb;

487 
	`¢ps_dphy_ã_ªad
(0x0b2f,&
ã°dout
);

489 i‡––(
ã°dout
 & 0x08) == 0x08 ) & ( (Åestdout & 0x10 ) == 0x00 )) {

490 
skew_ã°_œ√s
 = skew_test_lanes | 0x08;

493 
skew_ã°_œ√s
 = skew_test_lanes & 0xf7;

496 i‡–
skew_ã°_œ√s
 ==0) {

497 
√º‹s
 =Çerrors + 1;

498 
	`¥ötf
("[ERR0R] SKEW calibration machine FAILED\n");

501 
	`¥ötf
("[INFO] SKEW calibration machine PASS\n");

507 
	`¥ötf
("[INFO] SKEW calibration machine PASS : bypassed for datarates higherÅhan 1500Mbps\n");

509 
	`¥ötf
("[INFO] calibration check completed\n");

511 
	}
}

513 
	$mùi_dphy_öôül
(
‰eq
)

515 
vÆ
;

516 
	`¥ötf
(" mùi_dphy_öôü» fªq = %d \r\¿",
‰eq
);

517 
	`°¨t_r°_dphy
();

518 #i‡
	`deföed
–
__OV5640_800MBPS__
)&& deföed(
__ISP_TEST__
)

519 
	`¢ps_dphy_ã_wrôe
(0xf1,0x90);

522 #i‡
	`deföed
–
__OV5640_800MBPS__
)&& deföed(
__MIPI_TEST__
)

523 
	`¢ps_dphy_ã_wrôe
(0xf1,0x88);

528 
	`dphy_öô
(
‰eq
);

530 
	`dphy_ˇl_check
(
‰eq
);

533 
	`¢ps_dphy_ã_ªad
(0x7a,&
vÆ
);

536 
	`¥ötf
(" 0x7® = 0x%x \r\n",
vÆ
);

537 
	}
}

	@drivers/mipi_subsys.c

1 
	~"mùi_subsys.h
"

2 
	~"misc.h
"

3 
	~"ötc.h
"

5 
	#MIPI_STOP_FRAME
 8

	)

7 
MIPI_PHY_Inôül
();

9 
TIMING_PARAMETER
 
	gimage_timög
[4] =

17 
TIMING_PARAMETER
 
	gimage_i•_timög
[4] =

25 
	$mùi_ho°_ª£t
()

27 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x0);

28 
	`wrôe_mªg32
(
MIPI_HOST_PHY_SHUTDOWNZ
, 0x0);

29 
	`wrôe_mªg32
(
MIPI_HOST_DPHY_RSTZ
, 0x0);

30 
	`udñay
(10 * 1000);

31 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x1);

32 
	`wrôe_mªg32
(
MIPI_HOST_PHY_SHUTDOWNZ
, 0x1);

33 
	`wrôe_mªg32
(
MIPI_HOST_DPHY_RSTZ
, 0x1);

34 
	`udñay
(10 * 1000);

35 
	}
}

37 
	$mùi_csi_ho°_cfg
(
MIPI_CFG
 *
mùi_subsys_cfg
) {

38 
tmp32
;

40 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x0);

41 
	`udñay
(10 * 1000);

42 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x1);

43 
	`udñay
(10 * 1000);

46 
	`wrôe_mªg32
(
MIPI_HOST_N_LANES
, 0x1);

48 if((
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV420_8B
Ë|| (mùi_subsys_cfg->image_f‹m© =
CSI_YUV420_8B_NV21
)||(mùi_subsys_cfg->image_f‹m© =
CSI_YUV422_8B
)) {

49 
tmp32

	`ªad_mªg32
(
MIPI_HOST_IPI_ADV_FEATURES
);

50 
	`wrôe_mªg32
(
MIPI_HOST_IPI_ADV_FEATURES
, 
tmp32
 | (1 << 24));

52 
	`wrôe_mªg32
(
MIPI_HOST_IPI_MODE
, 0x1010000 );

53 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VCID
, 0x0);

55 if((
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV420_8B
Ë|| (mùi_subsys_cfg->image_f‹m© =
CSI_YUV420_8B_NV21
))

56 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x1c);

57 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV422_8B
)

58 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x1e);

59 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB565
)

60 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x22);

61 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB555
)

62 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x21);

63 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB444
)

64 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x20);

65 
	`wrôe_mªg32
(
MIPI_HOST_IPI_MEM_FLUSH
, 0x101);

68 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HSA_TIME
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HSA
);

69 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HBP_TIME
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HBP
);

70 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HLINE_TIME
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HLINE
);

71 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HSD_TIME
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HSD
);

73 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VSA_LINES
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
VSA
);

74 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VBP_LINES
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
VBP
);

75 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VFP_LINES
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
VFP
);

76 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VACTIVE_LINES
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
VACTIVE
);

77 
	}
}

79 
	$mùi_csi_ho°_i•_cfg
(
MIPI_CFG
 *
mùi_subsys_cfg
) {

80 
tmp32
;

82 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x0);

83 
	`udñay
(10 * 1000);

84 
	`wrôe_mªg32
(
MIPI_HOST_CSI2_RESETN
, 0x1);

85 
	`udñay
(10 * 1000);

88 
	`wrôe_mªg32
(
MIPI_HOST_N_LANES
, 0x1);

90 
tmp32

	`ªad_mªg32
(
MIPI_HOST_IPI_ADV_FEATURES
);

91 
	`wrôe_mªg32
(
MIPI_HOST_IPI_ADV_FEATURES
, 
tmp32
 | (1 << 24));

93 
	`wrôe_mªg32
(
MIPI_HOST_IPI_MODE
, 0x1010100 );

94 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VCID
, 0x0);

97 
	`wrôe_mªg32
(
MIPI_HOST_IPI_DATA_TYPE
, 0x2B);

100 
	`wrôe_mªg32
(
MIPI_HOST_IPI_MEM_FLUSH
, 0x101);

103 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HSA_TIME
, 
image_i•_timög
[
IMAGE_720P
].
HSA
);

104 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HBP_TIME
, 
image_i•_timög
[
IMAGE_720P
].
HBP
);

105 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HLINE_TIME
, 
image_i•_timög
[
IMAGE_720P
].
HLINE
);

106 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HSD_TIME
, 
image_i•_timög
[
IMAGE_720P
].
HSD
);

108 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VSA_LINES
, 
image_i•_timög
[
IMAGE_720P
].
VSA
);

109 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VBP_LINES
, 
image_i•_timög
[
IMAGE_720P
].
VBP
);

110 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VFP_LINES
, 
image_i•_timög
[
IMAGE_720P
].
VFP
);

111 
	`wrôe_mªg32
(
MIPI_HOST_IPI_VACTIVE_LINES
, 
image_i•_timög
[
IMAGE_720P
].
VACTIVE
);

112 
	}
}

115 
	$mùi_ùi2axi_cfg
(
MIPI_CFG
 *
mùi_subsys_cfg
)

117 
uv_off£t
;

119 if((
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV420_8B
)

120 || (
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV420_8B_NV21
)

121 || (
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV422_8B
))

122 
uv_off£t
 = (
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
Ë* (image_timög[mùi_subsys_cfg->image_size].
VACTIVE
);

124 
uv_off£t
 = 2 * (
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
Ë* (image_timög[mùi_subsys_cfg->image_size].
VACTIVE
);

126 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_BADDR_Y
, 
mùi_subsys_cfg
->
y_addªss
);

127 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_BADDR_UV
, 
mùi_subsys_cfg
->
y_addªss
 + 
uv_off£t
);

128 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSIZE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 - 1);

129 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_VSIZE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
VACTIVE
 - 1);

131 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_BLENTH
, 0x3);

133 if((
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV420_8B
Ë|| (mùi_subsys_cfg->image_f‹m© =
CSI_YUV420_8B_NV21
))

135 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x711 | 
MIPI_IPI2AXI_YUV420
);

136 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 - 1);

138 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_YUV422_8B
)

140 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x711 | 
MIPI_IPI2AXI_YUV422
);

141 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 - 1);

143 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB565
)

145 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x711 | 
MIPI_IPI2AXI_RGB565
);

146 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 * 2 - 1);

148 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB555
)

150 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x711 | 
MIPI_IPI2AXI_RGB555_666
);

151 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 * 2 - 1);

153 if(
mùi_subsys_cfg
->
image_f‹m©
 =
CSI_RGB444
)

155 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x711 | 
MIPI_IPI2AXI_RGB444
);

156 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 
image_timög
[
mùi_subsys_cfg
->
image_size
].
HACTIVE
 * 2 - 1);

159 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IRQ_CLR
, 0x7);

160 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IRQ_EN
, 0x7);

161 
	}
}

163 vﬁ©ûê
	gmùi_‰ame_cou¡
;

164 
	$CK_Mùi_I¡c_H™dÀr
() {

165 
u32
 
vÆ
;

167 
vÆ
 = 
	`ªad_mªg32
(
MIPI_IPI2AXI_IRQ_STATUS
);

168 if(
vÆ
 & 
FS_IRQ_STATUS
) {

169 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IRQ_CLR
, 
vÆ
);

170 
mùi_‰ame_cou¡
++;

173 i‡(
mùi_‰ame_cou¡
 =
MIPI_STOP_FRAME
) {

174 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSIZE
, 0);

175 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_VSIZE
, 0);

176 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
, 0);

180 i‡(
mùi_‰ame_cou¡
 > 
MIPI_STOP_FRAME
) {

181 
	`wrôe_mªg32
(
MIPI_IPI2AXI_MIPI_DMA_CTL
, 0x0);

182 
	`wrôe_mªg32
(
MIPI_IPI2AXI_IRQ_EN
, 0);

185 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏°©us=0x%x, mùi_‰ame_cou¡=%d\n",
vÆ
, 
mùi_‰ame_cou¡
 - 1);

186 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_MAIN=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_MAIN
));

187 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PKT_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PKT_FATAL
));

188 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_FRAME_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_FRAME_FATAL
));

189 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_IPI=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_IPI
));

190 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY
));

191 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY_FATAL
));

194 
	}
}

196 
CKSåu˘_IRQH™dÀr
 
	gmùi_úq_öfo
 = {

197 .
dev«me
 = "MIPI",

198 .
	gúqid
 = 
CK_INTC_MIPI
,

199 .
	g¥i‹ôy
 = 
CK_INTC_MIPI
,

200 .
	gh™dÀr
 = 
CK_Mùi_I¡c_H™dÀr
,

201 .
	gbÁ°
 = 
FALSE
,

202 .
	g√xt
 = 
NULL


206 
	$yuv422_image_å™s„r
(
image_size
)

208 
h_size
;

209 
v_size
;

210 
y_addr
;

211 
uv_addr
;

212 
des_addr
;

213 
i
, 
tmp1
, 
tmp2
, 
tmp3
, 
tmp4
;

215 
	`¥ötf
("YUV422SP -> UYVY\n");

216 
h_size
 = 
image_timög
[
image_size
].
HACTIVE
;

217 
v_size
 = 
image_timög
[
image_size
].
VACTIVE
;

218 
	`mem˝y
(0x12000000, 
MIPI_Y_BASEADDR
, 
h_size
 * 
v_size
 * 2);

219 
y_addr
 = 0x12000000;

220 
uv_addr
 = 
y_addr
 + 
h_size
 * 
v_size
;

221 
des_addr
 = 
MIPI_Y_BASEADDR
;

223 
i
 = 0; i < 
v_size
 * 
h_size
 / 4; i++) {

224 
tmp1
 = 
	`ªad_mªg32
(
y_addr
);

225 
tmp2
 = 
	`ªad_mªg32
(
uv_addr
);

227 
tmp3
 = ((
tmp1
 & 0xff) << 8) | ((tmp1 & 0xff00) << 16)

228 | (
tmp2
 & 0xff) | ((tmp2 & 0xff00) << 8);

229 
tmp4
 = ((
tmp1
 & 0xff0000) >> 8) | (tmp1 & 0xff000000)

230 | ((
tmp2
 & 0xff0000) >> 16) | ((tmp2 & 0xff000000) >> 8);

231 
	`wrôe_mªg32
(
des_addr
, 
tmp3
);

232 
	`wrôe_mªg32
(
des_addr
 + 0x4, 
tmp4
);

233 
y_addr
 += 4;

234 
uv_addr
 += 4;

235 
des_addr
 += 8;

237 
	}
}

240 
	$rgb_image_å™s„r
(
image_size
)

242 
h_size
;

243 
v_size
;

244 
§c_addr
;

245 
des_addr
;

246 
i
, 
tmp1
, 
tmp2
;

247 
r
, 
g
, 
b
;

249 
	`¥ötf
("BGR565 -> RGB565\n");

250 
h_size
 = 
image_timög
[
image_size
].
HACTIVE
;

251 
v_size
 = 
image_timög
[
image_size
].
VACTIVE
;

252 
	`mem˝y
(0x12000000, 
MIPI_Y_BASEADDR
, 
h_size
 * 
v_size
 * 2);

253 
§c_addr
 = 0x12000000;

254 
des_addr
 = 
MIPI_Y_BASEADDR
;

256 
i
 = 0; i < 
v_size
 * 
h_size
 / 2; i++)

258 
tmp1
 = 
	`ªad_mªg32
(
§c_addr
);

259 
r
 = 
tmp1
 & 0x1f;

260 
g
 = (
tmp1
 & 0x7e0) >> 5;

261 
b
 = (
tmp1
 & 0xf800) >> 11;

262 
tmp2
 = (
r
 << 11Ë| (
g
 << 5Ë| 
b
;

263 
r
 = 
tmp1
 & 0x1f0000;

264 
g
 =(
tmp1
 & 0x7e00000) >> 5;

265 
b
 = (
tmp1
 & 0xf8000000) >> 11;

266 
tmp2
 |(
r
 << 11Ë| (
g
 << 5Ë| 
b
;

267 
	`wrôe_mªg32
(
des_addr
, 
tmp2
);

268 
§c_addr
 += 4;

269 
des_addr
 += 4;

271 
	}
}

274 
	$mùi_i•_ã°
(
MIPI_CFG
 *
mùi_subsys_öfo
)

276 
ªt
;

278 
mùi_‰ame_cou¡
 = 0;

280 
	`CK_INTC_Reque°Irq
(&
mùi_úq_öfo
, 
AUTO_MODE
);

282 
	`I•_func_WDR2_On
();

284 
	`mùi_csi_ho°_i•_cfg
(
mùi_subsys_öfo
);

285 
	`MIPI_PHY_Inôül
();

289 
ªt
 = 
	`mov5640_i•_öô
(
mùi_subsys_öfo
->
image_size
, mùi_subsys_öfo->
image_f‹m©
);

290 i‡(
ªt
) {

293 
	`MOV5640_MIPI_°ªam_⁄
();

298 #ifde‡
MIPI_ISP_CH1


299 
	`¥ötf
("mipi_test isp1 \r\n");

300 
	`¥ötf
("mùi_ã° 0x1500 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x1500));

301 
	`¥ötf
("mùi_ã° 0x14f¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x14fc));

302 
	`¥ötf
("mùi_ã° 0x150¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x150c));

303 
	`¥ötf
("mùi_ã° 0x5b¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5bc));

304 
	`¥ötf
("mùi_ã° 0x5c0 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5c0));

305 
	`¥ötf
("mùi_ã° 0x5c4 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5c4));

306 
	`¥ötf
("mùi_ã° 0x63¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x63c));

307 
	`¥ötf
("mùi_ã° 0x5a8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5a8));

308 
	`¥ötf
("mùi_ã° 0x404 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x404));

309 
	`¥ötf
("mùi_ã° 0x400+0x1A8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5A8));

310 
	`¥ötf
("mùi_ã° 0x400+0x1AC = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5AC));

311 
	`¥ötf
("mùi_ã° 0x400+0x1B8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5B8));

312 
	`¥ötf
("mùi_ã° 0x400+0x1C0 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5C0));

313 
	`¥ötf
("mùi_ã° 0x400+0x1B4 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x5B4));

315 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_MAIN=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_MAIN
));

316 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PKT_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PKT_FATAL
));

317 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_FRAME_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_FRAME_FATAL
));

318 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_IPI=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_IPI
));

319 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY
));

320 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY_FATAL
));

323 
	`¥ötf
("mipi_test isp0 \r\n");

324 
	`¥ötf
("mùi_ã° 0x1500 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x1500));

325 
	`¥ötf
("mùi_ã° 0x14f¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x14fc));

326 
	`¥ötf
("mùi_ã° 0x150¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x150c));

327 
	`¥ötf
("mùi_ã° 0x5b¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5bc));

328 
	`¥ötf
("mùi_ã° 0x5c0 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5c0));

329 
	`¥ötf
("mùi_ã° 0x5c4 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5c4));

330 
	`¥ötf
("mùi_ã° 0x63¯0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x63c));

331 
	`¥ötf
("mùi_ã° 0x5a8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5a8));

332 
	`¥ötf
("mùi_ã° 0x404 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x404));

334 
	`¥ötf
("mùi_ã° 0x400+0x1A8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5A8));

335 
	`¥ötf
("mùi_ã° 0x400+0x1AC = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5AC));

336 
	`¥ötf
("mùi_ã° 0x400+0x1B8 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5B8));

337 
	`¥ötf
("mùi_ã° 0x400+0x1C0 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5C0));

338 
	`¥ötf
("mùi_ã° 0x400+0x1B4 = 0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x5B4));

339 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_MAIN=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_MAIN
));

340 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PKT_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PKT_FATAL
));

341 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_FRAME_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_FRAME_FATAL
));

342 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_IPI=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_IPI
));

343 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY
));

344 
	`¥ötf
("CK_Mùi_I¡c_H™dÀ∏MIPI_HOST_INT_ST_PHY_FATAL=0x%x\r\n",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PHY_FATAL
));

347 
i
 = 0 ;i < 8;i++)

350 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

351 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_CB_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_CB_BASEADDR+4*i));

352 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_CR_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_CR_BASEADDR+4*i));

354 #ifde‡
MIPI_ISP_CH1


355 i‡(
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x1500)&0x03) {

360 i‡(
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x1500)&0x03) {

366 #ifde‡
MIPI_ISP_CH1


367 
	`¥ötf
("mùi_ã° i•1 sètu†0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP1_Sœve
+0x1500));

369 
	`¥ötf
("mùi_ã° i•0 sètu†0x%x \r\¿",
	`ªad_mªg32
(
CK_ISP0_Sœve
+0x1500));

373 
	`¥ötf
("mùi_ã° mùi_‰ame_cou¡ = %d \r\¿",
mùi_‰ame_cou¡
);

375 i‡(
mùi_‰ame_cou¡
 > 
MIPI_STOP_FRAME
) {

383 
	`¥ötf
(" MIPI_HOST_INT_ST_PKT = 0x%x \r\¿",
	`ªad_mªg32
(
MIPI_HOST_INT_ST_PKT
));

384 
	`¥ötf
("mùi_ã° mùi_‰ame_cou¡ = %d \r\¿",
mùi_‰ame_cou¡
);

387 
	`CK_INTC_FªeIrq
(&
mùi_úq_öfo
, 
AUTO_MODE
);

389 
	}
}

390 
	$mùi_ã°
(
MIPI_CFG
 *
mùi_subsys_öfo
)

392 
ªt
;

394 
mùi_‰ame_cou¡
 = 0;

396 
	`CK_INTC_Reque°Irq
(&
mùi_úq_öfo
, 
AUTO_MODE
);

398 
	`mùi_csi_ho°_cfg
(
mùi_subsys_öfo
);

399 
	`mùi_ùi2axi_cfg
(
mùi_subsys_öfo
);

400 
	`MIPI_PHY_Inôül
();

401 
ªt
 = 
	`mov5640_öô
(
mùi_subsys_öfo
->
image_size
, mùi_subsys_öfo->
image_f‹m©
);

402 i‡(
ªt
) {

405 
	`MOV5640_MIPI_°ªam_⁄
();

407 
	`¥ötf
("mùi_ã° mùi_‰ame_cou¡ = %d \r\¿",
mùi_‰ame_cou¡
);

409 i‡(
mùi_‰ame_cou¡
 > 
MIPI_STOP_FRAME
) {

413 
	`¥ötf
("mùi_ã° mùi_‰ame_cou¡ = %d \r\¿",
mùi_‰ame_cou¡
);

414 i‡(
mùi_subsys_öfo
->
image_f‹m©
 =
CSI_YUV422_8B
)

415 
	`yuv422_image_å™s„r
(
mùi_subsys_öfo
->
image_size
);

417 i‡(
mùi_subsys_öfo
->
image_f‹m©
 =
CSI_RGB565
)

418 
	`rgb_image_å™s„r
(
mùi_subsys_öfo
->
image_size
);

421 
	`CK_INTC_FªeIrq
(&
mùi_úq_öfo
, 
AUTO_MODE
);

424 
	}
}

434 
	$mùi_ª£t_ã°
() {

435 
ª£t_ªg_vÆ
, 
def_vÆ
, 
rd_vÆ
, 
wr_vÆ
;

440 
def_vÆ
 = 
	`ªad_mªg32
(
MIPI_HOST_IPI_HSA_TIME
);

441 
	`¥ötf
("ªad MIPI_HOST_IPI_HSA_TIME=0x%x\n", 
def_vÆ
);

442 
wr_vÆ
 = 0x5a5;

443 
	`wrôe_mªg32
(
MIPI_HOST_IPI_HSA_TIME
, 
wr_vÆ
);

444 
rd_vÆ
 = 
	`ªad_mªg32
(
MIPI_HOST_IPI_HSA_TIME
);

445 
	`¥ötf
("ªad MIPI_HOST_IPI_HSA_TIME=0x%x\n", 
rd_vÆ
);

446 i‡(
rd_vÆ
 =
wr_vÆ
) {

447 
	`¥ötf
 ("MIPI CSI hostÑeg writeÅest\t - - -PASS\n");

449 
	`¥ötf
 ("MIPI CSI hostÑeg writeÅest\t - - -FAILURE\n");

451 
	`¥ötf
 ("\n\n");

452 
	}
}

454 
	$ISP_ã°
()

456 
MIPI_CFG
 
mùi_subsys_öfo
;

457 
ch
;

458 
ªt
;

459 
i
 ;

460 
dïth
, 
size
;

462 
	`mùi_ª£t_ã°
();

464 
i
 = 0 ;i < 1024;i++) {

465 
	`wrôe_mªg32
(
MIPI_Y_BASEADDR
+4*
i
,0xFFFFFFFF) ;

466 
	`wrôe_mªg32
(
MIPI_CB_BASEADDR
+4*
i
,0xFFFFFFFF) ;

467 
	`wrôe_mªg32
(
MIPI_CR_BASEADDR
+4*
i
,0xFFFFFFFF) ;

483 
ªt
 = 
	`mùi_i•_ã°
(&
mùi_subsys_öfo
);

484 i‡(
ªt
) {

485 
	`¥ötf
 ("\t - - -FAILURE\n");

488 
	`¥ötf
 ("\t - - -PASS\n");

496 
	}
}

499 
	$CK_MIPI_Te°
() {

500 
MIPI_CFG
 
mùi_subsys_öfo
;

501 
ch
;

502 
ªt
;

503 
i
 ;

504 
dïth
, 
size
;

506 
	`mùi_ª£t_ã°
();

507 
i
 = 0 ;i < 4; i++) {

508 
	`wrôe_mªg32
(
MIPI_Y_BASEADDR
+4*
i
,0xFFFFFFFF) ;

509 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

513 
	`¥ötf
("\nplease select image format:\n");

514 
	`¥ötf
("1 -- CSI_YUV420_8B_NV12\n");

515 
	`¥ötf
("2 -- CSI_YUV420_8B_NV21\n");

516 
	`¥ötf
("3 -- CSI_YUV422_8B_UYVY\n");

517 
	`¥ötf
("4 -- CSI_RGB565\n");

518 
	`¥ötf
("5 -- CSI_RGB444\n");

519 
	`¥ötf
("6 -- CSI_RGB555\n");

520 
	`¥ötf
(">");

521 
ch
 = 
	`gëch¨
();

522 
	`putch¨
(
ch
);

523 i‡(
ch
 >= '1' && ch <= '6') {

527 
	`¥ötf
 ("\n");

528 
ch
) {

530 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_YUV420_8B
;

531 
dïth
 = 12;

534 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_YUV420_8B_NV21
;

535 
dïth
 = 12;

538 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_YUV422_8B
;

539 
dïth
 = 16;

542 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_RGB565
;

543 
dïth
 = 16;

546 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_RGB444
;

547 
dïth
 = 16;

550 
mùi_subsys_öfo
.
image_f‹m©
 = 
CSI_RGB555
;

551 
dïth
 = 16;

556 
	`¥ötf
("\nplease select image size:\n");

557 
	`¥ötf
("1 -- IMAGE_VGA\n");

558 
	`¥ötf
("2 -- IMAGE_720P\n");

559 
	`¥ötf
("3 -- IMAGE_1080P\n");

560 
	`¥ötf
(">");

561 
ch
 = 
	`gëch¨
();

562 
	`putch¨
(
ch
);

563 i‡(
ch
 >= '1' && ch <= '3') {

567 
	`¥ötf
 ("\n");

568 
ch
) {

570 
mùi_subsys_öfo
.
image_size
 = 
IMAGE_VGA
;

571 
size
 = 640 * 480 * 
dïth
 / 8;

574 
mùi_subsys_öfo
.
image_size
 = 
IMAGE_720P
;

575 
size
 = 1280 * 720 * 
dïth
 / 8;

578 
mùi_subsys_öfo
.
image_size
 = 
IMAGE_1080P
;

579 
size
 = 1920 * 1080 * 
dïth
 / 8;

583 
mùi_subsys_öfo
.
y_addªss
 = 
MIPI_Y_BASEADDR
;

584 
ªt
 = 
	`mùi_ã°
(&
mùi_subsys_öfo
);

585 i‡(
ªt
) {

586 
	`¥ötf
 ("\t - - -FAILURE\n");

589 
	`¥ötf
 ("\t - - -PASS\n");

594 
	`¥ötf
("Capture image done\n");

595 
	`¥ötf
("Please use below command in GDBÅo dump image:\n");

596 
	`¥ötf
("\tdum∞bö¨y mem‹y ./image.yuv 0x20000000 0x%x\n", 0x20000000 + 
size
);

597 
i
 = 0 ;i < 4;i++)

598 
	`¥ötf
("MIPI_Y_BASEADDR(0x%xË0x%x \r\n",
MIPI_Y_BASEADDR
+4*
i
,
	`ªad_mªg32
(MIPI_Y_BASEADDR+4*i));

599 
	}
}

	@drivers/mipi_subsys.h

1 
	~"ck810.h
"

2 
	~"d©©y≥.h
"

3 
	~"OV_5640.h
"

4 
	~"i•.h
"

6 
	#MIPI_SYS_BASE_ADDR
 
CK_MIPI_Sœve


	)

7 
	#MIPI_ISP_CH1


	)

11 
	#MIPI_DPHY_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x800

	)

14 #ifde‡
MIPI_ISP_CH1


15 
	#MIPI_HOST_CTRL_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1800

	)

16 
	#MIPI_IPI2AXI_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1c00

	)

19 #ifde‡
__TEST_ISP1__


20 
	#MIPI_HOST_CTRL_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1800

	)

21 
	#MIPI_IPI2AXI_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1c00

	)

24 
	#MIPI_HOST_CTRL_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1000

25 
	#MIPI_IPI2AXI_BASE
 
MIPI_SYS_BASE_ADDR
 + 0x1400

27 

	)

32 
	#MIPI_PHY_CIL_APBWR_CTRL
 
MIPI_DPHY_BASE


	)

33 
	#MIPI_PHY_CNT_HSCK_SETTLE
 
MIPI_DPHY_BASE
+4*0xe

	)

34 
	#MIPI_PHY_CNT_HSD_SETTLE
 
MIPI_DPHY_BASE
+4*0x14

	)

39 
	#MIPI_HOST_VERSION
 
MIPI_HOST_CTRL_BASE
 + 0x0

	)

40 
	#MIPI_HOST_N_LANES
 
MIPI_HOST_CTRL_BASE
 + 0x4

	)

41 
	#MIPI_HOST_CSI2_RESETN
 
MIPI_HOST_CTRL_BASE
 + 0x8

	)

42 
	#MIPI_HOST_INT_ST_MAIN
 
MIPI_HOST_CTRL_BASE
 + 0xc

	)

43 
	#MIPI_HOST_DATA_IDS_1
 
MIPI_HOST_CTRL_BASE
 + 0x10

	)

44 
	#MIPI_HOST_DATA_IDS_2
 
MIPI_HOST_CTRL_BASE
 + 0x14

	)

45 
	#MIPI_HOST_PHY_SHUTDOWNZ
 
MIPI_HOST_CTRL_BASE
 + 0x40

	)

46 
	#MIPI_HOST_DPHY_RSTZ
 
MIPI_HOST_CTRL_BASE
 + 0x44

	)

47 
	#MIPI_HOST_PHY_RX
 
MIPI_HOST_CTRL_BASE
 + 0x48

	)

48 
	#MIPI_HOST_PHY_STOPSTATE
 
MIPI_HOST_CTRL_BASE
 + 0x4c

	)

49 
	#MIPI_HOST_PHY_TEST_CTRL0
 
MIPI_HOST_CTRL_BASE
 + 0x50

	)

50 
	#MIPI_HOST_PHY_TEST_CTRL1
 
MIPI_HOST_CTRL_BASE
 + 0x54

	)

51 
	#MIPI_HOST_PHY2_TEST_CTRL0
 
MIPI_HOST_CTRL_BASE
 + 0x58

	)

52 
	#MIPI_HOST_PHY2_TEST_CTRL1
 
MIPI_HOST_CTRL_BASE
 + 0x5c

	)

53 
	#MIPI_HOST_IPI_MODE
 
MIPI_HOST_CTRL_BASE
 + 0x80

	)

54 
	#MIPI_HOST_IPI_VCID
 
MIPI_HOST_CTRL_BASE
 + 0x84

	)

55 
	#MIPI_HOST_IPI_DATA_TYPE
 
MIPI_HOST_CTRL_BASE
 + 0x88

	)

56 
	#MIPI_HOST_IPI_MEM_FLUSH
 
MIPI_HOST_CTRL_BASE
 + 0x8c

	)

57 
	#MIPI_HOST_IPI_HSA_TIME
 
MIPI_HOST_CTRL_BASE
 + 0x90

	)

58 
	#MIPI_HOST_IPI_HBP_TIME
 
MIPI_HOST_CTRL_BASE
 + 0x94

	)

59 
	#MIPI_HOST_IPI_HSD_TIME
 
MIPI_HOST_CTRL_BASE
 + 0x98

	)

60 
	#MIPI_HOST_IPI_HLINE_TIME
 
MIPI_HOST_CTRL_BASE
 + 0x9c

	)

61 
	#MIPI_HOST_IPI_SOFTRSTN
 
MIPI_HOST_CTRL_BASE
 + 0xa0

	)

62 
	#MIPI_HOST_IPI_ADV_FEATURES
 
MIPI_HOST_CTRL_BASE
 + 0xac

	)

63 
	#MIPI_HOST_IPI_VSA_LINES
 
MIPI_HOST_CTRL_BASE
 + 0xb0

	)

64 
	#MIPI_HOST_IPI_VBP_LINES
 
MIPI_HOST_CTRL_BASE
 + 0xb4

	)

65 
	#MIPI_HOST_IPI_VFP_LINES
 
MIPI_HOST_CTRL_BASE
 + 0xb8

	)

66 
	#MIPI_HOST_IPI_VACTIVE_LINES
 
MIPI_HOST_CTRL_BASE
 + 0xbc

	)

67 
	#MIPI_HOST_PHY_CAL
 
MIPI_HOST_CTRL_BASE
 + 0xcc

	)

68 
	#MIPI_HOST_INT_ST_PHY_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xe0

	)

69 
	#MIPI_HOST_INT_MSK_PHY_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xe4

	)

70 
	#MIPI_HOST_INT_FORCE_PHY_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xe8

	)

71 
	#MIPI_HOST_INT_ST_PKT_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xf0

	)

72 
	#MIPI_HOST_INT_MSK_PKT_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xf4

	)

73 
	#MIPI_HOST_INT_FORCE_PKT_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0xf8

	)

74 
	#MIPI_HOST_INT_ST_FRAME_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0x100

	)

75 
	#MIPI_HOST_INT_MSK_FRAME_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0x104

	)

76 
	#MIPI_HOST_INT_FORCE_FRAME_FATAL
 
MIPI_HOST_CTRL_BASE
 + 0x108

	)

77 
	#MIPI_HOST_INT_ST_PHY
 
MIPI_HOST_CTRL_BASE
 + 0x110

	)

78 
	#MIPI_HOST_INT_MSK_PHY
 
MIPI_HOST_CTRL_BASE
 + 0x114

	)

79 
	#MIPI_HOST_INT_FORCE_PHY
 
MIPI_HOST_CTRL_BASE
 + 0x118

	)

80 
	#MIPI_HOST_INT_ST_PKT
 
MIPI_HOST_CTRL_BASE
 + 0x120

	)

81 
	#MIPI_HOST_INT_MSK_PKT
 
MIPI_HOST_CTRL_BASE
 + 0x124

	)

82 
	#MIPI_HOST_INT_FORCE_PKT
 
MIPI_HOST_CTRL_BASE
 + 0x128

	)

83 
	#MIPI_HOST_INT_ST_LINE
 
MIPI_HOST_CTRL_BASE
 + 0x130

	)

84 
	#MIPI_HOST_INT_MSK_LINE
 
MIPI_HOST_CTRL_BASE
 + 0x134

	)

85 
	#MIPI_HOST_INT_FORCE_LINE
 
MIPI_HOST_CTRL_BASE
 + 0x138

	)

86 
	#MIPI_HOST_INT_ST_IPI
 
MIPI_HOST_CTRL_BASE
 + 0x140

	)

87 
	#MIPI_HOST_INT_MSK_IPI
 
MIPI_HOST_CTRL_BASE
 + 0x144

	)

88 
	#MIPI_HOST_INT_FORCE_IPI
 
MIPI_HOST_CTRL_BASE
 + 0x148

	)

91 
	#MIPI_IPI2AXI_MIPI_DMA_CTL
 
MIPI_IPI2AXI_BASE
 + 0x0

	)

92 
	#MIPI_IPI2AXI_IMG_OUT_BADDR_Y
 
MIPI_IPI2AXI_BASE
 + 0x4

	)

93 
	#MIPI_IPI2AXI_IMG_OUT_BADDR_UV
 
MIPI_IPI2AXI_BASE
 + 0x8

	)

94 
	#MIPI_IPI2AXI_IMG_OUT_PIX_HSIZE
 
MIPI_IPI2AXI_BASE
 + 0xC

	)

95 
	#MIPI_IPI2AXI_IMG_OUT_PIX_VSIZE
 
MIPI_IPI2AXI_BASE
 + 0x10

	)

96 
	#MIPI_IPI2AXI_IMG_OUT_PIX_HSTRIDE
 
MIPI_IPI2AXI_BASE
 + 0x14

	)

97 
	#MIPI_IPI2AXI_IMG_OUT_BLENTH
 
MIPI_IPI2AXI_BASE
 + 0x18

	)

98 
	#MIPI_IPI2AXI_IRQ_EN
 
MIPI_IPI2AXI_BASE
 + 0x1C

	)

99 
	#MIPI_IPI2AXI_IRQ_CLR
 
MIPI_IPI2AXI_BASE
 + 0x20

	)

100 
	#MIPI_IPI2AXI_IRQ_STATUS
 
MIPI_IPI2AXI_BASE
 + 0x24

	)

102 
	#MIPI_IPI2AXI_DMA_EN
 (1 << 0)

	)

103 
	#MIPI_IPI2AXI_DMA_DIS
 (0 << 0)

	)

104 
	#MIPI_IPI2AXI_YUV420
 (0 << 1)

	)

105 
	#MIPI_IPI2AXI_YUV422
 (1 << 1)

	)

106 
	#MIPI_IPI2AXI_RGB444
 (4 << 1)

	)

107 
	#MIPI_IPI2AXI_RGB555_666
 (5 << 1)

	)

108 
	#MIPI_IPI2AXI_RGB565
 (6 << 1)

	)

109 
	#MIPI_IPI2AXI_RGB888
 (7 << 1)

	)

110 
	#MIPI_IPI2AXI_OUTSTAND
(
x
Ë((x - 1Ë<< 8)

	)

112 
	#FS_IRQ_STATUS
 (1 << 0)

	)

113 
	#DMA_DONE_IRQ_STATUS
 (1 << 1)

	)

115 
	#MIPI_Y_BASEADDR
 0x20000000

	)

116 
	#MIPI_Y1_BASEADDR
 0x40000000

	)

117 
	#MIPI_UV_BASEADDR
 0x30000000

	)

118 
	#MIPI_CB_BASEADDR
 0x21000000

	)

119 
	#MIPI_CR_BASEADDR
 0x22000000

	)

121 
	sMIPI_CFG


123 
	mimage_f‹m©
;

124 
	mimage_size
;

125 
	my_addªss
;

126 } 
	tMIPI_CFG
;

128 
	sTIMING_PARAMETER


130 
	mHSA
;

131 
	mHBP
;

132 
	mHSD
;

133 
	mHACTIVE
;

134 
	mHLINE
;

135 
	mVSA
;

136 
	mVBP
;

137 
	mVFP
;

138 
	mVACTIVE
;

139 } 
	tTIMING_PARAMETER
;

	@drivers/nand.c

10 
	~"d©©y≥.h
"

11 
	~"«nd.h
"

12 
	~<°rög.h
>

14 #ifde‡
NAND_DB


15 
	#«nd_debug
(
f‹m©
, ...Ë
	`¥ötf
(f‹m©,##
__VA_ARGS__
)

	)

17 
	#«nd_debug
(
f‹m©
, ...Ëdÿ{} 0)

	)

19 
	#CONFIG_NAND_EN_WRITE
 0

	)

20 c⁄° 
«nd_Êash_öfo
 
	gÊash_öfo_èbÀ
[] = {

21 {"K9F4G08U0E", 0xec, 0xdc109554, 
SZ_2K
, 64},

22 {"K9F4G08U0E", 0xec, 0xdc109555, 
SZ_2K
, 64},

23 {"K9K8G08U0E", 0xec, 0xd3519559, 
SZ_2K
, 64},

24 {"MT29F16G08M", 0x2c, 0xd5943e74, 
SZ_4K
, 218},

25 {"MT29F64G08C", 0x2c, 0x88044ba9, 
SZ_4K
, 218},

30 
	#«nd_wrôñ
(
nfc
, 
off
, 
vÆ
Ë\

	)

31 
wrôe_mªg32
((
nfc
)->
ba£
 + (
off
), (
vÆ
))

33 
	#«nd_ªadl
(
nfc
, 
off
Ë\

	)

34 
ªad_mªg32
((
nfc
)->
ba£
 + (
off
))

44 
u8
 
	$«nd_ªad_°©us
(
«nd_Êash
 *
nfc
)

46 
u8
 
ªg8_vÆ
;

48 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_STATUS
);

50 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

52 
ªg8_vÆ
 = 0x02;

53 
	`«nd_wrôñ
(
nfc
, 
NAND_FSPEC
, 
ªg8_vÆ
);

57 i‡(!((
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_FSPEC
Ë& 
FSPEC_RDSTAT_TRIG
))

60 
ªg8_vÆ
 = (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_FSTAT
);

62 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

64  
ªg8_vÆ
;

65 
	}
}

71 
	$«nd_waô
(
«nd_Êash
 *
nfc
, 
u32
 
ªg
, u32 
bô_mask
, 
BIT_SET
 
bô£t
)

73 
dñay_numbî
 = 100000;

74 if(
SET_BIT
 =
bô£t
)

76 
dñay_numbî
 > 0)

78 i‡(
	`«nd_ªadl
(
nfc
, 
ªg
Ë& 
bô_mask
)

82 
	`udñay
(1);

83 
dñay_numbî
--;

88 
dñay_numbî
 > 0)

90 i‡(!(
	`«nd_ªadl
(
nfc
, 
ªg
Ë& 
bô_mask
))

94 
	`udñay
(1);

95 
dñay_numbî
--;

98 
	`«nd_debug
("vsònf¯waôÅimî out!Ñeg :%x mask:%x bô£t: %d /n", 
ªg
, 
bô_mask
, 
bô£t
);

100 
	}
}

104 
	$«nd_ªad_id
(
«nd_Êash
 *
nfc
, 
u8
 *
m_id
, 
u32
 *
d_id
)

106 
u32
 
id
;

108 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_READ_ID
);

110 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0x00);

112 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

114 
	`«nd_wrôñ
(
nfc
, 
NAND_FSPEC
, 
FSPEC_RDID_TRIG
);

116 
	`«nd_waô
(
nfc
, 
NAND_FSPEC
, 
FSPEC_RDID_TRIG
, 
UNSET_BIT
);

117 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

119 *
m_id
 = (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_FMAK
);

121 
id
 = (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_FDEV
);

122 
id
 = (id << 8Ë| (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_Fœsh_ID3
);

123 
id
 = (id << 8Ë| (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_Fœsh_ID4
);

124 *
d_id
 = (
id
 << 8Ë| (
u8
)
	`«nd_ªadl
(
nfc
, 
NAND_Fœsh_ID5
);

126 
	}
}

128 
	$«nd_idít
(
«nd_Êash
 *
nfc
)

130 c⁄° 
«nd_Êash_öfo
 *
ty≥
 = 
Êash_öfo_èbÀ
;

132 
	`«nd_ªad_id
(
nfc
, &nfc->
öfo
.
M_ID
, &nfc->öfo.
D_ID
);

133  ; 
ty≥
->
«me
 !
NULL
;Åype ++)

135 i‡((
ty≥
->
M_ID
 =
nfc
->
öfo
.M_IDË&& (ty≥->
D_ID
 ==Çfc->info.D_ID))

137 
	`mem˝y
(&
nfc
->
öfo
, 
ty≥
, (
«nd_Êash_öfo
));

138 
	`«nd_debug
("identÇand flash: %sÖage_size: %d + %doob \n", \

139 
nfc
->
öfo
.
«me
,Çfc->öfo.
∑ge_size
,Çfc->öfo.
oob_size
 );

144 
	`«nd_debug
("NAND: Unsuµ‹ãd fœsh: M_ID 0x%x D_ID 0x%x\n", 
nfc
->
öfo
.
M_ID
,Çfc->öfo.
D_ID
);

148 
	}
}

152 
	$«nd_ª£t
(
«nd_Êash
 *
nfc
)

154 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

155 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

156 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_RESET
);

157 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

158 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_SINGLETRIG_ST
|
FCMDCTL_NORMALTRIG_ST
);

159 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

161 
	`«nd_waô
(
nfc
, 
NAND_INT_MSK
, 
INT_FLSRDY_BIT
, 
SET_BIT
);

163 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

165 
	}
}

166 
	$nfc_£t_∑ge_size
(
«nd_Êash
 *
nfc
, 
u32
 
∑ge_size
, u32 
oob_size
)

169 
u32
 
vÆ
 = 0;

170 
∑ge_size
)

172 
SZ_2K
:

173 
nfc
->
£˘‹_˙t
 = 4;

174 
nfc
->
£˘‹_size
 = 512;

175 
vÆ
 = 
FUNCCTL_PGDTBLANKCHK_EN
 |

176 
FUNCCTL_ECC8_SEC512
;

177 
nfc
->
ecc_code_size
 = 13;

178 
nfc
->
ecc_code_loc
 = 3;

179 
nfc
->
ecc_code_£˘‹_off
 = 16;

181 
SZ_4K
:

182 
nfc
->
£˘‹_˙t
 = 8;

183 
nfc
->
£˘‹_size
 = 512;

185 
vÆ
 = 
FUNCCTL_PGDTBLANKCHK_EN
 |

186 
FUNCCTL_ECC8_SEC512
;

187 
nfc
->
ecc_code_size
 = 13;

188 
nfc
->
ecc_code_loc
 = 8;

189 
nfc
->
ecc_code_£˘‹_off
 = 21;

191 
SZ_8K
:

192 
nfc
->
£˘‹_˙t
 = 8;

193 
nfc
->
£˘‹_size
 = 1024;

194 
vÆ
 = 
FUNCCTL_PGDTBLANKCHK_EN
 |

195 
FUNCCTL_ECC24_SEC1K
;

196 
nfc
->
ecc_code_size
 = 42;

201 
	`«nd_wrôñ
(
nfc
,
NAND_FUNC_CTL
, 
vÆ
);

204 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
(
oob_size
 /Çfc->
£˘‹_˙t
));

207 
	`«nd_wrôñ
(
nfc
,
NAND_SECTOR_NUM
,Çfc->
£˘‹_˙t
);

208 
	}
}

209 
	$nfc_öô
(
«nd_Êash
 *
nfc
)

211 
u32
 
vÆ
;

214 
	`«nd_wrôñ
(
nfc
, 
NAND_FTYPE
, (
FTYPE_8BS_DTWIDTH
));

216 
vÆ
=(
FCTL_DEWRITEPROTECT_ST
)|

217 (
FCTL_DEVSELMOD_BITMAP
)|

218 (
FCTL_MODE_AUTO
)|

219 (
FCTL_ECCHWAUTOCLR_ST
);

221 
	`«nd_wrôñ
(
nfc
,
NAND_FCTL
,
vÆ
);

223 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

225 
	`«nd_wrôñ
(
nfc
,
NAND_ECCTL
,0);

227 
	`«nd_wrôñ
(
nfc
, 
NAND_STB_LWIDTH
, 0x06);

228 
	`«nd_wrôñ
(
nfc
, 
NAND_STB_HWIDTH
, 0x06);

230 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

235 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_EN
,

236 (
INT_ECCERR_BIT
|

237 
INT_FLSRDY_BIT
|

238 
INT_BUFSZDATARDY_BIT
|

239 
INT_FIFOEMPTY_BIT
|

240 
INT_FIFOFULL_BIT
 |

241 
INT_ECCDN_BIT
 |

242 
INT_∑ge_d⁄e
));

243 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
));

244 
	`«nd_wrôñ
(
nfc
, 
NAND_BUSY_CNT
, 10);

250 
	`nfc_£t_∑ge_size
(
nfc
, 
SZ_2K
, 64);

251 
	}
}

256 
	$«nd_öô
(
«nd_Êash
 *
nfc
)

258 
ªt
 = 0;

259 
	`nfc_öô
(
nfc
);

261 
	`«nd_ª£t
(
nfc
);

263 
ªt
 = 
	`«nd_idít
(
nfc
);

264 
nfc
->
∑ge_shi·
 = 
	`ffs
“fc->
öfo
.
∑ge_size
) - 1;

265 
	`nfc_£t_∑ge_size
(
nfc
,Çfc->
öfo
.
∑ge_size
,Çfc->öfo.
oob_size
);

266  
ªt
;

267 
	}
}

274 
	$«nd_ªad_£˘‹
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

276 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

278 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_READ1
);

279 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, 
NAND_READ2
);

281 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

282 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

283 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

284 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

285 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

287 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_MD_ONLYDT
|
FDBACTL_RWIR_RD
);

288 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
);

292 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

295 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

297 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,(
FATCTL_AUTOMD_CM1ADRCM2CHRDYDT
|
FATCTL_CMDDT_PROC_TRIG
));

299 
	}
}

300 
	$«nd_í_•¨e_cmd
(
«nd_Êash
 *
nfc
, 
u16
 
cﬁ_addr
,u16 
cmd
)

302 
	`«nd_wrôñ
(
nfc
, 
NAND_SPRCMD_CTL
, 
SPRCMD_CTL_NUM_1
 | 
SPRCMD_CTL_EN
);

303 
	`«nd_wrôñ
(
nfc
, 
NAND_FBCOMM_1
, (
u8
)(
cmd
 & 0xff));

304 
	`«nd_wrôñ
(
nfc
, 
NAND_FBCOMM_2
, (
u8
)(
cmd
 >> 8) & 0xff);

305 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0_B
, (
u8
)(
cﬁ_addr
 & 0xff));

306 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1_B
, (
u8
)(
cﬁ_addr
 >> 8) & 0xff);

307 
	}
}

308 
	$«nd_ªad_£˘‹_ecc
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

310 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

312 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_READ1
);

313 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, 
NAND_READ2
);

315 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

316 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

317 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

318 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

319 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

321 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_RWIR_RD
);

322 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
);

327 
	`«nd_í_•¨e_cmd
(
nfc
,Çfc->
öfo
.
∑ge_size
 +Çfc->
ecc_code_loc
, 
NAND_RD_READ
);

329 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

332 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

334 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,(
FATCTL_AUTOMD_CM1ADRCM2CHRDYDT
|
FATCTL_CMDDT_PROC_TRIG
));

336 
	}
}

337 
	$«nd_ªad_£˘‹_øndom
(
«nd_Êash
 *
nfc
, 
u32
 
cﬁ_addr
)

339 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

341 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, (
u8
 )(
NAND_RD_READ
 & 0xff));

342 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, (
u8
 )((
NAND_RD_READ
 & 0xff00) >> 8));

344 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, (
u8
 )(
cﬁ_addr
 & 0xff));

345 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, (
u8
 )((
cﬁ_addr
 & 0xff00) >> 8));

348 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_RWIR_RD
);

349 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01_ST
);

355 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

358 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

360 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,(
FATCTL_AUTOMD_CM1ADRCM2CHRDYDT
|
FATCTL_CMDDT_PROC_TRIG
));

362 
	}
}

364 
	$«nd_wrôe_£˘‹_ecc
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

366 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

369 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM1
);

372 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

373 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

374 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

375 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

376 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

377 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_RWIR_WR
);

378 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
|
FCMDCTL_NORMALTRIG_ST
);

382 
	`«nd_í_•¨e_cmd
(
nfc
,Çfc->
öfo
.
∑ge_size
 +Çfc->
ecc_code_loc
, 
NAND_RD_PROGRAM
);

386 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, (
FATCTL_AUTOMD_CM1ADRDT
));

388 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

389 
	}
}

390 
	$«nd_wrôe_£˘‹_øndom
(
«nd_Êash
 *
nfc
, 
u32
 
cﬁ_addr
)

392 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

395 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_RD_PROGRAM
);

399 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, (
u8
 )(
cﬁ_addr
 & 0xff));

400 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, (
u8
 )((
cﬁ_addr
 & 0xff00) >> 8));

402 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_RWIR_WR
);

403 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01_ST
|
FCMDCTL_NORMALTRIG_ST
);

411 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, (
FATCTL_AUTOMD_CM1ADRDT
));

413 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

414 
	}
}

416 
	$«nd_ªad_•¨e
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
, u32 
cﬁ_addr
)

418 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

420 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_READ1
);

421 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, 
NAND_READ2
);

423 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, (
u8
 )(
cﬁ_addr
 & 0xff));

424 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, (
u8
 )((
cﬁ_addr
 & 0xff00) >> 8));

425 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

426 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

427 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

429 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALSPARMV
|
FDBACTL_MD_ONLYSP
|
FDBACTL_RWIR_RD
);

430 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
);

434 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

437 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

439 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,(
FATCTL_AUTOMD_CM1ADRCM2CHRDYDT
|
FATCTL_CMDDT_PROC_TRIG
));

441 
	}
}

447 
	$«nd_ªad_£˘‹_dma
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

449 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

451 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_READ1
);

452 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, 
NAND_READ2
);

454 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

455 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

456 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
)(
p_adr
 & 0xff));

457 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
)((
p_adr
 & 0xff00) >> 8));

458 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
)((
p_adr
 & 0xff0000) >> 16));

460 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALSPARMV
|
FDBACTL_RWIR_RD
);

462 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_FIFO_CLEAR
);

463 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
,

464 (
CFG_DMADIR_RD
 | 
CFG_DMA_EN
 ));

465 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
|
FCMDCTL_NORMALTRIG_ST
);

466 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

468 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

469 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, 0x09);

472 
	}
}

473 
	#CONFIG_NAND_EN_WRITE
 1

	)

474 #i‡
CONFIG_NAND_EN_WRITE


475 
	$«nd_block_îa£
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

477 
u8
 
ªg8_vÆ
;

478 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

480 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

483 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_RWIR_WR
);

486 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

489 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
|
FCMDCTL_SKIPFA1FA0_ST
);

492 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 0x60 );

495 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

496 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

497 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

499 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_2
, 0xD0 );

501 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

504 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, (
FATCTL_AUTOMD_CM1ADRCM2
|
FATCTL_CMDDT_PROC_TRIG
));

508 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FLSRDY_BIT
, 
SET_BIT
);

510 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

513 
ªg8_vÆ
 = 
	`«nd_ªad_°©us
(
nfc
);

514 i‡(
ªg8_vÆ
 & 0x01)

516 
	`«nd_debug
("ÅoÉraseÅheÖage fails!\r\n");

517 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

521 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

523 
	}
}

530 
	$«nd_wrôe_£˘‹
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

532 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

534 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM1
);

537 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

538 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

539 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

540 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

541 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

542 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALDTMV
|
FDBACTL_MD_ONLYDT
|
FDBACTL_RWIR_WR
);

543 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
);

546 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, (
FATCTL_AUTOMD_CM1ADRDT
));

548 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

550 
	}
}

551 
	$«nd_wrôe_•¨e
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
, u32 
cﬁ_addr
)

553 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

555 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM1
);

558 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, (
u8
 )(
cﬁ_addr
 & 0xff));

559 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, (
u8
 )((
cﬁ_addr
 & 0xff00) >> 8));

560 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

561 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

562 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

563 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALSPARMV
|
FDBACTL_MD_ONLYSP
|
FDBACTL_RWIR_WR
);

564 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
);

567 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
, (
FATCTL_AUTOMD_CM1ADRDT
));

569 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
, (
INT_ECCERR_BIT
|
INT_FLSRDY_BIT
));

571 
	}
}

572 
u32
 
	gnfc_∑ge_num
;

579 
	$«nd_wrôe_£˘‹_dma
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
)

581 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

583 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM1
);

586 
	`«nd_wrôñ
(
nfc
, 
NAND_FA0
, 0);

587 
	`«nd_wrôñ
(
nfc
, 
NAND_FA1
, 0);

588 
	`«nd_wrôñ
(
nfc
, 
NAND_FA2
, (
u8
 )(
p_adr
 & 0xff));

589 
	`«nd_wrôñ
(
nfc
, 
NAND_FA3
, (
u8
 )((
p_adr
 & 0xff00) >> 8));

590 
	`«nd_wrôñ
(
nfc
, 
NAND_FA4
, (
u8
 )((
p_adr
 & 0xff0000) >> 16));

591 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_MD_NORMALSPARMV
|
FDBACTL_RWIR_WR
);

592 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
 | 
CFG_DMA_EN
);

593 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

594 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_FAS01234_ST
|
FCMDCTL_NORMALTRIG_ST
);

596 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

598 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_MSK
,

599 (
INT_ECCERR_BIT
|
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
));

601 #ifde‡ 
I¡îru±Mode


602 !(
NFC_INT_Fœg
 & 
INT_FLSRDY_BIT
));

604 
nfc_∑ge_num
)

606 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOFULL_BIT
, 
SET_BIT
);

608 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
, 
	`«nd_ªadl
(nfc, NAND_FDBACTL)|0x80);

609 
nfc_∑ge_num
--;

610 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 
INT_FIFOFULL_BIT
);

611 
	`«nd_waô
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_DTAUTO_TRIG
, 
SET_BIT
);

614 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_∑ge_d⁄e
, 
SET_BIT
);

616 
	}
}

627 
u32
 
	$«nd_wrôe
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
 
PageCou¡
, u32* 
s¸_mem_addr
)

629 
i
, 
d©a_addr_˙t
 = 0;

630 
tmp32
;

631 
u32
* 
De°Addr
;

632 
ªt
 = 0;

633 
j
 = 0;

634 
u8
 
ªg8_vÆ
;

635 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

636 
	`«nd_wrôñ
(
nfc
, 
NAND_ECCTL
, 0x0);

639 
	`«nd_wrôñ
(
nfc
, 
NAND_FSPR_CNT
, 0x0f);

640 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

642 
i
 = 0; i < 
PageCou¡
; i++)

644 
	`«nd_wrôe_£˘‹
(
nfc
, 
PageAddr
);

645 
PageAddr
 += 1;

647 !(
	`«nd_ªadl
(
nfc
, 
NAND_INT
Ë& 
INT_FIFOFULL_BIT
))

649 
j
 = 0; j < (
nfc
->
£˘‹_size
 >> 2); j++)

651 
	`«nd_wrôñ
(
nfc
, 
NAND_AHB_FiFo
, *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

652 
d©a_addr_˙t
++;

655 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

657 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,

658 (
FATCTL_AUTOMD_CM1ADRDT
|
FATCTL_CMDDT_PROC_TRIG
));

661 (
	`«nd_ªadl
(
nfc
, 
NAND_FATCTL
Ë& 
FATCTL_CMDDT_PROC_TRIG
))

664 (
	`«nd_ªadl
(
nfc
, 
NAND_FCMDCTL
Ë& 
FCMDCTL_NORMALTRIG_ST
))

667 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

668 
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

670 
j
 = 0; j < (
nfc
->
£˘‹_˙t
 - 1); j++)

672 !(
	`«nd_ªadl
(
nfc
, 
NAND_INT
Ë& 
INT_FIFOFULL_BIT
))

674 
	`«nd_wrôñ
(
nfc
, 
NAND_AHB_FiFo
, *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

675 
d©a_addr_˙t
++;

677 
k
 = 0; k < 16; k ++)

679 
	`«nd_wrôñ
(
nfc
, 
	`NAND_FSPR_REG
(
k
), k);

682 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
,

683 
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
)|
FDBACTL_DTAUTO_TRIG
);

685 (
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
Ë& 
FDBACTL_DTAUTO_TRIG
))

689 !(
	`«nd_ªadl
(
nfc
, 
NAND_CONFIG
Ë& 
CFG_FIFOEMPTY_BIT
))

692 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

693 
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

696 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM2
);

697 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
,

698 
FCMDCTL_SINGLETRIG_ST
|
FCMDCTL_NORMALTRIG_ST
|
FCMDCTL_FAS01234_ST
);

701 (
	`«nd_ªadl
(
nfc
, 
NAND_FCMDCTL
Ë& 
FCMDCTL_NORMALTRIG_ST
))

704 !(
	`«nd_ªadl
(
nfc
, 
NAND_INT
Ë& 
INT_FLSRDY_BIT
))

707 
ªg8_vÆ
 = 
	`«nd_ªad_°©us
(
nfc
);

708 i‡(
ªg8_vÆ
 & 0x01)

710 
	`«nd_debug
("Åo writeÅheÖage fails!\r\n");

711 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

715 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

717 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

718 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

719  
ªt
;

720 
	}
}

731 
u32
 
	$«nd_wrôe_oob
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
* 
s¸_mem_addr
)

733 
i
, 
d©a_addr_˙t
 = 0;

734 
tmp32
;

735 
u32
* 
De°Addr
;

736 
ªt
 = 0;

737 
⁄e_move_size
 = 0;

738 
u8
 
ªg8_vÆ
;

739 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

743 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

748 
	`«nd_wrôe_•¨e
(
nfc
, 
PageAddr
,Çfc->
öfo
.
∑ge_size
);

751 i‡(
NAND_SPARE_MAX
 >
nfc
->
öfo
.
oob_size
)

753 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
“fc->
öfo
.
oob_size
));

754 
i
 = 0; i < 
nfc
->
öfo
.
oob_size
; i++)

756 
	`«nd_wrôñ
(
nfc
, 
	`NAND_FSPR_REG
(
i
), *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

757 
d©a_addr_˙t
++;

762 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
(
NAND_SPARE_MAX
));

763 
i
 = 0; i < 
NAND_SPARE_MAX
; i++)

765 
	`«nd_wrôñ
(
nfc
, 
	`NAND_FSPR_REG
(
i
), *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

766 
d©a_addr_˙t
++;

771 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

773 
	`«nd_wrôñ
(
nfc
, 
NAND_FATCTL
,

774 (
FATCTL_AUTOMD_CM1ADRDT
|
FATCTL_CMDDT_PROC_TRIG
));

777 (
	`«nd_ªadl
(
nfc
, 
NAND_FATCTL
Ë& 
FATCTL_CMDDT_PROC_TRIG
))

780 (
	`«nd_ªadl
(
nfc
, 
NAND_FCMDCTL
Ë& 
FCMDCTL_NORMALTRIG_ST
))

783 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

784 
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

786 
d©a_addr_˙t
 < 
nfc
->
öfo
.
oob_size
)

788 
⁄e_move_size
 = 
nfc
->
öfo
.
oob_size
 - 
d©a_addr_˙t
;

789 i‡(
⁄e_move_size
 >
NAND_SPARE_MAX
)

791 
⁄e_move_size
 = 
NAND_SPARE_MAX
;

795 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
(
⁄e_move_size
));

797 
i
 = 0; i < 
⁄e_move_size
; i++)

799 
	`«nd_wrôñ
(
nfc
, 
	`NAND_FSPR_REG
(
i
), *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

800 
d©a_addr_˙t
++;

802 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
,

803 
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
)|
FDBACTL_DTAUTO_TRIG
);

805 (
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
Ë& 
FDBACTL_DTAUTO_TRIG
))

809 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

810 
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

814 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM2
);

815 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
,

816 
FCMDCTL_SINGLETRIG_ST
|
FCMDCTL_NORMALTRIG_ST
|
FCMDCTL_FAS01234_ST
);

819 (
	`«nd_ªadl
(
nfc
, 
NAND_FCMDCTL
Ë& 
FCMDCTL_NORMALTRIG_ST
))

822 !(
	`«nd_ªadl
(
nfc
, 
NAND_INT
Ë& 
INT_FLSRDY_BIT
))

825 
ªg8_vÆ
 = 
	`«nd_ªad_°©us
(
nfc
);

826 i‡(
ªg8_vÆ
 & 0x01)

828 
	`«nd_debug
("Åo writeÅheÖage oob fails!\r\n");

829 
ªt
 = 1;

833 
	`«nd_wrôñ
(
nfc
,
NAND_SECTOR_NUM
, 0);

834 
	`«nd_wrôñ
(
nfc
,
NAND_SECTOR_NUM
,Çfc->
£˘‹_˙t
);

836 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

838 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

839 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

840  
ªt
;

841 
	}
}

845 
u32
 
	$«nd_wrôe_ecc
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
 
PageCou¡
, u32* 
s¸_mem_addr
)

847 
i
, 
d©a_addr_˙t
 = 0;

849 
ªt
 = 0;

850 
j
 = 0;

851 
k
 = 0;

852 
u8
 
ªg8_vÆ
;

854 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

857 
	`«nd_wrôñ
(
nfc
, 
NAND_FUNC_CTL
, 
FUNCCTL_ECC8_SEC512
);

858 
	`«nd_wrôñ
(
nfc
, 
NAND_ECCTL
, 
ECCCTL_ECC_EN
);

859 
	`«nd_wrôñ
(
nfc
, 
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
“fc->
ecc_code_size
));

860 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

862 
i
 = 0; i < 
PageCou¡
; i++)

865 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_L
);

866 
	`«nd_wrôe_£˘‹_ecc
(
nfc
, 
PageAddr
);

867 
PageAddr
 += 1;

868 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

870 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

871 
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

873 
j
 = 0; j < (
nfc
->
£˘‹_˙t
); j++)

875 i‡(
j
 > 0)

877 
	`«nd_wrôe_£˘‹_øndom
(
nfc
,Çfc->
£˘‹_size
 * 
j
);

878 
	`«nd_í_•¨e_cmd
(
nfc
,Çfc->
öfo
.
∑ge_size
 +Çfc->
ecc_code_loc
 +Çfc->
ecc_code_£˘‹_off
 * 
j
, 
NAND_RD_PROGRAM
);

880 
k
 = 0; k < 
nfc
->
£˘‹_size
 >> 2; k++)

882 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOFULL_BIT
, 
UNSET_BIT
);

883 
	`«nd_wrôñ
(
nfc
, 
NAND_AHB_FiFo
, *(
s¸_mem_addr
 + 
d©a_addr_˙t
));

884 
d©a_addr_˙t
++;

888 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
,

889 
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
)|
FDBACTL_DTAUTO_TRIG
);

891 
	`«nd_waô
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_DTAUTO_TRIG
, 
UNSET_BIT
);

893 
	`«nd_waô
(
nfc
, 
NAND_CONFIG
, 
CFG_FIFOEMPTY_BIT
, 
SET_BIT
);

894 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

895 
INT_ECCERR_BIT
|
INT_ECCDN_BIT
|
INT_BUFSZDATARDY_BIT
|
INT_FIFOFULL_BIT
|
CFG_FIFOEMPTY_BIT
);

898 
	`«nd_wrôñ
(
nfc
, 
NAND_FACOMM_1
, 
NAND_PROGRAM2
);

899 
	`«nd_wrôñ
(
nfc
, 
NAND_FCMDCTL
,

900 
FCMDCTL_SINGLETRIG_ST
|
FCMDCTL_NORMALTRIG_ST
|
FCMDCTL_FAS01234_ST
);

903 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

904 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FLSRDY_BIT
, 
SET_BIT
);

907 
ªg8_vÆ
 = 
	`«nd_ªad_°©us
(
nfc
);

908 i‡(
ªg8_vÆ
 & 0x01)

910 
	`«nd_debug
("Åo writeÅheÖage fails!\r\n");

911 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_WR
);

915 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

919  
ªt
;

920 
	}
}

922 
u8
 
	$«nd_gë_ecc_îr‹_numbî
(
«nd_Êash
 *
nfc
)

924 
u8
 
îro_numbî
;

925 
îro_numbî
 = (
	`«nd_ªadl
(
nfc
, 
NAND_ECCTL
Ë& 
ECCCTL_ERROR_NB_MASK
Ë>> 
ECCCTL_ERROR_NB_SHFT
;

926  
îro_numbî
;

927 
	}
}

928 
u32
 
	$«nd_ªad_ecc
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
 
PageCou¡
, u32* 
d°_mem_addr
)

930 
i
, 
k
, 
d©a_addr_˙t
 = 0;

931 
u32
 
tmp32
;

932 
u32
* 
De°Addr
;

933 
ªt
 = 0;

934 
j
 = 0;

935 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

937 
	`«nd_wrôñ
(
nfc
, 
NAND_FUNC_CTL
, 
FUNCCTL_ECC8_SEC512
);

938 
	`«nd_wrôñ
(
nfc
, 
NAND_ECCTL
, 
ECCCTL_ECC_EN
);

939 
	`«nd_wrôñ
(
nfc
, 
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
“fc->
ecc_code_size
));

940 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

942 
i
 = 0; i < 
PageCou¡
; i++)

944 
j
 = 0;

945 
	`«nd_ªad_£˘‹_ecc
(
nfc
, 
PageAddr
);

946 
PageAddr
 += 1;

948 
	`«nd_waô
(
nfc
, 
NAND_FATCTL
, 
FATCTL_CMDDT_PROC_TRIG
, 
UNSET_BIT
);

950 
k
 = 0; k < 
nfc
->
£˘‹_˙t
; k++)

952 i‡(
k
 > 0)

954 
	`«nd_ªad_£˘‹_øndom
(
nfc
,Çfc->
£˘‹_size
 * 
k
);

955 
	`«nd_í_•¨e_cmd
(
nfc
,Çfc->
öfo
.
∑ge_size
 +Çfc->
ecc_code_loc
 +Çfc->
ecc_code_£˘‹_off
 * 
k
, 
NAND_RD_READ
);

956 
	`«nd_waô
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_DTAUTO_TRIG
, 
UNSET_BIT
);

958 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOFULL_BIT
, 
SET_BIT
);

959 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

961 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_ECCDN_BIT
, 
SET_BIT
);

963 i‡(
	`«nd_ªadl
(
nfc
, 
NAND_ECCTL1
Ë| («nd_ªadl“fc, 
NAND_INT
Ë& 
INT_ECCERR_BIT
))

965 
	`«nd_debug
("ec¯îrÿgª©îÅh™Éc¯ˇ∑bûôy : se˘‹[%d] \n", 
k
);

966 
	`«nd_debug
("îr‹Çumbî : %d \n", 
	`«nd_gë_ecc_îr‹_numbî
(
nfc
));

968 
	`«nd_debug
("NAND_INT : 0x%x \n", 
	`«nd_ªadl
(
nfc
, 
NAND_INT
));

969 
	`«nd_debug
("NAND_ECCTL : 0x%x \n", 
	`«nd_ªadl
(
nfc
, 
NAND_ECCTL
));

970 
	`«nd_debug
("NAND_ECCTL1 : 0x%x \n", 
	`«nd_ªadl
(
nfc
, 
NAND_ECCTL1
));

980 
j
 = 0; j < 
nfc
->
£˘‹_size
 >> 2; j++)

984 
d°_mem_addr
[
d©a_addr_˙t
] = 
	`«nd_ªadl
(
nfc
, 
NAND_AHB_FiFo
);

985 
d©a_addr_˙t
++;

987 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOEMPTY_BIT
, 
SET_BIT
);

988 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

989 
INT_FIFOEMPTY_BIT
|
INT_FIFOFULL_BIT
|
INT_BUFSZDATARDY_BIT
);

992 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

994 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

995 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

996  
ªt
;

997 
	}
}

1007 
u32
 
	$«nd_ªad
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
 
PageCou¡
, u32* 
d°_mem_addr
)

1009 
i
, 
d©a_addr_˙t
 = 0;

1010 
u32
 
tmp32
;

1011 
u32
* 
De°Addr
;

1012 
ªt
 = 0;

1013 
j
 = 0;

1014 
k
 = 0;

1016 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

1019 
	`«nd_wrôñ
(
nfc
, 
NAND_ECCTL
, 0x0);

1021 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

1023 
i
 = 0; i < 
PageCou¡
; i++)

1025 
j
 = 0;

1026 
	`«nd_ªad_£˘‹
(
nfc
, 
PageAddr
);

1027 
PageAddr
 += 1;

1029 
	`«nd_waô
(
nfc
, 
NAND_FATCTL
, 
FATCTL_CMDDT_PROC_TRIG
, 
UNSET_BIT
);

1031 
k
 = 0; k < 
nfc
->
£˘‹_˙t
; k ++)

1033 i‡(
j
 > 0)

1035 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
,

1036 
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
)|
FDBACTL_DTAUTO_TRIG
);

1037 
	`«nd_waô
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_DTAUTO_TRIG
, 
UNSET_BIT
);

1039 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOFULL_BIT
, 
SET_BIT
);

1040 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

1041 
j
 = 0; j < 
nfc
->
£˘‹_size
 >> 2; j++)

1045 
d°_mem_addr
[
d©a_addr_˙t
] = 
	`«nd_ªadl
(
nfc
, 
NAND_AHB_FiFo
);

1046 
d©a_addr_˙t
++;

1048 
	`«nd_waô
(
nfc
, 
NAND_INT
, 
INT_FIFOEMPTY_BIT
, 
SET_BIT
);

1049 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
,

1050 
INT_FIFOEMPTY_BIT
|
INT_FIFOFULL_BIT
|
INT_BUFSZDATARDY_BIT
);

1053 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

1055 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

1056 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

1057  
ªt
;

1058 
	}
}

1059 
u32
 
	$«nd_ªad_oob
(
«nd_Êash
 *
nfc
, 
u32
 
PageAddr
, 
u8
* 
d°_mem_addr
)

1061 
i
, 
d©a_addr_˙t
 = 0;

1063 
⁄e_move_size
 = 0;

1064 
ªt
 = 0;

1066 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

1067 
	`«nd_wrôñ
(
nfc
, 
NAND_ECCTL
, 0x0);

1071 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

1075 i‡(
NAND_SPARE_MAX
 >
nfc
->
öfo
.
oob_size
)

1077 
⁄e_move_size
 = 
nfc
->
öfo
.
oob_size
;

1081 
⁄e_move_size
 = 
NAND_SPARE_MAX
;

1084 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
(
⁄e_move_size
));

1085 
	`«nd_ªad_•¨e
(
nfc
, 
PageAddr
,Çfc->
öfo
.
∑ge_size
);

1087 
	`«nd_waô
(
nfc
, 
NAND_FATCTL
, 
FATCTL_CMDDT_PROC_TRIG
, 
UNSET_BIT
);

1089 
i
 = 0; i < 
⁄e_move_size
; i ++)

1091 
d°_mem_addr
[
d©a_addr_˙t
] = 
	`«nd_ªadl
(
nfc
, 
	`NAND_FSPR_REG
(
i
));

1092 
d©a_addr_˙t
++;

1095 
d©a_addr_˙t
 < 
nfc
->
öfo
.
oob_size
)

1097 
⁄e_move_size
 = 
nfc
->
öfo
.
oob_size
 - 
d©a_addr_˙t
;

1098 i‡(
⁄e_move_size
 >
NAND_SPARE_MAX
)

1100 
⁄e_move_size
 = 
NAND_SPARE_MAX
;

1104 
	`«nd_wrôñ
(
nfc
,
NAND_FSPR_CNT
, 
	`FSPR_CNT_X
(
⁄e_move_size
));

1108 
	`«nd_wrôñ
(
nfc
, 
NAND_FDBACTL
,

1109 
	`«nd_ªadl
(
nfc
, 
NAND_FDBACTL
)|
FDBACTL_DTAUTO_TRIG
);

1110 
	`«nd_waô
(
nfc
, 
NAND_FDBACTL
, 
FDBACTL_DTAUTO_TRIG
, 
UNSET_BIT
);

1112 
	`«nd_waô
(
nfc
, 
NAND_FCMDCTL
, 
FCMDCTL_NORMALTRIG_ST
, 
UNSET_BIT
);

1113 
i
 = 0; i < 
⁄e_move_size
; i ++)

1115 
d°_mem_addr
[
d©a_addr_˙t
] = 
	`«nd_ªadl
(
nfc
, 
	`NAND_FSPR_REG
(
i
));

1116 
d©a_addr_˙t
++;

1122 
	`«nd_wrôñ
(
nfc
,
NAND_SECTOR_NUM
, 0);

1123 
	`«nd_wrôñ
(
nfc
,
NAND_SECTOR_NUM
,Çfc->
£˘‹_˙t
);

1125 
	`«nd_wrôñ
(
nfc
, 
NAND_INT_CLR
, 0x7f);

1128 
	`«nd_wrôñ
(
nfc
, 
NAND_FDSEL
, 
FLASH_CHCE_H
);

1129 
	`«nd_wrôñ
(
nfc
, 
NAND_CONFIG
, 
CFG_DMADIR_RD
);

1130  
ªt
;

1131 
	}
}

1133 
«nd_Êash
 
	gnfc
;

1135 
u32
 
	gd©a_wrôe
[8][128];

1136 
u32
 
	gd©a_ªad
[8][128];

1137 
u32
 
	gd©a_ªad_ecc
[8][128];

1139 
u8
 
	goob_rd©a
[218];

1140 
u16
 
	gªs_no_ecc_Áû_nb
 = 0;

1141 
u16
 
	gªs_ecc_Áû_nb
 = 0;

1142 
u16
 
	gªs_no_ecc_∑ss_nb
 = 0;

1143 
u16
 
	gªs_ecc_∑ss_nb
 = 0;

1144 
	$«nd_ã°_∑ge
(
u32
 
∑ge_addr
)

1146 
u32
 
i
, 
j
;

1147 
u8
 
ªs_no_ecc
 = 0;

1148 
u8
 
ªs_ecc
 = 0;

1151 
i
 = 0; i < 
nfc
.
£˘‹_˙t
; i++)

1153 
j
 = 0; j < (
nfc
.
£˘‹_size
 >> 2) ; j++)

1156 
d©a_wrôe
[
i
][
j
] = 
	`CK_Timî_CuºítVÆue
(0);

1159 
	`«nd_block_îa£
(&
nfc
, 
∑ge_addr
);

1161 
	`«nd_wrôe_ecc
(&
nfc
, 
∑ge_addr
, 1, 
d©a_wrôe
);

1162 
	`«nd_ªad_ecc
(&
nfc
, 
∑ge_addr
, 1, 
d©a_ªad_ecc
);

1164 
	`«nd_ªad
(&
nfc
, 
∑ge_addr
, 1, 
d©a_ªad
);

1165 
	`«nd_ªad_oob
(&
nfc
, 
∑ge_addr
, &
oob_rd©a
[0]);

1168 
i
 = 0; i < 
nfc
.
£˘‹_˙t
; i++)

1170 
j
 = 0; j < (
nfc
.
£˘‹_size
 >> 2); j++)

1172 i‡(
d©a_wrôe
[
i
][
j
] !
d©a_ªad_ecc
[i][j])

1174 
	`«nd_debug
("íÉc¯%d %d WvÆuê = 0x%x RvÆuê0x%x \r\n", 
i
,
j
 ,
d©a_wrôe
[i][j], 
d©a_ªad_ecc
[i][j]);

1175 
ªs_ecc
 = 1;

1177 i‡(
d©a_wrôe
[
i
][
j
] !
d©a_ªad
[i][j])

1179 
	`«nd_debug
("nÿec¯%d %d WvÆuê = 0x%x RvÆuê0x%x \r\n", 
i
,
j
 ,
d©a_wrôe
[i][j], 
d©a_ªad
[i][j]);

1180 
ªs_no_ecc
 = 1;

1184 i‡(
ªs_ecc
 == 1)

1186 
	`«nd_debug
("ecc_code\n");

1187 
i
 = 0; i < 
nfc
.
£˘‹_˙t
; i++)

1189 
	`«nd_debug
("£˘‹[%d] :", 
i
);

1190 
u16
 
ecc_loc
 = 
nfc
.
ecc_code_loc
 +Çfc.
ecc_code_£˘‹_off
 * 
i
;

1191 
u16
 
ecc_íd
 = 
ecc_loc
 +
nfc
.
ecc_code_size
 ;

1192 
j
 = 
ecc_loc
; j < 
ecc_íd
; j++)

1194 
	`«nd_debug
("0x%x ", 
oob_rd©a
[
j
]);

1196 
	`«nd_debug
("\n");

1201 i‡(
ªs_ecc
 == 1)

1203 
	`«nd_debug
("nandÅest with hw-ecc failed !!!\r\n");

1204 
ªs_ecc_Áû_nb
 ++;

1208 
ªs_ecc_∑ss_nb
 ++;

1209 
	`«nd_debug
("nandÅest with hw-ecc succeed !!!\r\n");

1212 i‡(
ªs_no_ecc
 == 1)

1214 
ªs_no_ecc_Áû_nb
 ++;

1215 
	`«nd_debug
("nandÅest without hw-ecc failed !!!\r\n");

1219 
ªs_no_ecc_∑ss_nb
 ++;

1220 
	`«nd_debug
("nandÅest without hw-ecc succeed !!!\r\n");

1222 
	`«nd_block_îa£
(&
nfc
, 
∑ge_addr
);

1224 
	}
}

1225 
	$CK_nfc_ã°
()

1228 
u32
 
i
;

1229 
nfc
.
ba£
 = 
NFC_BASE_ADDR
;

1230 
	`«nd_öô
(&
nfc
);

1232 
i
 = 0; i < 100; i++)

1234 
	`«nd_ã°_∑ge
(0x0);

1235 
	`«nd_ã°_∑ge
(0x2);

1236 
	`«nd_ã°_∑ge
(0x40);

1237 
	`«nd_ã°_∑ge
(0x42);

1240 
	`¥ötf
("nÿec¯ã°Öas†%dÅime†Áû %dÅimes\r\n", 
ªs_no_ecc_∑ss_nb
, 
ªs_no_ecc_Áû_nb
);

1241 
	`¥ötf
("hwÉc¯ã°Öas†%dÅime†Áû %dÅimes\r\n", 
ªs_ecc_∑ss_nb
, 
ªs_ecc_Áû_nb
);

1242 
	`¥ötf
("nfc.ecc_code_sizê%dÇfc.ecc_code_lo¯%d\r\n", 
nfc
.
ecc_code_size
,Çfc.
ecc_code_loc
);

1243 
	}
}

	@drivers/nand.h

1 #i‚de‡
__NAND_H__


2 
	#__NAND_H__


	)

4 
	~"ck810.h
"

5 
	~"d©©y≥.h
"

7 
	#NAND_FCMDCTL
 0x00

	)

8 
	#NAND_FDBACTL
 0x04

	)

9 
	#NAND_FATCTL
 0x08

	)

10 
	#NAND_SPRCMD_CTL
 0x0C

	)

11 
	#NAND_ECCTL
 0x10

	)

12 
	#NAND_FDSEL
 0x14

	)

13 
	#NAND_FACOMM_1
 0x18

	)

14 
	#NAND_FACOMM_2
 0x1C

	)

15 
	#NAND_FA0
 0x20

	)

16 
	#NAND_FA1
 0x24

	)

17 
	#NAND_FA2
 0x28

	)

18 
	#NAND_FA3
 0x2C

	)

19 
	#NAND_FA4
 0x30

	)

20 
	#NAND_FA5
 0x34

	)

21 
	#NAND_FA6
 0x38

	)

22 
	#NAND_FA7
 0x3C

	)

23 
	#NAND_FBCOMM_1
 0x40

	)

24 
	#NAND_FBCOMM_2
 0x44

	)

25 
	#NAND_FA0_B
 0x48

	)

26 
	#NAND_FA1_B
 0x4C

	)

27 
	#NAND_FA2_B
 0x50

	)

28 
	#NAND_FA3_B
 0x54

	)

29 
	#NAND_FA4_B
 0x58

	)

30 
	#NAND_FCTL
 0x5C

	)

31 
	#NAND_FSEQ
 0x60

	)

32 
	#NAND_FEBI
 0x64

	)

33 
	#NAND_FDATA_LB
 0x68

	)

34 
	#NAND_FDATA_HB
 0x6C

	)

35 
	#NAND_FTYPE
 0x70

	)

36 
	#NAND_BUSY_CNT
 0x74

	)

37 
	#NAND_FMAP
 0x78

	)

38 
	#NAND_FUNC_CTL
 0x7C

	)

39 
	#NAND_STB_LWIDTH
 0x80

	)

40 
	#NAND_STB_HWIDTH
 0x84

	)

41 
	#NAND_FSPEC
 0x88

	)

42 
	#NAND_FSTAT
 0x8C

	)

43 
	#NAND_FMAK
 0x90

	)

44 
	#NAND_FDEV
 0x94

	)

45 
	#NAND_Fœsh_ID3
 0x98

	)

46 
	#NAND_Fœsh_ID4
 0x9C

	)

47 
	#NAND_Fœsh_ID5
 0xA0

	)

48 
	#NAND_FSPR_CNT
 0xA4

	)

49 
	#NAND_FCMPCTL
 0xA8

	)

50 
	#NAND_FCMPST
 0xAC

	)

51 
	#NAND_ECCTL1
 0xB0

	)

52 
	#NAND_SECTOR_NUM
 0xB4

	)

53 
	#NAND_FLASH_ID6
 0xB8

	)

54 
	#NAND_FLASH_ID7
 0xBC

	)

55 
	#NAND_FLASH_ID8
 0xC0

	)

56 
	#NAND_FSPR_REG
(
X
Ë(0xC4+X*0x04)

	)

57 
	#NAND_INT_EN
 0x2C0

	)

58 
	#NAND_INT_MSK
 0x2C4

	)

59 
	#NAND_INT
 0x2C8

	)

60 
	#NAND_MSKED_INT
 0x2CC

	)

61 
	#NAND_INT_CLR
 0x2D0

	)

62 
	#NAND_CONFIG
 0x2D4

	)

63 
	#NAND_AHB_FiFo
 0x300

	)

65 
	#NAND_BUF_AHB_ADR
 0x300

	)

67 
	#NAND_SPARE_MAX
 0x68

	)

69 
	#ECCCTL_ECC_EN
 (0x1<<0x7)

70 
	#ECCCTL_ERROR_NB_MASK
 (0x7e)

71 
	#ECCCTL_ERROR_NB_SHFT
 (0x01)

	)

73 
	#FCTL_MODE_AUTO
 (0x1<<0x0)

74 
	#FCTL_MODE_MCU
 (0)

75 
	#FCTL_ECCHWAUTOCLR_ST
 (0x1<<0x2)

76 
	#FCTL_DEVSELMOD_DECODE
 (0x0<<0x3)

77 
	#FCTL_DEVSELMOD_BITMAP
 (0x1<<0x3)

78 
	#FCTL_DEWRITEPROTECT_ST
 (0x1<<0x5)

79 
	#FCTL_PGBLANK_CHK
 (0x1<<0x7)

80 

	)

81 
	#SPRCMD_CTL_NUM_0
 (0x00<<0x01)

82 
	#SPRCMD_CTL_NUM_1
 (0x01<<0x01)

83 
	#SPRCMD_CTL_NUM_2
 (0x02<<0x01)

84 
	#SPRCMD_CTL_NUM_3
 (0x03<<0x01)

85 
	#SPRCMD_CTL_NUM_4
 (0x04<<0x01)

86 
	#SPRCMD_CTL_EN
 (0x01)

87 
	#SPRCMD_CTL_DIS
 (0x00)

	)

89 
	#FSEQ_APORTSTS_READY
 (0x1<<0x00)

90 
	#FSEQ_APORTSTS_BUSY
 (0x0<<0x00)

91 
	#FSEQ_FOE
 (0x1<<0x02)

92 
	#FSEQ_FWE
 (0x1<<0x03)

93 
	#FSEQ_FDOE
 (0x1<<0x04)

94 
	#FSEQ_CE
 (0x1<<0x05)

95 
	#FSEQ_FCLE
 (0x1<<0x06)

96 
	#FSEQ_FALE
 (0x1<<0x07)

97 

	)

98 
	#FCMDCTL_FACOMM_IS_CMD
 (0x0<<0x00)

99 
	#FCMDCTL_FACOMM_IS_ADDR
 (0x1<<0x00)

100 
	#FCMDCTL_NORMALTRIG_ST
 (0x1<<0x01)

101 
	#FCMDCTL_SINGLETRIG_ST
 (0x1<<0x02)

102 
	#FCMDCTL_SKIPCMDPHS_ST
 (0x1<<0x03)

103 
	#FCMDCTL_SKIPFA1FA0_ST
 (0x1<<0x04)

104 
	#FCMDCTL_FAS0_ST
 (0x0<<0x05)

105 
	#FCMDCTL_FAS01_ST
 (0x1<<0x05)

106 
	#FCMDCTL_FAS012_ST
 (0x2<<0x05)

107 
	#FCMDCTL_FAS0123_ST
 (0x3<<0x05)

108 
	#FCMDCTL_FAS01234_ST
 (0x4<<0x05)

109 
	#FCMDCTL_FAS012345_ST
 (0x5<<0x05)

110 
	#FCMDCTL_FAS012346_ST
 (0x6<<0x05)

111 
	#FCMDCTL_FAS01234567_ST
 (0x7<<0x05)

112 

	)

114 
	#FDBACTL_MD_NORMALDTMV
 (0x01)

115 
	#FDBACTL_MD_NORMALSPARMV
 (0x05)

116 
	#FDBACTL_MD_SPARMV
 (0x04)

117 
	#FDBACTL_MD_ONLYSP
 (0x1<<0x03)

	)

118 
	#FDBACTL_MD_ONLYDT
 (0x1<<0x05)

	)

119 
	#FDBACTL_RWIR_RD
 (0x1<<0x06)

120 
	#FDBACTL_RWIR_WR
 (0x0<<0x06)

121 
	#FDBACTL_DTAUTO_TRIG
 (0x1<<0x07)

122 

	)

123 
	#FSPR_CNT_X
(
x
Ë(x-1)

	)

125 
	#FTYPE_16BS_DTWIDTH
 (0x1<<0x02)

126 
	#FTYPE_8BS_DTWIDTH
 (0x0<<0x02)

	)

127 
	#FTYPE_2XFACMD
 (0x1<<0x03)

128 

	)

129 
	#FSPEC_RDID_TRIG
 (0x1<<0x00)

130 
	#FSPEC_RDSTAT_TRIG
 (0x1<<0x01)

131 
	#FSPEC_CM1RDSTSCM2_TRIG
 (0x1<<0x02)

132 

	)

133 
	#FMAP_FFVALMAP_ST
 (0x1<<0x05)

134 

	)

135 
	#FATCTL_CMDDT_PROC_TRIG
 (0x1<<0x00)

136 
	#FATCTL_AUTOMD_CM1ADRDTCM2
 (0x0<<0x01)

137 
	#FATCTL_AUTOMD_CM1ADRCHKRDYDT
 (0x1<<0x01)

138 
	#FATCTL_AUTOMD_CM1ADRDT
 (0x2<<0x01)

139 
	#FATCTL_AUTOMD_CM1ADRCM2DT
 (0x3<<0x01)

140 
	#FATCTL_AUTOMD_CM1ADRCM2CHRDYDT
 (0x4<<0x01)

141 
	#FATCTL_AUTOMD_CM1ADRCM2
 (0x5<<0x01)

142 

	)

144 
	#FUNCCTL_PGDTBLANKCHK_EN
 (0x1<<0x03)

145 
	#FUNCCTL_FAMCDSKIPFA0
 (0x1<<0x04)

146 
	#FUNCCTL_ECC15_SEC512
 (0x0<<0x05)

147 
	#FUNCCTL_ECC8_SEC512
 (0x1<<0x05)

148 
	#FUNCCTL_ECC24_SEC1K
 (0x2<<0x05)

149 
	#FUNCCTL_ECC40_SEC1K
 (0x3<<0x05)

150 
	#FUNCCTL_ECC60_SEC1K
 (0x4<<0x05)

151 

	)

153 
	#STBLWIDTH_xCYCLS
(
x
) (x-1)

154 
	#STBHWIDTH_xCYCLS
(
x
) (x-1)

155 

	)

156 
	#INT_ECCERR_BIT
 (0x01)

157 
	#INT_FLSRDY_BIT
 (0x02)

158 
	#INT_BUFSZDATARDY_BIT
 (0x04)

159 
	#INT_FIFOEMPTY_BIT
 (0x08)

160 
	#INT_FIFOFULL_BIT
 (0x10)

161 
	#INT_ECCDN_BIT
 (0x20)

162 
	#INT_∑ge_d⁄e
 (0x40)

164 
	#INT_∑ge_d⁄e
 (0x40)

	)

167 
	#CFG_DMA_EN
 (0x1<<0x01)

168 
	#CFG_DMA_DIS
 (0x0<<0x01)

	)

169 
	#CFG_DMADIR_RD
 (0x0<<0x02)

170 
	#CFG_DMADIR_WR
 (0x1<<0x02)

	)

171 
	#CFG_FIFO_CLEAR
 (0x1<<0x03)

	)

172 
	#CFG_USBDMA_EN
 (0x1<<0x04)

173 
	#CFG_USBDMA_DIS
 (0x0<<0x04)

	)

174 
	#CFG_FIFOEMPTY_BIT
 (0x1<<0x06)

175 
	#CFG_FIFOFULL_BIT
 (0x1<<0x07)

176 

	)

178 
	#FLASH_CE_SEL0
 0x1

	)

179 
	#FLASH_CE_SEL1
 0x2

	)

180 
	#FLASH_CE_SEL2
 0x4

	)

181 
	#FLASH_CE_SEL3
 0x8

	)

182 
	#FLASH_CE_NONE
 0x0

	)

183 
	#FLASH_CHCE_H
 
FLASH_CE_NONE


	)

184 
	#FLASH_CHCE_L
 
FLASH_CE_SEL0


	)

189 
	#NAND_RESET
 0xFF

	)

190 
	#NAND_READ1
 0x00

	)

191 
	#NAND_READ2
 0x30

	)

192 
	#NAND_PROGRAM1
 0x80

	)

193 
	#NAND_PROGRAM2
 0x10

	)

194 
	#NAND_ERASE1
 0x60

	)

195 
	#NAND_ERASE2
 0xD0

	)

196 
	#NAND_STATUS
 0x70

	)

197 
	#NAND_READ_ID
 0x90

	)

199 
	#NAND_RD_READ
 0xE005

	)

200 
	#NAND_RD_PROGRAM
 0x0085

	)

203 
	#NAND_BUS_INDEX
 3

204 
	#NAND_BUS16_BIT
 0x40

205 
	#NAND_PAGE_INDEX
 3

	)

206 
	#NAND_PAGE_BIT
 0x03

	)

208 
	#NAND_SECTOR_CNT
 128

209 
	#MAX_LEN
 0x20000

210 

	)

211 
	#CONFIG_NAND_EN_WRITE
 0

	)

212 
	eBIT_SET
 {

213 
	mUNSET_BIT
,

214 
	mSET_BIT


220 c⁄° *
	m«me
;

221 
u8
 
	mM_ID
;

222 
u32
 
	mD_ID
;

223 
u32
 
	m∑ge_size
;

224 
u32
 
	moob_size
;

225 } 
	t«nd_Êash_öfo
;

228 *
	mba£
;

229 
«nd_Êash_öfo
 
	möfo
;

230 
u32
 
	m∑ge_shi·
;

231 
u32
 
	mecc_code_size
;

232 
u32
 
	mecc_code_loc
;

233 
u32
 
	mecc_code_£˘‹_off
;

234 
u32
 
	m£˘‹_˙t
;

235 
u32
 
	m£˘‹_size
;

236 } 
	t«nd_Êash
;

243 
boﬁ
 
lﬂd_«nd_d©a
(
u32
* 
d°_mem
);

244 
«nd_ªad_£˘‹
(
«nd_Êash
 *
nfc
, 
u32
 
p_adr
);

245 
«nd_öô
(
«nd_Êash
 *
nfc
);

246 
«nd_ª£t
(
«nd_Êash
 *
nfc
);

247 
«nd_ªad_id
(
«nd_Êash
 *
nfc
, 
u8
 *
m_id
, 
u32
 *
d_id
);

248 
«nd_waô
(
«nd_Êash
 *
nfc
, 
u32
 
ªg
, u32 
bô_mask
, 
BIT_SET
 
bô£t
);

	@drivers/otp_rw.c

14 
	~"Ÿp.h
"

15 
	~"misc.h
"

16 
	~"¸m.h
"

18 
	#OPT_VDD18_CTLNB
 13

	)

19 
	#TRANSFER_TIMEOUT
 1000

	)

20 
	#TEST_LEN
 4

	)

22 
CK_UINT32
 
	gTEST_ADDR
[
TEST_LEN
] = {0x0, 0x1e, 0x20, 0x34};

23 
CK_UINT32
 
	gTEST_DATA
[
TEST_LEN
] = {0xa569, 0xc35a, 0x693c, 0x0ff0};

25 
	$¥ogøm_Ÿp
(
addr
, 
d©a
) {

26 
i
 = 0;

30 
	`wrôe_mªg32
(
ADDR_ROW
, 
addr
);

32 
	`wrôe_mªg32
(
GLB_CTRL
, 0x1);

34 
	`udñay
(5);

36 
i
 = 0; i < 16; i++) {

38 
	`wrôe_mªg32
(
ADDR_COL
, 
i
);

40 
	`wrôe_mªg32
(
PAS
, 0x0);

42 
	`wrôe_mªg32
(
PDIN
, 
d©a
);

44 
	`wrôe_mªg32
(
GLB_CTRL
, 0x3);

46 
	`udñay
(12);

48 
	`wrôe_mªg32
(
GLB_CTRL
, 0x1);

50 
	`udñay
(1);

52 
	`wrôe_mªg32
(
PAS
, 0x1);

54 
	`wrôe_mªg32
(
GLB_CTRL
, 0x3);

56 
	`udñay
(12);

58 
	`wrôe_mªg32
(
GLB_CTRL
, 0x1);

60 
	`udñay
(1);

62 
d©a
 = data >> 1;

66 
	`wrôe_mªg32
(
PDIN
, 0x0);

68 
	`udñay
(5);

71 
	`wrôe_mªg32
(
GLB_CTRL
, 0x0);

73 
	`udñay
(5);

74 
	}
}

77 
	$CK_OTP_Te°
() {

78 
ªsu…
 = 0;

79 
i
 = 0;

80 
°¨t
 = 0;

82 
	`CK_Gpio_Ouçut
(
OPT_VDD18_CTLNB
, 0);

84 
ªsu…
 = 
	`ªad_mªg32
(
CK_CRM_ADDR
 + 
BLK_SW_RST0
);

85 
	`wrôe_mªg32
(
CK_CRM_ADDR
 + 
BLK_SW_RST0
, 
ªsu…
 | 
OTP_SW_RST
);

87 
	`¥ötf
("\nOTP Controller Test. . . \n");

93 
°¨t
 = 0;

95 i‡(
	`ªad_mªg32
(
OTP_STATUS
)) {

98 
°¨t
 += 1;

99 
	`udñay
(10);

100 } 
°¨t
 < 
TRANSFER_TIMEOUT
);

102 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

103 
	`¥ötf
("\t\tOTPÇotÑeady, Test Fail\n");

107 
	`¥ötf
("\t# Check default data #\n");

110 
i
 = 0; i < 
TEST_LEN
; i++) {

111 
ªsu…
 = 
	`ªad_mªg16
(
OTP_BASE_ADDR
 + 
TEST_ADDR
[
i
]);

112 i‡(
ªsu…
 != 0xFFFF) {

113 
	`¥ötf
("\t\tAddress 0x%x default value 0x%x != 0xFFFF, Test Fail\n",

114 
TEST_ADDR
[
i
], 
ªsu…
);

121 
	`wrôe_mªg32
(
LOW_POWER
, 0x2);

124 
	`udñay
(100);

126 
	`¥ötf
("\t# ProgramÉMemory #\n");

129 
	`wrôe_mªg32
(
TEST_CTRL
, 0x2);

131 
	`wrôe_mªg32
(
LOW_POWER
, 0x0);

133 
°¨t
 = 0;

135 i‡(
	`ªad_mªg32
(
OTP_STATUS
)) {

138 
°¨t
 += 1;

139 
	`udñay
(10);

140 } 
°¨t
 < 
TRANSFER_TIMEOUT
);

142 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

143 
	`¥ötf
("\t\tOTPÇotÑeady, Test Fail\n");

147 i‡(!
	`ªg_ªadbk32
(
TEST_CTRL
, 0x2)) {

148 
	`¥ötf
("\t\tTEST_CTRL value != 0x2, Test Fail\n");

153 
	`¥ogøm_Ÿp
(
TEST_ADDR
[0] / 2, 
TEST_DATA
[0]);

155 
	`¥ogøm_Ÿp
(
TEST_ADDR
[1] / 2, 
TEST_DATA
[1]);

158 
	`wrôe_mªg32
(
LOW_POWER
, 0x3);

161 
	`udñay
(100);

164 
	`wrôe_mªg32
(
TEST_CTRL
, 0x0);

166 
	`wrôe_mªg32
(
LOW_POWER
, 0x0);

168 
°¨t
 = 0;

170 i‡(
	`ªad_mªg32
(
OTP_STATUS
)) {

173 
°¨t
 += 1;

174 
	`udñay
(10);

175 } 
°¨t
 < 
TRANSFER_TIMEOUT
);

177 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

178 
	`¥ötf
("\t\tOTPÇotÑeady, Test Fail\n");

182 i‡(!
	`ªg_ªadbk32
(
TEST_CTRL
, 0x0)) {

183 
	`¥ötf
("\t\tTEST_CTRL value != 0x0, Test Fail\n");

188 
	`¥ötf
("\t\t# ReadÖrogram data #\n");

191 
i
 = 0; i < 2; i++) {

192 
ªsu…
 = 
	`ªad_mªg16
(
OTP_BASE_ADDR
 + 
TEST_ADDR
[
i
]);

193 i‡(
ªsu…
 !
TEST_DATA
[
i
]) {

194 
	`¥ötf
("\t\t Addr 0x%x data 0x%x != 0x%x, Test Fail\n",

195 
TEST_ADDR
[
i
], 
ªsu…
, 
TEST_DATA
[i]);

201 
	`wrôe_mªg32
(
LOW_POWER
, 0x2);

204 
	`udñay
(50);

206 
	`wrôe_mªg32
(
LOW_POWER
, 0x3);

209 
	`udñay
(50);

213 
	`wrôe_mªg32
(
LOW_POWER
, 0x2);

216 
	`udñay
(50);

220 
	`wrôe_mªg32
(
TEST_CTRL
, 0x2);

222 
	`wrôe_mªg32
(
LOW_POWER
, 0x0);

224 
°¨t
 = 0;

226 i‡(
	`ªad_mªg32
(
OTP_STATUS
)) {

229 
°¨t
 += 1;

230 
	`udñay
(10);

231 } 
°¨t
 < 
TRANSFER_TIMEOUT
);

233 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

234 
	`¥ötf
("\t\tOTPÇotÑeady, Test Fail\n");

238 i‡(!
	`ªg_ªadbk32
(
TEST_CTRL
, 0x2)) {

239 
	`¥ötf
("\t\tTEST_CTRL value != 0x2, Test Fail\n");

244 
	`¥ogøm_Ÿp
(
TEST_ADDR
[2] / 2, 
TEST_DATA
[2]);

246 
	`¥ogøm_Ÿp
(
TEST_ADDR
[3] / 2, 
TEST_DATA
[3]);

249 
	`wrôe_mªg32
(
LOW_POWER
, 0x2);

252 
	`udñay
(50);

255 
	`wrôe_mªg32
(
TEST_CTRL
, 0x0);

257 
	`wrôe_mªg32
(
LOW_POWER
, 0x0);

260 
°¨t
 = 0;

262 i‡(
	`ªad_mªg32
(
OTP_STATUS
)) {

265 
°¨t
 += 1;

266 
	`udñay
(10);

267 } 
°¨t
 < 
TRANSFER_TIMEOUT
);

269 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

270 
	`¥ötf
("\t\tOTPÇotÑeady, Test Fail\n");

275 
	`¥ötf
("\t\t# ReadÖrogram data #\n");

277 
i
 = 2; i < 4; i++) {

278 
ªsu…
 = 
	`ªad_mªg16
(
OTP_BASE_ADDR
 + 
TEST_ADDR
[
i
]);

279 i‡(
ªsu…
 !
TEST_DATA
[
i
]) {

280 
	`¥ötf
("\t\t Addr 0x%x data 0x%x != 0x%x, Test Fail\n",

281 
TEST_ADDR
[
i
], 
ªsu…
, 
TEST_DATA
[i]);

286 
	`¥ötf
("\n\tOTP Test PASS. . . \n");

287 
	}
}

	@drivers/pinmux.c

10 
	~"pömux.h
"

12 
	$pömux_£t_func
(
pö_offs
, 
func
)

14 
u32
 
ªg
 = 
	`ªad_mªg32
(
CK_PINMUX_C⁄åﬁ
 + 
pö_offs
);

15 
ªg
 = (ªg & 
PMUX_FUNC_MASK
Ë| (
func
 & 0x3);

16 
	`wrôe_mªg32
(
CK_PINMUX_C⁄åﬁ
 + 
pö_offs
, 
ªg
);

17 
	}
}

	@drivers/pinmux.h

10 #i‚de‡
_PINMUX_H_


11 
	#_PINMUX_H_


	)

13 
	~"ck810.h
"

14 
	~"d©©y≥.h
"

17 
	#POLARIS_PMUX_XOUT
 0x00

	)

18 
	#POLARIS_PMUX_XOUT_CLK27
 0x04

	)

19 
	#POLARIS_PMUX_OSC_CLKOUT
 0x08

	)

20 
	#POLARIS_PMUX_RESETN_OUT
 0x0C

	)

21 
	#POLARIS_PMUX_JTAG_TMS_CK860
 0x10

	)

22 
	#POLARIS_PMUX_JTAG_TDI_CK860
 0x14

	)

23 
	#POLARIS_PMUX_JTAG_TDO_CK860
 0x18

	)

24 
	#POLARIS_PMUX_JTAG_TRST_CK860
 0x1C

	)

25 
	#POLARIS_PMUX_JTAG_TCK_CK860
 0x20

	)

26 
	#POLARIS_PMUX_JTAG_TMS_CK810
 0x24

	)

27 
	#POLARIS_PMUX_JTAG_TDI_CK810
 0x28

	)

28 
	#POLARIS_PMUX_JTAG_TDO_CK810
 0x2C

	)

29 
	#POLARIS_PMUX_JTAG_TRST_CK810
 0x30

	)

30 
	#POLARIS_PMUX_JTAG_TCK_CK810
 0x34

	)

31 
	#POLARIS_PMUX_JTAG_TMS_UNI
 0x38

	)

32 
	#POLARIS_PMUX_JTAG_TDI_UNI
 0x3C

	)

33 
	#POLARIS_PMUX_JTAG_TDO_UNI
 0x40

	)

34 
	#POLARIS_PMUX_JTAG_TRST_UNI
 0x44

	)

35 
	#POLARIS_PMUX_JTAG_TCK_UNI
 0x48

	)

36 
	#POLARIS_PMUX_JTAG_TMS_CK610
 0x4C

	)

37 
	#POLARIS_PMUX_JTAG_TDI_CK610
 0x50

	)

38 
	#POLARIS_PMUX_JTAG_TDO_CK610
 0x54

	)

39 
	#POLARIS_PMUX_JTAG_TRST_CK610
 0x58

	)

40 
	#POLARIS_PMUX_JTAG_TCK_CK610
 0x5C

	)

41 
	#POLARIS_PMUX_JTAG_TMS_C50
 0x60

	)

42 
	#POLARIS_PMUX_JTAG_TDI_C50
 0x64

	)

43 
	#POLARIS_PMUX_JTAG_TDO_C50
 0x68

	)

44 
	#POLARIS_PMUX_JTAG_TRST_C50
 0x6C

	)

45 
	#POLARIS_PMUX_JTAG_TCK_C50
 0x70

	)

46 
	#POLARIS_PMUX_JTAG_TMS_C51
 0x74

	)

47 
	#POLARIS_PMUX_JTAG_TDI_C51
 0x78

	)

48 
	#POLARIS_PMUX_JTAG_TDO_C51
 0x7C

	)

49 
	#POLARIS_PMUX_JTAG_TRST_C51
 0x80

	)

50 
	#POLARIS_PMUX_JTAG_TCK_C51
 0x84

	)

51 
	#POLARIS_PMUX_JTAG_TMS_P60
 0x88

	)

52 
	#POLARIS_PMUX_JTAG_TDI_P60
 0x8C

	)

53 
	#POLARIS_PMUX_JTAG_TDO_P60
 0x90

	)

54 
	#POLARIS_PMUX_JTAG_TRST_P60
 0x94

	)

55 
	#POLARIS_PMUX_JTAG_TCK_P60
 0x98

	)

56 
	#POLARIS_PMUX_JTAG_TMS_P61
 0x9C

	)

57 
	#POLARIS_PMUX_JTAG_TDI_P61
 0xA0

	)

58 
	#POLARIS_PMUX_JTAG_TDO_P61
 0xA4

	)

59 
	#POLARIS_PMUX_JTAG_TRST_P61
 0xA8

	)

60 
	#POLARIS_PMUX_JTAG_TCK_P61
 0xAC

	)

61 
	#POLARIS_PMUX_NFC_CEN0
 0xB0

	)

62 
	#POLARIS_PMUX_NFC_CEN1
 0xB4

	)

63 
	#POLARIS_PMUX_NFC_CEN2
 0xB8

	)

64 
	#POLARIS_PMUX_NFC_CEN3
 0xBC

	)

65 
	#POLARIS_PMUX_NFC_CLE
 0xC0

	)

66 
	#POLARIS_PMUX_NFC_ALE
 0xC4

	)

67 
	#POLARIS_PMUX_NFC_WEN
 0xC8

	)

68 
	#POLARIS_PMUX_NFC_REN
 0xCC

	)

69 
	#POLARIS_PMUX_NFC_WPN
 0xD0

	)

70 
	#POLARIS_PMUX_NFC_RBN
 0xD4

	)

71 
	#POLARIS_PMUX_NFC_DATA0
 0xD8

	)

72 
	#POLARIS_PMUX_NFC_DATA1
 0xDC

	)

73 
	#POLARIS_PMUX_NFC_DATA2
 0xE0

	)

74 
	#POLARIS_PMUX_NFC_DATA3
 0xE4

	)

75 
	#POLARIS_PMUX_NFC_DATA4
 0xE8

	)

76 
	#POLARIS_PMUX_NFC_DATA5
 0xEC

	)

77 
	#POLARIS_PMUX_NFC_DATA6
 0xF0

	)

78 
	#POLARIS_PMUX_NFC_DATA7
 0xF4

	)

79 
	#POLARIS_PMUX_SFC_CLK
 0xF8

	)

80 
	#POLARIS_PMUX_SFC_CSN
 0xFC

	)

81 
	#POLARIS_PMUX_SFC_SIO_IO0
 0x100

	)

82 
	#POLARIS_PMUX_SFC_SOI_IO1
 0x104

	)

83 
	#POLARIS_PMUX_SFC_WP_IO2
 0x108

	)

84 
	#POLARIS_PMUX_SFC_HOLD_IO3
 0x10C

	)

85 
	#POLARIS_PMUX_SENSOR_CLK0
 0x110

	)

86 
	#POLARIS_PMUX_SENSOR_CLK1
 0x114

	)

87 
	#POLARIS_PMUX_FLASH_TRIG0
 0x118

	)

88 
	#POLARIS_PMUX_FLASH_TRIG1
 0x11C

	)

89 
	#POLARIS_PMUX_PRELIGHT_TRIG0
 0x120

	)

90 
	#POLARIS_PMUX_PRELIGHT_TRIG1
 0x124

	)

91 
	#POLARIS_PMUX_SHUTTER_OPEN0
 0x128

	)

92 
	#POLARIS_PMUX_SHUTTER_OPEN1
 0x12C

	)

93 
	#POLARIS_PMUX_I2S_MCLK_O
 0x130

	)

94 
	#POLARIS_PMUX_I2SM_SCLK
 0x134

	)

95 
	#POLARIS_PMUX_I2SM_DO
 0x138

	)

96 
	#POLARIS_PMUX_I2SM_WS
 0x13C

	)

97 
	#POLARIS_PMUX_SPI0_CLK
 0x140

	)

98 
	#POLARIS_PMUX_SPI0_MISO
 0x144

	)

99 
	#POLARIS_PMUX_SPI0_MOSI
 0x148

	)

100 
	#POLARIS_PMUX_SPI0_CSN0
 0x14C

	)

101 
	#POLARIS_PMUX_SPI0_CSN1
 0x150

	)

102 
	#POLARIS_PMUX_SPI0_CSN2
 0x154

	)

103 
	#POLARIS_PMUX_SPI0_CSN3
 0x158

	)

104 
	#POLARIS_PMUX_SPI1_CLK
 0x15C

	)

105 
	#POLARIS_PMUX_SPI1_MISO
 0x160

	)

106 
	#POLARIS_PMUX_SPI1_MOSI
 0x164

	)

107 
	#POLARIS_PMUX_SPI1_CSN
 0x168

	)

108 
	#POLARIS_PMUX_SPI2_CLK
 0x16C

	)

109 
	#POLARIS_PMUX_SPI2_MISO
 0x170

	)

110 
	#POLARIS_PMUX_SPI2_MOSI
 0x174

	)

111 
	#POLARIS_PMUX_SPI2_CSN
 0x178

	)

112 
	#POLARIS_PMUX_SPI3_CLK
 0x17C

	)

113 
	#POLARIS_PMUX_SPI3_MISO
 0x180

	)

114 
	#POLARIS_PMUX_SPI3_MOSI
 0x184

	)

115 
	#POLARIS_PMUX_SPI3_CSN
 0x188

	)

116 
	#POLARIS_PMUX_I2C0_SCLK
 0x18C

	)

117 
	#POLARIS_PMUX_I2C0_SDAT
 0x190

	)

118 
	#POLARIS_PMUX_I2C1_SCLK
 0x194

	)

119 
	#POLARIS_PMUX_I2C1_SDAT
 0x198

	)

120 
	#POLARIS_PMUX_I2C2_SCLK
 0x19C

	)

121 
	#POLARIS_PMUX_I2C2_SDAT
 0x1A0

	)

122 
	#POLARIS_PMUX_I2C3_SCLK
 0x1A4

	)

123 
	#POLARIS_PMUX_I2C3_SDAT
 0x1A8

	)

124 
	#POLARIS_PMUX_UART0_TXD
 0x1AC

	)

125 
	#POLARIS_PMUX_UART0_RTSN
 0x1B0

	)

126 
	#POLARIS_PMUX_UART0_CTSN
 0x1B4

	)

127 
	#POLARIS_PMUX_UART1_TXD
 0x1B8

	)

128 
	#POLARIS_PMUX_UART1_RTSN
 0x1BC

	)

129 
	#POLARIS_PMUX_UART1_CTSN
 0x1C0

	)

130 
	#POLARIS_PMUX_UART2_TXD
 0x1C4

	)

131 
	#POLARIS_PMUX_UART2_RTSN
 0x1C8

	)

132 
	#POLARIS_PMUX_UART2_CTSN
 0x1CC

	)

133 
	#POLARIS_PMUX_UART3_TXD
 0x1D0

	)

134 
	#POLARIS_PMUX_UART3_RTSN
 0x1D4

	)

135 
	#POLARIS_PMUX_UART3_CTSN
 0x1D8

	)

136 
	#POLARIS_PMUX_UART4_TXD
 0x1DC

	)

137 
	#POLARIS_PMUX_UART4_RTSN
 0x1E0

	)

138 
	#POLARIS_PMUX_UART4_CTSN
 0x1E4

	)

139 
	#POLARIS_PMUX_DSP_UART0_RXD
 0x1E8

	)

140 
	#POLARIS_PMUX_DSP_UART0_TXD
 0x1EC

	)

141 
	#POLARIS_PMUX_DSP_UART1_RXD
 0x1F0

	)

142 
	#POLARIS_PMUX_DSP_UART1_TXD
 0x1F4

	)

143 
	#POLARIS_PMUX_DSP_UART2_RXD
 0x1F8

	)

144 
	#POLARIS_PMUX_DSP_UART2_TXD
 0x1FC

	)

145 
	#POLARIS_PMUX_DSP_UART3_TXD
 0x200

	)

146 
	#POLARIS_PMUX_SCI7816_CLK
 0x204

	)

147 
	#POLARIS_PMUX_SCI7816_RST
 0x208

	)

148 
	#POLARIS_PMUX_SCI7816_IO
 0x20C

	)

149 
	#POLARIS_PMUX_GMAC_TXCLK
 0x210

	)

150 
	#POLARIS_PMUX_GMAC_TXD0
 0x214

	)

151 
	#POLARIS_PMUX_GMAC_TXD1
 0x218

	)

152 
	#POLARIS_PMUX_GMAC_TXD2
 0x21C

	)

153 
	#POLARIS_PMUX_GMAC_TXD3
 0x220

	)

154 
	#POLARIS_PMUX_GMAC_TXEN
 0x224

	)

155 
	#POLARIS_PMUX_GMAC_MDIO_D
 0x228

	)

156 
	#POLARIS_PMUX_GMAC_MDIO_CLK
 0x22C

	)

157 
	#POLARIS_PMUX_SD0_CMD
 0x230

	)

158 
	#POLARIS_PMUX_SD0_CLK
 0x234

	)

159 
	#POLARIS_PMUX_SD0_D0
 0x238

	)

160 
	#POLARIS_PMUX_SD0_D1
 0x23C

	)

161 
	#POLARIS_PMUX_SD0_D2
 0x240

	)

162 
	#POLARIS_PMUX_SD0_D3
 0x244

	)

163 
	#POLARIS_PMUX_SD1_CMD
 0x248

	)

164 
	#POLARIS_PMUX_SD1_CLK
 0x24C

	)

165 
	#POLARIS_PMUX_SD1_D0
 0x250

	)

166 
	#POLARIS_PMUX_SD1_D1
 0x254

	)

167 
	#POLARIS_PMUX_SD1_D2
 0x258

	)

168 
	#POLARIS_PMUX_SD1_D3
 0x25C

	)

169 
	#POLARIS_PMUX_TS_PSI_CLK
 0x260

	)

170 
	#POLARIS_PMUX_TS_PSI_DVALID
 0x264

	)

171 
	#POLARIS_PMUX_TS_PSI_PSYNC
 0x268

	)

172 
	#POLARIS_PMUX_TS_PSI_DATA0
 0x26C

	)

173 
	#POLARIS_PMUX_TS_PSI_DATA1
 0x270

	)

174 
	#POLARIS_PMUX_TS_PSI_DATA2
 0x274

	)

175 
	#POLARIS_PMUX_TS_PSI_DATA3
 0x278

	)

176 
	#POLARIS_PMUX_TS_PSI_DATA4
 0x27C

	)

177 
	#POLARIS_PMUX_TS_PSI_DATA5
 0x280

	)

178 
	#POLARIS_PMUX_TS_PSI_DATA6
 0x284

	)

179 
	#POLARIS_PMUX_TS_PSI_DATA7
 0x288

	)

180 
	#POLARIS_PMUX_CLK27_OUT
 0x28C

	)

181 
	#POLARIS_PMUX_VO_CLK
 0x290

	)

182 
	#POLARIS_PMUX_VO_D0
 0x294

	)

183 
	#POLARIS_PMUX_VO_D1
 0x298

	)

184 
	#POLARIS_PMUX_VO_D2
 0x29C

	)

185 
	#POLARIS_PMUX_VO_D3
 0x2A0

	)

186 
	#POLARIS_PMUX_VO_D4
 0x2A4

	)

187 
	#POLARIS_PMUX_VO_D5
 0x2A8

	)

188 
	#POLARIS_PMUX_VO_D6
 0x2AC

	)

189 
	#POLARIS_PMUX_VO_D7
 0x2B0

	)

190 
	#POLARIS_PMUX_VO_D8
 0x2B4

	)

191 
	#POLARIS_PMUX_VO_D9
 0x2B8

	)

192 
	#POLARIS_PMUX_VO_D10
 0x2BC

	)

193 
	#POLARIS_PMUX_VO_D11
 0x2C0

	)

194 
	#POLARIS_PMUX_VO_D12
 0x2C4

	)

195 
	#POLARIS_PMUX_VO_D13
 0x2C8

	)

196 
	#POLARIS_PMUX_VO_D14
 0x2CC

	)

197 
	#POLARIS_PMUX_VO_D15
 0x2D0

	)

198 
	#POLARIS_PMUX_VO_D16
 0x2D4

	)

199 
	#POLARIS_PMUX_VO_D17
 0x2D8

	)

200 
	#POLARIS_PMUX_VO_D18
 0x2DC

	)

201 
	#POLARIS_PMUX_VO_D19
 0x2E0

	)

202 
	#POLARIS_PMUX_VO_D20
 0x2E4

	)

203 
	#POLARIS_PMUX_VO_D21
 0x2E8

	)

204 
	#POLARIS_PMUX_VO_D22
 0x2EC

	)

205 
	#POLARIS_PMUX_VO_D23
 0x2F0

	)

206 
	#POLARIS_PMUX_VO_DE
 0x2F4

	)

207 
	#POLARIS_PMUX_VO_HSYNC
 0x2F8

	)

208 
	#POLARIS_PMUX_VO_VSYNC
 0x2FC

	)

209 
	#POLARIS_PMUX_APTS_SPI_CS
 0x300

	)

210 
	#POLARIS_PMUX_APTS_SPI_CLK
 0x304

	)

211 
	#POLARIS_PMUX_APTS_SPI_MOSI
 0x308

	)

212 
	#POLARIS_PMUX_APTS_INT_TYPE0
 0x30C

	)

213 
	#POLARIS_PMUX_APTS_INT_TYPE1
 0x310

	)

214 
	#POLARIS_PMUX_APTS_INT
 0x314

	)

215 
	#POLARIS_PMUX_APTS_REQ
 0x318

	)

216 
	#POLARIS_PMUX_APTS_I2S_WS
 0x31C

	)

217 
	#POLARIS_PMUX_GPIOA0
 0x320

	)

218 
	#POLARIS_PMUX_GPIOA1
 0x324

	)

219 
	#POLARIS_PMUX_GPIOA2
 0x328

	)

220 
	#POLARIS_PMUX_GPIOA3
 0x32C

	)

221 
	#POLARIS_PMUX_GPIOA4
 0x330

	)

222 
	#POLARIS_PMUX_GPIOA5
 0x334

	)

223 
	#POLARIS_PMUX_GPIOA6
 0x338

	)

224 
	#POLARIS_PMUX_GPIOA7
 0x33C

	)

225 
	#POLARIS_PMUX_GPIOA8
 0x340

	)

226 
	#POLARIS_PMUX_GPIOA9
 0x344

	)

227 
	#POLARIS_PMUX_GPIOA10
 0x348

	)

228 
	#POLARIS_PMUX_GPIOA11
 0x34C

	)

229 
	#POLARIS_PMUX_GPIOA12
 0x350

	)

230 
	#POLARIS_PMUX_GPIOA13
 0x354

	)

231 
	#POLARIS_PMUX_GPIOA14
 0x358

	)

232 
	#POLARIS_PMUX_GPIOA15
 0x35C

	)

233 
	#POLARIS_PMUX_GPIOA16
 0x360

	)

234 
	#POLARIS_PMUX_GPIOA17
 0x364

	)

235 
	#POLARIS_PMUX_GPIOA18
 0x368

	)

236 
	#POLARIS_PMUX_GPIOA19
 0x36C

	)

237 
	#POLARIS_PMUX_GPIOA20
 0x370

	)

238 
	#POLARIS_PMUX_GPIOA21
 0x374

	)

239 
	#POLARIS_PMUX_GPIOA22
 0x378

	)

240 
	#POLARIS_PMUX_GPIOA23
 0x37C

	)

241 
	#POLARIS_PMUX_GPIOA24
 0x380

	)

242 
	#POLARIS_PMUX_GPIOA25
 0x384

	)

243 
	#POLARIS_PMUX_GPIOA26
 0x388

	)

244 
	#POLARIS_PMUX_GPIOA27
 0x38C

	)

245 
	#POLARIS_PMUX_GPIOA28
 0x390

	)

246 
	#POLARIS_PMUX_GPIOA29
 0x394

	)

247 
	#POLARIS_PMUX_GPIOA30
 0x398

	)

248 
	#POLARIS_PMUX_GPIOA31
 0x39C

	)

249 
	#POLARIS_PMUX_PWM0
 0x3A0

	)

250 
	#POLARIS_PMUX_PWM1
 0x3A4

	)

251 
	#POLARIS_PMUX_PWM2
 0x3A8

	)

252 
	#POLARIS_PMUX_PWM3
 0x3AC

	)

253 
	#POLARIS_PMUX_PWM4
 0x3B0

	)

254 
	#POLARIS_PMUX_PWM5
 0x3B4

	)

255 
	#POLARIS_PMUX_PWM6
 0x3B8

	)

256 
	#POLARIS_PMUX_PWM7
 0x3BC

	)

257 
	#POLARIS_PMUX_PADLEVELSEL
 0x400

	)

259 
	#PMUX_FUNC_MASK
 0xfffffffc

	)

261 
pömux_£t_func
(
pö_offs
, 
func
);

	@drivers/pll.c

5 
	~"ck810.h
"

6 
	~"¸m.h
"

7 
	~"d©©y≥.h
"

8 
	~"misc.h
"

9 
	~"pmu.h
"

11 #ifde‡
CONFIG_IS_ASIC


12 
	$∂l_öô
()

14 
u32
 
vÆ
;

16 #i‡
DOMAIN_CK810_POWER_OFF


17 
	`¥ötf
("domain CK810Öower down\n");

18 
	`domaö_powî_off
(
CK810_POWER_GATING_CTL
, 
CK810_HARD_PWR_CTL
);

20 #i‡
DOMAIN_ISP_POWER_OFF


21 
	`¥ötf
("domain ISPÖower down\n");

22 
	`domaö_powî_off
(
ISP_POWER_GATING_CTL
, 
ISP_HARD_PWR_CTL
);

24 #i‡
DOMAIN_GC620_POWER_OFF


25 
	`¥ötf
("domain GC620Öower down\n");

26 
	`domaö_powî_off
(
GC620_POWER_GATING_CTL
, 
GC620_HARD_PWR_CTL
);

28 #i‡
DOMAIN_AVS_POWER_OFF


29 
	`¥ötf
("domain AVSÖower down\n");

30 
	`domaö_powî_off
(
AVS_POWER_GATING_CTL
, 
AVS2_HARD_PWR_CTL
);

32 #i‡
DOMAIN_VC8000E_POWER_OFF


33 
	`¥ötf
("domain VC8000EÖower down\n");

34 
	`domaö_powî_off
(
VC8000E_POWER_GATING_CTL
, 
VC8000E_HARD_PWR_CTL
);

36 #i‡
DOMAIN_AI_POWER_OFF


37 
	`¥ötf
("domain AIÖower down\n");

38 
	`domaö_powî_off
(
AI_POWER_GATING_CTL
, 
VIP_HARD_PWR_CTL
);

42 !(
	`¸m_ªadl
(
SYS_PLL_LOCK
) & 0x01));

43 !(
	`¸m_ªadl
(
CK_PLL_LOCK
) & 0x01));

44 !(
	`¸m_ªadl
(
UNI_PLL_LOCK
) & 0x01));

55 
	`¸m_wrôñ
(0x01, 
SYS_PLL_BYP
);

56 
	`¸m_wrôñ
(0x0b, 
SYS_PLL_PD
);

57 
	`¸m_wrôñ
(0x01, 
CK_PLL_BYP
);

58 
	`¸m_wrôñ
(0x0b, 
CK_PLL_PD
);

59 
	`¸m_wrôñ
(0x01, 
UNI_PLL_BYP
);

60 
	`¸m_wrôñ
(0x0b, 
UNI_PLL_PD
);

61 
	`¸m_wrôñ
(0x01, 
VIDEO0_PLL_BYP
);

62 
	`¸m_wrôñ
(0x0f, 
VIDEO0_PLL_PD
);

63 
	`¸m_wrôñ
(0x01, 
VIDEO1_PLL_BYP
);

64 
	`¸m_wrôñ
(0x0f, 
VIDEO1_PLL_PD
);

65 
	`¸m_wrôñ
(0x01, 
DSP_PLL_BYP
);

66 
	`¸m_wrôñ
(0x0f, 
DSP_PLL_PD
);

67 
	`¸m_wrôñ
(0x01, 
TSM_PLL_BYP
);

68 
	`¸m_wrôñ
(0x0f, 
TSM_PLL_PD
);

69 
	`¸m_wrôñ
(0x01, 
GMAC_PLL_BYP
);

70 
	`¸m_wrôñ
(0x0f, 
GMAC_PLL_PD
);

71 
	`¸m_wrôñ
(0x01, 
PIXEL_PLL_BYP
);

72 
	`¸m_wrôñ
(0x0f, 
PIXEL_PLL_PD
);

73 
	`¸m_wrôñ
(0x01, 
AUDIO_PLL_BYP
);

74 
	`¸m_wrôñ
(0x0f, 
AUDIO_PLL_PD
);

75 
	`¸m_wrôñ
(0x01, 
SENSOR_PLL_BYP
);

76 
	`¸m_wrôñ
(0x0f, 
SENSOR_PLL_PD
);

81 
	`£t_∂l_∑øm
(3, 100, 2, 1, 
SYS_PLL_PARAM
);

82 
	`£t_∂l_∑øm
(3, 177, 2, 1, 
CK_PLL_PARAM
);

84 
	`£t_∂l_∑øm
(3, 233, 2, 1, 
UNI_PLL_PARAM
);

85 
	`£t_∂l_∑øm
(3, 200, 1, 1, 
VIDEO0_PLL_PARAM
);

86 
	`£t_∂l_∑øm
(2, 100, 1, 1, 
VIDEO1_PLL_PARAM
);

87 
	`£t_∂l_∑øm
(2, 100, 1, 1, 
DSP_PLL_PARAM
);

88 #i‡
TSMPLL_24M_CLOCKIN


89 
	`£t_∂l_∑øm
(3, 175, 2, 1, 
TSM_PLL_PARAM
);

91 
	`£t_∂l_∑øm
(3, 192, 2, 1, 
TSM_PLL_PARAM
);

93 
	`£t_∂l_∑øm
(2, 125, 1, 1, 
GMAC_PLL_PARAM
);

94 
	`£t_∂l_∑øm
(2, 99, 1, 1, 
PIXEL_PLL_PARAM
);

95 
	`£t_∂l_∑øm
(2, 128, 1, 1, 
AUDIO_PLL_PARAM
);

96 
	`£t_∂l_∑øm
(2, 99, 1, 1, 
SENSOR_PLL_PARAM
);

99 
	`¸m_wrôñ
(0x0a, 
SYS_PLL_PD
);

100 
	`¸m_wrôñ
(0x0a, 
CK_PLL_PD
);

101 
	`¸m_wrôñ
(0x0a, 
UNI_PLL_PD
);

102 
	`¸m_wrôñ
(0x0a, 
VIDEO0_PLL_PD
);

103 
	`¸m_wrôñ
(0x0a, 
VIDEO1_PLL_PD
);

104 
	`¸m_wrôñ
(0x0a, 
DSP_PLL_PD
);

105 
	`¸m_wrôñ
(0x0a, 
TSM_PLL_PD
);

106 
	`¸m_wrôñ
(0x0a, 
GMAC_PLL_PD
);

107 
	`¸m_wrôñ
(0x0a, 
PIXEL_PLL_PD
);

108 
	`¸m_wrôñ
(0x0a, 
AUDIO_PLL_PD
);

109 
	`¸m_wrôñ
(0x0a, 
SENSOR_PLL_PD
);

112 !(
	`¸m_ªadl
(
SYS_PLL_LOCK
) & 0x01));

113 !(
	`¸m_ªadl
(
CK_PLL_LOCK
) & 0x01));

114 !(
	`¸m_ªadl
(
UNI_PLL_LOCK
) & 0x01));

115 !(
	`¸m_ªadl
(
VIDEO0_PLL_LOCK
) & 0x01));

116 !(
	`¸m_ªadl
(
VIDEO1_PLL_LOCK
) & 0x01));

117 !(
	`¸m_ªadl
(
DSP_PLL_LOCK
) & 0x01));

118 !(
	`¸m_ªadl
(
TSM_PLL_LOCK
) & 0x01));

119 !(
	`¸m_ªadl
(
GMAC_PLL_LOCK
) & 0x01));

120 !(
	`¸m_ªadl
(
PIXEL_PLL_LOCK
) & 0x01));

121 !(
	`¸m_ªadl
(
AUDIO_PLL_LOCK
) & 0x01));

122 !(
	`¸m_ªadl
(
SENSOR_PLL_LOCK
) & 0x01));

126 
	`¸m_wrôñ
(0x001fff00, 
BLK_CLK_ICG0
);

127 
	`¸m_wrôñ
(0x00001fff, 
BLK_CLK_ICG1
);

128 
	`¸m_wrôñ
(0x0000007f, 
BLK_CLK_ICG2
);

129 
	`¸m_wrôñ
(0x82000003, 
BLK_CLK_ICG3
);

133 
	`¸m_wrôñ
(0x001fff00, 
BLK_SW_RST0
);

135 
vÆ
 = 0x00000461;

136 #i‡
IP_RELEASE_RSCODEC


137 
vÆ
 |
	`BIT
(12);

139 #i‡
IP_RELEASE_TSPSI


140 
vÆ
 |
	`BIT
(11);

143 #i‡!
DOMAIN_AVS_POWER_OFF


144 #i‡
IP_RELEASE_AVS610


145 
vÆ
 |
	`BIT
(9);

147 #i‡
IP_RELEASE_AVSP


148 
vÆ
 |
	`BIT
(8);

150 #i‡
IP_RELEASE_AVS2


151 
vÆ
 |
	`BIT
(7);

155 #i‡!
DOMAIN_VC8000E_POWER_OFF


156 
vÆ
 |
	`BIT
(4);

159 #i‡!
DOMAIN_GC620_POWER_OFF


160 
vÆ
 |
	`BIT
(3);

163 #i‡!
DOMAIN_ISP_POWER_OFF


164 
vÆ
 |(
	`BIT
(1) | BIT(2));

166 
	`¸m_wrôñ
(
vÆ
, 
BLK_SW_RST1
);

168 #i‡
DOMAIN_AI_POWER_OFF


169 
vÆ
 = 0x00;

171 
vÆ
 = 
	`BIT
(4);

172 #i‡
IP_RELEASE_C50_CORE


173 
vÆ
 |
	`BIT
(0);

175 #i‡
IP_RELEASE_C51_CORE


176 
vÆ
 |
	`BIT
(1);

178 #i‡
IP_RELEASE_P60_CORE


179 
vÆ
 |
	`BIT
(2);

181 #i‡
IP_RELEASE_P61_CORE


182 
vÆ
 |
	`BIT
(3);

184 #i‡
IP_RELEASE_CAMB


185 
vÆ
 |
	`BIT
(5);

187 #i‡
IP_RELEASE_CDVS


188 
vÆ
 |
	`BIT
(6);

190 #i‡
IP_RELEASE_C50_CSR


191 
vÆ
 |
	`BIT
(7);

193 #i‡
IP_RELEASE_C51_CSR


194 
vÆ
 |
	`BIT
(8);

196 #i‡
IP_RELEASE_P60_CSR


197 
vÆ
 |
	`BIT
(9);

199 #i‡
IP_RELEASE_P61_CSR


200 
vÆ
 |
	`BIT
(10);

202 #i‡
IP_RELEASE_WDT_C50


203 
vÆ
 |
	`BIT
(16);

205 #i‡
IP_RELEASE_WDT_C51


206 
vÆ
 |
	`BIT
(17);

208 #i‡
IP_RELEASE_WDT_P60


209 
vÆ
 |
	`BIT
(18);

211 #i‡
IP_RELEASE_WDT_P61


212 
vÆ
 |
	`BIT
(19);

214 #i‡
IP_RELEASE_TIMER_DSP


215 
vÆ
 |
	`BIT
(20);

217 #i‡
IP_RELEASE_UART0_DSP


218 
vÆ
 |
	`BIT
(21);

220 #i‡
IP_RELEASE_UART1_DSP


221 
vÆ
 |
	`BIT
(22);

223 #i‡
IP_RELEASE_UART2_DSP


224 
vÆ
 |
	`BIT
(23);

226 #i‡
IP_RELEASE_UART3_DSP


227 
vÆ
 |
	`BIT
(24);

230 
	`¸m_wrôñ
(
vÆ
, 
BLK_SW_RST2
);

232 
	`¸m_wrôñ
(0x82000003, 
BLK_SW_RST3
);

235 
	`¸m_wrôñ
(0x3110, 
SYS_CLK_CFG
);

236 
	`¸m_wrôñ
(0x01, 
CK860_CLK_CFG
);

237 
	`¸m_wrôñ
(0x01, 
CK810_CLK_CFG
);

239 
	`¸m_wrôñ
(0x01, 
XDMA_CLK_CFG
);

240 
	`¸m_wrôñ
(0x05, 
GMAC_CLK_CFG
);

241 
	`¸m_wrôñ
(0x101, 
SDIO_CLK_CFG
);

242 
	`¸m_wrôñ
(0x0e, 
PCIE_CLK_CFG
);

243 
	`¸m_wrôñ
(0x307c, 
I2S_CLK_CFG
);

244 
	`¸m_wrôñ
(0x03, 
VIN_CLK_CFG
);

245 
	`¸m_wrôñ
(0x03, 
VDEC_CLK_CFG
);

246 
	`¸m_wrôñ
(0x03, 
VENC_CLK_CFG
);

247 
	`¸m_wrôñ
(0x03, 
JPEG_CLK_CFG
);

248 
	`¸m_wrôñ
(0x03, 
ISP_CLK_CFG
);

249 
	`¸m_wrôñ
(0x01, 
GPU_CLK_CFG
);

250 
	`¸m_wrôñ
(0x07, 
VOUT_CLK_CFG
);

251 
	`¸m_wrôñ
(0x121, 
AVS2_CLK_CFG
);

252 #i‡
TSMPLL_24M_CLOCKIN


254 
	`¸m_wrôñ
(0x00, 
TSMPLL_REFCLK_CFG
);

255 
	`¸m_wrôñ
(0x00, 
CAMB_CLK_CFG
);

258 
	`¸m_wrôñ
(0x01, 
TSMPLL_REFCLK_CFG
);

259 
	`¸m_wrôñ
(0x2bf1, 
TS_CLK_CFG
);

261 
	`¸m_wrôñ
(0x01, 
C5_CLK_CFG
);

262 
	`¸m_wrôñ
(0x01, 
P6_CLK_CFG
);

263 
	`¸m_wrôñ
(0x303, 
CDVS_CLK_CFG
);

264 
	`¸m_wrôñ
(0x01, 
VIP_CLK_CFG
);

265 
	`¸m_wrôñ
(0x0e, 
SCI_CLK_CFG
);

266 
	`¸m_wrôñ
(0x00, 
TIMER_CLK_CFG
);

267 
	`¸m_wrôñ
(0x62, 
SENSOR0_CLK_CFG
);

268 
	`¸m_wrôñ
(0x62, 
SENSOR1_CLK_CFG
);

269 
	`¸m_wrôñ
(0x07, 
DISPLAY_CLK_CFG
);

273 
	`¸m_wrôñ
(0x00, 
BLK_CLK_ICG0
);

275 
vÆ
 = 0x00;

276 #i‡!
IP_RELEASE_RSCODEC


277 
vÆ
 |
	`BIT
(12);

279 #i‡!
IP_RELEASE_TSPSI


280 
vÆ
 |
	`BIT
(11);

283 #i‡
DOMAIN_AVS_POWER_OFF


284 
vÆ
 |(
	`BIT
(7) | BIT(8) | BIT(9));

286 #i‡!
IP_RELEASE_AVS610


287 
vÆ
 |
	`BIT
(9);

289 #i‡!
IP_RELEASE_AVSP


290 
vÆ
 |
	`BIT
(8);

292 #i‡!
IP_RELEASE_AVS2


293 
vÆ
 |
	`BIT
(7);

297 #i‡
DOMAIN_VC8000E_POWER_OFF


298 
vÆ
 |
	`BIT
(4);

301 #i‡
DOMAIN_GC620_POWER_OFF


302 
vÆ
 |
	`BIT
(3);

305 #i‡
DOMAIN_ISP_POWER_OFF


306 
vÆ
 |(
	`BIT
(1) | BIT(2));

308 
	`¸m_wrôñ
(
vÆ
, 
BLK_CLK_ICG1
);

310 #i‡
DOMAIN_AI_POWER_OFF


311 
vÆ
 = 0x7f;

313 
vÆ
 = 0x00;

314 #i‡!
IP_RELEASE_C50_CORE


315 
vÆ
 |
	`BIT
(0);

317 #i‡!
IP_RELEASE_C51_CORE


318 
vÆ
 |
	`BIT
(1);

320 #i‡!
IP_RELEASE_P60_CORE


321 
vÆ
 |
	`BIT
(2);

323 #i‡!
IP_RELEASE_P61_CORE


324 
vÆ
 |
	`BIT
(3);

326 #i‡!
IP_RELEASE_CAMB


327 
vÆ
 |
	`BIT
(5);

329 #i‡!
IP_RELEASE_CDVS


330 
vÆ
 |
	`BIT
(6);

333 
	`¸m_wrôñ
(
vÆ
, 
BLK_CLK_ICG2
);

335 
	`¸m_wrôñ
(0x00, 
BLK_CLK_ICG3
);

336 
	`¸m_wrôñ
(0x00, 
BLK_CLK_ICG4
);

339 
	`¸m_wrôñ
(0x00, 
SYS_PLL_BYP
);

340 
	`¸m_wrôñ
(0x00, 
CK_PLL_BYP
);

342 
	`¸m_wrôñ
(0x00, 
VIDEO0_PLL_BYP
);

343 
	`¸m_wrôñ
(0x00, 
VIDEO1_PLL_BYP
);

344 
	`¸m_wrôñ
(0x00, 
DSP_PLL_BYP
);

345 
	`¸m_wrôñ
(0x00, 
TSM_PLL_BYP
);

346 
	`¸m_wrôñ
(0x00, 
GMAC_PLL_BYP
);

347 
	`¸m_wrôñ
(0x00, 
PIXEL_PLL_BYP
);

348 
	`¸m_wrôñ
(0x00, 
AUDIO_PLL_BYP
);

349 
	`¸m_wrôñ
(0x00, 
SENSOR_PLL_BYP
);

350 
	}
}

352 
	$dump_∂l_ªgs
()

354 #ifde‡
CONFIG_DUMP_VSI_PLL_REGS


355 
	`¥ötf
("\nDump PLLÑegisters:\n\n");

356 
	`¥ötf
("SYS_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
SYS_PLL_PARAM
));

357 
	`¥ötf
("CK_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
CK_PLL_PARAM
));

358 
	`¥ötf
("UNI_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
UNI_PLL_PARAM
));

359 
	`¥ötf
("VIDEO0_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
VIDEO0_PLL_PARAM
));

360 
	`¥ötf
("VIDEO1_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
VIDEO1_PLL_PARAM
));

361 
	`¥ötf
("DSP_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
DSP_PLL_PARAM
));

362 
	`¥ötf
("TSM_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
TSM_PLL_PARAM
));

363 
	`¥ötf
("GMAC_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
GMAC_PLL_PARAM
));

364 
	`¥ötf
("PIXEL_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
PIXEL_PLL_PARAM
));

365 
	`¥ötf
("AUDIO_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
AUDIO_PLL_PARAM
));

366 
	`¥ötf
("SENSOR_PLL_PARAM = 0x%x\n", 
	`¸m_ªadl
(
SENSOR_PLL_PARAM
));

367 
	`¥ötf
("SYS_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
SYS_CLK_CFG
));

368 
	`¥ötf
("CK860_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
CK860_CLK_CFG
));

369 
	`¥ötf
("CK810_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
CK810_CLK_CFG
));

370 
	`¥ötf
("UNI_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
UNI_CLK_CFG
));

371 
	`¥ötf
("XDMA_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
XDMA_CLK_CFG
));

372 
	`¥ötf
("GMAC_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
GMAC_CLK_CFG
));

373 
	`¥ötf
("SDIO_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
SDIO_CLK_CFG
));

374 
	`¥ötf
("PCIE_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
PCIE_CLK_CFG
));

375 
	`¥ötf
("I2S_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
I2S_CLK_CFG
));

376 
	`¥ötf
("VIN_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
VIN_CLK_CFG
));

377 
	`¥ötf
("VDEC_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
VDEC_CLK_CFG
));

378 
	`¥ötf
("VENC_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
VENC_CLK_CFG
));

379 
	`¥ötf
("JPEG_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
JPEG_CLK_CFG
));

380 
	`¥ötf
("ISP_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
ISP_CLK_CFG
));

381 
	`¥ötf
("GPU_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
GPU_CLK_CFG
));

382 
	`¥ötf
("VOUT_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
VOUT_CLK_CFG
));

383 
	`¥ötf
("AVS2_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
AVS2_CLK_CFG
));

384 
	`¥ötf
("TSMPLL_REFCLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
TSMPLL_REFCLK_CFG
));

385 
	`¥ötf
("TS_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
TS_CLK_CFG
));

386 
	`¥ötf
("C5_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
C5_CLK_CFG
));

387 
	`¥ötf
("P6_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
P6_CLK_CFG
));

388 
	`¥ötf
("CDVS_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
CDVS_CLK_CFG
));

389 
	`¥ötf
("VIP_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
VIP_CLK_CFG
));

390 
	`¥ötf
("CAMB_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
CAMB_CLK_CFG
));

391 
	`¥ötf
("SCI_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
SCI_CLK_CFG
));

392 
	`¥ötf
("GPIO_DBCLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
GPIO_DBCLK_CFG
));

393 
	`¥ötf
("TIMER_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
TIMER_CLK_CFG
));

394 
	`¥ötf
("SENSOR0_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
SENSOR0_CLK_CFG
));

395 
	`¥ötf
("SENSOR1_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
SENSOR1_CLK_CFG
));

396 
	`¥ötf
("DISPLAY_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
DISPLAY_CLK_CFG
));

397 
	`¥ötf
("MIPI_EXT_CLK_CFG = 0x%x\n", 
	`¸m_ªadl
(
MIPI_EXT_CLK_CFG
));

399 
	}
}

401 
	$dump_˛k_‰eq
()

403 #ifde‡
CONFIG_DUMP_VSI_CLK_FREQ


404 
u32
 
˛k
;

406 
	`¥ötf
("\nDump clock frequency:\n\n");

409 
	`¥ötf
("SYS_PLL_CLKO = %dHz\n", 
SYS_PLL_CLKO
);

410 
	`¥ötf
("CK_PLL_CLKO = %dHz\n", 
CK_PLL_CLKO
);

411 
	`¥ötf
("UNI_PLL_CLKO = %dHz\n", 
UNI_PLL_CLKO
);

412 
	`¥ötf
("DSP_PLL_CLKO = %dHz\n", 
DSP_PLL_CLKO
);

413 
	`¥ötf
("VIDEO_PLL0_CLKO = %dHz\n", 
VIDEO_PLL0_CLKO
);

414 
	`¥ötf
("VIDEO_PLL1_CLKO = %dHz\n", 
VIDEO_PLL1_CLKO
);

415 
	`¥ötf
("GMAC_PLL_CLKO = %dHz\n", 
GMAC_PLL_CLKO
);

416 
	`¥ötf
("PIXEL_PLL_CLKO = %dHz\n", 
PIXEL_PLL_CLKO
);

417 
	`¥ötf
("AUDIO_PLL_CLKO = %dHz\n", 
AUDIO_PLL_CLKO
);

418 
	`¥ötf
("SENSOR_PLL_CLKO = %dHz\n", 
SENSOR_PLL_CLKO
);

419 #i‡
TSMPLL_24M_CLOCKIN


420 
	`¥ötf
("TSM_PLL24_CLKO = %dHz\n", 
TSM_PLL24_CLKO
);

422 
	`¥ötf
("TSM_PLL27_CLKO = %dHz\n", 
TSM_PLL27_CLKO
);

426 
	`¥ötf
("ck860_c˛k = %dHz\n", 
CPU_DEFAULT_FREQ
);

427 
	`¥ötf
("ck860_a˛k = %dHz\n", 
CK_PLL_CLKO
 / ((
	`¸m_ªadl
(
CK860_CLK_CFG
) & 0x7) + 1));

428 i‡(
	`¸m_ªadl
(
CK810_CLK_CFG
) & 0x10) {

429 
	`¥ötf
("ck810_c˛k = %dHz\n", 
CK_PLL_CLKO
);

430 
	`¥ötf
("ck810_a˛k = %dHz\n", 
CK_PLL_CLKO
 / ((
	`¸m_ªadl
(
CK810_CLK_CFG
) & 0x7) + 1));

432 
	`¥ötf
("ck810_c˛k = %dHz\n", 
UNI_PLL_CLKO
);

433 
	`¥ötf
("ck810_a˛k = %dHz\n", 
UNI_PLL_CLKO
 / ((
	`¸m_ªadl
(
CK810_CLK_CFG
) & 0x7) + 1));

435 
	`¥ötf
("sys_a˛k_h = %dHz\n", 
SYS_ACLK_H
);

436 
	`¥ötf
("sys_a˛k_»%dHz\n", 
SYS_ACLK_L
);

437 
	`¥ötf
("sys_h˛k = %dHz\n", 
SYS_HCLK
);

438 
	`¥ötf
("sys_p˛k = %dHz\n", 
SYS_PCLK
);

439 
	`¥ötf
("sd0_c˛k = %dHz\n", 
SDIO0_DEFAULT_FREQ
);

440 
	`¥ötf
("sd1_c˛k = %dHz\n", 
SDIO1_DEFAULT_FREQ
);

441 
	`¥ötf
("hdma_h˛k = %dHz\n", 
SYS_HCLK
);

442 
	`¥ötf
("xdma_a˛k = %dHz\n", 
SYS_PLL_CLKO
 / ((
	`¸m_ªadl
(
XDMA_CLK_CFG
) & 0xf) + 1));

443 i‡(
	`¸m_ªadl
(
VIN_CLK_CFG
) & 0x10)

444 
	`¥ötf
("vö_a˛k = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
VIN_CLK_CFG
) & 0xf) + 1));

446 
	`¥ötf
("vö_a˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
VIN_CLK_CFG
) & 0xf) + 1));

447 i‡(
	`¸m_ªadl
(
VOUT_CLK_CFG
) & 0x10)

448 
	`¥ötf
("dc8000_˛k = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
VOUT_CLK_CFG
) & 0xf) + 1));

450 
	`¥ötf
("dc8000_˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
VOUT_CLK_CFG
) & 0xf) + 1));

451 
	`¥ötf
("dc_pix_˛k = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
DISPLAY_CLK_CFG
) & 0xff) + 1));

452 
	`¥ötf
("vc8000e_a˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
VENC_CLK_CFG
) & 0xf) + 1));

453 
	`¥ötf
("j≥g_a˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
JPEG_CLK_CFG
) & 0xf) + 1));

454 
	`¥ötf
("avs2_˛k = %dHz\n", 
VIDEO_PLL1_CLKO
 / ((
	`¸m_ªadl
(
AVS2_CLK_CFG
) & 0xf) + 1));

455 
	`¥ötf
("av•_˛k = %dHz\n", 
VIDEO_PLL1_CLKO
 / (((
	`¸m_ªadl
(
AVS2_CLK_CFG
) >> 4) & 0xf) + 1));

456 i‡(
	`¸m_ªadl
(
VDEC_CLK_CFG
) & 0x10)

457 
	`¥ötf
("vc8000d_a˛k = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
VDEC_CLK_CFG
) & 0xf) + 1));

459 
	`¥ötf
("vc8000d_a˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
VDEC_CLK_CFG
) & 0xf) + 1));

460 i‡(
	`¸m_ªadl
(
ISP_CLK_CFG
) & 0x10)

461 
	`¥ötf
("i•_˛k = %dHz\n", 
GMAC_PLL_CLKO
 / ((
	`¸m_ªadl
(
ISP_CLK_CFG
) & 0xf) + 1));

463 
	`¥ötf
("i•_˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
ISP_CLK_CFG
) & 0xf) + 1));

464 i‡(
	`¸m_ªadl
(
GPU_CLK_CFG
) & 0x10)

465 
	`¥ötf
("gc620_˛k1x = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
GPU_CLK_CFG
) & 0xf) + 1));

467 
	`¥ötf
("gc620_˛k1x = %dHz\n", 
VIDEO_PLL1_CLKO
 / ((
	`¸m_ªadl
(
GPU_CLK_CFG
) & 0xf) + 1));

469 #i‡
TSMPLL_24M_CLOCKIN


470 
	`¥ötf
("ˇmb_a˛k = %dHz\n", 
TSM_PLL24_CLKO
 / ((
	`¸m_ªadl
(
CAMB_CLK_CFG
) & 0xf) + 1));

472 
˛k
 = 
TSM_PLL27_CLKO
 / ((
	`¸m_ªadl
(
TS_CLK_CFG
) & 0xf) + 1);

473 
	`¥ötf
("tsm_˛k = %dHz\n", 
˛k
);

474 
˛k
 = clk / (((
	`¸m_ªadl
(
TS_CLK_CFG
) >> 4) & 0xf) + 1);

475 
	`¥ötf
("tsm_˛k27 = %dHz\n", 
˛k
);

476 i‡(
	`¸m_ªadl
(
TS_CLK_CFG
) & 0x10000)

477 
	`¥ötf
("°c_˛k27 = %dHz\n", 
PIXEL_PLL_CLKO
 / (((
	`¸m_ªadl
(
TS_CLK_CFG
) >> 8) & 0xff) + 1));

479 
	`¥ötf
("°c_˛k27 = %dHz\n", 
˛k
);

481 (
	`¸m_ªadl
(
VIP_CLK_CFG
) >> 4) & 0x03) {

483 
	`¥ötf
("vù_˛k = %dHz\n", 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
VIP_CLK_CFG
) & 0xf) + 1));

487 
	`¥ötf
("vù_˛k = %dHz\n", 
TSM_PLL27_CLKO
 / ((
	`¸m_ªadl
(
VIP_CLK_CFG
) & 0xf) + 1));

490 
	`¥ötf
("vù_˛k = %dHz\n", 
DSP_PLL_CLKO
 / ((
	`¸m_ªadl
(
VIP_CLK_CFG
) & 0xf) + 1));

496 
˛k
 = 
VIDEO_PLL0_CLKO
 / ((
	`¸m_ªadl
(
CDVS_CLK_CFG
) & 0xf) + 1);

497 
	`¥ötf
("cdvs_a˛k = %dHz\n", 
˛k
);

498 
	`¥ötf
("cdvs_p˛k = %dHz\n", 
˛k
 / (((
	`¸m_ªadl
(
CDVS_CLK_CFG
) >> 8) & 0xf) + 1));

499 
	`¥ötf
("£ns‹0_ªf˛k = %dHz\n", 
SENSOR_PLL_CLKO
 / ((
	`¸m_ªadl
(
SENSOR0_CLK_CFG
) & 0xfff) + 1));

500 
	`¥ötf
("£ns‹1_ªf˛k = %dHz\n", 
PIXEL_PLL_CLKO
 / ((
	`¸m_ªadl
(
SENSOR1_CLK_CFG
) & 0xfff) + 1));

502 
˛k
 = 
AUDIO_PLL_CLKO
 / ((
	`¸m_ªadl
(
I2S_CLK_CFG
) & 0xfff) + 1);

503 
	`¥ötf
("i2s_m˛k = %dHz\n", 
˛k
);

504 
	`¥ötf
("i2s_s˛k = %dHz\n", 
˛k
 / (((
	`¸m_ªadl
(
I2S_CLK_CFG
) >> 12) & 0xfff) + 1));

506 
	`¥ötf
("timî_˛k = %dHz\n", 
SYS_PCLK
 / ((
	`¸m_ªadl
(
TIMER_CLK_CFG
) & 0xffff) + 1));

508 
	}
}

	@drivers/pmu.c

5 
	~"ck810.h
"

6 
	~"misc.h
"

7 
	~"pmu.h
"

9 
	$domaö_powî_off
(
u32
 
g©ög
, u32 
pwr
) {

10 
u32
 
ªg
;

12 
	`¥ötf
("\n do domainÖower down. . . \n");

15 
	`pmu_wrôñ
(0x01, 
pwr
);

18 (
	`pmu_ªadl
(
pwr
) & 0x06) != 0x06);

21 i‡(
pwr
 =
VIP_HARD_PWR_CTL
) {

22 
	`pmu_wrôñ
(0x01, 
CAMB_HARD_PWR_CTL
);

23 (
	`pmu_ªadl
(
CAMB_HARD_PWR_CTL
) & 0x06) != 0x06);

25 
	`pmu_wrôñ
(0x01, 
CDVS_HARD_PWR_CTL
);

26 (
	`pmu_ªadl
(
CDVS_HARD_PWR_CTL
) & 0x06) != 0x06);

31 
ªg
 = 
	`pmu_ªadl
(
g©ög
);

32 
ªg
 |
	`BIT
(2);

33 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

36 
ªg
 &~
	`BIT
(1);

37 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

40 
ªg
 |
	`BIT
(0);

41 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

42 
	`¥ötf
("domainÖower downÇow. . . \n\n");

43 
	}
}

45 
	$domaö_powî_⁄
(
u32
 
g©ög
, u32 
pwr
) {

46 
u32
 
ªg
;

48 
	`¥ötf
("\n do domainÖower up. . . \n");

51 
ªg
 = 
	`pmu_ªadl
(
g©ög
);

52 
ªg
 &~
	`BIT
(0);

53 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

56 
	`udñay
(1000);

59 
ªg
 = 
	`pmu_ªadl
(
g©ög
);

60 
ªg
 |
	`BIT
(1);

61 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

64 
ªg
 = 
	`pmu_ªadl
(
g©ög
);

65 
ªg
 &~
	`BIT
(2);

66 
	`pmu_wrôñ
(
ªg
, 
g©ög
);

68 
	`pmu_wrôñ
(0x00, 
pwr
);

69 
	`pmu_ªadl
(
pwr
) & 0x06);

71 i‡(
pwr
 =
VIP_HARD_PWR_CTL
) {

73 
	`pmu_wrôñ
(0x00, 
CAMB_HARD_PWR_CTL
);

74 
	`pmu_ªadl
(
CAMB_HARD_PWR_CTL
) & 0x06);

76 
	`pmu_wrôñ
(0x00, 
CDVS_HARD_PWR_CTL
);

77 
	`pmu_ªadl
(
CAMB_HARD_PWR_CTL
) & 0x06);

80 
	`¥ötf
("domainÖower upÇow. . . \n");

81 
	}
}

	@drivers/rsa_4096_int.c

3 
	~"rß.h
"

4 
	~"misc.h
"

5 
	~"ck810.h
"

6 
	~"ötc.h
"

9 vﬁ©ûê
	göå_Êag
=1;

10 vﬁ©ûê
	göå_num
=0;

11 
CK_UINT8
 
	gˇ£_Áû
 = 0;

13 
CKSåu˘_IRQH™dÀr
 
	grß_úqh™dÀr
;

15 
	$RSA_I¡rH™dÀr
(){

16 
tmp
;

18 
	`¥ötf
(" RSA isr ..... \n");

20 if(
öå_num
 == 0){

22 
tmp
 = 
	`ªad_mªg32
(
RTN_CODE
);

23 if((
tmp
&0x40ff0000) != 0x40000000){

24 
ˇ£_Áû
 = 1;

27 
tmp
 = 
	`ªad_mªg32
(
STACK_PNTR
);

28 if((
tmp
&0x0000000f) != 0x0){

29 
ˇ£_Áû
 = 1;

32 
	`¥ötf
("Clear int!\n");

34 
	`wrôe_mªg32
(
STAT
, 0x40000000);

35 
tmp
 = 
	`ªad_mªg32
(
RTN_CODE
);

36 if((
tmp
&0x40ff0000) != 0x0){

37 
ˇ£_Áû
 = 1;

42 if(
öå_num
 == 1){

48 
öå_Êag
=0;

49 
öå_num
 = intr_num+1;

51 
	}
}

55 
	gPKA_A0
[] = {

59 
	gPKA_D0
[] = {

63 
	gPKA_D1
[] = {

67 
	gPKA_D2
[] = {

71 
	gPKA_D3
[] = {

76 
	gPKA_A0_CHK
[] = {

83 
	$CK_RSA_Te°
 ()

85 
ªsu…
;

86 
tmp
;

87 
k
;

88 
i
;

92 
	`¥ötf
("IntrÅest start!\n");

94 
	`mem£t
(&
rß_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

96 
rß_úqh™dÀr
.
dev«me
 = "rsa";

97 
rß_úqh™dÀr
.
úqid
 = 
CK_INTC_RSA
;

98 
rß_úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_RSA
;

99 
rß_úqh™dÀr
.
h™dÀr
 = 
RSA_I¡rH™dÀr
;

100 
rß_úqh™dÀr
.
bÁ°
 = 
FALSE
;

101 
rß_úqh™dÀr
.
√xt
 = 
NULL
;

102 
	`CK_INTC_Reque°Irq
(&
rß_úqh™dÀr
, 
AUTO_MODE
);

104 
ˇ£_Áû
 = 0;

105 
	`¥ötf
("# Wr A0 #\n");

107 
i
=0;i<128;i=i+1){

108 
	`wrôe_mªg32
(
PKA_REGION_A
+0x4*
i
, 
PKA_A0
[127-i]);

112 
	`¥ötf
("# Wr D0 #\n");

114 
i
=0;i<128;i=i+1){

115 
	`wrôe_mªg32
(
PKA_REGION_D
+0x4*
i
, 
PKA_D0
[127-i]);

119 
	`¥ötf
("# Wr D1 #\n");

121 
i
=0;i<128;i=i+1){

122 
	`wrôe_mªg32
(
PKA_REGION_D
+0x200+0x4*
i
, 
PKA_D1
[127-i]);

126 
	`¥ötf
("# Wr D2 #\n");

128 
i
=0;i<128;i=i+1){

129 
	`wrôe_mªg32
(
PKA_REGION_D
+0x400+0x4*
i
, 
PKA_D2
[127-i]);

133 
	`¥ötf
("# Wr D3 #\n");

135 
i
=0;i<128;i=i+1){

136 
	`wrôe_mªg32
(
PKA_REGION_D
+0x600+0x4*
i
, 
PKA_D3
[127-i]);

142 
	`wrôe_mªg32
(
FLAGS
, 0x0);

145 
	`wrôe_mªg32
(
ENTRY_PNT
, 0x16);

148 
	`wrôe_mªg32
(
JMP_PROB
, 0x0);

151 
	`wrôe_mªg32
(
IRQ_EN
, 0x40000000);

156 
	`wrôe_mªg32
(
CTRL
, 0x80000600);

159 
öå_Êag
 != 0);

161 
öå_Êag
 = 1;

163 
	`¥ötf
("# Check data #\n");

165 
i
=0;i<128;i=i+1){

166 
tmp
 = 
	`ªad_mªg32
(
PKA_REGION_A
+
i
*0x4);

167 
k
 = 127-
i
;

168 
ªsu…
 = 
PKA_A0_CHK
[
k
];

170 if(
tmp
 !
ªsu…
){

171 
	`¥ötf
("Add∏0x%x vÆuê0x%x !0x%x\n", 
PKA_REGION_A
+
i
*0x4, 
tmp
, 
ªsu…
);

172 
ˇ£_Áû
 = 1;

181 i‡(
ˇ£_Áû
)

182 
	`¥ötf
("case is failed! \n");

184 
	`¥ötf
("case isÖassed! \n");

188 
	}
}

	@drivers/rsa_reg_rw.c

2 
	~"ck810.h
"

3 
	~"rß.h
"

4 
	~"misc.h
"

8 
	$CK_RSA_Reg_RW_Te°
 ()

10 
ªsu…
;

11 
tmp
;

12 
k
;

13 
i
;

14 
ˇ£_Áû
;

16 
ˇ£_Áû
 = 0;

18 
	`¥ötf
("--- Start RSA Register Read/WriteÅest ---\n");

21 
	`¥ötf
("\t# Rd default #\n");

23 
tmp
 = 
	`ªg_ªadbk32
(
CTRL
, 0x0);

24 if(
tmp
){

28 
ˇ£_Áû
 = 1;

31 
tmp
 = 
	`ªg_ªadbk32
(
STAT
, 0x0);

32 if(
tmp
){

36 
ˇ£_Áû
 = 1;

39 
tmp
 = 
	`ªg_ªadbk32
(
IRQ_EN
, 0x0);

40 if(
tmp
){

44 
ˇ£_Áû
 = 1;

48 
	`¥ötf
("# Wr A0 #\n");

50 
i
=0;i<128;i++){

51 
	`wrôe_mªg32
(
PKA_REGION_A
+0x4*
i
, i);

54 
i
=0;i<128;i++){

55 
tmp
 = 
	`ªad_mªg32
(
PKA_REGION_A
+0x4*
i
);

56 i‡(
tmp
 !
i
) {

57 
ˇ£_Áû
 = 1;

58 
	`¥ötf
("# A0 Addªs†0x%x vÆuê0x%x !0x%x\n", 
PKA_REGION_A
+0x4*
i
,

59 
tmp
, 
i
);

63 
	`¥ötf
("# Wr B0 #\n");

65 
i
=0;i<128;i++){

66 
	`wrôe_mªg32
(
PKA_REGION_B
+0x4*
i
, i);

69 
i
=0;i<128;i++){

70 
tmp
 = 
	`ªad_mªg32
(
PKA_REGION_B
+0x4*
i
);

71 i‡(
tmp
 !
i
) {

72 
ˇ£_Áû
 = 1;

73 
	`¥ötf
("# B0 Addªs†0x%x vÆuê0x%x !0x%x\n", 
PKA_REGION_B
+0x4*
i
,

74 
tmp
, 
i
);

78 
	`¥ötf
("# Wr C0 #\n");

80 
i
=0;i<128;i++){

81 
	`wrôe_mªg32
(
PKA_REGION_C
+0x4*
i
, i);

84 
i
=0;i<128;i++){

85 
tmp
 = 
	`ªad_mªg32
(
PKA_REGION_C
+0x4*
i
);

86 i‡(
tmp
 !
i
) {

87 
ˇ£_Áû
 = 1;

88 
	`¥ötf
("# C0 Addªs†0x%x vÆuê0x%x !0x%x\n", 
PKA_REGION_C
+0x4*
i
,

89 
tmp
, 
i
);

93 
	`¥ötf
("# Wr D0 #\n");

95 
i
=0;i<128;i++){

96 
	`wrôe_mªg32
(
PKA_REGION_D
+0x4*
i
, i);

99 
i
=0;i<128;i++){

100 
tmp
 = 
	`ªad_mªg32
(
PKA_REGION_D
+0x4*
i
);

101 i‡(
tmp
 !
i
) {

102 
ˇ£_Áû
 = 1;

103 
	`¥ötf
("# D0 Addªs†0x%x vÆuê0x%x !0x%x\n", 
PKA_REGION_D
+0x4*
i
,

104 
tmp
, 
i
);

108 
	`¥ötf
("# Wr FW #\n");

110 
i
=0;i<1024;i++){

111 
	`wrôe_mªg32
(
PKA_FW
+0x4*
i
, i);

114 
i
=0;i<1024;i++){

115 
tmp
 = 
	`ªad_mªg32
(
PKA_FW
+0x4*
i
);

116 i‡(
tmp
 !
i
) {

117 
ˇ£_Áû
 = 1;

118 
	`¥ötf
("# FW Addªs†0x%x vÆuê0x%x !0x%x\n", 
PKA_FW
+0x4*
i
,

119 
tmp
, 
i
);

123 i‡(
ˇ£_Áû
)

124 
	`¥ötf
("\t\tcase is failed! \n");

126 
	`¥ötf
("\t\tcase isÖassed! \n");

128 
	}
}

	@drivers/rtc.c

1 
	~"ck810.h
"

2 
	~"d©©y≥.h
"

3 
	~"misc.h
"

4 
	~"πc.h
"

6 
	#RTC_MS_OUTL
 0x00

	)

7 
	#RTC_MS_OUTH
 0x04

	)

8 
	#RTC_SE_OUT
 0x08

	)

9 
	#RTC_MIN_OUT
 0x0C

	)

10 
	#RTC_HR_OUT
 0x10

	)

11 
	#RTC_DAY_OUTL
 0x14

	)

12 
	#RTC_DAY_OUTH
 0x18

	)

13 
	#RTC_YEAR_OUTL
 0x1C

	)

14 
	#RTC_YEAR_OUTH
 0x20

	)

15 
	#RTC_MS_MATL
 0x24

	)

16 
	#RTC_MS_MATH
 0x28

	)

17 
	#RTC_SE_MAT
 0x2C

	)

18 
	#RTC_MIN_MAT
 0x30

	)

19 
	#RTC_HR_MAT
 0x34

	)

20 
	#RTC_DAY_MATL
 0x38

	)

21 
	#RTC_DAY_MATH
 0x3C

	)

22 
	#RTC_MS_LDL
 0x40

	)

23 
	#RTC_MS_LDH
 0x44

	)

24 
	#RTC_SE_LD
 0x48

	)

25 
	#RTC_MIN_LD
 0x4C

	)

26 
	#RTC_HR_LD
 0x50

	)

27 
	#RTC_DAY_LDL
 0x54

	)

28 
	#RTC_DAY_LDH
 0x58

	)

29 
	#RTC_YEAR_LDL
 0x5C

	)

30 
	#RTC_YEAR_LDH
 0x60

	)

31 
	#RTC_DIN_L
 0x64

	)

32 
	#RTC_DIN_H
 0x68

	)

33 
	#RTC_CTRL
 0x6C

	)

34 
	#RTC_INT_EN
 0x70

	)

35 
	#RTCRIS
 0x74

	)

36 
	#RTCMIS
 0x78

	)

37 
	#RTCICR
 0x7c

	)

38 
	#RTC_USER0
 0x80

	)

39 
	#RTC_USER1
 0x84

	)

41 
	sπc_time
 {

42 
	mtm_m£c
;

43 
	mtm_£c
;

44 
	mtm_mö
;

45 
	mtm_hour
;

46 
	mtm_mday
;

47 
	mtm_m⁄
;

48 
	mtm_yór
;

49 
	mtm_yday
;

50 } 
	tπc_time_s
;

53 
	gm⁄th_of£t
[12] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };

55 
ölöe
 
	$πc_ªg_ªad
(
off£t
)

57  
	`ªad_mªg32
(
CK_RTC_ADDR
 + 
off£t
);

58 
	}
}

60 
ölöe
 
	$πc_ªg_wrôe
(
off£t
, 
vÆ
)

62 
	`wrôe_mªg32
(
CK_RTC_ADDR
 + 
off£t
, 
vÆ
);

63 
	}
}

67 
ölöe
 
	$gë_hr_f‹m©
() {

68  ((
	`πc_ªg_ªad
(
RTC_CTRL
) >> 4) & 0x1);

69 
	}
}

71 
	$yday_to_m⁄th
(
yday
) {

72 
i
;

73 
i
 = 0; i < 12; i++) {

74 i‡(
yday
 < 
m⁄th_of£t
[
i
]) {

79  
i
;

80 
	}
}

82 
	$yday_to_mday
(
yday
) {

83  (
yday
 - 
m⁄th_of£t
[
	`yday_to_m⁄th
(yday) - 1]);

84 
	}
}

86 
πc_time_s
 
	$buûd_πc_time
(
yór
, 
m⁄
, 
day
,

87 
hour
, 
mö
, 
£c
, 
m£c
) {

88 
πc_time_s
 
πc_time
;

90 
πc_time
.
tm_yór
 = 
yór
;

91 
πc_time
.
tm_m⁄
 = 
m⁄
;

92 
πc_time
.
tm_mday
 = 
day
;

93 
πc_time
.
tm_hour
 = 
hour
;

94 
πc_time
.
tm_mö
 = 
mö
;

95 
πc_time
.
tm_£c
 = 
£c
;

96 
πc_time
.
tm_m£c
 = 
m£c
;

97 
πc_time
.
tm_yday
 = 
m⁄th_of£t
[
m⁄
 - 1] + 
day
;

99  
πc_time
;

100 
	}
}

102 
πc_time_s
 
	$gë_πc_out
() {

103 
hour
, 
m£c
;

104 
πc_time_s
 
πc_time
;

106 
πc_time
.
tm_yór
 = (
	`πc_ªg_ªad
(
RTC_YEAR_OUTH
Ë<< 8Ë|Ñtc_ªg_ªad(
RTC_YEAR_OUTL
) ;

107 
πc_time
.
tm_yday
 = (
	`πc_ªg_ªad
(
RTC_DAY_OUTH
Ë<< 8Ë|Ñtc_ªg_ªad(
RTC_DAY_OUTL
) ;

108 
πc_time
.
tm_mö
 = 
	`πc_ªg_ªad
(
RTC_MIN_OUT
);

109 
πc_time
.
tm_£c
 = 
	`πc_ªg_ªad
(
RTC_SE_OUT
);

110 
hour
 = 
	`πc_ªg_ªad
(
RTC_HR_OUT
);

111 i‡(
	`gë_hr_f‹m©
() == 1) {

113 
hour
 = (hour & 0x7f) + (((hour >> 7) & 0x1) == 1) ? 0 : 12;

115 
m£c
 = (
	`πc_ªg_ªad
(
RTC_MS_OUTH
Ë<< 8Ë|Ñtc_ªg_ªad(
RTC_MS_OUTL
) ;

116 
m£c
 = msec / 32.768;

117 
πc_time
.
tm_hour
 = 
hour
;

118 
πc_time
.
tm_m£c
 = 
m£c
;

120  
πc_time
;

121 
	}
}

123 
	$¥öt_cur_time
() {

124 
πc_time_s
 
πc_time
;

126 
πc_time
 = 
	`gë_πc_out
();

127 
πc_time
.
tm_m⁄
 = 
	`yday_to_m⁄th
‘tc_time.
tm_yday
);

128 
πc_time
.
tm_mday
 = 
	`yday_to_mday
‘tc_time.
tm_yday
);

130 
	`¥ötf
 ("[%s:%d],Åime: %d-%d-%d_%d:%d:%d\n", 
__FUNCTION__
, 
__LINE__
,

131 
πc_time
.
tm_yór
,Ñtc_time.
tm_m⁄
,Ñtc_time.
tm_mday
,

132 
πc_time
.
tm_hour
,Ñtc_time.
tm_mö
,Ñtc_time.
tm_£c
);

133 
	}
}

135 
	$£t_πc_lﬂd
(
πc_time_s
 
lﬂd_time
) {

136 
yór
, 
day
, 
m£c
;

137 
˘æ
;

139 
yór
 = 
lﬂd_time
.
tm_yór
;

140 
day
 = 
lﬂd_time
.
tm_yday
;

141 
m£c
 = 
lﬂd_time
.
tm_m£c
 * 32.768;

143 
	`πc_ªg_wrôe
(
RTC_YEAR_LDH
, (
yór
 >> 8) & 0xff);

144 
	`πc_ªg_wrôe
(
RTC_YEAR_LDL
, 
yór
 & 0xff);

145 
	`πc_ªg_wrôe
(
RTC_DAY_LDH
, (
day
 >> 8) & 0xff);

146 
	`πc_ªg_wrôe
(
RTC_DAY_LDL
, 
day
 & 0xff);

147 
	`πc_ªg_wrôe
(
RTC_HR_LD
, 
lﬂd_time
.
tm_hour
);

148 
	`πc_ªg_wrôe
(
RTC_MIN_LD
, 
lﬂd_time
.
tm_mö
);

149 
	`πc_ªg_wrôe
(
RTC_SE_LD
, 
lﬂd_time
.
tm_£c
);

150 
	`πc_ªg_wrôe
(
RTC_MS_LDH
, (
m£c
 >> 8) & 0xff);

151 
	`πc_ªg_wrôe
(
RTC_MS_LDL
, 
m£c
 & 0xff);

154 
˘æ
 = 
	`πc_ªg_ªad
(
RTC_CTRL
);

155 
	`πc_ªg_wrôe
(
RTC_CTRL
, 
˘æ
 | 0x2);

156 
	`udñay
(1000 * 100);

157 
	`πc_ªg_wrôe
(
RTC_CTRL
, 
˘æ
 & ~0x2);

158 
	}
}

160 
	$£t_πc_m©ch
(
πc_time_s
 
m©ch_time
) {

162 
day
, 
m£c
;

163 
˘æ
;

166 
day
 = 
m©ch_time
.
tm_yday
;

167 
m£c
 = 
m©ch_time
.
tm_m£c
 * 32.768;

169 
	`πc_ªg_wrôe
(
RTC_DAY_MATH
, (
day
 >> 8) & 0xff);

170 
	`πc_ªg_wrôe
(
RTC_DAY_MATL
, 
day
 & 0xff);

171 
	`πc_ªg_wrôe
(
RTC_HR_MAT
, 
m©ch_time
.
tm_hour
);

172 
	`πc_ªg_wrôe
(
RTC_MIN_MAT
, 
m©ch_time
.
tm_mö
);

173 
	`πc_ªg_wrôe
(
RTC_SE_MAT
, 
m©ch_time
.
tm_£c
);

174 
	`πc_ªg_wrôe
(
RTC_MS_MATH
, (
m£c
 >> 8) & 0xff);

175 
	`πc_ªg_wrôe
(
RTC_MS_MATL
, 
m£c
 & 0xff);

177 
˘æ
 = 
	`πc_ªg_ªad
(
RTC_CTRL
);

178 
	`πc_ªg_wrôe
(
RTC_CTRL
, 
˘æ
 | 0x8);

179 
	}
}

181 
	$CK_Rtc_Inô
() {

182 
	`¥ötf
 ("[%s:%d], RTCÉ«bÀ\n", 
__FUNCTION__
, 
__LINE__
);

183 
	`πc_ªg_wrôe
(
RTC_DIN_H
, 0x80);

184 
	`πc_ªg_wrôe
(
RTC_DIN_L
, 0x0);

185 
	`πc_ªg_wrôe
(
RTC_CTRL
, 0x5);

186 
	`udñay
(1000 * 100);

187 
	`¥ötf
 ("[%s:%d], RTC_DIN_L=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`πc_ªg_ªad
(
RTC_DIN_L
));

188 
	`¥ötf
 ("[%s:%d], RTC_DIN_H=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`πc_ªg_ªad
(
RTC_DIN_H
));

189 
	`¥ötf
 ("[%s:%d], RTC_CTRL=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`πc_ªg_ªad
(
RTC_CTRL
));

190 
	`¥öt_cur_time
();

191 
	}
}

193 
	$CK_Rtc_Te°_N‹mÆ
() {

194 
πc_time_s
 
lﬂd_time
, 
out_time
;

196 
	`¥ötf
 ("[%s:%d], -----RTCÇ‹mÆÅe° begö-----\n", 
__FUNCTION__
, 
__LINE__
);

197 
lﬂd_time
 = 
	`buûd_πc_time
(2018, 2, 10, 14, 30, 10, 800);

198 
	`£t_πc_lﬂd
(
lﬂd_time
);

199 
	`¥öt_cur_time
();

201 
	`¥ötf
 ("[%s:%d], check ouàπc\n", 
__FUNCTION__
, 
__LINE__
);

202 
out_time
 = 
	`gë_πc_out
();

203 i‡((
lﬂd_time
.
tm_yór
 =
out_time
.tm_year)

204 && (
lﬂd_time
.
tm_yday
 =
out_time
.tm_yday)

205 && (
lﬂd_time
.
tm_hour
 =
out_time
.tm_hour)

206 && (
lﬂd_time
.
tm_mö
 =
out_time
.tm_min)) {

207 
	`¥ötf
 ("[%s:%d], \t- - -PASS\n", 
__FUNCTION__
, 
__LINE__
);

209 
	`¥ötf
 ("[%s:%d], \t- - -FAILURE\n", 
__FUNCTION__
, 
__LINE__
);

212 
	`¥ötf
 ("[%s:%d], checkÑt¯runög\n", 
__FUNCTION__
, 
__LINE__
);

213 
	`udñay
(1000 * 1000 * 5);

214 
	`¥öt_cur_time
();

215 
out_time
 = 
	`gë_πc_out
();

216 i‡((
lﬂd_time
.
tm_hour
 =
out_time
.tm_hour)

217 && (
lﬂd_time
.
tm_mö
 =
out_time
.tm_min)

218 && (
lﬂd_time
.
tm_£c
 !
out_time
.tm_sec)) {

219 
	`¥ötf
 ("[%s:%d], \t- - -PASS\n", 
__FUNCTION__
, 
__LINE__
);

221 
	`¥ötf
 ("[%s:%d], \t- - -FAILURE\n", 
__FUNCTION__
, 
__LINE__
);

224 
	`¥ötf
 ("[%s:%d], -----RTCÇ‹mÆÅe°Énd-----\n", 
__FUNCTION__
, 
__LINE__
);

225 
	}
}

227 
	$CK_Rtc_Te°_I¡c
() {

228 
πc_time_s
 
lﬂd_time
, 
m©ch_time
;

230 
	`¥ötf
 ("[%s:%d], -----RTC i¡îru±Åe° begö-----\n", 
__FUNCTION__
, 
__LINE__
);

233 
	`πc_ªg_wrôe
(
RTC_INT_EN
, 0);

235 
	`πc_ªg_wrôe
(
RTCICR
, 1);

238 
lﬂd_time
 = 
	`buûd_πc_time
(2018, 2, 10, 14, 30, 10, 800);

239 
m©ch_time
 = 
	`buûd_πc_time
(2018, 2, 10, 14, 30, 15, 800);

240 
	`£t_πc_m©ch
(
m©ch_time
);

241 
	`£t_πc_lﬂd
(
lﬂd_time
);

244 
	`πc_ªg_wrôe
(
RTC_INT_EN
, 1);

248 i‡(
	`πc_ªg_ªad
(
RTCRIS
) != 0) {

253 
	`¥ötf
 ("[%s:%d], check i¡îru± sètus\n", 
__FUNCTION__
, 
__LINE__
);

254 i‡(
	`πc_ªg_ªad
(
RTCRIS
Ë&&Ñtc_ªg_ªad(
RTCMIS
)) {

255 
	`¥ötf
 ("[%s:%d], \t- - -PASS\n", 
__FUNCTION__
, 
__LINE__
);

257 
	`¥ötf
 ("[%s:%d], \t- - -FAILURE\n", 
__FUNCTION__
, 
__LINE__
);

260 
	`¥ötf
 ("[%s:%d], cÀ¨ i¡îru±\n", 
__FUNCTION__
, 
__LINE__
);

261 
	`πc_ªg_wrôe
(
RTCICR
, 1);

262 i‡(
	`πc_ªg_ªad
(
RTCRIS
Ë||Ñtc_ªg_ªad(
RTCMIS
)) {

263 
	`¥ötf
 ("[%s:%d], \t- - -FAILURE\n", 
__FUNCTION__
, 
__LINE__
);

265 
	`¥ötf
 ("[%s:%d], \t- - -PASS\n", 
__FUNCTION__
, 
__LINE__
);

268 
	`¥ötf
 ("[%s:%d], -----RTC i¡îru±Åe°Énd-----\n", 
__FUNCTION__
, 
__LINE__
);

269 
	}
}

271 
	$CK_Rtc_Te°
() {

272 
	`CK_Rtc_Inô
();

274 
	`CK_Rtc_Te°_N‹mÆ
();

275 
	`CK_Rtc_Te°_I¡c
();

276 
	}
}

	@drivers/spacc_reg_rw.c

2 
	~"ck810.h
"

3 
	~"•acc.h
"

4 
	~"misc.h
"

8 
	$CK_SPACC_Reg_RW_Te°
 ()

10 
tmp
;

11 
ˇ£_Áû
;

13 
ˇ£_Áû
 = 0;

15 
	`¥ötf
("--- Start SPAcc Register Read/WriteÅest ---\n");

18 
	`¥ötf
("\t# Rd default #\n");

20 
tmp
 = 
	`ªg_ªadbk32
(
IRQ_EN
, 0x0);

21 if(
tmp
){

25 
ˇ£_Áû
 = 1;

28 
tmp
 = 
	`ªg_ªadbk32
(
IRQ_STAT
, 0x0);

29 if(
tmp
){

33 
ˇ£_Áû
 = 1;

36 
tmp
 = 
	`ªg_ªadbk32
(
FIFO_STAT
, 0x80000000);

37 if(
tmp
){

41 
ˇ£_Áû
 = 1;

44 
tmp
 = 
	`ªg_ªadbk32
(
STATUS
, 0x0);

45 if(
tmp
){

49 
ˇ£_Áû
 = 1;

53 
	`¥ötf
("\t# RWÑeg #\n");

55 
	`wrôe_mªg32
(
SRC_PTR
, 0x12345670);

56 
tmp
 = 
	`ªg_ªadbk32
(
SRC_PTR
, 0x12345670);

57 if(
tmp
){

61 
ˇ£_Áû
 = 1;

64 
	`wrôe_mªg32
(
DST_PTR
,0x89abcdef);

65 
tmp
 = 
	`ªg_ªadbk32
(
DST_PTR
, 0x89abcde8);

66 if(
tmp
){

70 
ˇ£_Áû
 = 1;

73 
	`wrôe_mªg32
(
PRE_AAD_LEN
,0x6);

74 
tmp
 = 
	`ªg_ªadbk32
(
PRE_AAD_LEN
, 0x6);

75 if(
tmp
){

79 
ˇ£_Áû
 = 1;

82 
	`wrôe_mªg32
(
POST_AAD_LEN
,0x3);

83 
tmp
 = 
	`ªg_ªadbk32
(
POST_AAD_LEN
, 0x3);

84 if(
tmp
){

88 
ˇ£_Áû
 = 1;

91 
	`wrôe_mªg32
(
ICV_OFFSET
,0x9);

92 
tmp
 = 
	`ªg_ªadbk32
(
ICV_OFFSET
, 0x9);

93 if(
tmp
){

97 
ˇ£_Áû
 = 1;

100 
	`¥ötf
("\t# CIP contextÑw #\n");

102 
	`wrôe_mªg32
(
CIPH_CTX
,0x12345678);

103 
tmp
 = 
	`ªg_ªadbk32
(
CIPH_CTX
, 0x12345678);

104 if(
tmp
){

108 
ˇ£_Áû
 = 1;

111 
	`wrôe_mªg32
(
CIPH_CTX
+0x200,0xedcba987);

112 
tmp
 = 
	`ªg_ªadbk32
(
CIPH_CTX
+0x200, 0xedcba987);

113 if(
tmp
){

117 
ˇ£_Áû
 = 1;

120 
	`wrôe_mªg32
(
CIPH_CTX
+0x3fc,0x5a3c69a5);

121 
tmp
 = 
	`ªg_ªadbk32
(
CIPH_CTX
+0x3fc, 0x5a3c69a5);

122 if(
tmp
){

126 
ˇ£_Áû
 = 1;

129 
	`¥ötf
("\t# Hash contextÑw #\n");

131 
	`wrôe_mªg32
(
HAS_CTX
,0x12345678);

132 
tmp
 = 
	`ªg_ªadbk32
(
HAS_CTX
, 0x12345678);

133 if(
tmp
){

137 
ˇ£_Áû
 = 1;

140 
	`wrôe_mªg32
(
HAS_CTX
+0x80,0x965a3ca5);

141 
tmp
 = 
	`ªg_ªadbk32
(
HAS_CTX
+0x80, 0x965a3ca5);

142 if(
tmp
){

146 
ˇ£_Áû
 = 1;

149 
	`wrôe_mªg32
(
HAS_CTX
+0xfc,0xedcba987);

150 
tmp
 = 
	`ªg_ªadbk32
(
HAS_CTX
+0xfc, 0xedcba987);

151 if(
tmp
){

155 
ˇ£_Áû
 = 1;

161 i‡(
ˇ£_Áû
)

162 
	`¥ötf
("\t\tcase is failed! \n");

164 
	`¥ötf
("\t\tcase isÖassed! \n");

166 
	}
}

	@drivers/spi_nand.c

5 
	~"•i_«nd.h
"

6 
	~"misc.h
"

7 
	~"ahbdma.h
"

9 
CK_UINT32
 
	gSPI_READ_NUM
;

10 
CK_UINT8
 
	gSPI_READ_BUF
[
SPI_NAND_TEST_LEN
];

11 
CK_UINT32
 
	gSPI_READ_INDEX
;

12 
CKSåu˘_SpiNANDInfo
 
	gCK_Spi_Ma°î
 = {
CK_INTC_SPI3
, 
FALSE
, 0};

13 
	g•i_«nd_öt_mode
 = 0;

15 
	$•ö™d_úq_h™dÀr
(
CK_UINT32
 
úq
)

17 
CK_UINT32
 
vÆ
;

19 
vÆ
 = 
	`ªad_mªg32
(
SPI_INTSTAT
);

20 
	`wrôe_mªg32
(
SPI_INTCLR
, 
vÆ
);

21 #i‡
CK_SPI_M_NAND_DEBUG


22 
	`¥ötf
("•i_úq_h™dÀ∏SPI_INTSTAT=0x%x \r\n", 
vÆ
);

25 i‡(
vÆ
 & 0x12) {

27 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

30 if(
vÆ
 & 0x02) {

31 
SPI_READ_BUF
[
SPI_READ_INDEX
] = 
	`ªad_mªg32
(
SPI_RXREG
);

32 #i‡
CK_SPI_M_NAND_DEBUG


33 
	`¥ötf
("spi_irq_handler SPI_READ_BUF[%d]=0x%x\r\n",

34 
SPI_READ_INDEX
, 
SPI_READ_BUF
[SPI_READ_INDEX]);

36 
SPI_READ_INDEX
++;

37 
SPI_READ_NUM
--;

39 } 
vÆ
 & 0x02);

41 
	}
}

43 
CK_INT32
 
	$•ö™d_ªgi°î_i§
((*
h™dÀr
)(
CK_UINT32
),

44 
CK_UINT16
 
¥i‹ôy
, 
BOOL
 
Á°
)

46 
PCKSåu˘_SpiNANDInfo
 
öfo
;

48 
öfo
 = &
CK_Spi_Ma°î
;

49 if(
öfo
->
›íed
)

50  
FAILURE
;

53 i‡(
NULL
 !
h™dÀr
) {

54 
öfo
->
úqh™dÀr
.
dev«me
 = "SPI_M";

55 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

56 
öfo
->
úqh™dÀr
.
¥i‹ôy
 =Öriority;

57 
öfo
->
úqh™dÀr
.
h™dÀr
 = handler;

58 
öfo
->
úqh™dÀr
.
bÁ°
 = 
Á°
;

59 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

61 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

64 
öfo
->
›íed
 = 
TRUE
;

65  
SUCCESS
;

66 
	}
}

68 
CK_INT32
 
	$SPINAND_uƒegi°î_i§
()

70 
PCKSåu˘_SpiNANDInfo
 
öfo
;

72 
öfo
 = &
CK_Spi_Ma°î
;

73 if(!
öfo
->
›íed
)

74  
FAILURE
;

77 
	`wrôe_mªg32
(
SPI_INTEN
, 
	`ªad_mªg32
(SPI_INTEN) & (~0x12));

78 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_I¡En
));

80 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

81 
öfo
->
›íed
 = 
FALSE
;

83  
SUCCESS
;

84 
	}
}

93 
	$Inôül_Spi
()

96 
	`wrôe_mªg32
(
SPI_GCTL
, (
SPI_duÆ_modeDis
 | 
SPI_quad_modeDis
 | \

97 
SPI_N‹mÆmode
 | 
SPI_Tx4TrigÀvñ
 | \

98 
SPI_Rx4TrigÀvñ
 | 
SPI_Ma°îMode
 | \

99 
SPI_SPIEn
 | 
SPI_I¡Dis
));

101 
	`wrôe_mªg32
(
SPI_CCTL
, (
SPI_Lígth8
 | 
SPI_MSBFú°
 | 
SPI_CKPLH
 | 
SPI_CKPHL
));

102 i‡(
•i_«nd_öt_mode
) {

103 
	`wrôe_mªg32
(
SPI_INTEN
, 0x12);

104 
	`•ö™d_ªgi°î_i§
(
•ö™d_úq_h™dÀr
, 
CK_INTC_SPI2
, 
FALSE
);

105 
SPI_READ_NUM
 = 0;

106 
SPI_READ_INDEX
 = 0;

107 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_I¡En
);

109 
	`wrôe_mªg32
(
SPI_INTEN
, 0);

111 
	`wrôe_mªg32
(
SPI_INTCLR
, 0x7F);

112 
	`wrôe_mªg32
(
SPI_RXDNR
, 0x01);

113 
	`wrôe_mªg32
(
SPI_SCSR
, 0xFF);

114 #i‡
CONFIG_IS_ASIC


115 
	`wrôe_mªg32
(
SPI_SPBRG
, 
SPI_DEFAULT_FREQ
 / 25000000);

117 
	`wrôe_mªg32
(
SPI_SPBRG
, 
SPI_DEFAULT_FREQ
 / 500000);

119 
	}
}

127 
	$CS_Low
()

129 
	`wrôe_mªg32
(
SPI_SCSR
, 0xf‡& (~(1 << 
DEFAULT_NAND_CS
)));

130 
	}
}

132 
	$CS_High
()

134 
	`wrôe_mªg32
(
SPI_SCSR
, 0xff);

135 
	}
}

143 
	$In£πDummyCy˛e
(
CK_UINT8
 
dummy_cy˛e
)

145 
CK_UINT8
 
dummy_byãs
 = 
dummy_cy˛e
 / 8;

146 
CK_UINT8
 
i
;

148 
i
 = 0; i < 
dummy_byãs
; i++) {

149 
	`SídByã
(0x00, 
SIO
);

151 
	}
}

163 
	$SídByãs
(*
buf
, 
CK_UINT32
 
Àn
, 
CK_UINT8
 
x„r_ty≥
)

165 
CK_UINT32
 
vÆ
;

166 
CK_UINT8
 *
pbuf
;

168 
pbuf
 = (
CK_UINT8
*)
buf
;

170 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_TxEn
);

174 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

175 i‡((
vÆ
 & 0x04) == 0x0) {

176 
	`wrôe_mªg32
(
SPI_TXREG
, *
pbuf
);

177 
pbuf
++;

178 
Àn
--;

179 i‡(
Àn
 == 0) ;

185 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

186 if(
vÆ
 & 0x01) ;

190 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_TxEn
));

191 
	}
}

193 
	$SídByã
(
CK_UINT8
 
byã_vÆue
, CK_UINT8 
x„r_ty≥
)

195 
	`SídByãs
(&
byã_vÆue
, 1, 
x„r_ty≥
);

196 
	}
}

198 
	$GëByãs
(*
buf
, 
CK_UINT32
 
Àn
, 
CK_UINT8
 
x„r_ty≥
)

200 
CK_UINT32
 
vÆ
;

201 
CK_UINT8
 *
pbuf
;

203 
x„r_ty≥
) {

204 
SIO
:

206 
DIO
:

207 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_duÆ_modeEn
);

209 
QIO
:

210 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_quad_modeEn
);

213 
	`¥ötf
("InvÆidÅøns„∏ty≥ %d, disˇrdÖaylﬂd\n", 
x„r_ty≥
);

217 
pbuf
 = (
CK_UINT8
 *)
buf
;

218 
	`wrôe_mªg32
(
SPI_RXDNR
, 
Àn
);

220 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_RxEn
);

221 i‡(
•i_«nd_öt_mode
) {

222 
SPI_READ_NUM
 = 
Àn
;

223 
SPI_READ_INDEX
 = 0;

224 
SPI_READ_NUM
);

225 
vÆ
 = 0; vÆ < 
Àn
; val++) {

226 
pbuf
[
vÆ
] = 
SPI_READ_BUF
[val];

230 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

231 i‡(
vÆ
 & 0x02) {

232 *
pbuf
 = 
	`ªad_mªg32
(
SPI_RXREG
);

233 
pbuf
++;

234 
Àn
--;

235 i‡(
Àn
 == 0) ;

240 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_RxEn
));

242 
x„r_ty≥
) {

243 
SIO
:

245 
DIO
:

246 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_duÆ_modeEn
));

248 
QIO
:

249 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_quad_modeEn
));

254 
	}
}

266 
CK_UINT8
 
	$GëByã
(
CK_UINT8
 
x„r_ty≥
)

268 
CK_UINT8
 
d©a
;

269 
	`GëByãs
(&
d©a
, 1, 
x„r_ty≥
);

270  
d©a
;

271 
	}
}

279 
Rëu∫Msg
 
	$CMD_RESET_OP
()

281 
	`CS_Low
();

283 
	`SídByã
(
FLASH_CMD_RESET
, 
SIO
);

284 
	`CS_High
();

287 
	`dñay
(5);

289  
Fœsh_Suc˚ss
;

290 
	}
}

299 
BOOL
 
	$WaôFœshRódy
()

301 
TRUE
) {

302 i‡(
	`CheckSètus
(
SR0_OIP
Ë=
READY
)

303  
READY
;

306  
BUSY
;

307 
	}
}

315 
BOOL
 
	$CheckSètus
(
CK_UINT8
 
check_Êag
)

317 
CK_UINT8
 
°©us
;

319 
	`CMD_GET_FEATURE
(0xc0, &
°©us
);

320 i‡((
°©us
 & 
check_Êag
) == check_flag)

321  
BUSY
;

323  
READY
;

324 
	}
}

333 
BOOL
 
	$IsFœshQIO
()

335 
CK_UINT8
 
°©us
;

336 
	`CMD_GET_FEATURE
(0xb0, &
°©us
);

337 i‡((
°©us
 & 
FLASH_QE_MASK
) == FLASH_QE_MASK)

338  
TRUE
;

340  
FALSE
;

341 
	}
}

349 
Rëu∫Msg
 
	$CMD_ECC_STAT_READ
(
CK_UINT8
 *
°©us
)

352 
	`CS_Low
();

354 
	`SídByã
(
FLASH_CMD_ECC_STAT_READ
, 
SIO
);

355 
	`In£πDummyCy˛e
(8);

357 *
°©us
 = 
	`GëByã
(
SIO
);

359 
	`CS_High
();

361  
Fœsh_Suc˚ss
;

362 
	}
}

371 
Rëu∫Msg
 
	$CMD_GET_FEATURE
(
CK_UINT8
 
addr
, CK_UINT8 *
°©us
)

374 
	`CS_Low
();

376 
	`SídByã
(
FLASH_CMD_GET_FEATURE
, 
SIO
);

378 
	`SídByã
(
addr
, 
SIO
);

380 *
°©us
 = 
	`GëByã
(
SIO
);

382 
	`CS_High
();

384  
Fœsh_Suc˚ss
;

385 
	}
}

394 
Rëu∫Msg
 
	$CMD_SET_FEATURE
(
CK_UINT8
 
addr
, CK_UINT8 
vÆue
)

397 
	`CS_Low
();

399 
	`SídByã
(
FLASH_CMD_SET_FEATURE
, 
SIO
);

401 
	`SídByã
(
addr
, 
SIO
);

403 
	`SídByã
(
vÆue
, 
SIO
);

405 
	`CS_High
();

407  
Fœsh_Suc˚ss
;

408 
	}
}

418 
	$SídCﬁAddr
(
CK_UINT16
 
addr
, 
CK_UINT8
 
wøp
, CK_UINT8 
io_mode
)

420 
CK_UINT16
 
CﬁAddr
 = 
addr
 & 0x0fff;

424 
	`SídByã
(((
CﬁAddr
 >> 8Ë& 
BYTE_MASK
Ë| (
wøp
 << 4), 
io_mode
);

425 
	`SídByã
((
CﬁAddr
 & 
BYTE_MASK
), 
io_mode
);

426 
	}
}

435 
	$SídRowAddr
(
CK_UINT32
 
addr
, 
CK_UINT8
 
io_mode
)

438 
	`SídByã
(((
addr
 >> 16Ë& 
BYTE_MASK
), 
io_mode
);

439 
	`SídByã
(((
addr
 >> 8Ë& 
BYTE_MASK
), 
io_mode
);

440 
	`SídByã
((
addr
 & 
BYTE_MASK
), 
io_mode
);

441 
	}
}

450 
Rëu∫Msg
 
	$CMD_WREN
()

453 
	`CS_Low
();

455 
	`SídByã
(
FLASH_CMD_WREN
, 
SIO
);

457 
	`CS_High
();

459  
Fœsh_Suc˚ss
;

460 
	}
}

469 
Rëu∫Msg
 
	$CMD_WRDI
()

472 
	`CS_Low
();

474 
	`SídByã
(
FLASH_CMD_WRDI
, 
SIO
);

475 
	`CS_High
();

477  
Fœsh_Suc˚ss
;

478 
	}
}

487 
Rëu∫Msg
 
	$CMD_RDID
(
CK_UINT32
 *
id
)

489 
CK_UINT32
 
ãmp
;

490 
CK_UINT8
 
gD©aBuf„r
[3];

493 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
) {

494 
	`¥ötf
("Can'tÉxecute READ ID command, flash is busyÇow.\n");

495  
Fœsh_Busy
;

499 
	`CS_Low
();

501 
	`SídByã
(
FLASH_CMD_RDID
, 
SIO
);

502 
	`In£πDummyCy˛e
(8);

504 
gD©aBuf„r
[0] = 
	`GëByã
(
SIO
);

505 
gD©aBuf„r
[1] = 
	`GëByã
(
SIO
);

506 
gD©aBuf„r
[2] = 
	`GëByã
(
SIO
);

508 
	`CS_High
();

509 #i‡
CK_SPI_M_NAND_DEBUG


510 
	`¥ötf
("SPI NAND fœsh m™uÁ˘uª∏ID: 0x%x, devi˚ ID: 0x%x%x\n", 
gD©aBuf„r
[0], gDataBuffer[1], gDataBuffer[1]);

513 
ãmp
 = (
gD©aBuf„r
[0] << 16) | (gDataBuffer[1] << 8) | gDataBuffer[2];

514 *
id
 = 
ãmp
;

516  
Fœsh_Suc˚ss
;

517 
	}
}

525 
Rëu∫Msg
 
	$CMD_READ
(
CK_UINT32
 
Êash_addr
)

528 i‡(
Êash_addr
 > 
FœshSize
Ë 
Fœsh_AddrInvÆid
;

531 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
Ë 
Fœsh_Busy
;

532 #i‡
CK_SPI_M_NAND_DEBUG


533 
	`¥ötf
("[%s:%d] dÿ¨øyÑód\n", 
__FUNCTION__
, 
__LINE__
);

536 
	`CS_Low
();

538 
	`SídByã
(
FLASH_CMD_READ
, 
SIO
);

539 
	`SídRowAddr
(
Êash_addr
 >> 12, 
SIO
);

541 
	`CS_High
();

544 i‡(
	`WaôFœshRódy
(Ë=
READY
)

545  
Fœsh_Suc˚ss
;

547  
Fœsh_O≥øti⁄TimeOut
;

548 
	}
}

559 
Rëu∫Msg
 
	$CMD_READ_CACHE
(
CK_UINT16
 
cﬁ_addr
, 
CK_UINT8
 *
buf
,

560 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

562 #i‡
CK_SPI_M_NAND_DEBUG


563 
	`¥ötf
("[%s:%d] dÿªad from cache\n", 
__FUNCTION__
, 
__LINE__
);

567 
	`CS_Low
();

570 
	`SídByã
(
FLASH_CMD_READ_CACHE
, 
SIO
);

571 
	`SídCﬁAddr
(
cﬁ_addr
, 
addr_Êag
, 
SIO
);

572 
	`In£πDummyCy˛e
(8);

573 
	`GëByãs
(
buf
, 
Àn
, 
SIO
);

576 
	`CS_High
();

578  
Fœsh_Suc˚ss
;

579 
	}
}

590 
Rëu∫Msg
 
	$CMD_READ_CACHE2
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

591 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

593 #i‡
CK_SPI_M_NAND_DEBUG


594 
	`¥ötf
("[%s:%d] dÿªad from cache2\n", 
__FUNCTION__
, 
__LINE__
);

597 
	`CS_Low
();

599 
	`SídByã
(
FLASH_CMD_READ_CACHE2
, 
SIO
);

600 
	`SídCﬁAddr
(
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

601 
	`In£πDummyCy˛e
(8);

602 
	`GëByãs
(
buf
, 
Àn
, 
DIO
);

605 
	`CS_High
();

607  
Fœsh_Suc˚ss
;

608 
	}
}

620 
Rëu∫Msg
 
	$CMD_READ_CACHE4
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

621 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

623 #i‡
CK_SPI_M_NAND_DEBUG


624 
	`¥ötf
("[%s:%d] dÿªad from cache4\n", 
__FUNCTION__
, 
__LINE__
);

627 i‡(
	`IsFœshQIO
(Ë!
TRUE
Ë 
Fœsh_QuadNŸE«bÀ
;

630 
	`CS_Low
();

632 
	`SídByã
(
FLASH_CMD_READ_CACHE4
, 
SIO
);

633 
	`SídCﬁAddr
(
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

634 
	`In£πDummyCy˛e
(8);

635 
	`GëByãs
(
buf
, 
Àn
, 
QIO
);

638 
	`CS_High
();

640  
Fœsh_Suc˚ss
;

641 
	}
}

652 
Rëu∫Msg
 
	$CMD_PP_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

653 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

656 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
Ë 
Fœsh_Busy
;

659 
	`CMD_WREN
();

660 #i‡
CK_SPI_M_NAND_DEBUG


661 
	`¥ötf
("[%s:%d] dÿ∑gê¥ogømÜﬂd\n", 
__FUNCTION__
, 
__LINE__
);

664 
	`CS_Low
();

666 
	`SídByã
(
FLASH_CMD_PP_LOAD
, 
SIO
);

668 
	`SídCﬁAddr
(
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

670 
	`SídByãs
(
buf
, 
Àn
, 
SIO
);

672 
	`CS_High
();

674  
Fœsh_Suc˚ss
;

675 
	}
}

686 
Rëu∫Msg
 
	$CMD_PP_RAND_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

687 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

690 
	`CS_Low
();

692 
	`SídByã
(
FLASH_CMD_PP_RAND_LOAD
, 
SIO
);

694 
	`SídCﬁAddr
(
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

696 
	`SídByãs
(
buf
, 
Àn
, 
SIO
);

698 
	`CS_High
();

700  
Fœsh_Suc˚ss
;

701 
	}
}

712 
Rëu∫Msg
 
	$CMD_4PP_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

713 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

716 i‡(
	`IsFœshQIO
(Ë!
TRUE
Ë 
Fœsh_QuadNŸE«bÀ
;

719 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
Ë 
Fœsh_Busy
;

722 
	`CMD_WREN
();

725 
	`CS_Low
();

727 
	`SídByã
–
FLASH_CMD_4PP_LOAD
, 
SIO
);

729 
	`SídCﬁAddr
–
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

731 
	`SídByãs
(
buf
, 
Àn
, 
QIO
);

733 
	`CS_High
();

735  
Fœsh_Suc˚ss
;

736 
	}
}

747 
Rëu∫Msg
 
	$CMD_4PP_RAND_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
buf
,

748 
CK_UINT32
 
Àn
, 
CK_UINT8
 
addr_Êag
)

751 i‡(
	`IsFœshQIO
(Ë!
TRUE
Ë 
Fœsh_QuadNŸE«bÀ
;

753 
	`CS_Low
();

755 
	`SídByã
(
FLASH_CMD_4PP_RAND_LOAD
, 
SIO
);

757 
	`SídCﬁAddr
(
cﬁ_addªss
, 
addr_Êag
, 
SIO
);

759 
	`SídByãs
(
buf
, 
Àn
, 
QIO
);

761 
	`CS_High
();

763  
Fœsh_Suc˚ss
;

764 
	}
}

772 
Rëu∫Msg
 
	$CMD_PROGRAM_EXEC
(
CK_UINT32
 
addªss
)

774 
CK_UINT8
 
°©us
;

775 #i‡
CK_SPI_M_NAND_DEBUG


776 
	`¥ötf
("[%s:%d] dÿ¥ogømÉxecuã\n", 
__FUNCTION__
, 
__LINE__
);

779 
	`CS_Low
();

781 
	`SídByã
(
FLASH_CMD_PROGRAM_EXEC
, 
SIO
);

783 
	`SídRowAddr
(
addªss
 >> 12, 
SIO
);

785 
	`CS_High
();

788 i‡(
	`WaôFœshRódy
(Ë=
READY
) {

790 
	`CMD_GET_FEATURE
(0xc0, &
°©us
);

791 i‡((
°©us
 & 
SR2_ProgømFaû
) == SR2_ProgramFail) {

792 
	`¥ötf
("[%s:%d]Örogøm faûed\n", 
__FUNCTION__
, 
__LINE__
);

793  
Fœsh_ProgømFaûed
;

795 #i‡
CK_SPI_M_NAND_DEBUG


796 
	`¥ötf
("[%s:%d]Örogøm suc˚ssfuŒy\n", 
__FUNCTION__
, 
__LINE__
);

798  
Fœsh_Suc˚ss
;

801  
Fœsh_O≥øti⁄TimeOut
;

803 
	}
}

812 
Rëu∫Msg
 
	$CMD_BE
(
CK_UINT32
 
Êash_addr
)

814 
CK_UINT8
 
°©us
;

817 i‡(
Êash_addr
 > 
FœshSize
) {

818 
	`¥ötf
("BlockÉrase inputáddress 0x%xÉxceedÜimit 0x%x\n",

819 
Êash_addr
, 
FœshSize
);

820  
Fœsh_AddrInvÆid
;

824 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
) {

825 
	`¥ötf
("[%s:%d] fœsh i†busyÇow\n", 
__FUNCTION__
, 
__LINE__
);

826  
Fœsh_Busy
;

830 
	`CMD_WREN
();

831 #i‡
CK_SPI_M_NAND_DEBUG


832 
	`¥ötf
("[%s:%d] dÿblockÉø£\n", 
__FUNCTION__
, 
__LINE__
);

835 
	`CS_Low
();

837 
	`SídByã
(
FLASH_CMD_BE
, 
SIO
);

838 
	`SídRowAddr
(
Êash_addr
 >> 12, 
SIO
);

840 
	`CS_High
();

843 i‡(
	`WaôFœshRódy
(Ë=
READY
) {

845 
	`CMD_GET_FEATURE
(0xc0, &
°©us
);

846 i‡((
°©us
 & 
SR2_Eø£Faû
) == SR2_EraseFail) {

847 
	`¥ötf
("[%s:%d] fœshÉø£ faûed\n", 
__FUNCTION__
, 
__LINE__
);

848  
Fœsh_Eø£Faûed
;

850 #i‡
CK_SPI_M_NAND_DEBUG


851 
	`¥ötf
("[%s:%d] fœshÉø£ suc˚ssfuŒy\n", 
__FUNCTION__
, 
__LINE__
);

853  
Fœsh_Suc˚ss
;

856  
Fœsh_O≥øti⁄TimeOut
;

858 
	}
}

860 
Rëu∫Msg
 
	$DMA_Wrôe_NAND_¥e
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

861 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

862 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
,

863 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
)

866 i‡(
	`CheckSètus
(
SR0_OIP
Ë!
READY
Ë 
Fœsh_Busy
;

868 
	`CMD_WREN
();

871 
	`CS_Low
();

874 
	`SídByã
(
FLASH_CMD_PP_LOAD
, 
SIO
);

876 
	`SídCﬁAddr
(
addr
, 0x00, 
SIO
);

877 
	`DMAMem2PîùhîÆO≥n
(
dma_id
, 
dma_ch™√l
, (
CK_UINT32
)
buf
, 
Àn
,

878 
	`≥rùhîÆ_•i_tx
(
•i_id
), 
dma_öå
,

879 0, 0, 0, 
d°_å_width
, 
d°_msize
);

881 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_DMAmode
 |

882 
SPI_TxEn
 | 
SPI_SPIEn
);

884  
Fœsh_Suc˚ss
;

885 
	}
}

887 
Rëu∫Msg
 
	$DMA_Wrôe_NAND_po°
(
CK_UINT32
 
dma_id
, CK_UINT32 
addr
,

888 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
)

890 
CK_UINT32
 
vÆ
 = 0;

892 
CK_UINT32
 
timeout
 = 0;

894 i‡(
	`DMAC_CheckD⁄e
(
dma_id
, 
dma_ch™√l
, 
dma_öå
) == 1) {

897 i‡(
timeout
++ > 0x5000) {

898 
	`¥ötf
("\n\twaiting for DMA DoneÅimeout!\n");

899  
Fœsh_O≥øti⁄TimeOut
;

904 
	`DMAC_Clo£
(
dma_id
, 
dma_ch™√l
);

905 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

907 !(
vÆ
 & 
SPI_TxEm±y
)) {

908 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

911 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_TxEn
));

912 
	`CS_High
();

913 
	`CMD_PROGRAM_EXEC
(
addr
);

914  
Fœsh_Suc˚ss
;

915 
	}
}

917 
Rëu∫Msg
 
	$DMA_Wrôe_NAND
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

918 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

919 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
,

920 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
)

922 
Rëu∫Msg
 
ªt
 = 0;

923 
	`DMAC_Inô
(
dma_id
);

924 
ªt
 = 
	`DMA_Wrôe_NAND_¥e
(
dma_id
, 
•i_id
, 
addr
, 
buf
, 
Àn
,

925 
dma_ch™√l
, 
dma_öå
,

926 
d°_å_width
, 
d°_msize
);

928 i‡(
ªt
 =
Fœsh_Busy
) {

929 
	`¥ötf
("\n\tFlash is busy...\n");

930  
Fœsh_Busy
;

933 
	`DMAC_Sèπ
(
dma_id
, 
dma_ch™√l
);

935 
ªt
 = 
	`DMA_Wrôe_NAND_po°
(
dma_id
, 
addr
, 
dma_ch™√l
, 
dma_öå
);

936  
ªt
;

938 
	}
}

940 
	$DMA_Ród_NAND_¥e
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

941 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

942 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
)

945 
	`CMD_READ
(
addr
);

948 
	`CS_Low
();

951 
	`SídByã
(
FLASH_CMD_READ_CACHE
, 
SIO
);

952 
	`SídCﬁAddr
(
addr
, 0x00, 
SIO
);

953 
	`In£πDummyCy˛e
(8);

956 
	`wrôe_mªg32
(
SPI_RXDNR
, 
Àn
);

957 
	`DMAPîùhîÆ2MemO≥n
(
dma_id
, 
dma_ch™√l
, (
CK_UINT32
)
buf
, 
Àn
,

958 
	`≥rùhîÆ_•i_rx
(
•i_id
), 
dma_öå
, 0, 0, 0);

959 
	}
}

961 
	$DMA_Ród_NAND_po°
(
CK_UINT32
 
dma_id
,

962 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
)

964 
CK_UINT32
 
vÆ
 = 0;

966 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTL) |

967 
SPI_DMAmode
 | 
SPI_RxEn
 | 
SPI_SPIEn
);

970 
vÆ
 = 
	`DMAC_CheckD⁄e
(
dma_id
, 
dma_ch™√l
, 
dma_öå
);

971 i‡(
vÆ
) ;

973 
	`DMAC_Clo£
(
dma_id
, 
dma_ch™√l
);

974 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

976 (
vÆ
 & 
SPI_RxEm±y
)) {

977 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

980 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_RxEn
));

981 
	`CS_High
();

982 
	}
}

984 
	$DMA_Ród_NAND
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

985 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

986 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
)

988 
	`DMAC_Inô
(
dma_id
);

989 
	`DMA_Ród_NAND_¥e
(
dma_id
, 
•i_id
, 
addr
, 
buf
, 
Àn
, 
dma_ch™√l
, 
dma_öå
);

990 
	`DMAC_Sèπ
(
dma_id
, 
dma_ch™√l
);

991 
	`DMA_Ród_NAND_po°
(
dma_id
, 
dma_ch™√l
, 
dma_öå
);

992 
	}
}

	@drivers/spi_nor.c

14 
	~"ck810.h
"

15 
	~"d©©y≥.h
"

16 
	~"misc.h
"

17 
	~"•i_n‹.h
"

18 
	~"ahbdma.h
"

19 
	~"axidma.h
"

20 
	~"ötc.h
"

22 
CK_UINT32
 
	gSPI_READ_NUM
;

23 
CK_UINT8
 
	gSPI_READ_BUF
[
NOR_TEST_LEN
];

24 
CK_UINT32
 
	gSPI_READ_INDEX
;

25 
CKSåu˘_SpiMInfo
 
	gCK_Spi_Ma°î
 = {
CK_INTC_QSPI
, 
FALSE
, 0};

26 
	g•i_n‹_öt_mode
 = 0;

28 
•i_wrôe_w‹d
(*
buf„r
, 
CK_UINT32
 
numbî
, 
CK_UINT8
 
P‹tN
);

30 
	$•i_úq_h™dÀr
(
CK_UINT32
 
úq
)

32 
CK_UINT32
 
vÆ
;

34 
vÆ
 = 
	`ªad_mªg32
(
SPI_INTSTAT
);

35 
	`wrôe_mªg32
(
SPI_INTCLR
, 
vÆ
);

36 #i‡
CK_SPI_M_NOR_DEBUG


37 
	`¥ötf
("•i_úq_h™dÀ∏SPI_INTSTAT=0x%x \r\n", 
vÆ
);

40 i‡(
vÆ
 & 0x12) {

42 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

43 #i‡
CK_SPI_M_NOR_DEBUG


44 
	`¥ötf
("•i_úq_h™dÀ∏SPI_CSTAT=0x%x \r\n",
vÆ
);

47 if(
vÆ
 & 0x02) {

48 
SPI_READ_BUF
[
SPI_READ_INDEX
] = 
	`ªad_mªg32
(
SPI_RXREG
);

49 #i‡
CK_SPI_M_NOR_DEBUG


50 
	`¥ötf
("spi_irq_handler SPI_READ_BUF[%d]=0x%x\r\n",

51 
SPI_READ_INDEX
, 
SPI_READ_BUF
[SPI_READ_INDEX]);

53 
SPI_READ_INDEX
++;

54 
SPI_READ_NUM
--;

56 } 
vÆ
 & 0x02);

58 
	}
}

60 
CK_INT32
 
	$•i_ªgi°î_i§
((*
h™dÀr
)(
CK_UINT32
),

61 
CK_UINT16
 
¥i‹ôy
, 
BOOL
 
Á°
)

63 
PCKSåu˘_SpiMInfo
 
öfo
;

65 
öfo
 = &
CK_Spi_Ma°î
;

66 if(
öfo
->
›íed
)

67  
FAILURE
;

70 i‡(
NULL
 !
h™dÀr
) {

71 
öfo
->
úqh™dÀr
.
dev«me
 = "SPI_M";

72 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

73 
öfo
->
úqh™dÀr
.
¥i‹ôy
 =Öriority;

74 
öfo
->
úqh™dÀr
.
h™dÀr
 = handler;

75 
öfo
->
úqh™dÀr
.
bÁ°
 = 
Á°
;

76 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

78 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

81 
öfo
->
›íed
 = 
TRUE
;

82  
SUCCESS
;

83 
	}
}

85 
CK_INT32
 
	$•i_uƒegi°î_i§
()

87 
PCKSåu˘_SpiMInfo
 
öfo
;

89 
öfo
 = &
CK_Spi_Ma°î
;

90 if(!
öfo
->
›íed
)

91  
FAILURE
;

94 
	`wrôe_mªg32
(
SPI_INTEN
, 
	`ªad_mªg32
(SPI_INTEN) & (~0x12));

95 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_I¡En
));

97 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

98 
öfo
->
›íed
 = 
FALSE
;

100  
SUCCESS
;

101 
	}
}

103 
	$cs_low
()

105 
	`wrôe_mªg32
(
SPI_SCSR
, 0xfe);

106 
	}
}

108 
	$cs_high
()

110 
	`wrôe_mªg32
(
SPI_SCSR
, 0xff);

111 
	}
}

113 
	$•i_ªg_öô
()

119 
	`wrôe_mªg32
(
SPI_GCTL
, 0x00000004);

120 
	`wrôe_mªg32
(
SPI_SCSR
, 0x000000FF);

121 
	`wrôe_mªg32
(
SPI_INTEN
, 0L);

122 
	`wrôe_mªg32
(
SPI_INTCLR
, 0x7F);

125 
	`wrôe_mªg32
(
SPI_CCTL
, 0x00000702);

126 
	`wrôe_mªg32
(
SPI_SPBRG
, 0x00000030);

132 
	`wrôe_mªg32
(
SPI_GCTL
, 0x0000000D);

133 
	}
}

135 
	$•i_ªg_wrôe
(
CK_UINT32
 
id
, CK_UINT32 
addr
, CK_UINT32 
vÆ
)

137 
	`cs_low
();

138 
	`wrôe_mªg32
(
SPI_TXREG
, 0x08);

139 
	`wrôe_mªg32
(
SPI_TXREG
, 
addr
 & 
BYTE_MASK
);

140 
	`wrôe_mªg32
(
SPI_TXREG
, 
vÆ
 & 
BYTE_MASK
);

142 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

143 i‡–
vÆ
&0x01 ) ;

145 
	`cs_high
();

146 
	}
}

148 
CK_UINT32
 
	$•i_ªg_ªad
(
CK_UINT32
 
id
, CK_UINT32 
addr
)

150 
CK_UINT32
 
vÆ
;

151 
	`cs_low
();

152 
	`wrôe_mªg32
(
SPI_TXREG
, 0x09);

154 
	`wrôe_mªg32
(
SPI_TXREG
, 
addr
 & 0x1F);

156 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

157 i‡(
vÆ
&0x01) ;

159 
	`wrôe_mªg32
(
SPI_GCTL
, 0x0015);

160 
	`wrôe_mªg32
(
SPI_RXDNR
, 0x0001);

162 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

163 i‡–
vÆ
&0x02 ) ;

165 
	`cs_high
();

166 
vÆ
 = 
	`ªad_mªg8
(
SPI_RXREG
);

167 
	`wrôe_mªg32
(
SPI_GCTL
, 0x000D);

168  
vÆ
;

169 
	}
}

171 
	$SPI_WRCMD
(
CK_UINT8
 *
buf
, CK_UINT8 
Àn
, CK_UINT8 
P‹tN
)

173 
CK_UINT32
 
vÆ
;

174 
CK_UINT8
 *
pbuf
;

176 
pbuf
 = (
CK_UINT8
*)
buf
;

178 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_TxEn
);

182 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

183 i‡((
vÆ
 & 0x04) == 0x0) {

184 
	`wrôe_mªg32
(
SPI_TXREG
, *
pbuf
);

185 
pbuf
++;

186 
Àn
--;

187 i‡(
Àn
 == 0) ;

193 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

194 i‡(
vÆ
 & 0x01) ;

198 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_TxEn
));

199 
	}
}

201 
CK_UINT32
 
	$SPI_READID
(
CK_UINT8
 
P‹tN
)

203 
CK_UINT8
 
idcode
[5];

204 
CK_UINT8
 
cmd
;

206 
cmd
 = 
NOR_CMD_RDID
;

207 
	`cs_low
();

208 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

209 
	`•i_ªad_w‹d
(&
idcode
[0], 0x03, 
P‹tN
);

210 
	`cs_high
();

212  (
idcode
[0] << 16) | (idcode[1] << 8) | (idcode[2]);

213 
	}
}

215 
CK_UINT32
 
	$SPI_READLSR
(
CK_UINT8
 
P‹tN
)

217 
CK_UINT32
 
id
 = 0;

218 
CK_UINT8
 
cmd
;

220 
cmd
 = 
NOR_CMD_RSRL
;

221 
	`cs_low
();

222 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

223 
	`•i_ªad_w‹d
(&
id
, 0x01, 
P‹tN
);

224 
	`cs_high
();

226  (
id
 & 0xff);

227 
	}
}

229 
CK_UINT32
 
	$SPI_READMSR
(
CK_UINT8
 
P‹tN
)

231 
CK_UINT32
 
id
 = 0;

232 
CK_UINT8
 
cmd
;

234 
cmd
 = 
NOR_CMD_RSRM
;

235 
	`cs_low
();

236 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

237 
	`•i_ªad_w‹d
(&
id
, 0x01, 
P‹tN
);

238 
	`cs_high
();

240  (
id
 & 0xff);

241 
	}
}

243 
	$SPI_WRITEMSR
(
CK_UINT8
 
P‹tN
, CK_UINT8 
°©us
)

245 
CK_UINT8
 
cmd
;

246 
CK_UINT8
 
tmp
[4];

248 
	`cs_low
();

249 
cmd
 = 
NOR_CMD_WREN
;

250 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

251 
	`cs_high
();

253 
	`cs_low
();

254 
tmp
[0] = 
NOR_CMD_WSRM
;

255 
tmp
[1] = 
°©us
;

256 
	`•i_wrôe_w‹d
(
tmp
, 2, 
P‹tN
);

257 
	`cs_high
();

258 
	}
}

260 
CK_UINT32
 
	$SPI_READMID
(
CK_UINT8
 
P‹tN
)

262 
CK_UINT8
 
idcode
[5];

263 
CK_UINT8
 
cmd
;

265 
cmd
 = 
NOR_CMD_REMS
;

266 
	`cs_low
();

267 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

269 
cmd
 = (
NOR_MID_ADDR
 >> 16Ë& 
BYTE_MASK
;

270 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

272 
cmd
 = (
NOR_MID_ADDR
 >> 8Ë& 
BYTE_MASK
;

273 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

275 
cmd
 = 
NOR_MID_ADDR
 & 
BYTE_MASK
;

276 
	`SPI_WRCMD
(&
cmd
, 0x01, 
P‹tN
);

278 
	`•i_ªad_w‹d
(&
idcode
[0], 0x02, 
P‹tN
);

279 
	`cs_high
();

281  (
idcode
[0] << 8) | (idcode[1]);

282 
	}
}

288 
	$•i_wrôe_w‹d
(*
buf„r
, 
CK_UINT32
 
numbî
, 
CK_UINT8
 
P‹tN
)

290 
CK_UINT32
 
vÆ
;

291 
CK_UINT8
 *
pbuf
;

293 
pbuf
 = (
CK_UINT8
*)
buf„r
;

295 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_TxEn
);

299 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

300 i‡((
vÆ
 & 0x04) == 0x0) {

301 
	`wrôe_mªg32
(
SPI_TXREG
, *
pbuf
);

302 
pbuf
++;

303 
numbî
--;

304 i‡(
numbî
 == 0) ;

310 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

311 if(
vÆ
 & 0x01) ;

315 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_TxEn
));

316 
	}
}

322 
	$•i_ªad_w‹d
(*
buf„r
, 
CK_UINT32
 
numbî
, 
CK_UINT8
 
P‹tN
)

324 
CK_UINT32
 
vÆ
;

325 
CK_UINT8
 *
pbuf
;

327 
pbuf
 = (
CK_UINT8
 *)
buf„r
;

328 
	`wrôe_mªg32
(
SPI_RXDNR
, 
numbî
);

330 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_RxEn
);

332 i‡(
•i_n‹_öt_mode
) {

333 
SPI_READ_NUM
 = 
numbî
;

334 
SPI_READ_INDEX
 = 0;

335 
SPI_READ_NUM
);

336 
vÆ
 = 0; vÆ < 
numbî
; val++) {

337 
pbuf
[
vÆ
] = 
SPI_READ_BUF
[val];

341 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

342 i‡(
vÆ
 & 0x02) {

343 *
pbuf
 = 
	`ªad_mªg32
(
SPI_RXREG
);

344 
pbuf
++;

345 
numbî
--;

346 i‡(
numbî
 == 0) ;

352 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_RxEn
));

353 
	}
}

358 
	$Êash_checkbusy
(
CK_UINT8
 
P‹tN
)

360 
CK_UINT32
 
vÆ
;

363 
vÆ
 = 
	`SPI_READLSR
(
P‹tN
);

365 i‡((
vÆ
 & 
STATUS_WIP
) == 0x0)

368 
	}
}

373 
	$•i_öô
(
CK_UINT8
 
P‹tN
)

376 
	`wrôe_mªg32
(
SPI_GCTL
, (
SPI_duÆ_modeDis
 | 
SPI_quad_modeDis
 | \

377 
SPI_N‹mÆmode
 | 
SPI_Tx1TrigÀvñ
 | \

378 
SPI_Rx1TrigÀvñ
 | 
SPI_Ma°îMode
 | \

379 
SPI_SPIEn
 | 
SPI_I¡Dis
));

382 
	`wrôe_mªg32
(
SPI_CCTL
, (
SPI_Lígth8
 | 
SPI_MSBFú°
 | 
SPI_CKPLL
 | 
SPI_CKPHH
 | 
SPI_RxEdgeHS
));

383 i‡(
•i_n‹_öt_mode
) {

384 
	`wrôe_mªg32
(
SPI_INTEN
, 0x12);

385 
	`•i_ªgi°î_i§
(
•i_úq_h™dÀr
, 
CK_INTC_QSPI
, 
FALSE
);

386 
SPI_READ_NUM
 = 0;

387 
SPI_READ_INDEX
 = 0;

388 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_I¡En
);

390 
	`wrôe_mªg32
(
SPI_INTEN
, 0);

392 
	`wrôe_mªg32
(
SPI_INTCLR
, 0x7F);

393 
	`wrôe_mªg32
(
SPI_RXDNR
, 0x01);

394 
	`wrôe_mªg32
(
SPI_SCSR
, 0xFF);

396 #i‡
CONFIG_IS_ASIC


397 
	`wrôe_mªg32
(
SPI_SPBRG
, 3);

399 
	`wrôe_mªg32
(
SPI_SPBRG
, 
QSPI_DEFAULT_FREQ
 / 500000);

401 
	}
}

403 
	$•i_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
,

404 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

406 
CK_UINT8
 
ãmp
[4];

407 
	`Êash_checkbusy
(
P‹tN
);

409 
	`cs_low
();

410 
ãmp
[0] = 
NOR_CMD_READ
;

411 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

412 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

413 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

414 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

416 
	`•i_ªad_w‹d
(
d°_d©a
, 
Àngth
, 
P‹tN
);

417 
	`cs_high
();

418 
	}
}

420 
	$•i_Á°_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
,

421 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

423 
CK_UINT8
 
ãmp
[4];

424 
CK_UINT32
 
vÆue
;

426 
	`Êash_checkbusy
(
P‹tN
);

429 
	`cs_low
();

430 
ãmp
[0] = 
NOR_DUAL_FAST_READ
;

431 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

432 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

433 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

434 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

437 
ãmp
[0] = 0;

438 
	`•i_wrôe_w‹d
(
ãmp
, 1, 
P‹tN
);

440 
vÆue
 = 
	`ªad_mªg32
(
SPI_GCTL
);

441 
vÆue
 = vÆuê| 
SPI_duÆ_modeEn
;

442 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

443 
	`•i_ªad_w‹d
(
d°_d©a
, 
Àngth
, 
P‹tN
);

444 
	`cs_high
();

447 
vÆue
 &(~
SPI_duÆ_modeEn
);

448 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

449 
	}
}

451 
	$•i_duÆ_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
,

452 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

454 
CK_UINT8
 
ãmp
[4];

455 
CK_UINT32
 
vÆue
;

457 
	`Êash_checkbusy
(
P‹tN
);

460 
	`cs_low
();

462 
ãmp
[0] = 
NOR_DUAL_READ
;

463 
	`•i_wrôe_w‹d
(
ãmp
, 1, 
P‹tN
);

465 
vÆue
 = 
	`ªad_mªg32
(
SPI_GCTL
);

466 
vÆue
 = vÆuê| 
SPI_duÆ_modeEn
;

467 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

469 
ãmp
[0] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

470 
ãmp
[1] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

471 
ãmp
[2] = (
off£t
 & 
BYTE_MASK
);

472 
ãmp
[3] = 0x00;

473 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

475 
	`•i_ªad_w‹d
(
d°_d©a
, 
Àngth
, 
P‹tN
);

476 
	`cs_high
();

479 
vÆue
 &(~
SPI_duÆ_modeEn
);

480 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

481 
	}
}

484 
	$•i_quad_Á°_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
,

485 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

487 
CK_UINT8
 
ãmp
[4];

488 
CK_UINT32
 
vÆue
;

490 
	`Êash_checkbusy
(
P‹tN
);

493 
	`cs_low
();

494 
ãmp
[0] = 
NOR_QUAD_FAST_READ
;

495 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

496 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

497 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

498 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

501 
ãmp
[0] = 0;

502 
	`•i_wrôe_w‹d
(
ãmp
, 1, 
P‹tN
);

504 
vÆue
 = 
	`ªad_mªg32
(
SPI_GCTL
);

505 
vÆue
 = vÆuê| 
SPI_quad_modeEn
;

506 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

507 
	`•i_ªad_w‹d
(
d°_d©a
, 
Àngth
, 
P‹tN
);

508 
	`cs_high
();

511 
vÆue
 &(~
SPI_quad_modeEn
);

512 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

513 
	}
}

515 
	$•i_îa£_£˘‹
(
CK_UINT8
 
P‹tN
, 
CK_UINT32
 
off£t
)

517 
CK_UINT8
 
cmd
;

518 
CK_UINT32
 
vÆ
;

519 
CK_UINT8
 
ãmp
[4];

521 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

522 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 & 0xFFF7Ë| 
SPI_TxEn
);

524 
	`cs_low
();

525 
cmd
 = 
NOR_CMD_WREN
;

526 
	`•i_wrôe_w‹d
(&
cmd
, 0x01, 
P‹tN
);

527 
	`cs_high
();

529 
	`cs_low
();

530 
ãmp
[0] = 
NOR_CMD_SE
;

531 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

532 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

533 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

534 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

535 
	`cs_high
();

537 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

538 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 & 0xFFF7) | 0x0000);

540 
	}
}

542 
	$•i_wrôe_byã
(
CK_UINT8
 *
d°_mem
, 
CK_UINT32
 
d©a_Àngth
,

543 
CK_UINT32
 
addr
, 
CK_UINT8
 
P‹tN
)

545 
CK_UINT8
 
cmd
[4];

547 
	`Êash_checkbusy
(
P‹tN
);

548 
	`cs_low
();

549 
cmd
[0] = 
NOR_CMD_WREN
;

550 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

551 
	`cs_high
();

553 
	`Êash_checkbusy
(
P‹tN
);

554 
	`cs_low
();

555 
cmd
[0] = 
NOR_CMD_PP
;

556 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

558 
cmd
[0] = (
addr
 >> 16Ë& 
BYTE_MASK
;

559 
cmd
[1] = (
addr
 >> 8Ë& 
BYTE_MASK
;;

560 
cmd
[2] = 
addr
 & 
BYTE_MASK
;;

561 
	`•i_wrôe_w‹d
(
cmd
, 0x03, 
P‹tN
);

563 
	`•i_wrôe_w‹d
(
d°_mem
, 
d©a_Àngth
, 
P‹tN
);

564 
	`cs_high
();

565 
	}
}

567 
	$•i_quad_wrôe_byã
(
CK_UINT8
 *
d°_mem
, 
CK_UINT32
 
d©a_Àngth
,

568 
CK_UINT32
 
addr
, 
CK_UINT8
 
P‹tN
)

570 
CK_UINT8
 
cmd
[4];

571 
CK_UINT32
 
vÆue
;

573 
	`Êash_checkbusy
(
P‹tN
);

574 
	`cs_low
();

575 
cmd
[0] = 
NOR_CMD_WREN
;

576 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

577 
	`cs_high
();

579 
	`Êash_checkbusy
(
P‹tN
);

580 
	`cs_low
();

581 
cmd
[0] = 
NOR_CMD_QUAD_PP
;

582 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

584 
cmd
[0] = (
addr
 >> 16Ë& 
BYTE_MASK
;

585 
cmd
[1] = (
addr
 >> 8Ë& 
BYTE_MASK
;;

586 
cmd
[2] = 
addr
 & 
BYTE_MASK
;;

587 
	`•i_wrôe_w‹d
(
cmd
, 0x03, 
P‹tN
);

589 
vÆue
 = 
	`ªad_mªg32
(
SPI_GCTL
);

590 
vÆue
 = vÆuê| 
SPI_quad_modeEn
;

591 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

592 
	`•i_wrôe_w‹d
(
d°_mem
, 
d©a_Àngth
, 
P‹tN
);

593 
	`cs_high
();

596 
vÆue
 &(~
SPI_quad_modeEn
);

597 
	`wrôe_mªg32
(
SPI_GCTL
, 
vÆue
);

598 
	}
}

600 
BOOL
 
	$•i_quad_íabÀ
(
CK_UINT8
 
P‹tN
) {

601 
CK_UINT32
 
°©us
;

603 
°©us
 = 
	`SPI_READMSR
(
P‹tN
);

604 i‡(
°©us
 & 
STATUS_QE
)

605  
TRUE
;

607 
	`Êash_checkbusy
(
P‹tN
);

608 
	`cs_low
();

609 
°©us
 = 
NOR_CMD_WREN
;

610 
	`•i_wrôe_w‹d
(&
°©us
, 0x01, 
P‹tN
);

611 
	`cs_high
();

613 
	`SPI_WRITEMSR
(
P‹tN
, 
°©us
 | 
STATUS_QE
);

614 
	`Êash_checkbusy
(
P‹tN
);

617 
°©us
 = 
	`SPI_READMSR
(
P‹tN
);

618 i‡(!(
°©us
 & 
STATUS_QE
)) {

619 
	`¥ötf
("failedÉnable flash quad bit\n");

620  
FALSE
;

623  
TRUE
;

624 
	}
}

626 
BOOL
 
	$•i_quad_dißbÀ
(
CK_UINT8
 
P‹tN
) {

627 
CK_UINT32
 
°©us
;

629 
°©us
 = 
	`SPI_READMSR
(
P‹tN
);

630 i‡(!(
°©us
 & 
STATUS_QE
))

631  
TRUE
;

633 
	`SPI_WRITEMSR
(
P‹tN
, 
°©us
 & (~
STATUS_QE
));

634 
	`Êash_checkbusy
(
P‹tN
);

636 
°©us
 = 
	`SPI_READMSR
(
P‹tN
);

637 i‡(
°©us
 & 
STATUS_QE
) {

638 
	`¥ötf
("failed disable flash quad bit\n");

639  
FALSE
;

642  
TRUE
;

643 
	}
}

645 
	$•i_wrôe_byã_dma
(
CK_UINT32
 
d°_mem
, CK_UINT32 
d©a_Àngth
,

646 
CK_UINT32
 
addr
, 
CK_UINT8
 
P‹tN
)

648 
CK_UINT8
 
cmd
[4];

649 
CK_UINT32
 
vÆ
 = 0;

651 
	`Êash_checkbusy
(
P‹tN
);

652 
	`cs_low
();

653 
cmd
[0] = 
NOR_CMD_WREN
;

654 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

655 
	`cs_high
();

657 
	`Êash_checkbusy
(
P‹tN
);

658 
	`cs_low
();

659 
cmd
[0] = 
NOR_CMD_PP
;

660 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

662 
cmd
[0] = (
addr
 >> 16Ë& 
BYTE_MASK
;

663 
cmd
[1] = (
addr
 >> 8Ë& 
BYTE_MASK
;;

664 
cmd
[2] = 
addr
 & 
BYTE_MASK
;;

665 
	`•i_wrôe_w‹d
(
cmd
, 0x03, 
P‹tN
);

667 
axi_dma_öfo
 
axi
;

668 
axi
.
ch™√l
 = 1;

669 
axi
.
dúe˘i⁄
 = 
CHx_M2P_DMAC
;

670 
axi
.
§c_msize
 = 
SRC_MSIZE8
;

671 
axi
.
d°_msize
 = 
DST_MSIZE16
;

672 
axi
.
§c_width
 = 
SRC_WIDTH128
;

673 
axi
.
d°_width
 = 
DST_WIDTH8
;

674 
	`AXI_DMA_TRAN_INIT
(
axi
, 
d°_mem
, (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_TXREG
), 
d©a_Àngth
);

675 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

676 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 | 
SPI_DMAmode
 | 
SPI_TxEn
 | 
SPI_SPIEn
 | 
SPI_Tx4TrigÀvñ
));

678 
	`AXI_DMA_TRANS
(
axi
);

679 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

681 !(
vÆ
 & 
SPI_TxEm±y
)) {

682 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

685 
	`cs_high
();

686 
	}
}

688 
	$•i_ªad_byã_dma
(
CK_UINT32
 
d°_d©a
, CK_UINT32 
Àngth
,

689 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

691 
CK_UINT8
 
ãmp
[4];

692 
CK_UINT32
 
vÆ
;

694 
	`Êash_checkbusy
(
P‹tN
);

696 
	`cs_low
();

697 
ãmp
[0] = 
NOR_CMD_READ
;

698 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

699 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

700 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

701 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

703 
	`wrôe_mªg32
(
SPI_RXDNR
, 
Àngth
);

705 
axi_dma_öfo
 
axi
;

706 
axi
.
ch™√l
 = 2;

707 
axi
.
dúe˘i⁄
 = 
CHx_P2M_DMAC
;

708 
axi
.
§c_msize
 = 
SRC_MSIZE16
;

709 
axi
.
d°_msize
 = 
DST_MSIZE16
;

710 
axi
.
§c_width
 = 
SRC_WIDTH8
;

711 
axi
.
d°_width
 = 
DST_WIDTH128
;

712 
	`AXI_DMA_TRAN_INIT
(
axi
, (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_RXREG
), (CK_UINT32)
d°_d©a
, 
Àngth
);

714 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

715 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 | 
SPI_DMAmode
 | 
SPI_RxEn
 | 
SPI_SPIEn
 | 
SPI_Rx4TrigÀvñ
));

717 
	`AXI_DMA_TRANS
(
axi
);

718 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

720 (
vÆ
 & 
SPI_RxEm±y
)) {

721 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

724 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

725 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 & 0xFFEF) | 0x0000);

726 
	`cs_high
();

727 
	}
}

729 
	$•i_ªad_byã_dma_x4
(
CK_UINT32
 
d°_d©a
, CK_UINT32 
Àngth
,

730 
CK_UINT32
 
off£t
, 
CK_UINT8
 
P‹tN
)

732 
CK_UINT8
 
ãmp
[4];

733 
CK_UINT32
 
vÆ
;

735 
	`Êash_checkbusy
(
P‹tN
);

737 
	`cs_low
();

738 
ãmp
[0] = 
NOR_QUAD_FAST_READ
;

739 
ãmp
[1] = ((
off£t
 >> 16Ë& 
BYTE_MASK
);

740 
ãmp
[2] = ((
off£t
 >> 8Ë& 
BYTE_MASK
);

741 
ãmp
[3] = (
off£t
 & 
BYTE_MASK
);

742 
	`•i_wrôe_w‹d
(
ãmp
, 4, 
P‹tN
);

744 
ãmp
[0] = 0;

745 
	`•i_wrôe_w‹d
(
ãmp
, 1, 
P‹tN
);

747 
	`wrôe_mªg32
(
SPI_RXDNR
, 
Àngth
);

749 
axi_dma_öfo
 
axi
;

750 
axi
.
ch™√l
 = 2;

751 
axi
.
dúe˘i⁄
 = 
CHx_P2M_DMAC
;

752 
axi
.
§c_msize
 = 
SRC_MSIZE16
;

753 
axi
.
d°_msize
 = 
DST_MSIZE16
;

754 
axi
.
§c_width
 = 
SRC_WIDTH8
;

755 
axi
.
d°_width
 = 
DST_WIDTH128
;

756 
	`AXI_DMA_TRAN_INIT
(
axi
, (
CK_UINT32
)
	`PHYSICAL_ADDRESS
(
SPI_RXREG
), (CK_UINT32)
d°_d©a
, 
Àngth
);

758 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

759 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 | 
SPI_DMAmode
 | 
SPI_RxEn
 | 
SPI_SPIEn
 | 
SPI_Rx4TrigÀvñ
 | 
SPI_quad_modeEn
));

761 
	`AXI_DMA_TRANS
(
axi
);

762 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

764 (
vÆ
 & 
SPI_RxEm±y
)) {

765 
vÆ
 = 
	`ªad_mªg32
(
SPI_CSTAT
);

768 
vÆ
 = 
	`ªad_mªg32
(
SPI_GCTL
);

769 
vÆ
 &(~
SPI_quad_modeEn
);

770 
	`wrôe_mªg32
(
SPI_GCTL
, (
vÆ
 & 0xFFEF) | 0x0000);

771 
	`cs_high
();

772 
	}
}

774 
	$•i_gs2971_wrôe_byã
(
CK_UINT8
 *
d°_mem
, 
CK_UINT32
 
d©a_Àngth
,

775 
CK_UINT16
 
addr
, 
CK_UINT8
 
P‹tN
)

777 
CK_UINT8
 
cmd
[4];

779 
	`Êash_checkbusy
(
P‹tN
);

780 
	`cs_low
();

781 
cmd
[0] = 
NOR_CMD_WREN
;

782 
	`•i_wrôe_w‹d
(
cmd
, 0x01, 
P‹tN
);

783 
	`cs_high
();

785 
	`Êash_checkbusy
(
P‹tN
);

786 
	`cs_low
();

788 
cmd
[0] = (
addr
 >> 8) & 0x0F;

789 
cmd
[1] = (
addr
 & 
BYTE_MASK
);

791 
	`•i_wrôe_w‹d
(
cmd
, 0x02, 
P‹tN
);

793 
	`•i_wrôe_w‹d
(
d°_mem
, 
d©a_Àngth
, 
P‹tN
);

794 
	`cs_high
();

795 
	}
}

797 
	$•i_gs2971_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
,

798 
CK_UINT16
 
off£t
, 
CK_UINT8
 
P‹tN
)

800 
CK_UINT8
 
ãmp
[4];

801 
	`Êash_checkbusy
(
P‹tN
);

803 
	`cs_low
();

804 
ãmp
[0] = ((
off£t
 >> 8) & 0x0f)|0x80000000;

805 
ãmp
[1] = (
off£t
 & 0xff);

806 
	`•i_wrôe_w‹d
(
ãmp
, 2, 
P‹tN
);

808 
	`•i_ªad_w‹d
(
d°_d©a
, 
Àngth
, 
P‹tN
);

809 
	`cs_high
();

810 
	}
}

	@drivers/syns_mmc.c

17 
	~"syns_mmc.h
"

18 
	~"d©©y≥.h
"

19 
	~"misc.h
"

21 
	$sdhci_wrôñ
(
sdhci_ho°
 *
ho°
, 
u32
 
vÆ
, 
ªg
)

23 
	`wrôe_mªg32
(
ho°
->
iﬂddr
 + 
ªg
, 
vÆ
);

24 
	}
}

26 
	$sdhci_wrôew
(
sdhci_ho°
 *
ho°
, 
u16
 
vÆ
, 
ªg
)

28 
	`wrôe_mªg16
(
ho°
->
iﬂddr
 + 
ªg
, 
vÆ
);

29 
	}
}

31 
	$sdhci_wrôeb
(
sdhci_ho°
 *
ho°
, 
u8
 
vÆ
, 
ªg
)

33 
	`wrôe_mªg8
(
ho°
->
iﬂddr
 + 
ªg
, 
vÆ
);

34 
	}
}

36 
u32
 
	$sdhci_ªadl
(
sdhci_ho°
 *
ho°
, 
ªg
)

38  
	`ªad_mªg32
(
ho°
->
iﬂddr
 + 
ªg
);

39 
	}
}

41 
u16
 
	$sdhci_ªadw
(
sdhci_ho°
 *
ho°
, 
ªg
)

43  
	`ªad_mªg16
(
ho°
->
iﬂddr
 + 
ªg
);

44 
	}
}

46 
u8
 
	$sdhci_ªadb
(
sdhci_ho°
 *
ho°
, 
ªg
)

48  
	`ªad_mªg8
(
ho°
->
iﬂddr
 + 
ªg
);

49 
	}
}

51 
	$sdhci_i§
() {

53 
	}
}

55 
	$sdhci_ª£t
(
sdhci_ho°
 *
ho°
, 
u8
 
mask
)

57 
timeout
;

60 
timeout
 = 100;

61 
	`sdhci_wrôeb
(
ho°
, 
mask
, 
SDHCI_SOFTWARE_RESET
);

62 
	`sdhci_ªadb
(
ho°
, 
SDHCI_SOFTWARE_RESET
Ë& 
mask
) {

63 i‡(
timeout
 == 0) {

64 
	`¥ötf
("%s: Reset 0x%xÇever completed.\n",

65 
__func__
, ()
mask
);

68 
timeout
--;

69 
	`udñay
(1000);

71 
	}
}

73 
	$sdhci_cmd_d⁄e
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
)

75 
i
;

76 i‡(
cmd
->
ª•_ty≥
 & 
MMC_RSP_136
) {

78 
i
 = 0; i < 4; i++) {

79 
cmd
->
ª•⁄£
[
i
] = 
	`sdhci_ªadl
(
ho°
,

80 
SDHCI_RESPONSE
 + (3-
i
)*4) << 8;

81 i‡(
i
 != 3)

82 
cmd
->
ª•⁄£
[
i
] |
	`sdhci_ªadb
(
ho°
,

83 
SDHCI_RESPONSE
 + (3-
i
)*4-1);

86 
cmd
->
ª•⁄£
[0] = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_RESPONSE
);

88 
	}
}

98 #i‚de‡
CONFIG_SDHCI_CMD_MAX_TIMEOUT


99 
	#CONFIG_SDHCI_CMD_MAX_TIMEOUT
 3200

	)

101 
	#CONFIG_SDHCI_CMD_DEFAULT_TIMEOUT
 100

	)

102 
	#SDHCI_READ_STATUS_TIMEOUT
 1000

	)

104 
	$sdhci_£nd_comm™d
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
,

105 
u32
 
Êags
)

107 
°©
 = 0;

108 
ªt
 = 0;

109 
u32
 
mask
;

110 
time
 = 0;

111 
°¨t
;

114 
cmd_timeout
 = 
CONFIG_SDHCI_CMD_DEFAULT_TIMEOUT
;

116 
	`sdhci_wrôñ
(
ho°
, 
SDHCI_INT_ALL_MASK
, 
SDHCI_INT_STATUS
);

117 
mask
 = 
SDHCI_CMD_INHIBIT
 | 
SDHCI_DATA_INHIBIT
;

121 i‡(
cmd
->
cmdidx
 =
MMC_CMD_STOP_TRANSMISSION
)

122 
mask
 &~
SDHCI_DATA_INHIBIT
;

124 
	`sdhci_ªadl
(
ho°
, 
SDHCI_PRESENT_STATE
Ë& 
mask
) {

125 i‡(
time
 >
cmd_timeout
) {

126 
	`¥ötf
("%s: MMC: %d busy ", 
__func__
, 
ho°
->
id
);

127 i‡(2 * 
cmd_timeout
 <
CONFIG_SDHCI_CMD_MAX_TIMEOUT
) {

128 
cmd_timeout
 += cmd_timeout;

129 
	`¥ötf
("timeout increasingÅo: %u ms.\n",

130 
cmd_timeout
);

132 
	`puts
("timeout.\n");

133  
COMM_ERR
;

136 
time
++;

137 
	`udñay
(100);

140 
mask
 = 
SDHCI_INT_RESPONSE
;

141 i‡(!(
cmd
->
ª•_ty≥
 & 
MMC_RSP_PRESENT
))

142 
Êags
 |
SDHCI_CMD_RESP_NONE
;

143 i‡(
cmd
->
ª•_ty≥
 & 
MMC_RSP_136
)

144 
Êags
 |
SDHCI_CMD_RESP_LONG
;

145 i‡(
cmd
->
ª•_ty≥
 & 
MMC_RSP_BUSY
) {

146 
Êags
 |
SDHCI_CMD_RESP_SHORT_BUSY
;

147 
mask
 |
SDHCI_INT_DATA_END
;

149 
Êags
 |
SDHCI_CMD_RESP_SHORT
;

151 i‡(
cmd
->
ª•_ty≥
 & 
MMC_RSP_CRC
)

152 
Êags
 |
SDHCI_CMD_CRC
;

153 i‡(
cmd
->
ª•_ty≥
 & 
MMC_RSP_OPCODE
)

154 
Êags
 |
SDHCI_CMD_INDEX
;

156 
	`sdhci_wrôñ
(
ho°
, 
cmd
->
cmd¨g
, 
SDHCI_ARGUMENT
);

158 #ifde‡
CONFIG_MMC_SDMA


159 
	`Êush_ˇche
(
°¨t_addr
, 
å™s_byãs
);

161 
	`sdhci_wrôew
(
ho°
, 
	`SDHCI_MAKE_CMD
(
cmd
->
cmdidx
, 
Êags
), 
SDHCI_COMMAND
);

163 
°¨t
 = 0;

165 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

166 i‡(
°©
 & 
SDHCI_INT_ERROR
)

168 
°¨t
 += 1;

169 
	`udñay
(1000);

170 } ((
°©
 & 
mask
) != mask) &&

171 (
°¨t
 < 
SDHCI_READ_STATUS_TIMEOUT
));

173 i‡(
°¨t
 >
SDHCI_READ_STATUS_TIMEOUT
) {

174 i‡(
ho°
->
quúks
 & 
SDHCI_QUIRK_BROKEN_R1B
)

177 
	`¥ötf
("%s: Timeouàf‹ sètu†upd©e!\n", 
__func__
);

178  
TIMEOUT
;

181 #i‡
CK_SDIO_DEBUG


182 
	`¥ötf
("[%s:%d] sèt=0x%x, mask=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
°©
, 
mask
);

184 i‡((
°©
 & (
SDHCI_INT_ERROR
 | 
mask
)) == mask) {

185 
	`sdhci_cmd_d⁄e
(
ho°
, 
cmd
);

186 
	`sdhci_wrôñ
(
ho°
, 
mask
, 
SDHCI_INT_STATUS
);

188 
ªt
 = -1;

190 i‡(
ho°
->
quúks
 & 
SDHCI_QUIRK_WAIT_SEND_CMD
)

191 
	`udñay
(1000);

193 i‡(!
ªt
) {

197 
	`sdhci_ª£t
(
ho°
, 
SDHCI_RESET_CMD
);

198 
	`sdhci_ª£t
(
ho°
, 
SDHCI_RESET_DATA
);

199 i‡(
°©
 & 
SDHCI_INT_TIMEOUT
)

200  
TIMEOUT
;

202  
COMM_ERR
;

203 
	}
}

205 
	$sdhci_£t_˛ock
(
sdhci_ho°
 *
ho°
, 
˛ock
)

207 
div
, 
˛k
, 
timeout
, 
ªg
;

210 
timeout
 = 200;

211 
	`sdhci_ªadl
(
ho°
, 
SDHCI_PRESENT_STATE
) &

212 (
SDHCI_CMD_INHIBIT
 | 
SDHCI_DATA_INHIBIT
)) {

213 i‡(
timeout
 == 0) {

214 
	`¥ötf
("%s: TimeoutÅo wait cmd & data inhibit\n",

215 
__func__
);

219 
timeout
--;

220 
	`udñay
(100);

223 
ªg
 = 
	`sdhci_ªadw
(
ho°
, 
SDHCI_CLOCK_CONTROL
);

224 
ªg
 &~
SDHCI_CLOCK_CARD_EN
;

225 
	`sdhci_wrôew
(
ho°
, 
ªg
, 
SDHCI_CLOCK_CONTROL
);

227 i‡(
˛ock
 == 0)

230 i‡(
ho°
->
vîsi⁄
 >
SDHCI_SPEC_300
) {

232 i‡(
ho°
->
f_max
 <
˛ock
)

233 
div
 = 1;

235 
div
 = 2; div < 
SDHCI_MAX_DIV_SPEC_300
; div += 2) {

236 i‡((
ho°
->
f_max
 / 
div
Ë<
˛ock
)

242 
div
 = 1; div < 
SDHCI_MAX_DIV_SPEC_200
; div *= 2) {

243 i‡((
ho°
->
f_max
 / 
div
Ë<
˛ock
)

247 
div
 >>= 1;

249 
˛k
 = (
div
 & 
SDHCI_DIV_MASK
Ë<< 
SDHCI_DIVIDER_SHIFT
;

250 
˛k
 |((
div
 & 
SDHCI_DIV_HI_MASK
Ë>> 
SDHCI_DIV_MASK_LEN
)

251 << 
SDHCI_DIVIDER_HI_SHIFT
;

252 
˛k
 |
SDHCI_CLOCK_INT_EN
;

253 
	`sdhci_wrôew
(
ho°
, 
˛k
, 
SDHCI_CLOCK_CONTROL
);

256 
timeout
 = 150;

257 !((
˛k
 = 
	`sdhci_ªadw
(
ho°
, 
SDHCI_CLOCK_CONTROL
))

258 & 
SDHCI_CLOCK_INT_STABLE
)) {

259 i‡(
timeout
 == 0) {

260 
	`¥ötf
("JJJ_DEBUG 0x00 CLOCK_CONTROL=0x%x\n",

261 
	`sdhci_ªadw
(
ho°
, 
SDHCI_CLOCK_CONTROL
));

262 
	`¥ötf
("%s: Internal clockÇever stabilized.\n",

263 
__func__
);

267 
timeout
--;

268 
	`udñay
(1000);

271 
˛k
 |
SDHCI_CLOCK_CARD_EN
;

272 
	`sdhci_wrôew
(
ho°
, 
˛k
, 
SDHCI_CLOCK_CONTROL
);

275 
	`sdhci_wrôeb
(
ho°
, 0xe, 
SDHCI_TIMEOUT_CONTROL
);

278 
	}
}

280 
	$sdhci_£t_ios
(
sdhci_ho°
 *
ho°
)

282 
u32
 
˘æ
;

284 
	`sdhci_£t_˛ock
(
ho°
, ho°->
˛ock
);

287 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

288 
˘æ
 &~
SDHCI_CTRL_4BITBUS
;

290 i‡(
ho°
->
˛ock
 > 26000000)

291 
˘æ
 |
SDHCI_CTRL_HISPD
;

293 
˘æ
 &~
SDHCI_CTRL_HISPD
;

295 i‡(
ho°
->
quúks
 & 
SDHCI_QUIRK_NO_HISPD_BIT
)

296 
˘æ
 &~
SDHCI_CTRL_HISPD
;

298 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

300 #i‡
CK_SDIO_DEBUG


301 
	`¥ötf
("[%s:%d] cå»0x%x.\n", 
__FUNCTION__
, 
__LINE__
,

302 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
));

304 
	}
}

306 
	$sdhci_öô
(
sdhci_ho°
 *
ho°
)

309 i‡((
ho°
->
ˇps
 & 
SDHCI_CAN_VDD_330
) == SDHCI_CAN_VDD_330) {

310 #i‡
CK_SDIO_DEBUG


311 
	`¥ötf
("Set VDD1ás 3.3V.\n");

313 
	`sdhci_wrôeb
(
ho°
, 
SDHCI_POWER_330
 | 
SDHCI_POWER_ON
, 
SDHCI_POWER_CONTROL
);

314 } i‡((
ho°
->
ˇps
 & 
SDHCI_CAN_VDD_300
) == SDHCI_CAN_VDD_300) {

315 #i‡
CK_SDIO_DEBUG


316 
	`¥ötf
("Set VDD1ás 3.0V.\n");

318 
	`sdhci_wrôeb
(
ho°
, 
SDHCI_POWER_300
 | 
SDHCI_POWER_ON
, 
SDHCI_POWER_CONTROL
);

319 } i‡((
ho°
->
ˇps
 & 
SDHCI_CAN_VDD_180
) == SDHCI_CAN_VDD_180) {

320 #i‡
CK_SDIO_DEBUG


321 
	`¥ötf
("Set VDD1ás 1.8V.\n");

323 
	`sdhci_wrôeb
(
ho°
, 
SDHCI_POWER_180
 | 
SDHCI_POWER_ON
, 
SDHCI_POWER_CONTROL
);

325 
	`¥ötf
("No support Voltage.\n");

326  
FAILURE
;

330 
	`sdhci_wrôñ
(
ho°
, 
SDHCI_INT_DATA_MASK
 | 
SDHCI_INT_CMD_MASK
 | 
SDHCI_INT_CARD_REMOVE
 | 
SDHCI_INT_CARD_INSERT
,

331 
SDHCI_INT_ENABLE
);

333 
	`sdhci_wrôñ
(
ho°
, 
SDHCI_INT_CARD_INSERT
 | 
SDHCI_INT_CARD_REMOVE
, 
SDHCI_SIGNAL_ENABLE
);

336 
	}
}

338 
	$mmc_£nd_cmd
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
, 
u32
 
Êags
)

340 
ªt
;

342 #ifde‡
CONFIG_MMC_TRACE


343 
i
;

344 
u8
 *
±r
;

346 
	`¥ötf
("CMD_SEND:%d\n", 
cmd
->
cmdidx
);

347 
	`¥ötf
("\t\tARG\t\t\à0x%x\n", 
cmd
->
cmd¨g
);

348 
ªt
 = 
	`sdhci_£nd_comm™d
(
ho°
, 
cmd
, 
Êags
);

349 i‡(
ªt
) {

350 
	`¥ötf
("\t\tRET\t\t\à%d\n", 
ªt
);

352 
cmd
->
ª•_ty≥
) {

353 
MMC_RSP_NONE
:

354 
	`¥ötf
("\t\tMMC_RSP_NONE\n");

356 
MMC_RSP_R1
:

357 
	`¥ötf
("\t\tMMC_RSP_R1,5,6,7 \t 0x%x \n",

358 
cmd
->
ª•⁄£
[0]);

360 
MMC_RSP_R1b
:

361 
	`¥ötf
("\t\tMMC_RSP_R1b\t\t 0x%x \n",

362 
cmd
->
ª•⁄£
[0]);

364 
MMC_RSP_R2
:

365 
	`¥ötf
("\t\tMMC_RSP_R2\t\t 0x%x \n",

366 
cmd
->
ª•⁄£
[0]);

367 
	`¥ötf
("\t\t \t\t 0x%x \n",

368 
cmd
->
ª•⁄£
[1]);

369 
	`¥ötf
("\t\t \t\t 0x%x \n",

370 
cmd
->
ª•⁄£
[2]);

371 
	`¥ötf
("\t\t \t\t 0x%x \n",

372 
cmd
->
ª•⁄£
[3]);

373 
	`¥ötf
("\n");

374 
	`¥ötf
("\t\t\t\t\tDUMPING DATA\n");

375 
i
 = 0; i < 4; i++) {

376 
j
;

377 
	`¥ötf
("\t\t\t\t\t%03d - ", 
i
*4);

378 
±r
 = (
u8
 *)&
cmd
->
ª•⁄£
[
i
];

379 
±r
 += 3;

380 
j
 = 0; j < 4; j++)

381 
	`¥ötf
("%02X ", *
±r
--);

382 
	`¥ötf
("\n");

385 
MMC_RSP_R3
:

386 
	`¥ötf
("\t\tMMC_RSP_R3,4\t\t 0x%x \n",

387 
cmd
->
ª•⁄£
[0]);

390 
	`¥ötf
("\t\tERROR MMCÑspÇot supported\n");

395 
ªt
 = 
	`sdhci_£nd_comm™d
(
ho°
, 
cmd
, 
Êags
);

397  
ªt
;

398 
	}
}

400 
	$mmc_go_idÀ
(
sdhci_ho°
 *
ho°
)

402 
mmc_cmd
 
cmd
;

403 
îr
;

405 
	`udñay
(1000);

407 
cmd
.
cmdidx
 = 
MMC_CMD_GO_IDLE_STATE
;

408 
cmd
.
cmd¨g
 = 0;

409 
cmd
.
ª•_ty≥
 = 
MMC_RSP_NONE
;

411 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

413 i‡(
îr
)

414  
îr
;

416 
	`udñay
(2000);

419 
	}
}

421 
	$mmc_£nd_›_c⁄d
(
sdhci_ho°
 *
ho°
)

423 
îr
, 
i
;

429 
i
 = 0; i < 1; i++) {

430 
îr
 = 
	`mmc_£nd_›_c⁄d_ôî
(
ho°
, 
i
 != 0);

431 i‡(
îr
)

432  
îr
;

435 i‡(
ho°
->
o¸
 & 
OCR_BUSY
)

438 
ho°
->
›_c⁄d_≥ndög
 = 1;

440 
	}
}

442 
	$mmc_£nd_›_c⁄d_ôî
(
sdhci_ho°
 *
ho°
, 
u£_¨g
)

444 
mmc_cmd
 
cmd
;

445 
îr
;

447 
cmd
.
cmdidx
 = 
MMC_CMD_SEND_OP_COND
;

448 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R3
;

449 
cmd
.
cmd¨g
 = 0;

450 i‡(
u£_¨g
)

451 
cmd
.
cmd¨g
 = 
OCR_HCS
 |

452 (
ho°
->
vﬁèges
 &

453 (
ho°
->
o¸
 & 
OCR_VOLTAGE_MASK
)) |

454 (
ho°
->
o¸
 & 
OCR_ACCESS_MODE
);

456 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

457 i‡(
îr
)

458  
îr
;

459 
ho°
->
o¸
 = 
cmd
.
ª•⁄£
[0];

461 
	}
}

463 
	$sd_£nd_›_c⁄d
(
sdhci_ho°
 *
ho°
)

465 
timeout
 = 1000;

466 
îr
;

467 
mmc_cmd
 
cmd
;

470 
cmd
.
cmdidx
 = 
MMC_CMD_APP_CMD
;

471 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

472 
cmd
.
cmd¨g
 = 0;

474 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

476 i‡(
îr
)

477  
îr
;

479 
cmd
.
cmdidx
 = 
SD_CMD_APP_SEND_OP_COND
;

480 
cmd
.
cmd¨g
 = 0x40008000;

481 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R3
;

483 i‡(
ho°
->
vîsi⁄
 =
SDHCI_SPEC_200
)

484 
cmd
.
cmd¨g
 |
OCR_HCS
;

486 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

488 i‡(
îr
)

489  
îr
;

491 i‡(
cmd
.
ª•⁄£
[0] & 
OCR_BUSY
)

494 i‡(
timeout
-- <= 0)

495  
UNUSABLE_ERR
;

497 
	`udñay
(1000);

500 i‡(
ho°
->
vîsi⁄
 !
SDHCI_SPEC_200
)

501 
ho°
->
vîsi⁄
 = 
SDHCI_SPEC_100
;

503 
ho°
->
o¸
 = 
cmd
.
ª•⁄£
[0];

505 
ho°
->
high_ˇ∑côy
 = ((ho°->
o¸
 & 
OCR_HCS
) == OCR_HCS);

506 
ho°
->
rˇ
 = 0;

509 
	}
}

511 
	$mmc_£nd_if_c⁄d
(
sdhci_ho°
 *
ho°
)

513 
mmc_cmd
 
cmd
;

514 
îr
;

516 
cmd
.
cmdidx
 = 
SD_CMD_SEND_IF_COND
;

518 
cmd
.
cmd¨g
 = 0x1aa;

519 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R7
;

521 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

523 i‡(
îr
)

524  
îr
;

526 i‡((
cmd
.
ª•⁄£
[0] & 0xff) != 0xaa)

527  
UNUSABLE_ERR
;

529 
ho°
->
vîsi⁄
 = 
SDHCI_SPEC_200
;

532 
	}
}

534 
	$mmc_com∂ëe_›_c⁄d
(
sdhci_ho°
 *
ho°
)

536 
timeout
 = 1000;

537 
u32
 
°¨t
;

538 
îr
;

540 
°¨t
 = 0;

541 
ho°
->
›_c⁄d_≥ndög
 = 0;

542 i‡(!(
ho°
->
o¸
 & 
OCR_BUSY
)) {

543 
°¨t
 = 0;

545 
îr
 = 
	`mmc_£nd_›_c⁄d_ôî
(
ho°
, 1);

546 i‡(
îr
)

547  
îr
;

548 i‡(
ho°
->
o¸
 & 
OCR_BUSY
)

550 i‡(
°¨t
 > 
timeout
)

551  
UNUSABLE_ERR
;

552 
	`udñay
(100);

553 
°¨t
 += 1;

559 
ho°
->
high_ˇ∑côy
 = ((ho°->
o¸
 & 
OCR_HCS
) == OCR_HCS);

560 
ho°
->
rˇ
 = 1;

563 
	}
}

566 
	$bﬂrd_mmc_powî_öô
()

568 
	}
}

570 
	$mmc_°¨t_öô
(
sdhci_ho°
 *
ho°
)

572 
îr
;

573 
¥e£¡
;

574 
‰eq_£l
;

575 
˛k_mul
;

576 
˛k_£l
;

577 
M
;

579 
¥e£¡
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_PRESENT_STATE
);

580 
ho°
->
vîsi⁄
 = (
	`sdhci_ªadw
(ho°, 
SDHCI_HOST_VERSION
Ë& 
SDHCI_SPEC_VER_MASK
Ë>> 
SDHCI_SPEC_VER_SHIFT
;

581 
ho°
->
ˇps
 = 
	`sdhci_ªadl
(ho°, 
SDHCI_CAPABILITIES
);

583 i‡(
ho°
->
vîsi⁄
 >
SDHCI_SPEC_300
) {

584 
ho°
->
ˇps1
 = 
	`sdhci_ªadl
(ho°, 
SDHCI_CAPABILITIES_2
);

588 i‡((
¥e£¡
 & 
SDHCI_CARD_PRESENT
) != SDHCI_CARD_PRESENT) {

589 
ho°
->
has_öô
 = 0;

590 
	`¥ötf
("host:Ço cardÖresent\n");

591  
NO_CARD_ERR
;

594 i‡(
ho°
->
has_öô
) {

595 
	`¥ötf
("hostálready initialized\n");

599 
	`bﬂrd_mmc_powî_öô
();

601 
	`sdhci_ª£t
(
ho°
, 
SDHCI_RESET_ALL
);

603 
îr
 = 
	`sdhci_öô
(
ho°
);

605 i‡(
îr
)

606  
îr
;

608 
	`sdhci_£t_ios
(
ho°
);

610 
‰eq_£l
 = (
	`sdhci_ªadw
(
ho°
, 
SDHCI_CLOCK_CONTROL
) >> 8) & 0xff;

611 
˛k_£l
 = (
	`sdhci_ªadw
(
ho°
, 
SDHCI_CLOCK_CONTROL
) >> 5) & 0x1;

612 
˛k_mul
 = (
	`sdhci_ªadw
(
ho°
, 
SDHCI_CAPABILITIES_2
) >> 16) & 0xff;

613 
M
 = 
˛k_mul
 == 0 ? 1 : (clk_mul + 1);

614 
	`¥ötf
("\t\tSDCLK output=%dHz, freq_sel=0x%x, M=0x%x\n",

615 
˛k_£l
 ? 
ho°
->
f_max
 * 
M
 / (
‰eq_£l
 + 1) :

616 
ho°
->
f_max
 / (
‰eq_£l
 ? (‰eq_£»* 2Ë: 1), fªq_£l, 
M
);

619 
îr
 = 
	`mmc_go_idÀ
(
ho°
);

621 i‡(
îr
) {

622 
	`¥ötf
("Re£àthêC¨d faû,Éº=0x%x", 
îr
);

623  
îr
;

626 i‡(
ho°
->
ˇrd_ty≥
 =
SDCARD
) {

628 
îr
 = 
	`mmc_£nd_if_c⁄d
(
ho°
);

629 i‡(
îr
)

630 
	`¥ötf
("SD CMD8 SEND_IF_COND fail.\n");

633 
îr
 = 
	`sd_£nd_›_c⁄d
(
ho°
);

634 i‡(
îr
)

635 
	`¥ötf
("SD ACMD41 SEND_OP_COND fail.\n");

637 } i‡(
ho°
->
ˇrd_ty≥
 =
EMMCCARD
) {

638 
îr
 = 
	`mmc_£nd_›_c⁄d
(
ho°
);

640 i‡(
îr
) {

641 
	`¥ötf
("eMMC CMD1 SEND_OP_COND fail\n");

642  
îr
;

646 i‡(!
îr
)

647 
ho°
->
öô_ö_¥ogªss
 = 1;

649  
îr
;

650 
	}
}

652 
	$mmc_com∂ëe_öô
(
sdhci_ho°
 *
ho°
)

654 
îr
 = 0;

655 
u32
 
˘æ
;

656 
mmc_cmd
 
cmd
;

658 
ho°
->
öô_ö_¥ogªss
 = 0;

659 i‡(
ho°
->
›_c⁄d_≥ndög
) {

660 
îr
 = 
	`mmc_com∂ëe_›_c⁄d
(
ho°
);

661 i‡(
îr
) {

662 
	`¥ötf
("eMMC COMPLETE_OP_COND fail\n");

663  
îr
;

669 
cmd
.
cmdidx
 = 
MMC_CMD_ALL_SEND_CID
;

670 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R2
;

671 
cmd
.
cmd¨g
 = 0;

672 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

674 i‡(
îr
) {

675 
	`¥ötf
("CMD2 ALL_SEND_CID fail\n");

676  
îr
;

684 
cmd
.
cmdidx
 = 
SD_CMD_SEND_RELATIVE_ADDR
;

685 
cmd
.
cmd¨g
 = 0;

686 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R6
;

688 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

690 
ho°
->
rˇ
 = (
cmd
.
ª•⁄£
[0] >> 16) & 0xffff;

692 i‡(
îr
) {

693 
	`¥ötf
("CMD3 SEND_RELATIVE_ADDR fail\n");

694  
îr
;

698 
cmd
.
cmdidx
 = 
MMC_CMD_SEND_CSD
;

699 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R2
;

700 
cmd
.
cmd¨g
 = 
ho°
->
rˇ
 << 16;

702 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

703 i‡(
îr
){

704 
	`¥ötf
("CMD9 CMD_SEND_CSD fail\n");

705  
îr
;

707 
ho°
->
csd
[0] = 
cmd
.
ª•⁄£
[0];

708 
ho°
->
csd
[1] = 
cmd
.
ª•⁄£
[1];

709 
ho°
->
csd
[2] = 
cmd
.
ª•⁄£
[2];

710 
ho°
->
csd
[3] = 
cmd
.
ª•⁄£
[3];

715 
cmd
.
cmdidx
 = 
MMC_CMD_SELECT_CARD
;

716 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

717 
cmd
.
cmd¨g
 = 
ho°
->
rˇ
 << 16;

718 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

720 i‡(
îr
)

721  
îr
;

724 i‡(
ho°
->
ˇrd_ty≥
 =
SDCARD
) {

725 
cmd
.
cmdidx
 = 
MMC_CMD_APP_CMD
;

726 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

727 
cmd
.
cmd¨g
 = 
ho°
->
rˇ
 << 16;

729 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

731 i‡(
îr
)

732  
îr
;

735 
cmd
.
cmdidx
 = 
SD_CMD_APP_SET_BUS_WIDTH
;

736 i‡(
ho°
->
ˇrd_ty≥
 =
SDCARD
) {

737 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

738 i‡(
ho°
->
bus_width
 == 4)

739 
cmd
.
cmd¨g
 = 
SDHCI_CTRL_4BITBUS
;

741 
cmd
.
cmd¨g
 = 0;

742 } i‡(
ho°
->
ˇrd_ty≥
 =
EMMCCARD
) {

743 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1b
;

747 i‡(
ho°
->
bus_width
 == 4)

748 
cmd
.
cmd¨g
 = 0x3b70100;

750 
cmd
.
cmd¨g
 = 0x3b70000;

752 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

754 i‡(
îr
)

755  
îr
;

758 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

760 i‡(
ho°
->
bus_width
 == 4)

761 
˘æ
 |
SDHCI_CTRL_4BITBUS
;

763 
˘æ
 &~
SDHCI_CTRL_4BITBUS
;

765 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

767 i‡(
ho°
->
bus_width
 =4 && ho°->
ˇrd_ty≥
 =
EMMCCARD
)

768 
	`sdhci_wrôew
(
ho°
, 
SDHCI_CTRL_UHS_SDR25
, 
SDHCI_HOST_CONTROL2
);

770 
ho°
->
has_öô
 = 1;

771  
îr
;

772 
	}
}

774 
	$sdhci_£tup_ho°
(
sdhci_ho°
 *
ho°
)

776 
îr
 = 0;

778 i‡(
ho°
->
has_öô
)

781 
îr
 = 
	`mmc_°¨t_öô
(
ho°
);

783 i‡(!
îr
)

784 
îr
 = 
	`mmc_com∂ëe_öô
(
ho°
);

785 #i‡
CK_SDIO_DEBUG


786 
	`¥ötf
("\n\t\t%s: %d\n", 
__func__
, 
îr
);

788  
îr
;

790 
	}
}

	@drivers/timer.c

13 
	~"ck810.h
"

14 
	~"d©©y≥.h
"

15 
	~"cktimî.h
"

16 
	~"timî.h
"

17 
	~"ötc.h
"

18 
	~"misc.h
"

20 
	#TIMER_LOAD_VAL
 0xffffffff

	)

21 
	#USEC_TO_COUNT
(
x
Ë((xË* (
TIMER_DEFAULT_FREQ
 / 1000000))

	)

23 
CKSåu˘_TimîInfo
 
	gCK_Timî_TabÀ
[] =

25 {0, (
PCKPSåu˘_TIMER
)
CK_TIMER0_BASSADDR
, 
CK_TIMER_IRQ0
, 
FALSE
, 0},

26 {1, (
PCKPSåu˘_TIMER
)
CK_TIMER1_BASSADDR
, 
CK_TIMER_IRQ1
, 
FALSE
, 0},

27 {2, (
PCKPSåu˘_TIMER
)
CK_TIMER2_BASSADDR
, 
CK_TIMER_IRQ2
, 
FALSE
, 0},

28 {3, (
PCKPSåu˘_TIMER
)
CK_TIMER3_BASSADDR
, 
CK_TIMER_IRQ3
, 
FALSE
, 0},

29 {4, (
PCKPSåu˘_TIMER
)
CK_TIMER4_BASSADDR
, 
CK_TIMER_IRQ4
, 
FALSE
, 0},

30 {5, (
PCKPSåu˘_TIMER
)
CK_TIMER5_BASSADDR
, 
CK_TIMER_IRQ5
, 
FALSE
, 0},

31 {6, (
PCKPSåu˘_TIMER
)
CK_TIMER6_BASSADDR
, 
CK_TIMER_IRQ6
, 
FALSE
, 0},

32 {7, (
PCKPSåu˘_TIMER
)
CK_TIMER7_BASSADDR
, 
CK_TIMER_IRQ7
, 
FALSE
, 0},

41 
	$CK_Dó˘ive_TimîModuÀ
()

43 
i
;

44 
PCKPSåu˘_TIMER
 
±imî
;

46 
i
 = 0; i < 
TIMERID_MAX
; i++ ) {

47 
±imî
 = 
CK_Timî_TabÀ
[
i
].
addr
;

49 
±imî
->
TxC⁄åﬁ
 &~(
CK_TIMER_TXCONTROL_ENABLE
);

51 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_INTMASK
;

53 
	}
}

58 
	$CK_Timî_Inô
()

60 
	`CK_Dó˘ive_TimîModuÀ
();

61 
	}
}

71 
CK_INT32
 
	$CK_Timî_O≥n
(
CKEnum_Timî_Devi˚
 
timîid
,

72 (*
h™dÀr
)(
CK_UINT32
),

73 
CK_UINT16
 
¥i‹ôy
, 
BOOL
 
Á°
)

75 
PCKSåu˘_TimîInfo
 
öfo
;

76 
PCKPSåu˘_TIMER
 
±imî
;

78 i‡((
timîid
 < 0Ë|| (timîid > 
TIMERID_MAX
))

79  
FAILURE
;

81 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

82 
±imî
 = 
öfo
->
addr
;

83 if(
öfo
->
›íed
)

84  
FAILURE
;

87 i‡(
NULL
 !
h™dÀr
) {

88 
öfo
->
úqh™dÀr
.
dev«me
 = "TIMER";

89 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

90 
öfo
->
úqh™dÀr
.
¥i‹ôy
 =Öriority;

91 
öfo
->
úqh™dÀr
.
h™dÀr
 = handler;

92 
öfo
->
úqh™dÀr
.
bÁ°
 = 
Á°
;

93 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

95 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

98 
öfo
->
›íed
 = 
TRUE
;

100 
±imî
->
TxC⁄åﬁ
 &~(
CK_TIMER_TXCONTROL_INTMASK
);

101 
	`¥ötf
("[%s:%d], Timî #%d\n", 
__FUNCTION__
, 
__LINE__
, 
timîid
);

103  
SUCCESS
;

104 
	}
}

112 
CK_INT32
 
	$CK_Timî_Clo£
(
CKEnum_Timî_Devi˚
 
timîid
)

114 
PCKSåu˘_TimîInfo
 
öfo
;

115 
PCKPSåu˘_TIMER
 
±imî
;

117 i‡((
timîid
 < 0Ë|| (timîid > 
TIMERID_MAX
))

118  
FAILURE
;

120 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

121 
±imî
 = 
öfo
->
addr
;

122 if(!
öfo
->
›íed
)

123  
FAILURE
;

126 
±imî
->
TxC⁄åﬁ
 &~
CK_TIMER_TXCONTROL_ENABLE
;

128 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_INTMASK
;

130 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

131 
öfo
->
›íed
 = 
FALSE
;

132 
	`¥ötf
("[%s:%d], Timî #%d\n", 
__FUNCTION__
, 
__LINE__
, 
timîid
);

134  
SUCCESS
;

135 
	}
}

143 
CK_INT32
 
	$CK_Timî_Sèπ
(
CKEnum_Timî_Devi˚
 
timîid
, 
CK_UINT32
 
timeout
)

145 
CK_UINT32
 
lﬂd
;

146 
PCKSåu˘_TimîInfo
 
öfo
;

147 
PCKPSåu˘_TIMER
 
±imî
;

149 i‡((
timîid
 < 0Ë|| (timîid > 
TIMERID_MAX
))

150  
FAILURE
;

152 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

153 
±imî
 = 
öfo
->
addr
;

154 if(!
öfo
->
›íed
)

155  
FAILURE
;

157 
lﬂd
 = (
CK_UINT32
)((
TIMER_DEFAULT_FREQ
 / 1000000Ë* 
timeout
);

160 
±imî
->
TxLﬂdCou¡
 = 
lﬂd
;

162 
öfo
->
timeout
 =Åimeout;

164 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_MODE
;

166 
	`¥ötf
("[%s:%d], Timer #%d, LoadCount=0x%x, Control=0x%x, IntStatus=0x%x\n",

167 
__FUNCTION__
, 
__LINE__
, 
timîid
, 
±imî
->
TxLﬂdCou¡
,

168 
±imî
->
TxC⁄åﬁ
,Ötimî->
TxI¡Sètus
);

170 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_ENABLE
;

172  
SUCCESS
;

173 
	}
}

175 
CK_INT32
 
	$CK_Timî_Sèπ_Fªe_Ru¬ög
(
CKEnum_Timî_Devi˚
 
timîid
)

177 
PCKSåu˘_TimîInfo
 
öfo
;

178 
PCKPSåu˘_TIMER
 
±imî
;

180 i‡((
timîid
 < 0Ë|| (timîid > 
TIMERID_MAX
))

181  
FAILURE
;

183 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

184 
±imî
 = 
öfo
->
addr
;

185 if(!
öfo
->
›íed
)

186  
FAILURE
;

188 
±imî
->
TxC⁄åﬁ
 &~
CK_TIMER_TXCONTROL_MODE
;

190 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_ENABLE
;

192 
	`¥ötf
("Timer #%d, LoadCount=0x%x, Control=0x%x, IntStatus=0x%x\n",

193 
timîid
, 
±imî
->
TxLﬂdCou¡
,Ötimî->
TxC⁄åﬁ
,Ötimî->
TxI¡Sètus
);

195  
SUCCESS
;

196 
	}
}

204 
CK_UINT32
 
	$CK_Timî_St›
(
CKEnum_Timî_Devi˚
 
timîid
)

206 
PCKSåu˘_TimîInfo
 
öfo
;

207 
PCKPSåu˘_TIMER
 
±imî
;

210 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

211 if(!
öfo
->
›íed
)

212  
FAILURE
;

214 
±imî
 = 
öfo
->
addr
;

216 
±imî
->
TxC⁄åﬁ
 &~(
CK_TIMER_TXCONTROL_ENABLE
);

217 
	`¥ötf
("[%s:%d], Timî #%d\n", 
__FUNCTION__
, 
__LINE__
, 
timîid
);

219  
±imî
->
TxCuºítVÆue
;

220 
	}
}

226 
BOOL
 
	$CK_Timî_CÀ¨IrqFœg
(
CKEnum_Timî_Devi˚
 
timîid
)

228 
PCKSåu˘_TimîInfo
 
öfo
;

229 
PCKPSåu˘_TIMER
 
±imî
;

231 
öfo
 = &(
CK_Timî_TabÀ
[
timîid
]);

232 
±imî
 = 
öfo
->
addr
;

233 i‡(
±imî
->
TxI¡Sètus
) {

234 
±imî
->
TxEOI
;

235  
TRUE
;

238  
FALSE
;

239 
	}
}

247 
CK_UINT32
 
	$CK_Timî_CuºítVÆue
(
CKEnum_Timî_Devi˚
 
timîid
)

249 
PCKSåu˘_TimîInfo
 
öfo
;

250 
PCKPSåu˘_TIMER
 
±imî
;

252 
öfo
 = &
CK_Timî_TabÀ
[
timîid
];

253 
±imî
 = 
öfo
->
addr
;

255  
±imî
->
TxCuºítVÆue
;

256 
	}
}

258 
	$öô_time0
()

260 
PCKSåu˘_TimîInfo
 
öfo
;

261 
PCKPSåu˘_TIMER
 
±imî
;

263 
öfo
 = &
CK_Timî_TabÀ
[0];

264 
±imî
 = 
öfo
->
addr
;

267 
±imî
->
TxLﬂdCou¡
 = 
TIMER_LOAD_VAL
;

270 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_MODE
;

273 
±imî
->
TxC⁄åﬁ
 &~(
CK_TIMER_TXCONTROL_ENABLE
);

274 
±imî
->
TxC⁄åﬁ
 |
CK_TIMER_TXCONTROL_ENABLE
;

275 
	}
}

278 
	$timî_udñay
(
CK_UINT64
 
u£c
)

280 
tmo
 = 
	`USEC_TO_COUNT
(
u£c
);

281 
CK_INT64
 
now
, 
œ°
 = 
	`CK_Timî_CuºítVÆue
(0);

283 
tmo
 > 0) {

284 
now
 = 
	`CK_Timî_CuºítVÆue
(0);

285 i‡(
now
 > 
œ°
) {

286 
tmo
 -(
TIMER_LOAD_VAL
 - 
now
 + 
œ°
);

288 
tmo
 -(
œ°
 - 
now
);

290 
œ°
 = 
now
;

292 
	}
}

	@drivers/uart.c

10 
	~"ck810.h
"

13 
	~"cú˛ebuf„r.h
"

14 
	~"u¨t.h
"

15 
	~"cku¨t.h
"

16 
	~"ötc.h
"

17 
	~"misc.h
"

19 
	#UARTID_MAX
 (
CK_U¨t_TabÀ
Ë/ (
CKSåu˘_U¨tInfo
)

	)

20 
CK_U¨t_I¡îru±
(
CK_UINT32
 
úqid
);

21 
CK_INT32
 
CK_U¨t_En_FIFO
(
CK_U¨t_Devi˚
 
u¨tid
);

22 
CK_INT32
 
CK_U¨t_En_FC
(
CK_U¨t_Devi˚
 
u¨tid
);

23 
CK_C⁄sﬁe_Inô
();

26 
CKSåu˘_U¨tInfo
 
	gCK_U¨t_TabÀ
[] =

28 {0,
CK_UART_ADDRBASE0
,
CK_UART0_IRQID
,
FALSE
,
NULL
},

29 {1,
CK_UART_ADDRBASE1
,
CK_UART1_IRQID
,
FALSE
,
NULL
},

30 {2,
CK_UART_ADDRBASE2
,
CK_UART2_IRQID
,
FALSE
,
NULL
},

31 {3,
CK_UART_ADDRBASE3
,
CK_UART3_IRQID
,
FALSE
,
NULL
},

32 {4,
CK_UART_ADDRBASE4
,
CK_UART4_IRQID
,
FALSE
,
NULL
},

34 
CK_U¨t_Devi˚
 
c⁄sﬁeu¨t
;

36 
	#UART_FCRVAL
 (
UART_FCR_FIFO_EN
 | \

37 
UART_FCR_RXSR
 | \

38 
UART_FCR_TXSR
)

	)

45 
	$CK_Dó˘ive_U¨tModuÀ
()

47 
i
;

48 
CKSåu˘_U¨tInfo
 *
öfo
;

50  
i
 = 0; i < 
UARTID_MAX
; i++)

52 
öfo
 = &(
CK_U¨t_TabÀ
[
i
]);

53 
öfo
->
addr
[
CK_UART_LCR
] = 0x83;

54 
öfo
->
addr
[
CK_UART_DLL
] = 0x0;

55 
öfo
->
addr
[
CK_UART_DLH
] = 0x0;

58 
	}
}

69 
CK_INT32
 
	$CK_U¨t_Inô
–
CK_U¨t_Devi˚
 
u¨tid
)

71 
	`CK_U¨t_Ch™geBaudøã
(
u¨tid
, 
B115200
);

72 
	`CK_U¨t_SëP¨ôy
(
u¨tid
, 
NONE
);

73 
	`CK_U¨t_SëW‹dSize
(
u¨tid
, 
LCR_WORD_SIZE_8
);

74 
	`CK_U¨t_SëSt›Bô
(
u¨tid
, 
LCR_STOP_BIT_1
);

75 
	`CK_U¨t_SëRXMode
(
u¨tid
, 
TRUE
);

76 
	`CK_U¨t_SëTXMode
(
u¨tid
, 
TRUE
);

77 #i‡
CK_UART_FIFO_EN


78 
	`CK_U¨t_En_FIFO
(
u¨tid
);

80 #i‡
CK_UART_FC_EN


81 
	`CK_U¨t_En_FC
(
u¨tid
);

85  
SUCCESS
;

86 
	}
}

96 
CK_INT32
 
	$CK_U¨t_O≥n
(
CK_U¨t_Devi˚
 
u¨tid
,(*
h™dÀr
)(
CK_INT8
 
îr‹
))

98 
CKSåu˘_U¨tInfo
 *
öfo
;

99 
PCKSåu˘_IRQH™dÀr
 
úqh™dî
;

100 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

101 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
))

103  
FAILURE
;

106 i‡(
öfo
->
b›íed
)

108  
FAILURE
;

110 
	`CK_U¨t_Inô
(
u¨tid
);

114 
	`CK_Cú˛eBuf„r_Inô
(

115 &(
öfo
->
txcú˛ebuf„r
), info->
txbuf„r
, 
CK_UART_TXBUFFERSIZE
);

116 
	`CK_Cú˛eBuf„r_Inô
(

117 &(
öfo
->
rxcú˛ebuf„r
), info->
rxbuf„r
, 
CK_UART_RXBUFFERSIZE
);

118 
öfo
->
h™dÀr
 = handler;

121 
úqh™dî
=&(
öfo
->
úqh™dÀr
);

122 
úqh™dî
->
dev«me
 = "UART";

123 
úqh™dî
->
úqid
 = 
öfo
->
úq
;

124 
úqh™dî
->
¥i‹ôy
 = 
öfo
->
úq
;

125 
úqh™dî
->
h™dÀr
 = 
CK_U¨t_I¡îru±
;

126 
úqh™dî
->
bÁ°
 = 
FALSE
;

127 
úqh™dî
->
√xt
 = 
NULL
;

130 #i‚de‡
CONFIG_INTC_DIS


131 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

133 
öfo
->
b›íed
 = 
TRUE
;

134  
SUCCESS
;

135 
	}
}

142 
CK_INT32
 
	$CK_U¨t_Clo£
(
CK_U¨t_Devi˚
 
u¨tid
)

144 
CKSåu˘_U¨tInfo
 *
öfo
;

146 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

147 i‡((
u¨tid
 >0Ë&& (u¨tid < 
UARTID_MAX
Ë&& (
öfo
->
b›íed
))

152 
öfo
->
addr
[
CK_UART_SRR
] = 0x7;

153 
öfo
->
h™dÀr
 = 
NULL
;

154 #i‚de‡
CONFIG_INTC_DIS


155 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

157 
öfo
->
b›íed
 = 0;

158  
SUCCESS
;

160  
FAILURE
;

161 
	}
}

171 
CK_INT32
 
	$CK_U¨t_Ch™geBaudøã
(

172 
CK_U¨t_Devi˚
 
u¨tid
,

173 
CK_U¨t_Baudøã
 
baudøã


176 
CK_INT32
 
divis‹
;

177 
CK_INT32
 
timecou¡
;

178 
CKSåu˘_U¨tInfo
 *
öfo
;

180 
timecou¡
=0;

181 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

183 if((
baudøã
 =
B4800
Ë|| (baudøã =
B9600
) ||

184 (
baudøã
 =
B14400
Ë|| (baudøã =
B19200
) ||

185 (
baudøã
 =
B38400
Ë|| (baudøã =
B56000
) ||

186 (
baudøã
 =
B57600
Ë|| (baudøã =
B115200
))

192 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
)

193 && (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

195 
timecou¡
++;

197 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

199  
FAILURE
;

204 
divis‹
 = ((
UART_DEFAULT_FREQ
 / 
baudøã
) >> 4);

205 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_SET_DLAB
;

207 
öfo
->
addr
[
CK_UART_DLL
] = 
divis‹
 & 0xff;

208 
öfo
->
addr
[
CK_UART_DLH
] = (
divis‹
 >> 8) & 0xff;

213 
öfo
->
addr
[
CK_UART_LCR
] &(~
LCR_SET_DLAB
);

214 
öfo
->
baudøã
 = baudrate;

215  
SUCCESS
;

218  
FAILURE
;

219 
	}
}

230 
CK_INT32
 
	$CK_U¨t_SëP¨ôy
(

231 
CK_U¨t_Devi˚
 
u¨tid
,

232 
CK_U¨t_P¨ôy
 
∑rôy


235 
CKSåu˘_U¨tInfo
 *
öfo
;

237 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

238 
CK_INT32
 
timecou¡
;

239 
timecou¡
 = 0;

241 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

242 (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

244 
timecou¡
++;

246 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

248  
FAILURE
;

252 
∑rôy
)

254 
NONE
:

256 
öfo
->
addr
[
CK_UART_LCR
] &(~
LCR_PARITY_ENABLE
);

259 
ODD
:

261 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_PARITY_ENABLE
;

262 
öfo
->
addr
[
CK_UART_LCR
] &
LCR_PARITY_ODD
;

265 
EVEN
:

267 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_PARITY_ENABLE
;

268 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_PARITY_EVEN
;

272  
FAILURE
;

275 
öfo
->
∑rôy
 =Öarity;

276  
SUCCESS
;

278 
	}
}

291 
CK_INT32
 
	$CK_U¨t_SëSt›Bô
(

292 
CK_U¨t_Devi˚
 
u¨tid
,

293 
CK_U¨t_St›Bô
 
°›bô


296 
CKSåu˘_U¨tInfo
 *
öfo
;

298 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

299 
CK_INT32
 
timecou¡
;

300 
timecou¡
 = 0;

302 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

303 (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

305 
timecou¡
++;

307 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

309  
FAILURE
;

313 
öfo
->
°›
)

315 
LCR_STOP_BIT_1
:

317 
öfo
->
addr
[
CK_UART_LCR
] &
LCR_STOP_BIT1
;

320 
LCR_STOP_BIT_2
:

325 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_STOP_BIT2
;

329  
FAILURE
;

334 
öfo
->
°›
 = 
°›bô
;

335  
SUCCESS
;

336 
	}
}

338 
CK_INT32
 
	$CK_U¨t_En_FIFO
(
CK_U¨t_Devi˚
 
u¨tid
)

340 
CKSåu˘_U¨tInfo
 *
öfo
;

341 
CK_INT32
 
timecou¡
;

343 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

344 
timecou¡
 = 0;

346 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

347 (
timecou¡
 < 
UART_BUSY_TIMEOUT
)) {

348 
timecou¡
++;

351 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

352  
FAILURE
;

354 
öfo
->
addr
[
CK_UART_FCR
] |
UART_FCRVAL
;

356  
SUCCESS
;

357 
	}
}

359 
CK_INT32
 
	$CK_U¨t_En_FC
(
CK_U¨t_Devi˚
 
u¨tid
)

361 
CKSåu˘_U¨tInfo
 *
öfo
;

363 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

365 
öfo
->
addr
[
CK_UART_MCR
] |(
MCR_AFCE
 | 
MCR_RTS
);

367  
SUCCESS
;

368 
	}
}

378 
CK_INT32
 
	$CK_U¨t_SëW‹dSize
(

379 
CK_U¨t_Devi˚
 
u¨tid
,

380 
CK_U¨t_W‹dSize
 
w‹dsize
)

382 
CKSåu˘_U¨tInfo
 *
öfo
;

383 
timecou¡
=0;

385 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

387 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

388 (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

390 
timecou¡
++;

392 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

394  
FAILURE
;

407 
timecou¡
 = 0;

408 
w‹dsize
)

410 
WORD_SIZE_5
:

411 
öfo
->
addr
[
CK_UART_LCR
] &
LCR_WORD_SIZE_5
;

414 
WORD_SIZE_6
:

415 
öfo
->
addr
[
CK_UART_LCR
] &= 0xfd;

416 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_WORD_SIZE_6
;

419 
WORD_SIZE_7
:

420 
öfo
->
addr
[
CK_UART_LCR
] &= 0xfe;

421 
öfo
->
addr
[
CK_UART_LCR
] |
LCR_WORD_SIZE_7
;

424 
WORD_SIZE_8
:

425 
öfo
->
addr
[
CK_UART_LCR
]|
LCR_WORD_SIZE_8
;

432 
öfo
->
w‹d
 = 
w‹dsize
;

433  
SUCCESS
;

434 
	}
}

447 
CK_INT32
 
	$CK_U¨t_SëTXMode
(
CK_U¨t_Devi˚
 
u¨tid
, 
BOOL
 
bQuîy
)

449 
CKSåu˘_U¨tInfo
 *
öfo
;

451 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

452 
CK_INT32
 
timecou¡
;

453 
timecou¡
 = 0;

454 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

455 (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

457 
timecou¡
++;

459 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

461  
FAILURE
;

465 if(
bQuîy
)

470 
öfo
->
addr
[
CK_UART_IER
] &(~
IER_THRE_INT_ENABLE
);

472 
öfo
->
btxquîy
 = 
TRUE
;

479 
öfo
->
addr
[
CK_UART_IER
] |
IER_THRE_INT_ENABLE
;

481 
öfo
->
btxquîy
 = 
FALSE
;

484  
SUCCESS
;

485 
	}
}

498 
CK_INT32
 
	$CK_U¨t_SëRXMode
(
CK_U¨t_Devi˚
 
u¨tid
, 
BOOL
 
bQuîy
)

500 
CKSåu˘_U¨tInfo
 *
öfo
;

502 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

503 
CK_INT32
 
timecou¡
;

504 
timecou¡
 = 0;

506 (
öfo
->
addr
[
CK_UART_USR
] & 
USR_UART_BUSY
) &&

507 (
timecou¡
 < 
UART_BUSY_TIMEOUT
))

509 
timecou¡
++;

511 if(
timecou¡
 >
UART_BUSY_TIMEOUT
)

513  
FAILURE
;

517 if(
bQuîy
)

522 
öfo
->
addr
[
CK_UART_IER
] &(~
IER_RDA_INT_ENABLE
);

524 
öfo
->
brxquîy
 = 
TRUE
;

531 
öfo
->
addr
[
CK_UART_IER
] |
IER_RDA_INT_ENABLE
;

533 
öfo
->
brxquîy
 = 
FALSE
;

536  
SUCCESS
;

537 
	}
}

543 
CK_INT32
 
	$CK_U¨t_DrivîInô
()

545 
	`CK_Dó˘ive_U¨tModuÀ
();

546  
SUCCESS
;

547 
	}
}

557 
CK_INT32
 
	$CK_U¨t_GëCh¨
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, 
OUT
 
CK_UINT8
 *
ch
)

559 
CKSåu˘_U¨tInfo
 *
öfo
;

561 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
))

563  
FAILURE
;

565 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

566 i‡(!(
öfo
->
b›íed
))

568  
FAILURE
;

572 i‡(
öfo
->
brxquîy
)

574 !(
öfo
->
addr
[
CK_UART_LSR
] & 
LSR_DATA_READY
));

576 *
ch
 = 
öfo
->
addr
[
CK_UART_RBR
];

577  
SUCCESS
;

581 if(
TRUE
 =
	`CK_Cú˛eBuf„r_Ród
(&(
öfo
->
rxcú˛ebuf„r
), 
ch
))

582  
SUCCESS
;

584  
FAILURE
;

585 
	}
}

594 
CK_INT32
 
	$CK_U¨t_GëCh¨UnBlock
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, 
OUT
 
CK_UINT8
 *
ch
)

596 
CKSåu˘_U¨tInfo
 *
öfo
;

598 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
))

600  
FAILURE
;

602 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

603 i‡(!(
öfo
->
b›íed
))

605  
FAILURE
;

609 i‡(
öfo
->
brxquîy
)

611 i‡(
öfo
->
addr
[
CK_UART_LSR
] & 
LSR_DATA_READY
)

613 *
ch
 = 
öfo
->
addr
[
CK_UART_RBR
];

614  
SUCCESS
;

619 if(
TRUE
 =
	`CK_Cú˛eBuf„r_Ród
(&(
öfo
->
rxcú˛ebuf„r
), 
ch
))

620  
SUCCESS
;

622  
FAILURE
;

623 
	}
}

632 
CK_INT32
 
	$CK_U¨t_PutCh¨
(
CK_U¨t_Devi˚
 
u¨tid
, 
CK_UINT8
 
ch
)

634 
CKSåu˘_U¨tInfo
 *
öfo
;

635 
CK_UINT8
 
ãmp
;

637 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
))

639  
FAILURE
;

641 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

642 i‡(!(
öfo
->
b›íed
))

644  
FAILURE
;

647 i‡(
öfo
->
btxquîy
)

649 (!(
öfo
->
addr
[
CK_UART_LSR
] & 
CK_LSR_TRANS_EMPTY
)));

650 if(
ch
 == '\n')

652 
öfo
->
addr
[
CK_UART_THR
] = '\r';

653 
	`dñay
(10);

657 
öfo
->
addr
[
CK_UART_THR
] = 
ch
;

659  
SUCCESS
;

665 if(
ch
 == '\n')

667 
	`CK_Cú˛eBuf„r_Wrôe
(&(
öfo
->
txcú˛ebuf„r
), '\r');

668 
	`CK_Cú˛eBuf„r_Wrôe
(&(
öfo
->
txcú˛ebuf„r
), 
ch
);

672 
	`CK_Cú˛eBuf„r_Wrôe
(&(
öfo
->
txcú˛ebuf„r
), 
ch
);

674 if(
öfo
->
addr
[
CK_UART_LSR
] & 0x20)

676 
	`CK_Cú˛eBuf„r_Ród
(&(
öfo
->
txcú˛ebuf„r
), &
ãmp
);

677 
öfo
->
addr
[
CK_UART_THR
] = 
ãmp
;

680  
SUCCESS
;

681 
	}
}

690 
	$CK_U¨t_I¡îru±
(
CK_UINT32
 
úqid
)

692 
CKSåu˘_U¨tInfo
 *
öfo
;

693 
CK_INT8
 
öt_°©e
;

694 
CK_UINT8
 
txrxd©a
;

695 
CKEnum_U¨t_Eº‹
 
îr‹
;

696 
CK_INT8
 
i
;

698 
i
 = 0; i < 
UARTID_MAX
; i++)

700 
öfo
 = &(
CK_U¨t_TabÀ
[
i
]);

701 if(
öfo
->
úq
 =
úqid
)

706 if(
i
 >
UARTID_MAX
)

708 
	`¥ötf
("U¨t%dÇŸÉxi°\n",
i
);

710 
öt_°©e
 = 
öfo
->
addr
[
CK_UART_IIR
] & 0xf;

711 if((
öt_°©e
 =0x2Ë&& !(
öfo
->
btxquîy
))

713 if(!
	`CK_Cú˛eBuf„r_IsEm±y
(&(
öfo
->
txcú˛ebuf„r
)))

715 
	`CK_Cú˛eBuf„r_Ród
(&(
öfo
->
txcú˛ebuf„r
), &
txrxd©a
);

716 
öfo
->
addr
[
CK_UART_THR
] = 
txrxd©a
;

719 if((
öt_°©e
 =0x4Ë&& !(
öfo
->
brxquîy
))

721 
txrxd©a
 = 
öfo
->
addr
[
CK_UART_RBR
];

722 
	`CK_Cú˛eBuf„r_Wrôe
(&(
öfo
->
rxcú˛ebuf„r
), 
txrxd©a
);

723 if(
txrxd©a
 == 3 )

725 
îr‹
 = 
CK_U¨t_CTRL_C
;

726 
öfo
->
	`h™dÀr
(
îr‹
);

729 
	}
}

731 
	$CK_UART_CÀ¨RxBuf„r
(
CK_U¨t_Devi˚
 
u¨tid
)

733 
CKSåu˘_U¨tInfo
 *
öfo
;

734 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

735 
	`CK_Cú˛eBuf„r_CÀ¨
(&(
öfo
->
rxcú˛ebuf„r
));

736 
	}
}

745 
	$CK_U¨t_Së_DMA_Mode
(

746 
CK_U¨t_Devi˚
 
u¨tid
,

747 
CK_UINT32
 
mode


750 
CKSåu˘_U¨tInfo
 *
öfo
;

752 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

754 
mode
) {

757 
öfo
->
addr
[
CK_UART_FCR
] &~
CK_UART_DMA_MODE_SEL
;

761 
öfo
->
addr
[
CK_UART_FCR
] |
CK_UART_DMA_MODE_SEL
;

764 
	`¥ötf
("îr‹: unsuµ‹ãd DMA modê%d", 
mode
);

766 
	}
}

774 
	$CK_U¨t_Së_Lo›back_Mode
(
CK_U¨t_Devi˚
 
u¨tid
) {

775 
CKSåu˘_U¨tInfo
 *
öfo
;

776 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

778 
öfo
->
addr
[
CK_UART_MCR
] |
MCR_LOOPBACK
;

779 
	}
}

787 
	$CK_U¨t_Un£t_Lo›back_Mode
(
CK_U¨t_Devi˚
 
u¨tid
) {

788 
CKSåu˘_U¨tInfo
 *
öfo
;

789 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

791 
öfo
->
addr
[
CK_UART_MCR
] &(~
MCR_LOOPBACK
);

792 
	}
}

800 
	$CK_U¨t_Së_FIFO_Ac˚ss_Mode
(
CK_U¨t_Devi˚
 
u¨tid
) {

801 
CKSåu˘_U¨tInfo
 *
öfo
;

802 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

804 
öfo
->
addr
[
CK_UART_FCR
] = 
FCR_TET_11
 | 
FCR_RT_01
 | 
FCR_FIFOE
;

807 
öfo
->
addr
[
CK_UART_FAR
] |
FAR_FIFO_ACCESS
;

808 
	}
}

816 
	$CK_U¨t_Së_FIFO_Triggî
(
CK_U¨t_Devi˚
 
u¨tid
) {

817 
CKSåu˘_U¨tInfo
 *
öfo
;

818 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

820 
öfo
->
addr
[
CK_UART_FCR
] = 
FCR_TET_11
 | 
FCR_RT_01
 | 
FCR_FIFOE
;

822 
	}
}

832 
BOOL
 
	$CK_U¨t_Gë_FIFO_Ac˚ss_Mode
(
CK_U¨t_Devi˚
 
u¨tid
) {

833 
CKSåu˘_U¨tInfo
 *
öfo
;

834 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

836  (
öfo
->
addr
[
CK_UART_FAR
] & 
FAR_FIFO_ACCESS
);

837 
	}
}

847 
CK_INT32
 
	$CK_U¨t_Ród_TFR
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, IN 
CK_UINT32
 
Àn
,

848 
OUT
 
CK_UINT8
 *
buf
) {

849 
CKSåu˘_U¨tInfo
 *
öfo
;

850 
CK_UINT32
 
i
 = 0;

851 
CK_UINT32
 
timeout
 = 0;

853 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
)) {

854  
FAILURE
;

856 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

857 i‡(!(
öfo
->
b›íed
)) {

858  
FAILURE
;

861 
i
 < 
Àn
) {

862 i‡(
öfo
->
addr
[
CK_UART_TFL
] != 0) {

863 *
buf
 = 
öfo
->
addr
[
CK_UART_TFR
];

864 
buf
++;

865 
i
++;

866 } i‡(
timeout
++ > 0x5000){

867 
	`CK_U¨t_Clo£
(
c⁄sﬁeu¨t
);

868 
	`CK_C⁄sﬁe_Inô
();

869 
	`¥ötf
("\n\tread UART TFRÅimeout!\n");

870  
FAILURE
;

873  
TRUE
;

874 
	}
}

884 
CK_INT32
 
	$CK_U¨t_Wrôe_RFW
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, IN 
CK_UINT32
 
Àn
,

885 
OUT
 
CK_UINT8
 *
buf
) {

886 
CKSåu˘_U¨tInfo
 *
öfo
;

887 
CK_UINT32
 
i
 = 0;

889 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
)) {

890  
FAILURE
;

892 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

893 i‡(!(
öfo
->
b›íed
)) {

894  
FAILURE
;

897 
i
 < 
Àn
) {

898 i‡(
öfo
->
addr
[
CK_UART_RFL
] != 16) {

899 
öfo
->
addr
[
CK_UART_RFW
] = *
buf
;

900 
buf
++;

901 
i
++;

904  
TRUE
;

905 
	}
}

911 
CK_INT32
 
	$CK_UART_SIR_E«bÀ
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
) {

912 
CKSåu˘_U¨tInfo
 *
öfo
 = 
NULL
;

914 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
)) {

915  
FAILURE
;

917 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

918 i‡(!(
öfo
->
b›íed
)) {

919  
FAILURE
;

922 
öfo
->
addr
[
CK_UART_MCR
] |
MCR_SIRE
;

923  
TRUE
;

924 
	}
}

930 
CK_INT32
 
	$CK_UART_SIR_DißbÀ
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
) {

931 
CKSåu˘_U¨tInfo
 *
öfo
 = 
NULL
;

933 i‡((
u¨tid
 < 0Ë|| (u¨tid >
UARTID_MAX
)) {

934  
FAILURE
;

936 
öfo
 = &(
CK_U¨t_TabÀ
[
u¨tid
]);

937 i‡(!(
öfo
->
b›íed
)) {

938  
FAILURE
;

941 
öfo
->
addr
[
CK_UART_MCR
] &(~
MCR_SIRE
);

942  
TRUE
;

943 
	}
}

	@drivers/vs_apb_spi.c

10 
	~"ck810.h
"

11 
	~"d©©y≥.h
"

12 
	~"ötc.h
"

13 
	~"vs_≠b_•i.h
"

14 
	~"misc.h
"

16 
	#DRV_VERSION
 "1.1.0"

	)

17 
	#DRIVER_NAME
 "vsi-•i"

	)

19 vﬁ©ûê*
	g•i_ioba£_li°
[
MAX_SPI_NUM_ON_CHIP
] = {

20 
SPI0_BASE
,

21 
SPI1_BASE


27 
	#SPI_TXREG
 (0x00)

	)

28 
	#SPI_RXREG
 (0x04)

	)

29 
	#SPI_CSTAT
 (0x08)

	)

30 
	#SPI_INTSTAT
 (0x0C)

	)

31 
	#SPI_INTEN
 (0x10)

	)

32 
	#SPI_INTCLR
 (0x14)

	)

33 
	#SPI_GCTL
 (0x18)

	)

34 
	#SPI_CCTL
 (0x1C)

	)

35 
	#SPI_SPBRG
 (0x20)

	)

36 
	#SPI_RXDNR
 (0x24)

	)

37 
	#SPI_SCSR
 (0x28)

	)

38 
	#SPI_MIO_2_3_CTL
 (0x2c)

	)

43 
	#VSI_SPI_TXREG
 ((vﬁ©ûê
vsi_•i_txªg
*Ë(
rs
->
ªgs
+0x00))

	)

44 
	#VSI_SPI_RXREG
 ((vﬁ©ûê
vsi_•i_rxªg
*Ë(
rs
->
ªgs
+0x04))

	)

45 
	#VSI_SPI_CSTAT
 ((vﬁ©ûê
vsi_•i_c°©
*Ë(
rs
->
ªgs
+0x08))

	)

46 
	#VSI_SPI_INTSTAT
 ((vﬁ©ûê
vsi_•i_öt°©
*Ë(
rs
->
ªgs
+0x0c))

	)

47 
	#VSI_SPI_INTEN
 ((vﬁ©ûê
vsi_•i_öãn
*Ë(
rs
->
ªgs
+0x10))

	)

48 
	#VSI_SPI_INTCLR
 ((vﬁ©ûê
vsi_•i_öt˛r
*Ë(
rs
->
ªgs
+0x14))

	)

49 
	#VSI_SPI_GCTL
 ((vﬁ©ûê
vsi_•i_g˘l
*Ë(
rs
->
ªgs
+0x18))

	)

50 
	#VSI_SPI_CCTL
 ((vﬁ©ûê
vsi_•i_c˘l
*Ë(
rs
->
ªgs
+0x1c))

	)

51 
	#VSI_SPI_SPBRG
 ((vﬁ©ûê
vsi_•i_•brg
*Ë(
rs
->
ªgs
+0x20))

	)

52 
	#VSI_SPI_RXDNR
 ((vﬁ©ûê
vsi_•i_rxdƒ
*Ë(
rs
->
ªgs
+0x24))

	)

53 
	#VSI_SPI_SCSR
 ((vﬁ©ûê
vsi_•i_sc§
*Ë(
rs
->
ªgs
+0x28))

	)

54 
	#VSI_SPI_MIO_2_3_CTL
 ((vﬁ©ûê
vsi_•i_mio_2_3_˘l
*Ë(
rs
->
ªgs
+0x2c))

	)

59 
	#SPI_ENABLE
 1

	)

60 
	#SPI_DISABLE
 0

	)

61 
	#SPI_INTERRUPT_ENABLE
 1

	)

62 
	#SPI_INTERRUPT_DISABLE
 0

	)

63 
	#MASTER_MODE
 1

	)

64 
	#SLAVE_MODE
 0

	)

65 
	#TX_ENABLE
 1

	)

66 
	#TX_DISABLE
 0

	)

67 
	#RX_ENABLE
 1

	)

68 
	#RX_DISABLE
 0

	)

69 
	#RX_TRIG_LEVEL_V
 1

	)

70 
	#RX_TRIG_LEVEL_0
 0

	)

71 
	#TX_TRIG_LEVEL_V
 1

	)

72 
	#TX_TRIG_LEVEL_0
 0

	)

73 
	#DMA_ACCESS_MODE
 1

	)

74 
	#NORMAL_ACCESS_MODE
 0

	)

75 
	#CS_HARDWARE
 1

	)

76 
	#CS_SOFTWARE
 0

	)

77 
	#DUAL_MODE_EABLE
 1

	)

78 
	#DUAL_MODE_DISABLE
 0

	)

79 
	#QUAD_MODE_EABLE
 1

	)

80 
	#QUAD_MODE_DISABLE
 0

	)

81 
	#TI_MODE_ENABLE
 1

	)

82 
	#TI_MODE_DISABLE
 0

	)

84 
	#CLK_PHASE_A
 0

	)

85 
	#CLK_PHASE_B
 1

	)

86 
	#CLK_LEVEL_L
 0

	)

87 
	#CLK_LEVEL_H
 1

	)

88 
	#MSB_FIRST
 0

	)

89 
	#LSB_FIRST
 1

	)

90 
	#RX_SAMPLE_MIDDLE
 0

	)

91 
	#RX_SAMPLE_EDGE
 1

	)

92 
	#TX_SLAVE_SPEED_LOW
 0

	)

93 
	#TX_SLAVE_SPEED_FAST
 1

	)

94 
	#SPI_LENGTH_32
 31

	)

95 
	#SPI_LENGTH_16
 15

	)

96 
	#SPI_LENGTH_8
 7

	)

98 
	#INT_EN_TX
 1

	)

99 
	#INT_DIS_TX
 0

	)

100 
	#INT_EN_RX
 1

	)

101 
	#INT_DIS_RX
 0

	)

102 
	#INT_EN_UNDERRUN
 1

	)

103 
	#INT_DIS_UNDERRUN
 0

	)

104 
	#INT_EN_OVERRUN
 1

	)

105 
	#INT_DIS_OVERRUN
 0

	)

106 
	#INT_EN_RXMATCH
 1

	)

107 
	#INT_DIS_RXMATCH
 0

	)

108 
	#INT_EN_RX_FIFO_FULL
 1

	)

109 
	#INT_DIS_RX_FIFO_FULL
 0

	)

110 
	#INT_EN_TX_EMPTY
 1

	)

111 
	#INT_DIS_TX_EMPTY
 0

	)

112 
	#INT_EN_ALL
 0x7f

	)

113 
	#INT_DIS_ALL
 0

	)

115 
	#INT_CLR_TX
 1

	)

116 
	#INT_CLR_NOT_TX
 0

	)

117 
	#INT_CLR_RX
 1

	)

118 
	#INT_CLR_NOT_RX
 0

	)

119 
	#INT_CLR_UNDERRUN
 1

	)

120 
	#INT_CLR_NOT_UNDERRUN
 0

	)

121 
	#INT_CLR_OVERRUN
 1

	)

122 
	#INT_CLR_NOT_OVERRUN
 0

	)

123 
	#INT_CLR_RXMATCH
 1

	)

124 
	#INT_CLR_NOT_RXMATCH
 0

	)

125 
	#INT_CLR_RX_FIFO_FULL
 1

	)

126 
	#INT_CLR_NOT_RX_FIFO_FULL
 0

	)

127 
	#INT_CLR_TX_EMPTY
 1

	)

128 
	#INT_CLR_NOT_TX_EMPTY
 0

	)

129 
	#INT_CLR_ALL
 0x7F

	)

131 
	#TX_FIFO_AVAILABLE
 1

	)

132 
	#TX_FIFO_NOT_AVAILABLE
 0

	)

133 
	#RX_FIFO_AVAILABLE
 1

	)

134 
	#RX_FIFO_NOT_AVAILABLE
 0

	)

135 
	#UNDERRUN_ERR
 1

	)

136 
	#NO_UNDERRUN_ERR
 0

	)

137 
	#OVERRUN_ERR
 1

	)

138 
	#NO_OVERRUN_ERR
 0

	)

139 
	#MATCH_RXDNR
 1

	)

140 
	#NO_MATCH_RXDNR
 0

	)

141 
	#RX_FIFO_FULL
 1

	)

142 
	#RX_FIFO_NOT_FULL
 0

	)

143 
	#TX_FIFO_EMPTY
 1

	)

144 
	#TX_FIFO_NOT_EMPTY
 0

	)

146 
	#TX_EMPTY
 1

	)

147 
	#TX_NOT_EMPTY
 0

	)

148 
	#RX_AVAILABLE
 1

	)

149 
	#RX_NOT_AVAILABLE
 0

	)

150 
	#TX_FIFO_FULL
 1

	)

151 
	#TX_FIFO_NOT_FULL
 0

	)

152 
	#RX_FIFO_MORE_THAN_4
 1

	)

153 
	#RX_FIFO_LESS_THAN_4
 0

	)

155 
	#CSn_ACTIVE
(
n
Ë((0xffË& (~(1 <<Ç)))

	)

156 
	#CSX_RELEASE
 (0xff)

	)

158 
	#MAX_SPI_RX_LEN
 (64 * 1024)

	)

161 
	#vsi_•i_wrôñ
(
v
,
c
Ë
	`wrôe_mªg32
(c,v)

	)

162 
	#vsi_•i_ªadl
(
c
Ë
	`ªad_mªg32
(c)

	)

165 
u32
 
	mÆl
;

167 
u32
 
	mtxªg
;

168 } 
	mbô
;

169 } 
	tvsi_•i_txªg
;

172 
u32
 
	mÆl
;

174 
u32
 
	mrxªg
;

175 } 
	mbô
;

176 } 
	tvsi_•i_rxªg
;

179 
u32
 
	mÆl
;

181 
	mtxït
:1;

182 
	mrxavl
:1;

183 
	mtxfuŒ
:1;

184 
	mrxavl_4
:1;

185 
	mª£rved4
:4;

186 
u8
 
	mª£rved8
;

187 
u16
 
	mª£rved16
;

188 } 
	mbô
;

189 } 
	tvsi_•i_c°©
;

192 
u32
 
	mÆl
;

194 
	mtx_ötf
:1;

195 
	mrx_ötf
:1;

196 
	mundîrun_ötf
:1;

197 
	mrx€º_ötf
:1;

198 
	mrxm©ch_ötf
:1;

199 
	mrxfifo_fuŒ_ötf
:1;

200 
	mtxït_ötf
:1;

202 
u8
 
	mª£rved8
;

203 
u16
 
	mª£rved16
;

204 } 
	mbô
;

205 } 
	tvsi_•i_öt°©
;

208 
u32
 
	mÆl
;

210 
	mtxõn
:1;

211 
	mrxõn
:1;

212 
	mundîru√n
:1;

213 
	mrx€ºí
:1;

214 
	mrxm©chí
:1;

215 
	mrxfifo_fuŒ_õn
:1;

216 
	mtxït_õn
:1;

218 
u8
 
	mª£rved8
;

219 
u16
 
	mª£rved16
;

220 } 
	mbô
;

221 } 
	tvsi_•i_öãn
;

224 
u32
 
	mÆl
;

226 
	mtxi˛r
:1;

227 
	mrxi˛r
:1;

228 
	mundîrun˛r
:1;

229 
	mrx€º˛r
:1;

230 
	mrxm©ch˛r
:1;

231 
	mrxfifo_fuŒ_i˛r
:1;

232 
	mtxït_i˛r
:1;

234 
u8
 
	mª£rved8
;

235 
u16
 
	mª£rved16
;

236 } 
	mbô
;

237 } 
	tvsi_•i_öt˛r
;

240 
u32
 
	mÆl
;

242 
	m•õn
:1;

243 
	möt_í
:1;

244 
	mmm
:1;

245 
	mtxí
:1;

246 
	mrxí
:1;

247 
	mrxéf
:2;

248 
	mtxéf0
:1;

249 
	mtxéf1
:1;

250 
	mdmamode
:1;

251 
	mc¢_£l
:1;

253 
	mduÆ_mod
:1;

254 
	mquad_mod
:1;

255 
	mti_mod
:1;

257 
u16
 
	mª£rved16
;

258 } 
	mbô
;

259 } 
	tvsi_•i_g˘l
;

262 
u32
 
	mÆl
;

264 
	mckph
:1;

265 
	mck∂
:1;

266 
	mlsb„
:1;

268 
	mrxedge
:1;

269 
	mtxedge
:1;

271 
	m•ûí
:5;

273 
u16
 
	mª£rved16
;

274 } 
	mbô
;

275 } 
	tvsi_•i_c˘l
;

278 
u32
 
	mÆl
;

280 
u16
 
	m•brg
;

281 
u16
 
	mª£rved16
;

282 } 
	mbô
;

283 } 
	tvsi_•i_•brg
;

286 
u32
 
	mÆl
;

288 
u16
 
	mrxdƒ
;

289 
u16
 
	mª£rved16
;

290 } 
	mbô
;

291 } 
	tvsi_•i_rxdƒ
;

294 
u32
 
	mÆl
;

296 
u8
 
	mc¢
;

297 
u8
 
	mª£rved8
;

298 
u16
 
	mª£rved16
;

299 } 
	mbô
;

300 } 
	tvsi_•i_sc§
;

303 
u32
 
	mÆl
;

305 
	mmio_2_€_nd
:1;

306 
	mmio_2_do_nd
:1;

307 
	mmio_3_€_nd
:1;

308 
	mmio_3_do_nd
:1;

310 
u8
 
	mª£rved8
;

311 
u16
 
	mª£rved16
;

312 } 
	mbô
;

313 } 
	tvsi_•i_mio_2_3_˘l
;

316 
	$vsi_•i_£t_cs
(
vsi_•i
 *
rs
, 
boﬁ
 
íabÀ
)

318 
vsi_•i_sc§
 
sc§
;

320 
sc§
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_SCSR
);

322 i‡(
íabÀ
) {

323 
sc§
.
bô
.
c¢
 = 
	`CSn_ACTIVE
(0);

324 
	`vsi_•i_wrôñ
(
sc§
.
Æl
, 
VSI_SPI_SCSR
);

326 
sc§
.
bô
.
c¢
 = 
CSX_RELEASE
;

327 
	`vsi_•i_wrôñ
(
sc§
.
Æl
, 
VSI_SPI_SCSR
);

329 
	}
}

331 
	$vsi_•i_hwöô
(
vsi_•i
 *
rs
)

333 
vsi_•i_g˘l
 
g˘l
;

334 
vsi_•i_c˘l
 
c˘l
;

335 
vsi_•i_öãn
 
öãn
;

336 
vsi_•i_öt˛r
 
öt˛r
;

337 
vsi_•i_rxdƒ
 
rxdƒ
;

338 
vsi_•i_sc§
 
sc§
;

339 
vsi_•i_•brg
 
•brg
;

341 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

342 
g˘l
.
bô
.
•õn
 = 
SPI_ENABLE
;

343 
g˘l
.
bô
.
öt_í
 = 
SPI_INTERRUPT_DISABLE
;

344 
g˘l
.
bô
.
mm
 = 
rs
->
mode
;

345 
g˘l
.
bô
.
txí
 = 
TX_DISABLE
;

346 
g˘l
.
bô
.
rxí
 = 
RX_DISABLE
;

347 
g˘l
.
bô
.
rxéf
 = 
RX_TRIG_LEVEL_V
;

348 
g˘l
.
bô
.
txéf0
 = 
TX_TRIG_LEVEL_V
;

349 
g˘l
.
bô
.
c¢_£l
 = 
CS_SOFTWARE
;

350 
g˘l
.
bô
.
dmamode
 = 
NORMAL_ACCESS_MODE
;

351 
g˘l
.
bô
.
duÆ_mod
 = 
DUAL_MODE_DISABLE
;

352 
g˘l
.
bô
.
quad_mod
 = 
QUAD_MODE_DISABLE
;

353 
g˘l
.
bô
.
ti_mod
 = 
TI_MODE_DISABLE
;

354 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

356 
c˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CCTL
);

357 
rs
->
˛ock_pha£_mode
) {

358 
SPI_MODE_0
:

359 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_B
;

360 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_L
;

370 
SPI_MODE_3
:

371 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_A
;

372 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_H
;

375 
	`¥ötf
("unsupported spi mode, setÅo mode3\n");

376 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_A
;

377 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_H
;

381 
c˘l
.
bô
.
lsb„
 = 
MSB_FIRST
;

382 
c˘l
.
bô
.
rxedge
 = 
RX_SAMPLE_MIDDLE
;

383 
c˘l
.
bô
.
txedge
 = 
TX_SLAVE_SPEED_LOW
;

384 
c˘l
.
bô
.
•ûí
 = 
SPI_LENGTH_8
;

385 
	`vsi_•i_wrôñ
(
c˘l
.
Æl
, 
VSI_SPI_CCTL
);

387 
öãn
.
Æl
 = 
INT_DIS_ALL
;

388 
	`vsi_•i_wrôñ
(
öãn
.
Æl
, 
VSI_SPI_INTEN
);

390 
öt˛r
.
Æl
 = 
INT_CLR_ALL
;

391 
	`vsi_•i_wrôñ
(
öt˛r
.
Æl
, 
VSI_SPI_INTCLR
);

393 
rxdƒ
.
Æl
 = 0;

394 
rxdƒ
.
bô
.rxdnr = 1;

395 
	`vsi_•i_wrôñ
(
rxdƒ
.
Æl
, 
VSI_SPI_RXDNR
);

397 
sc§
.
Æl
 = 0xff;

398 
sc§
.
bô
.
c¢
 = 
CSX_RELEASE
;

399 
	`vsi_•i_wrôñ
(
sc§
.
Æl
, 
VSI_SPI_SCSR
);

401 
•brg
.
bô
.spbrg = 30;

402 
	`vsi_•i_wrôñ
(
•brg
.
Æl
, 
VSI_SPI_SPBRG
);

403 
	}
}

408 
	$vsi_•i_c⁄figs
(
vsi_•i
 *
rs
)

410 
vsi_•i_g˘l
 
g˘l
;

411 
vsi_•i_c˘l
 
c˘l
;

412 
vsi_•i_öãn
 
öãn
;

413 
vsi_•i_öt˛r
 
öt˛r
;

414 
vsi_•i_•brg
 
•brg
;

415 
vsi_•i_rxdƒ
 
rxdƒ
;

417 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

418 
g˘l
.
bô
.
•õn
 = 
SPI_ENABLE
;

419 
g˘l
.
bô
.
öt_í
 = 
SPI_INTERRUPT_DISABLE
;

420 
g˘l
.
bô
.
mm
 = 
rs
->
mode
;

423 
g˘l
.
bô
.
rxéf
 = 
RX_TRIG_LEVEL_0
;

424 
g˘l
.
bô
.
txéf0
 = 
TX_TRIG_LEVEL_0
;

425 
g˘l
.
bô
.
dmamode
 = 
NORMAL_ACCESS_MODE
;

427 
g˘l
.
bô
.
c¢_£l
 = 
CS_SOFTWARE
;

430 i‡(
rs
->
n_bôs
 =
SPI_NBITS_SINGLE
) {

431 
g˘l
.
bô
.
duÆ_mod
 = 
DUAL_MODE_DISABLE
;

432 
g˘l
.
bô
.
quad_mod
 = 
QUAD_MODE_DISABLE
;

433 } i‡(
rs
->
n_bôs
 =
SPI_NBITS_DUAL
) {

434 
g˘l
.
bô
.
duÆ_mod
 = 
DUAL_MODE_EABLE
;

435 
g˘l
.
bô
.
quad_mod
 = 
QUAD_MODE_DISABLE
;

436 } i‡(
rs
->
n_bôs
 =
SPI_NBITS_QUAD
) {

437 
g˘l
.
bô
.
duÆ_mod
 = 
DUAL_MODE_DISABLE
;

438 
g˘l
.
bô
.
quad_mod
 = 
QUAD_MODE_EABLE
;

440 
	`¥ötf
("wrong mode, use default single mode.\n");

441 
g˘l
.
bô
.
duÆ_mod
 = 
DUAL_MODE_DISABLE
;

442 
g˘l
.
bô
.
quad_mod
 = 
QUAD_MODE_DISABLE
;

445 
g˘l
.
bô
.
ti_mod
 = 
TI_MODE_DISABLE
;

446 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

448 
c˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CCTL
);

449 
rs
->
˛ock_pha£_mode
) {

450 
SPI_MODE_0
:

451 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_B
;

452 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_L
;

462 
SPI_MODE_3
:

463 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_A
;

464 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_H
;

467 
	`¥ötf
("unsupported spi mode, setÅo mode3\n");

468 
c˘l
.
bô
.
ckph
 = 
CLK_PHASE_A
;

469 
c˘l
.
bô
.
ck∂
 = 
CLK_LEVEL_H
;

472 
c˘l
.
bô
.
lsb„
 = 
MSB_FIRST
;

473 
c˘l
.
bô
.
rxedge
 = 
RX_SAMPLE_MIDDLE
;

474 
c˘l
.
bô
.
txedge
 = 
TX_SLAVE_SPEED_LOW
;

476 i‡(
rs
->
bpw
 == 8)

477 
c˘l
.
bô
.
•ûí
 = 
SPI_LENGTH_8
;

478 i‡(
rs
->
bpw
 == 16)

479 
c˘l
.
bô
.
•ûí
 = 
SPI_LENGTH_16
;

480 if(
rs
->
bpw
 == 32)

481 
c˘l
.
bô
.
•ûí
 = 
SPI_LENGTH_32
;

483 
	`¥ötf
("%d i†®wr⁄g bôÖî w‹d\n", 
rs
->
bpw
);

485 
	`vsi_•i_wrôñ
(
c˘l
.
Æl
, 
VSI_SPI_CCTL
);

487 
öãn
.
Æl
 = 
INT_DIS_ALL
;

488 
	`vsi_•i_wrôñ
(
öãn
.
Æl
, 
VSI_SPI_INTEN
);

490 
öt˛r
.
Æl
 = 
INT_CLR_ALL
;

491 
	`vsi_•i_wrôñ
(
öt˛r
.
Æl
, 
VSI_SPI_INTCLR
);

493 
rxdƒ
.
Æl
 = 0;

494 
rxdƒ
.
bô
.rxdnr = 1;

495 
	`vsi_•i_wrôñ
(
rxdƒ
.
Æl
, 
VSI_SPI_RXDNR
);

497 
•brg
.
bô
.•brg = 
rs
->
˛k_‰eq
 /Ñs->
•ìd
;

498 i‡(
•brg
.
bô
.spbrg < 2) {

499 
•brg
.
bô
.spbrg = 2;

500 
	`¥ötf
("övÆidÅøns„∏•ìd %d!\n", 
rs
->
•ìd
);

502 
	`vsi_•i_wrôñ
(
•brg
.
Æl
, 
VSI_SPI_SPBRG
);

503 
	}
}

505 
ölöe
 
	$vsi_•i_hw_˛r
(
vsi_•i
 *
rs
)

507 
vsi_•i_g˘l
 
g˘l
;

508 
vsi_•i_c°©
 
c°©
;

509 
vsi_•i_rxdƒ
 
rxdƒ
;

511 i‡(
rs
->
rx
) {

512 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

514 
g˘l
.
bô
.
rxí
 = 
RX_DISABLE
;

515 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

517 
rxdƒ
.
Æl
 = 0;

518 
rxdƒ
.
bô
.rxdnr = 1;

519 
	`vsi_•i_wrôñ
(
rxdƒ
.
Æl
, 
VSI_SPI_RXDNR
);

521 if(
rs
->
tx
) {

523 
c°©
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CSTAT
);

524 } 
c°©
.
bô
.
txït
 =
TX_NOT_EMPTY
);

526 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

527 
g˘l
.
bô
.
txí
 = 
TX_DISABLE
;

528 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

530 
	}
}

532 
ölöe
 
	$vsi_•i_hw_í
(
vsi_•i
 *
rs
)

534 
vsi_•i_g˘l
 
g˘l
;

535 
vsi_•i_c°©
 
c°©
;

536 
vsi_•i_rxdƒ
 
rxdƒ
;

537 
vsi_•i_öt˛r
 
öt˛r
;

539 i‡(
rs
->
rx
) {

541 
rxdƒ
.
Æl
 = 0;

542 
rxdƒ
.
bô
.rxdƒ = 
rs
->
rx_Àn
;

543 
	`vsi_•i_wrôñ
(
rxdƒ
.
Æl
, 
VSI_SPI_RXDNR
);

546 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

547 
g˘l
.
bô
.
rxí
 = 
RX_ENABLE
;

548 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

551 i‡(
rs
->
tx
) {

553 
c°©
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CSTAT
);

554 i‡(
c°©
.
bô
.
txït
 =
TX_FIFO_NOT_EMPTY
) {

555 
	`¥ötf
("tx fifo isn'tÉmpty\n");

560 
öt˛r
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_INTCLR
);

561 
öt˛r
.
bô
.
txi˛r
 = 
INT_CLR_TX_EMPTY
;

562 
	`vsi_•i_wrôñ
(
öt˛r
.
Æl
, 
VSI_SPI_INTCLR
);

565 
g˘l
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_GCTL
);

566 
g˘l
.
bô
.
txí
 = 
TX_ENABLE
;

567 
	`vsi_•i_wrôñ
(
g˘l
.
Æl
, 
VSI_SPI_GCTL
);

570 
	}
}

571 
	#mö_t
(
a
, 
b
Ë◊Ë> (bË? (bË: (a)

	)

573 
	$vsi_•i_pio_å™s„r
(
vsi_•i
 *
rs
)

575 
vsi_•i_c°©
 
c°©
;

576 
vsi_•i_txªg
 
txªg
;

577 
vsi_•i_rxdƒ
 
rxdƒ
;

578 
vsi_•i_rxªg
 
rxªg
;

580 i‡(!
rs
->
tx
 &&Ñs->
rx
) {

581 
rs
->
x„r_Àn
 > 0) {

582 i‡(
rs
->
x„r_Àn
 < 
MAX_SPI_RX_LEN
)

583 
rs
->
rx_Àn
 =Ñs->
x„r_Àn
;

585 
rs
->
rx_Àn
 = 0xffff;

587 
rs
->
x„r_Àn
 -rs->
rx_Àn
;

588 
	`vsi_•i_hw_í
(
rs
);

590 
rs
->
rx_Àn
) {

592 
c°©
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CSTAT
);

593 } 
c°©
.
bô
.
rxavl
 =
RX_NOT_AVAILABLE
);

595 
rxªg
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_RXREG
);

597 i‡((
rs
->
bpw
 == 16)) {

598 *(
u16
*)
rs
->
rx
 = (u16)
rxªg
.
bô
.rxreg;

599 
rs
->
rx
 += 2;

600 
rs
->
rx_Àn
 -
	`mö_t
(rs->rx_len, 2);

601 } i‡((
rs
->
bpw
 == 32)) {

602 *(
u32
*)
rs
->
rx
 = 
rxªg
.
bô
.rxreg;

603 
rs
->
rx
 += 4;

604 
rs
->
rx_Àn
 -
	`mö_t
(rs->rx_len, 4);

606 *(
u8
*)
rs
->
rx
 = (u8)
rxªg
.
bô
.rxreg;

607 
rs
->
rx
 += 1;

608 
rs
->
rx_Àn
 -= 1;

611 
	`vsi_•i_hw_˛r
(
rs
);

614 
rxdƒ
.
Æl
 = 0;

615 
rxdƒ
.
bô
.rxdnr = 1;

616 
	`vsi_•i_wrôñ
(
rxdƒ
.
Æl
, 
VSI_SPI_RXDNR
);

620 i‡(
rs
->
tx
 && !rs->
rx
) {

621 if(
	`vsi_•i_hw_í
(
rs
))

626 
rs
->
tx_Àn
 =Ñs->
x„r_Àn
;

627 
rs
->
tx_Àn
) {

629 
c°©
.
Æl
 = 
	`vsi_•i_ªadl
(
VSI_SPI_CSTAT
);

630 } 
c°©
.
bô
.
txfuŒ
 =
TX_FIFO_FULL
);

632 i‡((
rs
->
bpw
 == 16)) {

633 
txªg
.
bô
.txªg = *(
u16
*)(
rs
->
tx
);

634 
rs
->
tx_Àn
 -
	`mö_t
(rs->tx_len, 2);

635 
rs
->
tx
 += 2;

636 } i‡((
rs
->
bpw
 == 32)) {

637 
txªg
.
bô
.txªg = *(
u32
*)(
rs
->
tx
);

638 
rs
->
tx_Àn
 -
	`mö_t
(rs->tx_len, 4);

639 
rs
->
tx
 += 4;

641 
txªg
.
bô
.txªg = *(
u8
*)(
rs
->
tx
);

642 
rs
->
tx_Àn
--;

643 
rs
->
tx
++;

645 
	`vsi_•i_wrôñ
(
txªg
.
bô
.txªg, 
VSI_SPI_TXREG
);

648 
	`vsi_•i_hw_˛r
(
rs
);

652 
	}
}

653 #unde‡
mö_t


657 
	$vsi_•i_å™s„r_⁄e
(
vsi_•i
 *
rs
,

658 
•i_å™s„r
 *
x„r
)

660 
rs
->
•ìd
 = 
x„r
->
•ìd_hz
;

661 
rs
->
bpw
 = 
x„r
->
bôs_≥r_w‹d
;

662 
rs
->
n_byãs
 =Ñs->
bpw
 >> 3;

664 
rs
->
tx
 = 
x„r
->
tx_buf
;

665 
rs
->
rx
 = 
x„r
->
rx_buf
;

666 
rs
->
x„r_Àn
 = 
x„r
->
Àn
;

669 i‡(
rs
->
tx
) {

670 
rs
->
tx_Àn
 =Ñs->
x„r_Àn
;

671 
rs
->
n_bôs
 = 
x„r
->
tx_nbôs
;

674 i‡(
rs
->
rx
) {

675 
rs
->
rx_Àn
 =Ñs->
x„r_Àn
;

676 
rs
->
n_bôs
 = 
x„r
->
rx_nbôs
;

679 i‡((
rs
->
n_bôs
 !
SPI_NBITS_SINGLE
) &&

680 (
rs
->
n_bôs
 !
SPI_NBITS_DUAL
) &&

681 (
rs
->
n_bôs
 !
SPI_NBITS_QUAD
))

682 
rs
->
n_bôs
 = 
SPI_NBITS_SINGLE
;

684 
	`vsi_•i_c⁄figs
(
rs
);

686  
	`vsi_•i_pio_å™s„r
(
rs
);

688 
	}
}

690 
vsi_•i
 
	g•i_devi˚
[
MAX_SPI_NUM_ON_CHIP
];

692 
vsi_•i
 *
	$vsi_•i_¥obe
(
id
)

694 
vsi_•i
 *
rs
;

696 if(
id
 >
	`ARRAY_SIZE
(
•i_ioba£_li°
)) {

697 
	`¥ötf
("InvÆid spòödex - %d\n", 
id
);

698  
NULL
;

701 if(
•i_devi˚
[
id
].
busy
) {

702  &
•i_devi˚
[
id
];

704 
•i_devi˚
[
id
].
busy
 = 1;

705 
rs
 = &
•i_devi˚
[
id
];

707 
rs
->
ªgs
 = 
•i_ioba£_li°
[
id
];

708 
rs
->
˛ock_pha£_mode
 = 
SPI_MODE_3
;

709 
rs
->
fifo_dïth
 = 32;

710 
rs
->
˛k_‰eq
 = 30000000;

711 
rs
->
mode
 = 
MASTER_MODE
;

714 
	`vsi_•i_hwöô
(
rs
);

716 
	`¥ötf
("SPI.0x%x %†drivîÖrobed, vîsi⁄ %s\n", 
rs
->
ªgs
,

717 
rs
->
mode
 =
MASTER_MODE
 ? "ma°î" : "¶ave", 
DRV_VERSION
);

719  
rs
;

720 
	}
}

	@drivers/vs_apb_spi.h

1 #i‚de‡
_VS_APB_SPI_


2 
	#_VS_APB_SPI_


	)

4 
	~"ck810.h
"

5 
	~"d©©y≥.h
"

6 
	~"ötc.h
"

8 
	#MAX_SPI_NUM_ON_CHIP
 2

	)

10 
	#SPI_CPHA
 0x01

	)

11 
	#SPI_CPOL
 0x02

	)

13 
	#SPI_MODE_0
 (0|0)

	)

14 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

15 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

16 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

18 
	s•i_å™s„r
 {

24 c⁄° *
	mtx_buf
;

25 *
	mrx_buf
;

26 
	mÀn
;

28 
	mcs_ch™ge
:1;

29 
	mtx_nbôs
:3;

30 
	mrx_nbôs
:3;

31 
	#SPI_NBITS_SINGLE
 0x01

	)

32 
	#SPI_NBITS_DUAL
 0x02

	)

33 
	#SPI_NBITS_QUAD
 0x04

	)

34 
u8
 
	mbôs_≥r_w‹d
;

35 
u16
 
	mdñay_u£cs
;

36 
u32
 
	m•ìd_hz
;

40 
	svsi_•i
 {

41 *
	mªgs
;

42 
u8
 
	mid
;

43 
u8
 
	mbusy
;

44 
u8
 
	mmode
;

45 
u8
 
	mbpw
;

46 
u32
 
	m•ìd
;

47 c⁄° *
	mtx
;

48 *
	mrx
;

49 
u32
 
	mtx_Àn
;

50 
u32
 
	mrx_Àn
;

51 
u32
 
	mx„r_Àn
;

52 
u32
 
	m°©e
;

53 
u8
 
	mn_byãs
;

54 
u8
 
	mn_bôs
;

55 
u32
 
	mfifo_dïth
;

56 
u32
 
	m˛ock_pha£_mode
;

57 
u32
 
	m˛k_‰eq
;

58 
u32
 
	m•i_num_cs
;

61 
vsi_•i_å™s„r_⁄e
(
vsi_•i
 *
rs
,

62 
•i_å™s„r
 *
x„r
);

64 
vsi_•i_£t_cs
(
vsi_•i
 *
rs
, 
boﬁ
 
íabÀ
);

66 
vsi_•i
 *
vsi_•i_¥obe
(
id
);

	@drivers/w25n01_app.c

6 
	~"misc.h
"

7 
	~<°rög.h
>

8 
	~"•i_«nd.h
"

10 
•i_«nd_öt_mode
;

16 
	#FLASH_TARGET_ADDR
 0x7d00000

	)

21 
CK_UINT8
 
	$FœshID_Te°
()

23 
CK_UINT32
 
Êash_id
 = 0;

26 
	`CMD_RDID
(&
Êash_id
);

29 i‡(
Êash_id
 !
FœshID
) {

30 
	`¥ötf
("\tCheck SPI NAND fœsh ID(0x%x,Éx≥˘ 0x%xË--- FAIL\n", 
Êash_id
, 
FœshID
);

31  
FALSE
;

34 
	`¥ötf
("\tCheck SPI NAND fœsh ID(0x%xË--- PASS\n", 
Êash_id
);

35  
TRUE
;

36 
	}
}

41 
	$FœshRódWrôe_Te°
()

43 
CK_UINT32
 
Êash_addr
;

44 
CK_UINT32
 
å™s_Àn
;

45 
CK_UINT16
 
cﬁ_addªss
 = 0;

46 
CK_UINT8
 
°©us
 = 0;

47 
CK_UINT16
 
i
;

48 
Rëu∫Msg
 
ªsu…
;

49 
CK_UINT8
 
buff_wr
[
SPI_NAND_TEST_LEN
] = {

59 
CK_UINT8
 
buff_rd
[
SPI_NAND_TEST_LEN
] = {0};

62 
Êash_addr
 = 
FLASH_TARGET_ADDR
;

63 
å™s_Àn
 = 
SPI_NAND_TEST_LEN
;

66 
	`CMD_GET_FEATURE
(0xa0, &
°©us
);

67 i‡(
°©us
 & 0x38) {

68 
	`¥ötf
("Clear SPI NAND blockÖrotection bit\n");

69 
	`CMD_SET_FEATURE
(0xa0, (
°©us
 & 0xc7));

73 
	`CMD_PP_LOAD
(
Êash_addr
, 
buff_wr
, 
å™s_Àn
, 0);

74 
	`CMD_PROGRAM_EXEC
(
Êash_addr
);

75 #i‡
CK_SPI_M_NAND_DEBUG


76 
	`CMD_READ
(
Êash_addr
);

77 
cﬁ_addªss
 = 0;

78 
	`CMD_READ_CACHE
(
cﬁ_addªss
, 
buff_rd
, 
å™s_Àn
, 0);

79 
	`¥ötf
("Dump data beforeÉrasing...\n");

80 
i
 = 0; i < (
å™s_Àn
); i++) {

81 i‡(
i
 % 8 == 0)

82 
	`¥ötf
("\n");

83 
	`¥ötf
("%d ", 
buff_rd
[
i
]);

85 
	`¥ötf
("\n");

91 
ªsu…
 = 
	`CMD_BE
(
Êash_addr
);

92 i‡(
ªsu…
 =
Fœsh_Suc˚ss
) {

95 
	`CMD_READ
(
Êash_addr
);

96 
cﬁ_addªss
 = 0;

97 
	`CMD_READ_CACHE
(
cﬁ_addªss
, 
buff_rd
, 
å™s_Àn
, 0);

98 #i‡
CK_SPI_M_NAND_DEBUG


99 
	`¥ötf
("Dump dataáfterÉrasing...");

102 
i
 = 0; i < (
å™s_Àn
); i++) {

103 #i‡
CK_SPI_M_NAND_DEBUG


104 
	`¥ötf
("--0x%x\n", 
buff_rd
[
i
]);

106 i‡(
buff_rd
[
i
] != 0xff) {

107 
ªsu…
 = 
Fœsh_D©aInvÆid
;

108 
	`¥ötf
("BlockÉraseÑesultÉrror: WDATA[%d]=0x%x, RDATA=0x%x\n\r\n",

109 
i
, 0xff, 
buff_rd
[i]);

114 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

115 
	`¥ötf
("\tEø£ SPI NAND fœsh block --- FAIL (0x%x)\n", 
ªsu…
);

117 
	`¥ötf
("\tErase SPI NAND flash block --- PASS\n");

121 
	`CMD_PP_LOAD
(
Êash_addr
, 
buff_wr
, 
å™s_Àn
, 0);

122 
	`CMD_PROGRAM_EXEC
(
Êash_addr
);

125 
	`CMD_READ
(
Êash_addr
);

126 
cﬁ_addªss
 = 0;

127 
	`CMD_READ_CACHE
(
cﬁ_addªss
, 
buff_rd
, 
å™s_Àn
, 0);

128 
ªsu…
 = 
Fœsh_Suc˚ss
;

130 
i
 = 0; i < (
å™s_Àn
); i++) {

131 i‡(
buff_wr
[
i
] !
buff_rd
[i]) {

132 
ªsu…
 = 
Fœsh_D©aInvÆid
;

133 
	`¥ötf
("Single IOÑead dataÉrror: WDATA[%d]=0x%x, RDATA=0x%x\n\r\n",

134 
i
, 
buff_wr
[i], 
buff_rd
[i]);

138 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

139 
	`¥ötf
("\tSPI NAND fœsh sögÀ IOÑ/w --- FAIL (0x%x)\n", 
ªsu…
);

141 
	`¥ötf
("\tSPI NAND flash single IOÑ/w --- PASS\n");

145 
	`mem£t
(&
buff_rd
[0], 0x00, (buff_rd));

146 
	`CMD_READ_CACHE2
(
cﬁ_addªss
, 
buff_rd
, 
å™s_Àn
, 0);

148 
ªsu…
 = 
Fœsh_Suc˚ss
;

149 
i
 = 0; i < (
å™s_Àn
); i++) {

150 i‡(
buff_wr
[
i
] !
buff_rd
[i]) {

151 
ªsu…
 = 
Fœsh_D©aInvÆid
;

152 
	`¥ötf
("Dual IOÑead dataÉrror: WDATA[%d]=0x%x, RDATA=0x%x\n\r\n",

153 
i
, 
buff_wr
[i], 
buff_rd
[i]);

157 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

158 
	`¥ötf
("\tSPI NAND fœsh duÆ IOÑ/w --- FAIL (0x%x)\n", 
ªsu…
);

160 
	`¥ötf
("\tSPI NAND flash dual IOÑ/w --- PASS\n");

164 i‡(
	`IsFœshQIO
(Ë!
TRUE
) {

165 
	`CMD_GET_FEATURE
(0xb0, &
°©us
);

166 
	`CMD_SET_FEATURE
(0xb0, 
°©us
 | 
FLASH_QE_MASK
);

169 
	`mem£t
(&
buff_rd
[0], 0x00, (buff_rd));

170 
	`CMD_READ_CACHE4
(
cﬁ_addªss
, 
buff_rd
, 
å™s_Àn
, 0);

172 
ªsu…
 = 
Fœsh_Suc˚ss
;

173 
i
 = 0; i < (
å™s_Àn
); i++) {

174 i‡(
buff_wr
[
i
] !
buff_rd
[i]) {

175 
ªsu…
 = 
Fœsh_D©aInvÆid
;

176 
	`¥ötf
("Quad IOÑead dataÉrror: WDATA[%d]=0x%x, RDATA=0x%x\n\r\n",

177 
i
, 
buff_wr
[i], 
buff_rd
[i]);

181 i‡(
ªsu…
 !
Fœsh_Suc˚ss
) {

182 
	`¥ötf
("\tSPI NAND fœsh quad IOÑ/w --- FAIL (0x%x)\n", 
ªsu…
);

184 
	`¥ötf
("\tSPI NAND flash quad IOÑ/w --- PASS\n");

188 i‡(
	`IsFœshQIO
(Ë=
TRUE
) {

189 
	`CMD_SET_FEATURE
(0xb0, 
°©us
 & (~
FLASH_QE_MASK
));

193 
	`CMD_BE
(
Êash_addr
);

194 
	}
}

196 
	$Run_w25n01
() {

198 #i‡
CONFIG_IS_ASIC


199 
	`¥ötf
("\nSet SPI controllerÅo work in mode 3ánd 25MHz\n");

201 
	`¥ötf
("\nSet SPI controllerÅo work in mode 3ánd 500KHz\n");

203 
	`Inôül_Spi
();

204 
	`SídByã
(
FLASH_CMD_RESET
, 
SIO
);

206 
	`FœshID_Te°
();

208 
	`FœshRódWrôe_Te°
();

211 
	`¥ötf
("\nSet SPI controllerÅo work in mode 0ánd 2.5MHz\n");

212 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_SPIEn
));

214 
	`wrôe_mªg32
(
SPI_CCTL
, (
SPI_Lígth8
 | 
SPI_MSBFú°
 | 
SPI_CKPLL
 | 
SPI_CKPHH
));

215 
	`wrôe_mªg32
(
SPI_SCSR
, 0xff);

216 
	`wrôe_mªg32
(
SPI_SPBRG
, 
SPI_DEFAULT_FREQ
 / 2500000);

217 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_SPIEn
);

218 
	`FœshRódWrôe_Te°
();

221 
	`¥ötf
("\nSet SPI controllerÅo work in mode 0ánd 8KHz\n");

222 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË& (~
SPI_SPIEn
));

224 
	`wrôe_mªg32
(
SPI_CCTL
, (
SPI_Lígth8
 | 
SPI_MSBFú°
 | 
SPI_CKPLL
 | 
SPI_CKPHH
));

225 
	`wrôe_mªg32
(
SPI_SCSR
, 0xff);

226 
	`wrôe_mªg32
(
SPI_SPBRG
, 
SPI_DEFAULT_FREQ
 / 8000);

227 
	`wrôe_mªg32
(
SPI_GCTL
, 
	`ªad_mªg32
(SPI_GCTLË| 
SPI_SPIEn
);

228 
	`FœshRódWrôe_Te°
();

230 
	`SPINAND_uƒegi°î_i§
();

231 
	}
}

236 
	$SPI_Ma°î_w25n01_Aµ
()

238 
	`¥ötf
("\tStart SPI NAND flashÅest . . .\n");

239 
	`¥ötf
("\nRunÅest with interrupt disabled:\n");

240 
•i_«nd_öt_mode
 = 0;

241 
	`Run_w25n01
();

243 
	`¥ötf
("\nRunÅest with interruptÉnabled:\n");

244 
•i_«nd_öt_mode
 = 1;

245 
	`Run_w25n01
();

247 
	`¥ötf
("\n\tSPI NAND flashÅest finish . . .\n");

248 
	}
}

	@drivers/wdt.c

14 
	~"ck810.h
"

15 
	~"d©©y≥.h
"

16 
	~"ckwdt.h
"

17 
	~"wdt.h
"

18 
	~"ötc.h
"

19 
	~"misc.h
"

27 
	$CK_Dó˘ive_WDTModuÀ
()

29 
i
;

30 
PCKPSåu˘_WDT
 
pwdt
;

31  
i
 = 0; i < 
WDTRID_MAX
; i++ )

33 
pwdt
 = 
CK_WDT_TabÀ
[
i
].
addr
;

36 
pwdt
->
WDT_CR
 &~(
CK_WDT_CR_ENABLE
 | 
CK_WDT_CR_RMOD
);

38 #i‡
CK_WDT_DEBUG


39 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_PARAMS_5=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_PARAMS_5
);

40 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_PARAMS_4=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_PARAMS_4
);

41 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_PARAMS_3=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_PARAMS_3
);

42 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_PARAMS_2=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_PARAMS_2
);

43 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_PARAMS_1=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_PARAMS_1
);

44 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_VERSION=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_VERSION
);

45 
	`¥ötf
("JJJ_DEBUG WDT%d WDT_COMP_TYPE=0x%x\n", 
i
, 
pwdt
->
WDT_COMP_TYPE
);

48 
	}
}

53 
	$CK_WDT_Inô
()

55 
	`CK_Dó˘ive_WDTModuÀ
();

56 
	}
}

66 
CK_INT32
 
	$CK_WDT_O≥n
 ( 
CKEnum_WDT_Devi˚
 
wdtid
,

67 (*
h™dÀr
)(
CK_UINT32
),

68 
IN
 
CK_UINT16
 
¥i‹ôy
,

69 
IN
 
BOOL
 
bÁ°


72 
PCKSåu˘_WDTInfo
 
öfo
;

75 i‡((
wdtid
 < 0Ë|| (wdtid > 
WDTRID_MAX
))

77 #i‡
CK_WDT_DEBUG


78 
	`¥ötf
("JJJ_DEBUG WDT%d O≥¿Áûuª 1\n", 
wdtid
);

80  
FAILURE
;

83 #i‡
CK_WDT_DEBUG


84 
	`¥ötf
("JJJ_DEBUG WDT%d O≥n\n", 
wdtid
);

87 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

89 if(
öfo
->
b›íed
)

91 #i‡
CK_WDT_DEBUG


92 
	`¥ötf
("JJJ_DEBUG WDT%d O≥¿Áûuª 2\n", 
wdtid
);

94  
FAILURE
;

97 i‡(
NULL
 !
h™dÀr
)

99 
öfo
->
úqh™dÀr
.
dev«me
 = "WDT";

100 
öfo
->
úqh™dÀr
.
úqid
 = info->
úq
;

101 
öfo
->
úqh™dÀr
.
¥i‹ôy
 =Öriority;

102 
öfo
->
úqh™dÀr
.
h™dÀr
 = handler;

103 
öfo
->
úqh™dÀr
.
bÁ°
 = bfast;

104 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

106 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

108 
öfo
->
b›íed
 = 
TRUE
;

109  
SUCCESS
;

110 
	}
}

118 
CK_INT32
 
	$CK_WDT_Clo£
(
CKEnum_WDT_Devi˚
 
wdtid
)

120 
PCKSåu˘_WDTInfo
 
öfo
;

121 
PCKPSåu˘_WDT
 
pwdt
;

123 i‡((
wdtid
 < 0Ë|| (wdtid > 
WDTRID_MAX
))

124  
FAILURE
;

126 #i‡
CK_WDT_DEBUG


127 
	`¥ötf
("JJJ_DEBUG WDT%d Clo£\n", 
wdtid
);

129 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

130 
pwdt
 = 
öfo
->
addr
;

131 if(!(
öfo
->
b›íed
))

133  
FAILURE
;

136 
pwdt
->
WDT_CR
 = 0;

137 #i‡
CK_WDT_DEBUG


138 
	`¥ötf
("\nJJJ_DEBUG CK_WDT_Clo£ WDT_CR=0x%x\n", 
pwdt
->
WDT_CR
);

142 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
AUTO_MODE
);

143 
öfo
->
b›íed
 = 
FALSE
;

144  
SUCCESS
;

145 
	}
}

157 
CK_INT32
 
	$CK_WDT_Sèπ
(
CKEnum_WDT_Devi˚
 
wdtid
, 
IN
 
CK_UINT32
 
mode
, IN CK_UINT32 
timeout
)

159 
PCKSåu˘_WDTInfo
 
öfo
;

160 
PCKPSåu˘_WDT
 
pwdt
;

162 i‡((
wdtid
 < 0Ë|| (wdtid > 
WDTRID_MAX
))

163  
FAILURE
;

165 #i‡
CK_WDT_DEBUG


166 
	`¥ötf
("JJJ_DEBUG WDT%d Sèπ modñ=0x%x,Åimeout=0x%x\n", 
wdtid
, 
mode
, 
timeout
);

169 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

170 
pwdt
 = 
öfo
->
addr
;

171 if(!(
öfo
->
b›íed
))

172  
FAILURE
;

174 #i‡
CK_WDT_DEBUG


175 
	`¥ötf
("\nJJJ_DEBUG CK_WDT_Sèπ 0x00 WDT_CR=0x%x\n", 
pwdt
->
WDT_CR
);

176 
	`¥ötf
("\nJJJ_DEBUG CK_WDT_Sèπ 0x00 WDT_CCVR=0x%x\n", 
pwdt
->
WDT_CCVR
);

180 
pwdt
->
WDT_TORR
 = 
timeout
;

182 
pwdt
->
WDT_CR
 &~(
CK_WDT_CR_ENABLE
 | 
CK_WDT_CR_RMOD
);

183 
pwdt
->
WDT_CR
 |
CK_WDT_CR_ENABLE
 | (
mode
 << 1);

185 #i‡
CK_WDT_DEBUG


186 
	`¥ötf
("\nJJJ_DEBUG CK_WDT_Sèπ 0x01 WDT_CR=0x%x\n", 
pwdt
->
WDT_CR
);

187 
	`¥ötf
("\nJJJ_DEBUG CK_WDT_Sèπ 0x01 WDT_CCVR=0x%x\n", 
pwdt
->
WDT_CCVR
);

190  
SUCCESS
;

191 
	}
}

197 
	$CK_WDT_CÀ¨IrqFœg
(
CKEnum_WDT_Devi˚
 
wdtid
)

199 
PCKSåu˘_WDTInfo
 
öfo
;

200 
PCKPSåu˘_WDT
 
pwdt
;

202 #i‡
CK_WDT_DEBUG


203 
	`¥ötf
("JJJ_DEBUG WDT%d CÀ¨IrqFœg\n", 
wdtid
);

206 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

207 
pwdt
 = 
öfo
->
addr
 ;

208 *((vﬁ©ûê
CK_UINT32
 *)(&(
pwdt
->
WDT_EOI
)));

209 
	}
}

217 
CK_UINT32
 
	$CK_WDT_CuºítVÆue
(
CKEnum_WDT_Devi˚
 
wdtid
)

219 
CK_UINT32
 
cuºít_vÆ
;

220 
PCKSåu˘_WDTInfo
 
öfo
;

221 
PCKPSåu˘_WDT
 
pwdt
;

223 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

224 
pwdt
 = 
öfo
->
addr
;

225 
cuºít_vÆ
 = 
pwdt
->
WDT_CCVR
;

226 #i‡
CK_WDT_DEBUG


227 
	`¥ötf
("JJJ_DEBUG WDT%d CuºítVÆuê0x%x\n", 
wdtid
, 
cuºít_vÆ
);

229  
cuºít_vÆ
 ;

230 
	}
}

238 
	$CK_WDT_Cou¡î_RST
(
CKEnum_WDT_Devi˚
 
wdtid
) {

239 
PCKSåu˘_WDTInfo
 
öfo
;

240 
PCKPSåu˘_WDT
 
pwdt
;

242 #i‡
CK_WDT_DEBUG


243 
	`¥ötf
("JJJ_DEBUG CK_WDT_Counter_RST\n");

246 
öfo
 = &(
CK_WDT_TabÀ
[
wdtid
]);

247 
pwdt
 = 
öfo
->
addr
;

248 
pwdt
->
WDT_CRR
 = 
COUNTER_RST_CMD
;

249 
	}
}

	@include/ahbdma.h

14 #i‚de‡
_DMAC_H


15 
	#_DMAC_H


	)

17 
	~"ck810.h
"

18 
	~"d©©y≥.h
"

20 
	#AHB_DMAC_MAX_CHANNELS
 8

	)

25 
	#DMA0_VERBOSE
 0

	)

27 
	#DMAC_CHANEL
(
n
Ë
	)
n

32 
	#CC_DMAC_VERSION_ID
 0x3231302a

	)

33 
	#CC_DMAC_NUM_MASTER_INT
 4

	)

34 
	#CC_DMAC_NUM_CHANNELS
 8

	)

35 
	#CC_DMAC_NUM_HS_INT
 2

	)

36 
	#CC_DMAC_ID_NUM
 0x0

	)

37 
	#CC_DMAC_INTR_POL
 0

	)

38 
	#CC_DMAC_INTR_IO
 2

	)

39 
	#CC_DMAC_BIG_ENDIAN
 0

	)

40 
	#CC_DMAC_M1_AHB_LITE
 0

	)

41 
	#CC_DMAC_M2_AHB_LITE
 0

	)

42 
	#CC_DMAC_M3_AHB_LITE
 0

	)

43 
	#CC_DMAC_M4_AHB_LITE
 0

	)

44 
	#CC_DMAC_M1_HDATA_WIDTH
 32

	)

45 
	#CC_DMAC_M2_HDATA_WIDTH
 32

	)

46 
	#CC_DMAC_M3_HDATA_WIDTH
 32

	)

47 
	#CC_DMAC_M4_HDATA_WIDTH
 32

	)

48 
	#CC_DMAC_S_HDATA_WIDTH
 32

	)

49 
	#CC_DMAC_MABRST
 0

	)

50 
	#CC_DMAC_RETURN_ERR_RESP
 1

	)

51 
	#CC_DMAC_ADD_ENCODED_PARAMS
 0x1

	)

52 
	#CC_DMAC_CH0_FIFO_DEPTH
 16

	)

53 
	#CC_DMAC_CH1_FIFO_DEPTH
 16

	)

54 
	#CC_DMAC_CH2_FIFO_DEPTH
 16

	)

55 
	#CC_DMAC_CH3_FIFO_DEPTH
 16

	)

56 
	#CC_DMAC_CH4_FIFO_DEPTH
 16

	)

57 
	#CC_DMAC_CH5_FIFO_DEPTH
 16

	)

58 
	#CC_DMAC_CH6_FIFO_DEPTH
 16

	)

59 
	#CC_DMAC_CH7_FIFO_DEPTH
 16

	)

60 
	#CC_DMAC_CH0_STAT_SRC
 0

	)

61 
	#CC_DMAC_CH1_STAT_SRC
 0

	)

62 
	#CC_DMAC_CH2_STAT_SRC
 0

	)

63 
	#CC_DMAC_CH3_STAT_SRC
 0

	)

64 
	#CC_DMAC_CH4_STAT_SRC
 0

	)

65 
	#CC_DMAC_CH5_STAT_SRC
 0

	)

66 
	#CC_DMAC_CH6_STAT_SRC
 0

	)

67 
	#CC_DMAC_CH7_STAT_SRC
 0

	)

68 
	#CC_DMAC_CH0_STAT_DST
 0

	)

69 
	#CC_DMAC_CH1_STAT_DST
 0

	)

70 
	#CC_DMAC_CH2_STAT_DST
 0

	)

71 
	#CC_DMAC_CH3_STAT_DST
 0

	)

72 
	#CC_DMAC_CH4_STAT_DST
 0

	)

73 
	#CC_DMAC_CH5_STAT_DST
 0

	)

74 
	#CC_DMAC_CH6_STAT_DST
 0

	)

75 
	#CC_DMAC_CH7_STAT_DST
 0

	)

76 
	#CC_DMAC_CH0_MAX_MULT_SIZE
 8

	)

77 
	#CC_DMAC_CH1_MAX_MULT_SIZE
 8

	)

78 
	#CC_DMAC_CH2_MAX_MULT_SIZE
 8

	)

79 
	#CC_DMAC_CH3_MAX_MULT_SIZE
 8

	)

80 
	#CC_DMAC_CH4_MAX_MULT_SIZE
 8

	)

81 
	#CC_DMAC_CH5_MAX_MULT_SIZE
 8

	)

82 
	#CC_DMAC_CH6_MAX_MULT_SIZE
 8

	)

83 
	#CC_DMAC_CH7_MAX_MULT_SIZE
 8

	)

84 
	#CC_DMAC_CH0_MAX_BLK_SIZE
 31

	)

85 
	#CC_DMAC_CH1_MAX_BLK_SIZE
 31

	)

86 
	#CC_DMAC_CH2_MAX_BLK_SIZE
 31

	)

87 
	#CC_DMAC_CH3_MAX_BLK_SIZE
 31

	)

88 
	#CC_DMAC_CH4_MAX_BLK_SIZE
 31

	)

89 
	#CC_DMAC_CH5_MAX_BLK_SIZE
 31

	)

90 
	#CC_DMAC_CH6_MAX_BLK_SIZE
 31

	)

91 
	#CC_DMAC_CH7_MAX_BLK_SIZE
 31

	)

92 
	#CC_DMAC_CH0_FC
 0

	)

93 
	#CC_DMAC_CH1_FC
 0

	)

94 
	#CC_DMAC_CH2_FC
 0

	)

95 
	#CC_DMAC_CH3_FC
 0

	)

96 
	#CC_DMAC_CH4_FC
 0

	)

97 
	#CC_DMAC_CH5_FC
 0

	)

98 
	#CC_DMAC_CH6_FC
 0

	)

99 
	#CC_DMAC_CH7_FC
 0

	)

100 
	#CC_DMAC_CH0_LMS
 4

	)

101 
	#CC_DMAC_CH1_LMS
 4

	)

102 
	#CC_DMAC_CH2_LMS
 4

	)

103 
	#CC_DMAC_CH3_LMS
 4

	)

104 
	#CC_DMAC_CH4_LMS
 4

	)

105 
	#CC_DMAC_CH5_LMS
 4

	)

106 
	#CC_DMAC_CH6_LMS
 4

	)

107 
	#CC_DMAC_CH7_LMS
 4

	)

108 
	#CC_DMAC_CH0_SMS
 4

	)

109 
	#CC_DMAC_CH1_SMS
 4

	)

110 
	#CC_DMAC_CH2_SMS
 4

	)

111 
	#CC_DMAC_CH3_SMS
 4

	)

112 
	#CC_DMAC_CH4_SMS
 4

	)

113 
	#CC_DMAC_CH5_SMS
 4

	)

114 
	#CC_DMAC_CH6_SMS
 4

	)

115 
	#CC_DMAC_CH7_SMS
 4

	)

116 
	#CC_DMAC_CH0_DMS
 4

	)

117 
	#CC_DMAC_CH1_DMS
 4

	)

118 
	#CC_DMAC_CH2_DMS
 4

	)

119 
	#CC_DMAC_CH3_DMS
 4

	)

120 
	#CC_DMAC_CH4_DMS
 4

	)

121 
	#CC_DMAC_CH5_DMS
 4

	)

122 
	#CC_DMAC_CH6_DMS
 4

	)

123 
	#CC_DMAC_CH7_DMS
 4

	)

124 
	#CC_DMAC_CH0_LOCK_EN
 0

	)

125 
	#CC_DMAC_CH1_LOCK_EN
 0

	)

126 
	#CC_DMAC_CH2_LOCK_EN
 0

	)

127 
	#CC_DMAC_CH3_LOCK_EN
 0

	)

128 
	#CC_DMAC_CH4_LOCK_EN
 0

	)

129 
	#CC_DMAC_CH5_LOCK_EN
 0

	)

130 
	#CC_DMAC_CH6_LOCK_EN
 0

	)

131 
	#CC_DMAC_CH7_LOCK_EN
 0

	)

132 
	#CC_DMAC_CH0_STW
 32

	)

133 
	#CC_DMAC_CH1_STW
 32

	)

134 
	#CC_DMAC_CH2_STW
 32

	)

135 
	#CC_DMAC_CH3_STW
 32

	)

136 
	#CC_DMAC_CH4_STW
 32

	)

137 
	#CC_DMAC_CH5_STW
 32

	)

138 
	#CC_DMAC_CH6_STW
 32

	)

139 
	#CC_DMAC_CH7_STW
 32

	)

140 
	#CC_DMAC_CH0_DTW
 32

	)

141 
	#CC_DMAC_CH1_DTW
 32

	)

142 
	#CC_DMAC_CH2_DTW
 32

	)

143 
	#CC_DMAC_CH3_DTW
 32

	)

144 
	#CC_DMAC_CH4_DTW
 32

	)

145 
	#CC_DMAC_CH5_DTW
 32

	)

146 
	#CC_DMAC_CH6_DTW
 32

	)

147 
	#CC_DMAC_CH7_DTW
 32

	)

148 
	#CC_DMAC_CH0_SRC_NON_OK
 1

	)

149 
	#CC_DMAC_CH1_SRC_NON_OK
 1

	)

150 
	#CC_DMAC_CH2_SRC_NON_OK
 1

	)

151 
	#CC_DMAC_CH3_SRC_NON_OK
 1

	)

152 
	#CC_DMAC_CH4_SRC_NON_OK
 1

	)

153 
	#CC_DMAC_CH5_SRC_NON_OK
 1

	)

154 
	#CC_DMAC_CH6_SRC_NON_OK
 1

	)

155 
	#CC_DMAC_CH7_SRC_NON_OK
 1

	)

156 
	#CC_DMAC_CH0_DST_NON_OK
 1

	)

157 
	#CC_DMAC_CH1_DST_NON_OK
 1

	)

158 
	#CC_DMAC_CH2_DST_NON_OK
 1

	)

159 
	#CC_DMAC_CH3_DST_NON_OK
 1

	)

160 
	#CC_DMAC_CH4_DST_NON_OK
 1

	)

161 
	#CC_DMAC_CH5_DST_NON_OK
 1

	)

162 
	#CC_DMAC_CH6_DST_NON_OK
 1

	)

163 
	#CC_DMAC_CH7_DST_NON_OK
 1

	)

164 
	#CC_DMAC_CH0_LLP_NON_OK
 0

	)

165 
	#CC_DMAC_CH1_LLP_NON_OK
 0

	)

166 
	#CC_DMAC_CH2_LLP_NON_OK
 0

	)

167 
	#CC_DMAC_CH3_LLP_NON_OK
 0

	)

168 
	#CC_DMAC_CH4_LLP_NON_OK
 0

	)

169 
	#CC_DMAC_CH5_LLP_NON_OK
 0

	)

170 
	#CC_DMAC_CH6_LLP_NON_OK
 0

	)

171 
	#CC_DMAC_CH7_LLP_NON_OK
 0

	)

172 
	#CC_DMAC_CH0_SRC_GAT_EN
 0

	)

173 
	#CC_DMAC_CH1_SRC_GAT_EN
 0

	)

174 
	#CC_DMAC_CH2_SRC_GAT_EN
 0

	)

175 
	#CC_DMAC_CH3_SRC_GAT_EN
 0

	)

176 
	#CC_DMAC_CH4_SRC_GAT_EN
 0

	)

177 
	#CC_DMAC_CH5_SRC_GAT_EN
 0

	)

178 
	#CC_DMAC_CH6_SRC_GAT_EN
 0

	)

179 
	#CC_DMAC_CH7_SRC_GAT_EN
 0

	)

180 
	#CC_DMAC_CH0_DST_SCA_EN
 0

	)

181 
	#CC_DMAC_CH1_DST_SCA_EN
 0

	)

182 
	#CC_DMAC_CH2_DST_SCA_EN
 0

	)

183 
	#CC_DMAC_CH3_DST_SCA_EN
 0

	)

184 
	#CC_DMAC_CH4_DST_SCA_EN
 0

	)

185 
	#CC_DMAC_CH5_DST_SCA_EN
 0

	)

186 
	#CC_DMAC_CH6_DST_SCA_EN
 0

	)

187 
	#CC_DMAC_CH7_DST_SCA_EN
 0

	)

188 
	#CC_DMAC_CH0_HC_LLP
 1

	)

189 
	#CC_DMAC_CH1_HC_LLP
 1

	)

190 
	#CC_DMAC_CH2_HC_LLP
 1

	)

191 
	#CC_DMAC_CH3_HC_LLP
 1

	)

192 
	#CC_DMAC_CH4_HC_LLP
 1

	)

193 
	#CC_DMAC_CH5_HC_LLP
 1

	)

194 
	#CC_DMAC_CH6_HC_LLP
 1

	)

195 
	#CC_DMAC_CH7_HC_LLP
 1

	)

196 
	#CC_DMAC_CH0_MULTI_BLK_EN
 1

	)

197 
	#CC_DMAC_CH1_MULTI_BLK_EN
 0

	)

198 
	#CC_DMAC_CH2_MULTI_BLK_EN
 0

	)

199 
	#CC_DMAC_CH3_MULTI_BLK_EN
 0

	)

200 
	#CC_DMAC_CH4_MULTI_BLK_EN
 0

	)

201 
	#CC_DMAC_CH5_MULTI_BLK_EN
 0

	)

202 
	#CC_DMAC_CH6_MULTI_BLK_EN
 0

	)

203 
	#CC_DMAC_CH7_MULTI_BLK_EN
 0

	)

204 
	#CC_DMAC_CH0_MULTI_BLK_TYPE
 0

	)

205 
	#CC_DMAC_CH1_MULTI_BLK_TYPE
 0

	)

206 
	#CC_DMAC_CH2_MULTI_BLK_TYPE
 0

	)

207 
	#CC_DMAC_CH3_MULTI_BLK_TYPE
 0

	)

208 
	#CC_DMAC_CH4_MULTI_BLK_TYPE
 0

	)

209 
	#CC_DMAC_CH5_MULTI_BLK_TYPE
 0

	)

210 
	#CC_DMAC_CH6_MULTI_BLK_TYPE
 0

	)

211 
	#CC_DMAC_CH7_MULTI_BLK_TYPE
 0

	)

212 
	#CC_DMAC_CH0_CTL_WB_EN
 0

	)

213 
	#CC_DMAC_CH1_CTL_WB_EN
 0

	)

214 
	#CC_DMAC_CH2_CTL_WB_EN
 0

	)

215 
	#CC_DMAC_CH3_CTL_WB_EN
 0

	)

216 
	#CC_DMAC_CH4_CTL_WB_EN
 0

	)

217 
	#CC_DMAC_CH5_CTL_WB_EN
 0

	)

218 
	#CC_DMAC_CH6_CTL_WB_EN
 0

	)

219 
	#CC_DMAC_CH7_CTL_WB_EN
 0

	)

224 
	#DMAC_CH_START_ADDR
(
x
, 
n
Ë(
	`CK_AHB_DMA_CONTROL
(xË+Ç*0x58)

	)

225 
	#DMAC_COMMON_START_ADDR
(
x
Ë(
	`CK_AHB_DMA_CONTROL
(xË+ 0x2c0)

	)

227 
	#DMAC_SAR_ADDRESS_OFFSET
 0x000

	)

228 
	#DMAC_DAR_ADDRESS_OFFSET
 0x008

	)

229 
	#DMAC_LLP_ADDRESS_OFFSET
 0x010

	)

230 
	#DMAC_CTL_ADDRESS_OFFSET
 0x018

	)

231 
	#DMAC_SSTAT_ADDRESS_OFFSET
 0x020

	)

232 
	#DMAC_DSTAT_ADDRESS_OFFSET
 0x028

	)

233 
	#DMAC_SSTATAR_ADDRESS_OFFSET
 0x030

	)

234 
	#DMAC_DSTATAR_ADDRESS_OFFSET
 0x038

	)

235 
	#DMAC_CFG_ADDRESS_OFFSET
 0x040

	)

236 
	#DMAC_SGR_ADDRESS_OFFSET
 0x048

	)

237 
	#DMAC_DSR_ADDRESS_OFFSET
 0x050

	)

239 
	#DMAC_SAR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_SAR_ADDRESS_OFFSET
)

	)

240 
	#DMAC_DAR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_DAR_ADDRESS_OFFSET
)

	)

241 
	#DMAC_LLP
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_LLP_ADDRESS_OFFSET
)

	)

242 
	#DMAC_CTL
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_CTL_ADDRESS_OFFSET
)

	)

243 
	#DMAC_CTLH
(
x
, 
n
Ë(
	`DMAC_CTL
(x,ÇË+ 4)

	)

244 
	#DMAC_SSTAT
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_SSTAT_ADDRESS_OFFSET
)

	)

245 
	#DMAC_DSTAT
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_DSTAT_ADDRESS_OFFSET
)

	)

246 
	#DMAC_SSTATAR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_SSTATAR_ADDRESS_OFFSET
)

	)

247 
	#DMAC_DSTATAR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_DSTATAR_ADDRESS_OFFSET
)

	)

248 
	#DMAC_CFG
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_CFG_ADDRESS_OFFSET
)

	)

249 
	#DMAC_CFGH
(
x
, 
n
Ë(
	`DMAC_CFG
(x,ÇË+ 4)

	)

250 
	#DMAC_SGR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_SGR_ADDRESS_OFFSET
)

	)

251 
	#DMAC_DSR
(
x
, 
n
Ë(
	`DMAC_CH_START_ADDR
(x,ÇË+ 
DMAC_DSR_ADDRESS_OFFSET
)

	)

253 
	#DMAC_RAWTFR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x000)

	)

254 
	#DMAC_RAWBLOCK
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x008)

	)

255 
	#DMAC_RAWSRCTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x010)

	)

256 
	#DMAC_RAWDSTTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x018)

	)

257 
	#DMAC_RAWERR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x020)

	)

258 
	#DMAC_STATUSTFR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x028)

	)

259 
	#DMAC_STATUSBLOCK
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x030)

	)

260 
	#DMAC_STATUSSRCTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x038)

	)

261 
	#DMAC_STATUSDSTTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x040)

	)

262 
	#DMAC_STATUSERR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x048)

	)

263 
	#DMAC_MASKTFR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x050)

	)

264 
	#DMAC_MASKBLOCK
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x058)

	)

265 
	#DMAC_MASKSRCTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x060)

	)

266 
	#DMAC_MASKDSTTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x068)

	)

267 
	#DMAC_MASKERR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x070)

	)

268 
	#DMAC_CLEARTFR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x078)

	)

269 
	#DMAC_CLEARBLOCK
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x080)

	)

270 
	#DMAC_CLEARSRCTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x088)

	)

271 
	#DMAC_CLEARDSTTRAN
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x090)

	)

272 
	#DMAC_CLEARERR
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x098)

	)

273 
	#DMAC_STATUSINT
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0a0)

	)

274 
	#DMAC_REQSRCREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0a8)

	)

275 
	#DMAC_REQDSTREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0b0)

	)

276 
	#DMAC_SGLRQSRCREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0b8)

	)

277 
	#DMAC_SGLRQDSTREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0c0)

	)

278 
	#DMAC_LSTSRCREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0c8)

	)

279 
	#DMAC_LSTDSTREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0d0)

	)

280 
	#DMAC_DMACFGREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0d8)

	)

281 
	#DMAC_CHENREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0e0)

	)

282 
	#DMAC_DMAIDREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0e8)

	)

283 
	#DMAC_DMATESTREG
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x0f0)

	)

284 
	#DMAC_DMA_COMP_PARAM_6
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x108)

	)

285 
	#DMAC_DMA_COMP_PARAM_5
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x110)

	)

286 
	#DMAC_DMA_COMP_PARAM_4
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x118)

	)

287 
	#DMAC_DMA_COMP_PARAM_3
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x120)

	)

288 
	#DMAC_DMA_COMP_PARAM_2
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x128)

	)

289 
	#DMAC_DMA_COMP_PARAM_1
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x130)

	)

290 
	#DMAC_DMA_COMP_ID
(
x
Ë(
	`DMAC_COMMON_START_ADDR
(xË+ 0x138)

	)

292 
	#DMAC_INTERRUPT_BLOCK
 0x01

	)

293 
	#DMAC_INTERRUPT_TFR
 0x02

	)

294 
	#DMAC_INTERRUPT_ERROR
 0x04

	)

295 
	#DMAC_INTERRUPT_NO
 0x00

	)

299 
	sdmac_ch_öfo


301 
CK_UINT32
 
	mßrx
;

302 
CK_UINT32
 
	md¨x
;

303 
CK_UINT32
 
	m˘lHx
;

304 
CK_UINT32
 
	m˘lLx
;

305 
CK_UINT32
 
	mcfgHx
;

306 
CK_UINT32
 
	mcfgLx
;

307 
CK_UINT32
 
	msgrx
;

308 
CK_UINT32
 
	md§x
;

309 
CK_UINT32
 
	mŒpx
;

310 } 
	tDMAC_CH_INFO
;

313 #i‡
CC_DMAC_CH0_MULTI_BLK_EN


314 
	sdma_li°_ôem


316 
CK_UINT32
 
	mßrx
;

317 
CK_UINT32
 
	md¨x
;

318 
CK_UINT32
 
	mŒpx
;

319 
CK_UINT32
 
	m˘lLx
;

320 
CK_UINT32
 
	m˘lHx
;

321 #i‡
CC_DMAC_CH0_STAT_DST


322 
CK_UINT32
 
	ms°©x
;

325 
CK_UINT32
 
	md°©x
;

326 } 
	tDMA_LIST_ITEM
;

337 
	#DMAC_LLP_MASTER
(
n
Ë“)

	)

341 
	#DMAC_SG_SET
(
˙t
,
öc
Ë((˙à<< 20Ë| (ö¯& 0xFFFFF))

	)

346 
	#DMAC_CTL_DONE
 (1<<12)

	)

347 
	#DMAC_CTL_BLOCK_TS
(
n
Ë“<<0)

	)

349 
	#DMAC_CTL_LLP_SRC_EN
 (1L<<28)

	)

350 
	#DMAC_CTL_LLP_DST_EN
 (1L<<27)

	)

351 
	#DMAC_CTL_SMS_M1
 (0L<<25)

	)

352 
	#DMAC_CTL_SMS_M2
 (1L<<25)

	)

353 
	#DMAC_CTL_SMS_M3
 (2L<<25)

	)

354 
	#DMAC_CTL_SMS_M4
 (3L<<25)

	)

355 
	#DMAC_CTL_DMS_M1
 (0L<<23)

	)

356 
	#DMAC_CTL_DMS_M2
 (1L<<23)

	)

357 
	#DMAC_CTL_DMS_M3
 (2L<<23)

	)

358 
	#DMAC_CTL_DMS_M4
 (3L<<23)

	)

359 
	#DMAC_CTL_M2M_DW
 (0L<<20)

	)

360 
	#DMAC_CTL_M2P_DW
 (1L<<20)

	)

361 
	#DMAC_CTL_P2M_DW
 (2L<<20)

	)

362 
	#DMAC_CTL_P2P_DW
 (3L<<20)

	)

363 
	#DMAC_CTL_P2M_PER
 (4L<<20)

	)

364 
	#DMAC_CTL_P2P_SrcP
 (5L<<20)

	)

365 
	#DMAC_CTL_M2P_PER
 (6L<<20)

	)

366 
	#DMAC_CTL_P2P_DesP
 (7L<<20)

	)

367 
	#DMAC_CTL_DST_SCATTER_EN
 (1L<<18)

	)

368 
	#DMAC_CTL_SRC_GATHER_EN
 (1L<<17)

	)

369 
	#DMAC_CTL_SRC_MSIZE1
 (0L<<14)

	)

370 
	#DMAC_CTL_SRC_MSIZE4
 (1L<<14)

	)

371 
	#DMAC_CTL_SRC_MSIZE8
 (2L<<14)

	)

372 
	#DMAC_CTL_SRC_MSIZE16
 (3L<<14)

	)

373 
	#DMAC_CTL_SRC_MSIZE32
 (4L<<14)

	)

374 
	#DMAC_CTL_SRC_MSIZE64
 (5L<<14)

	)

375 
	#DMAC_CTL_SRC_MSIZE128
 (6L<<14)

	)

376 
	#DMAC_CTL_SRC_MSIZE256
 (7L<<14)

	)

377 
	#DMAC_CTL_DEST_MSIZE1
 (0L<<11)

	)

378 
	#DMAC_CTL_DEST_MSIZE4
 (1L<<11)

	)

379 
	#DMAC_CTL_DEST_MSIZE8
 (2L<<11)

	)

380 
	#DMAC_CTL_DEST_MSIZE16
 (3L<<11)

	)

381 
	#DMAC_CTL_DEST_MSIZE32
 (4L<<11)

	)

382 
	#DMAC_CTL_DEST_MSIZE64
 (5L<<11)

	)

383 
	#DMAC_CTL_DEST_MSIZE128
 (6L<<11)

	)

384 
	#DMAC_CTL_DEST_MSIZE256
 (7L<<11)

	)

385 
	#DMAC_CTL_SINC_INC
 (0L<<9)

	)

386 
	#DMAC_CTL_SINC_DEC
 (1L<<9)

	)

387 
	#DMAC_CTL_SINC_NO
 (2L<<9)

	)

388 
	#DMAC_CTL_DINC_INC
 (0L<<7)

	)

389 
	#DMAC_CTL_DINC_DEC
 (1L<<7)

	)

390 
	#DMAC_CTL_DINC_NO
 (2L<<7)

	)

391 
	#DMAC_CTL_SRC_TR_WIDTH8
 (0L<<4)

	)

392 
	#DMAC_CTL_SRC_TR_WIDTH16
 (1L<<4)

	)

393 
	#DMAC_CTL_SRC_TR_WIDTH32
 (2L<<4)

	)

394 
	#DMAC_CTL_SRC_TR_WIDTH64
 (3L<<4)

	)

395 
	#DMAC_CTL_DST_TR_WIDTH8
 (0L<<1)

	)

396 
	#DMAC_CTL_DST_TR_WIDTH16
 (1L<<1)

	)

397 
	#DMAC_CTL_DST_TR_WIDTH32
 (2L<<1)

	)

398 
	#DMAC_CTL_DST_TR_WIDTH64
 (3L<<1)

	)

399 
	#DMAC_CTL_INT_EN
 (1<<0)

	)

400 
	#DMAC_CTL_INT_DIS
 (0<<0)

	)

406 
	#DMAC_CFG_DEST_PER
(
n
) (n<<11)

407 
	#DMAC_CFG_SRC_PER
(
n
) (n<<7)

408 
	#DMAC_CFG_SS_UPD_EN
 (1<<6)

409 
	#DMAC_CFG_DS_UPD_EN
 (1<<5)

410 
	#DMAC_CFG_PROTCTL
(
n
Ë“<<2)

	)

411 
	#DMAC_CFG_FIFO_MODE_1
 (1<<1)

	)

412 
	#DMAC_CFG_FIFO_MODE_0
 (0<<1)

	)

413 
	#DMAC_CFG_FCMODE_1
 (1<<0)

414 
	#DMAC_CFG_FCMODE_0
 (0<<0)

416 
	#DMAC_CFG_RELOAD_DST
 (1L<<31)

	)

417 
	#DMAC_CFG_RELOAD_SRC
 (1L<<30)

	)

418 
	#DMAC_CFG_SRC_HS_POL_H
 (0L<<19)

419 
	#DMAC_CFG_SRC_HS_POL_L
 (1L<<19)

420 
	#DMAC_CFG_DST_HS_POL_H
 (0L<<18)

421 
	#DMAC_CFG_DST_HS_POL_L
 (1L<<18)

422 
	#DMAC_CFG_LOCK_B
 (1L<<17)

	)

423 
	#DMAC_CFG_LOCK_CH
 (1L<<16)

	)

424 
	#DMAC_CFG_LOCK_B_TSF
 (0L<<14)

425 
	#DMAC_CFG_LOCK_B_BLK
 (1L<<14)

426 
	#DMAC_CFG_LOCK_B_TSC
 (2L<<14)

427 
	#DMAC_CFG_LOCK_CH_TSF
 (0L<<12)

428 
	#DMAC_CFG_LOCK_CH_BLK
 (1L<<12)

429 
	#DMAC_CFG_LOCK_CH_TSC
 (2L<<12)

430 
	#DMAC_CFG_HS_SRC_HARDWARE
 (0L<<11)

431 
	#DMAC_CFG_HS_SRC_SOFTWARE
 (1L<<11)

432 
	#DMAC_CFG_HS_DST_HARDWARE
 (0L<<10)

433 
	#DMAC_CFG_HS_DST_SOFTWARE
 (1L<<10)

434 
	#DMAC_CFG_FIFO_EMPTY
 (1<<9)

	)

435 
	#DMAC_CFG_CH_SUSP
 (1<<8)

	)

436 
	#DMAC_CFG_CH_PRIOR
(
n
) (n<<5)

437 

	)

442 
	#DMAC_INT_STATUS
(
n
Ë(1L<<n)

	)

444 
	#DMAC_INT_MASK
(
n
Ë(((0L<<nË| (1L<<“+8))))

	)

445 
	#DMAC_INT_UNMASK
(
n
Ë(((1L<<nË| (1L<<“+8))))

	)

447 
	#DMAC_INT_CLR
(
n
Ë(1L<<n)

	)

449 
	#DMAC_INT_ERR
 (1L<<4)

	)

450 
	#DMAC_INT_DSTT
 (1L<<3)

	)

451 
	#DMAC_INT_SRCT
 (1L<<2)

	)

452 
	#DMAC_INT_BLOCK
 (1L<<1)

	)

453 
	#DMAC_INT_TFR
 (1L<<0)

	)

454 
	#DMAC_ALL_MASK
 ((1L<<
AHB_DMAC_MAX_CHANNELS
)-1)

	)

459 
	#DMAC_SW_REQ
(
n
Ë(((1<<nË| (1<<“+8))))

	)

460 
	#DMAC_SW_REQ_DIS
(
n
Ë(1<<“+8))

	)

465 
	#DMAC_CH0
 (1L<<0)

	)

466 
	#DMAC_CH1
 (1L<<1)

	)

467 
	#DMAC_CH2
 (1L<<2)

	)

468 
	#DMAC_CH3
 (1L<<3)

	)

469 
	#DMAC_CH4
 (1L<<4)

	)

470 
	#DMAC_CH5
 (1L<<5)

	)

471 
	#DMAC_CH6
 (1L<<6)

	)

472 
	#DMAC_CH_EN
(
n
Ë((1<<nË| (1<<“+8)))

	)

473 
	#DMAC_CH_DIS
(
n
Ë(1<<“+8))

	)

478 
	#DMAC_EN
 (1<<0)

	)

480 
	#≥rùhîÆ_•i_tx
(
id
Ë(0 + 2 * (id % 2))

	)

481 
	#≥rùhîÆ_•i_rx
(
id
Ë(1 + 2 * (id % 2))

	)

483 
	#≥rùhîÆ_i2c_tx
(
id
Ë(4 + 2 * id)

	)

484 
	#≥rùhîÆ_i2c_rx
(
id
Ë(5 + 2 * id)

	)

485 
	#≥rùhîÆ_pwm0
 12

	)

486 
	#≥rùhîÆ_pwm1
 13

	)

487 
	#≥rùhîÆ_pwm2
 14

	)

488 
	#≥rùhîÆ_pwm3
 15

	)

491 
	#≥rùhîÆ_u¨t_tx
(
id
Ë(4 + 2 * id)

	)

492 
	#≥rùhîÆ_u¨t_rx
(
id
Ë(5 + 2 * id)

	)

493 
	#≥rùhîÆ_pwm4
 14

	)

494 
	#≥rùhîÆ_pwm5
 15

	)

499 
	#DMAC_NORMAL_MODE
 (0<<0)

	)

501 
	#DMAC_BLK_SIZE_256
 256

	)

503 
	#DMAC_BLK_SIZE_128
 128

	)

504 
	#DMAC_BLK_SIZE_64
 64

	)

505 
	#DMAC_BLK_SIZE_512
 512

	)

506 
	#Align8
 0x01

	)

507 
	#Align16
 0x02

	)

508 
	#Align32
 0x04

	)

509 
	#Align64
 0x08

	)

511 
	#CHANNEL_WR
 0

	)

512 
	#CHANNEL_RD
 1

	)

517 
	#AHB_DMA_SUB_TEST_L
 200

	)

518 
	#AHB_DMA_SUB_SRC_UART
 0x20000000

	)

519 
	#AHB_DMA_SUB_SRC1_UART
 0x20000400

	)

520 
	#AHB_DMA_SUB_SRC_SPI
 0x20000100

	)

521 
	#AHB_DMA_SUB_SRC_I2C
 0x20000200

	)

523 
	#AHB_DMA_SUB_DST_UART
 0x20004000

	)

524 
	#AHB_DMA_SUB_DST1_UART
 0x20004400

	)

525 
	#AHB_DMA_SUB_DST_SPI
 0x20004100

	)

526 
	#AHB_DMA_SUB_DST_I2C
 0x20004200

	)

528 
	#DST_MSIZE
(
x
Ë(1 << (((x >> 11Ë=0Ë? 0 : ((x >> 11Ë+ 1)))

	)

529 
	#DST_TR_WIDTH
(
x
Ë(1 << ((x >> 1Ë+ 3))

	)

531 
	#DMA_CHANNEL_0
 0

	)

532 
	#DMA_CHANNEL_1
 1

	)

533 
	#DMA_CHANNEL_2
 2

	)

534 
	#DMA_CHANNEL_3
 3

	)

535 
	#DMA_CHANNEL_4
 4

	)

536 
	#DMA_CHANNEL_5
 5

	)

537 
	#DMA_CHANNEL_6
 6

	)

538 
	#DMA_CHANNEL_7
 7

	)

541 
DMAC_Inô
(
CK_UINT32
 
id
);

542 
DMAC_I¡îru±_í
(
CK_UINT32
 
id
, CK_UINT32 
ty≥
);

543 
DMAC_O≥n
(
CK_UINT32
 
id
, 
DMAC_CH_INFO
 * 
ch™√l
, CK_UINT32 
ch™√l_numbî
,

544 
CK_UINT16
 
BlockSize
);

545 
DMAC_Clo£
(
CK_UINT32
 
id
, CK_UINT32 
ch™√l_numbî
);

546 
dmac0_i§_h™dÀr
(
CK_UINT32
 
úq
);

547 
dmac1_i§_h™dÀr
(
CK_UINT32
 
úq
);

548 
CK_UINT32
 
DMAC_CheckD⁄e
(CK_UINT32 
id
, CK_UINT32 
ch™√l_numbî
, 
CK_UINT8
 
dma_öå
);

549 
DMAC_C⁄fig
(
CK_UINT32
 
id
, 
DMAC_CH_INFO
 *
ch™√l
, CK_UINT32 
ch™√l_numbî
,

550 
CK_UINT16
 
BlockSize
);

551 
DMAC_Sèπ
(
CK_UINT32
 
id
, CK_UINT32 
ch™√l_Êag
);

552 
DMAMem2MemO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
, CK_UINT32 
§c_addr
, CK_UINT32 
d°_addr
,

553 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
dma_öå
,

554 
CK_UINT8
 
UNIT
, CK_UINT8 
¥io
, 
CK_UINT32
 
Œpx
,

555 
CK_UINT8
 
Œp_§c_upd
, CK_UINT8 
Œp_d°_upd
);

556 
DMAMem2PîùhîÆO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
, CK_UINT32 
§c_addr
,

557 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
≥rùhîÆ_ID
,

558 
CK_UINT8
 
dma_öå
, 
CK_UINT32
 
P‹tNum
,

559 
CK_UINT16
 
§c_gth_˙t
,

560 
CK_UINT32
 
§c_gth_ötvl
,

561 
CK_UINT32
 
d°_å_width
,

562 
CK_UINT32
 
d°_msize
);

563 
DMAPîùhîÆ2MemO≥n
(
CK_UINT32
 
id
, 
CK_UINT8
 
ch™√l
, CK_UINT32 
d°_addr
,

564 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
≥rùhîÆ_ID
,

565 
CK_UINT8
 
dma_öå
, 
CK_UINT32
 
P‹tNum
,

566 
CK_UINT16
 
d°_s˘_˙t
,

567 
CK_UINT32
 
d°_s˘_ötvl
);

569 vﬁ©ûê
CK_UINT32
 
DMAC_INT_Fœg
[2];

570 
DMAPîùhîÆ2PîùhîÆO≥n
(
CK_UINT8
 
ch™√l
, 
CK_UINT32
 
cou¡
,

571 
CK_UINT8
 
PîùhîaPas¶_ID
,

572 
CK_UINT8
 
dma_öå
);

	@include/apts.h

3 #i‚de‡
___APTS_H___


4 
	#___APTS_H___


	)

6 
	~"ck810.h
"

8 
	#APTS_Tx0
 
APTS_BASE
 + 0x000

	)

9 
	#APTS_Tx1
 
APTS_BASE
 + 0x004

	)

10 
	#APTS_CTRL1
 
APTS_BASE
 + 0x008

	)

11 
	#SPI_EN
(
x
Ë(x << 1)

	)

12 
	#APTS_EN
(
x
Ë
	)
x

13 
	#APTS_CTRL2
 
APTS_BASE
 + 0x00c

	)

14 
	#WD_LEN
(
x
Ë(x << 12)

	)

15 
	#APTS_OPMOD
(
x
Ë(x << 10)

	)

16 
	#CHAR_LEN
(
x
Ë(x << 3)

	)

17 
	#ASS
(
x
Ë(x << 2)

	)

18 
	#LSB
(
x
Ë(x << 1)

	)

19 
	#NEG
(
x
Ë
	)
x

20 
	#APTS_DIVIDER
 
APTS_BASE
 + 0x010

	)

21 
	#APTS_SS
 
APTS_BASE
 + 0x014

	)

22 
	#APTS_AUDCTL
 
APTS_BASE
 + 0x018

	)

23 
	#AOFFSET
(
x
Ë(x << 16)

	)

24 
	#AUDLEN
(
x
Ë
	)
x

25 
	#APTS_APTSDLY
 
APTS_BASE
 + 0x01c

	)

26 
	#APTS_INTSTS
 
APTS_BASE
 + 0x020

	)

27 
	#APTS_INTEN
 
APTS_BASE
 + 0x024

	)

28 
	#APTS_INTCLR
 
APTS_BASE
 + 0x028

	)

29 
	#APTS_STAT1
 
APTS_BASE
 + 0x02c

	)

	@include/at24c64.h

13 
	~"d©©y≥.h
"

16 
	#AT24CM02_A2
 0

	)

17 
	#AT24CM02_SLAVE_ADDR
 ((0xa0 | (
AT24CM02_A2
 << 3)Ë>> 1)

	)

18 
	#AT24CM02_DEV_ADDR
(
addr
Ë(
AT24CM02_SLAVE_ADDR
 | (◊dd∏& 0x30000Ë>> 16))

	)

20 
	#AT24C64_A210
 0

	)

21 
	#AT24C64_SLAVE_ADDR
 ((0xA0 >> 1Ë| 
AT24C64_A210
)

	)

23 
	#WORD_ADDR_L
(
addr
Ë◊dd∏& 0xffff)

	)

24 
	#WORD_ADDR_L_LEN
 2

	)

26 
CK_UINT32
 
byã_wrôe
(CK_UINT32 
i2c_id
, CK_UINT32 
addr
,

27 
CK_UINT8
 
d©a
, CK_UINT8 
öt_í
);

28 
CK_UINT32
 
∑ge_wrôe
(CK_UINT32 
i2c_id
, CK_UINT32 
addr
,

29 
CK_UINT8
 *
buf
, 
CK_UINT16
 
Àn
, CK_UINT8 
öt_í
);

30 
CK_UINT32
 
cuºít_addr_ªad
(CK_UINT32 
i2c_id
, 
CK_UINT8
 *
buf
,

31 
CK_UINT32
 
Àn
, 
CK_UINT8
 
öt_í
);

32 
CK_UINT32
 
øndom_ªad
(CK_UINT32 
i2c_id
, CK_UINT32 
addr
, 
CK_UINT8
 *
buf
,

33 
CK_UINT32
 
Àn
, 
CK_UINT8
 
öt_í
);

	@include/cache.h

10 #i‚de‡
__BOOTLOAD_INCLUDE_CACHE_H


11 
	#__BOOTLOAD_INCLUDE_CACHE_H


	)

16 
ölöe
 
	$__Êush_ˇche_Æl
()

18 
__b
;

20 
__asm__
 
	`__vﬁ©ûe__
 ("movi %0, 0x33\n\t"

22 : "Ù" (
__b
));

23 
	}
}

29 
ölöe
 
	$__Êush_iˇche
()

31 
__b
;

33 
__asm__
 
	`__vﬁ©ûe__
 ("movi %0, 0x11\n\t"

35 : "Ù" (
__b
));

36 
	}
}

41 
ölöe
 
	$__Êush_dˇche
()

43 
__b
;

45 
__asm__
 
	`__vﬁ©ûe__
 ("movi %0, 0x32\n\t"

47 : "Ù" (
__b
));

48 
	}
}

54 
ölöe
 
	$__˛ór_dˇche
()

56 
__b
;

58 
__asm__
 
	`__vﬁ©ûe__
 ("movi %0, 0x22\n\t"

60 : "Ù" (
__b
));

61 
	}
}

66 
ölöe
 
	$__Êush_l2ˇche
()

68 
__b
;

70 
__asm__
 
	`__vﬁ©ûe__
 ("movi %0, 0x30\n\t"

72 : "Ù" (
__b
));

73 
	}
}

75 
	#CK_Cache_FlushAŒ
(Ë
	`__Êush_ˇche_Æl
()

	)

76 
	#CK_Cache_FlushI
(Ë
	`__Êush_iˇche
()

	)

77 
	#CK_Cache_FlushD
(Ë
	`__Êush_dˇche
()

	)

78 
	#CK_Cache_FlushL2
(Ë
	`__Êush_l2ˇche
()

	)

	@include/circlebuffer.h

11 #i‚de‡
__CIRCLEBUFFER_H_


12 
	#__CIRCLEBUFFER_H_


	)

14 
	~"d©©y≥.h
"

18 
CK_UINT8
 *
	mBuf„r
;

19 
CK_INT32
 
	mBuf„rSize
;

20 
CK_INT32
 
	mRódPå
;

21 
CK_INT32
 
	mWrôePå
;

22 } 
	tCKSåu˘_Cú˛eBuf„r
, *
	tPCKSåu˘_Cú˛eBuf„r
;

33 
CK_Cú˛eBuf„r_Inô
(

34 
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,

35 
CK_UINT8
 * 
buf„r
,

36 
CK_INT32
 
buf„rsize


46 
CK_Cú˛eBuf„r_CÀ¨
–
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
);

53 
BOOL
 
CK_Cú˛eBuf„r_IsEm±y
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
);

60 
BOOL
 
CK_Cú˛eBuf„r_IsFuŒ
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
);

69 
BOOL
 
CK_Cú˛eBuf„r_Ród
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,
CK_UINT8
* 
ch
);

78 
BOOL
 
CK_Cú˛eBuf„r_Wrôe
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,
CK_UINT8
 
ch
);

	@include/ck810.h

12 #i‚de‡
__INCLUDE_CK810_H


13 
	#__INCLUDE_CK810_H


	)

15 
	~"¸m.h
"

17 
	#CONFIG_IS_ASIC
 1

	)

19 
	#CONFIG_DDR4_2400_SUPPORT
 1

	)

26 
	#CONFIG_NR_DDR_CHANNELS
 4

	)

27 
	#CONFIG_CHANNEL_IN_LOW_POWER


	)

29 
	#CONFIG_DUMP_VSI_PLL_REGS
 1

	)

30 
	#CONFIG_DUMP_VSI_CLK_FREQ
 1

	)

36 
	#TSMPLL_24M_CLOCKIN
 0

	)

39 
	#DOMAIN_CK810_POWER_OFF
 0

	)

40 
	#DOMAIN_ISP_POWER_OFF
 0

	)

41 
	#DOMAIN_GC620_POWER_OFF
 0

	)

42 
	#DOMAIN_AVS_POWER_OFF
 0

	)

43 
	#DOMAIN_VC8000E_POWER_OFF
 0

	)

44 
	#DOMAIN_AI_POWER_OFF
 0

	)

47 
	#IP_RELEASE_RSCODEC
 0

	)

48 
	#IP_RELEASE_TSPSI
 0

	)

49 
	#IP_RELEASE_AVS610
 0

	)

50 
	#IP_RELEASE_AVSP
 0

	)

51 
	#IP_RELEASE_AVS2
 0

	)

53 
	#IP_RELEASE_C50_CORE
 0

	)

54 
	#IP_RELEASE_C51_CORE
 0

	)

55 
	#IP_RELEASE_P60_CORE
 0

	)

56 
	#IP_RELEASE_P61_CORE
 0

	)

57 
	#IP_RELEASE_CAMB
 0

	)

58 
	#IP_RELEASE_CDVS
 0

	)

59 
	#IP_RELEASE_C50_CSR
 0

	)

60 
	#IP_RELEASE_C51_CSR
 0

	)

61 
	#IP_RELEASE_P60_CSR
 0

	)

62 
	#IP_RELEASE_P61_CSR
 0

	)

63 
	#IP_RELEASE_WDT_C50
 0

	)

64 
	#IP_RELEASE_WDT_C51
 0

	)

65 
	#IP_RELEASE_WDT_P60
 0

	)

66 
	#IP_RELEASE_WDT_P61
 0

	)

67 
	#IP_RELEASE_TIMER_DSP
 0

	)

68 
	#IP_RELEASE_UART0_DSP
 0

	)

69 
	#IP_RELEASE_UART1_DSP
 0

	)

70 
	#IP_RELEASE_UART2_DSP
 0

	)

71 
	#IP_RELEASE_UART3_DSP
 0

	)

73 
	#pmu_wrôñ
(
vÆ
, 
offs
Ë
	`wrôe_mªg32
(
CK_PMU_ADDR
 + offs, vÆ)

	)

74 
	#pmu_ªadl
(
offs
Ë
	`ªad_mªg32
(
CK_PMU_ADDR
 + offs)

	)

75 
	#¸m_wrôñ
(
vÆ
, 
offs
Ë
	`wrôe_mªg32
(
CK_CRM_ADDR
 + offs, vÆ)

	)

76 
	#¸m_ªadl
(
offs
Ë
	`ªad_mªg32
(
CK_CRM_ADDR
 + offs)

	)

77 
	#£t_∂l_∑øm
(
ªf
, 
fb
, 
po°1
, 
po°2
, 
ªg
Ë
	`¸m_wrôñ
(‘ef|(fb<<8)|’o°1<<20)|’o°2<<24)),Ñeg)

	)

78 
	#PLL_CLKO
(
ªf
, 
∑øm
Ë(((‘ef)*((
	`¸m_ªadl
’¨am)>>8)&0xfff))/((¸m_ªadl’¨am)&0x3f)*((¸m_ªadl’¨am)>>20)&0x7)*((¸m_ªadl’¨am)>>24)&0x7)))*1000000)

	)

80 #i‡
CONFIG_IS_ASIC


81 
	#SYS_PLL_CLKO
 
	`PLL_CLKO
(24, 
SYS_PLL_PARAM
)

	)

82 
	#CK_PLL_CLKO
 
	`PLL_CLKO
(24, 
CK_PLL_PARAM
)

	)

83 
	#UNI_PLL_CLKO
 
	`PLL_CLKO
(24, 
UNI_PLL_PARAM
)

	)

84 
	#DDR_PLL_CLKO
 
	`PLL_CLKO
(24, 
DDR_PLL_PARAM
)

	)

85 
	#DSP_PLL_CLKO
 
	`PLL_CLKO
(24, 
DSP_PLL_PARAM
)

	)

86 
	#VIDEO_PLL0_CLKO
 
	`PLL_CLKO
(24, 
VIDEO0_PLL_PARAM
)

	)

87 
	#VIDEO_PLL1_CLKO
 
	`PLL_CLKO
(24, 
VIDEO1_PLL_PARAM
)

	)

88 
	#TSM_PLL24_CLKO
 
	`PLL_CLKO
(24, 
TSM_PLL_PARAM
)

	)

89 
	#TSM_PLL27_CLKO
 
	`PLL_CLKO
(27, 
TSM_PLL_PARAM
)

	)

90 
	#GMAC_PLL_CLKO
 
	`PLL_CLKO
(24, 
GMAC_PLL_PARAM
)

	)

91 
	#PIXEL_PLL_CLKO
 
	`PLL_CLKO
(24, 
PIXEL_PLL_PARAM
)

	)

92 
	#AUDIO_PLL_CLKO
 
	`PLL_CLKO
(24, 
AUDIO_PLL_PARAM
)

	)

93 
	#SENSOR_PLL_CLKO
 
	`PLL_CLKO
(24, 
SENSOR_PLL_PARAM
)

	)

95 
	#SYS_ACLK_H
 (
SYS_PLL_CLKO
 / ((
	`¸m_ªadl
(
SYS_CLK_CFG
Ë& 0x7Ë+ 1))

	)

96 
	#SYS_ACLK_L
 (
SYS_ACLK_H
 / (((
	`¸m_ªadl
(
SYS_CLK_CFG
Ë>> 4Ë& 0x7Ë+ 1))

	)

97 
	#SYS_HCLK
 (
SYS_ACLK_L
 / (((
	`¸m_ªadl
(
SYS_CLK_CFG
Ë>> 8Ë& 0x7Ë+ 1))

	)

98 
	#SYS_PCLK
 (
SYS_ACLK_L
 / (((
	`¸m_ªadl
(
SYS_CLK_CFG
Ë>> 12Ë& 0x7Ë+ 1))

	)

100 
	#REF_CLK_FREQ
 24000000

	)

101 
	#CPU_DEFAULT_FREQ
 
CK_PLL_CLKO


	)

103 
	#SDIO0_DEFAULT_FREQ
 (
SYS_PLL_CLKO
 / ((
	`¸m_ªadl
(
SDIO_CLK_CFG
Ë& 0x3fË+ 1))

	)

104 
	#SDIO1_DEFAULT_FREQ
 (
SYS_PLL_CLKO
 / (((
	`¸m_ªadl
(
SDIO_CLK_CFG
Ë>> 8Ë& 0x3fË+ 1))

	)

105 
	#TIMER_DEFAULT_FREQ
 (
SYS_PCLK
 / ((
	`¸m_ªadl
(
TIMER_CLK_CFG
Ë& 0xffffË+ 1))

	)

106 
	#UART_DEFAULT_FREQ
 
REF_CLK_FREQ


	)

107 
	#PWM_PCLK_FREQ
 
SYS_PCLK


	)

108 
	#PWM_SCLK_FREQ
 24000000

	)

109 
	#I2C_CLK_FREQ
 
SYS_PCLK


	)

110 
	#APTS_CLK27_FREQ
 ((
TSM_PLL27_CLKO
 / ((
	`¸m_ªadl
(
TS_CLK_CFG
Ë& 0xfË+ 1)Ë/ (((¸m_ªadl(TS_CLK_CFGË>> 4Ë& 0xfË+ 1))

	)

111 
	#SPI_DEFAULT_FREQ
 
SYS_PCLK


	)

112 
	#QSPI_DEFAULT_FREQ
 
SYS_HCLK


	)

114 
	#TIMER_DEFAULT_FREQ
 30000000

	)

115 
	#UART_DEFAULT_FREQ
 30000000

	)

116 
	#PWM_PCLK_FREQ
 30000000

	)

117 
	#PWM_SCLK_FREQ
 (
PWM_PCLK_FREQ
 >> 1)

	)

118 
	#I2C_CLK_FREQ
 30000000

	)

119 
	#APTS_CLK27_FREQ
 30000000

	)

120 
	#SPI_DEFAULT_FREQ
 30000000

	)

121 
	#QSPI_DEFAULT_FREQ
 30000000

	)

125 
	#CK_UART_FIFO_EN
 1

	)

126 
	#CK_UART_FC_EN
 0

	)

131 
	#CK_INTC_DEBUG
 0

	)

132 
	#CK_128_INTC
 1

	)

135 
	#CK_WDT_DEBUG
 0

	)

138 
	#CK_SDIO_DEBUG
 0

	)

144 
	#CK_SPI_M_NOR_DEBUG
 0

	)

149 
	#CONFIG_CKCPU_MMU
 1

	)

150 
	#CONFIG_CKCPU_ICACHE
 1

	)

151 
	#CONFIG_CKCPU_DCACHE
 1

	)

153 #i‡
CONFIG_CKCPU_MMU


154 
	#PERI_BASE
 (-0x40000000)

	)

156 
	#PERI_BASE
 (0x00000000)

	)

160 
	#PCIE_BASE_ADDR
 (0xf1000000 + 
PERI_BASE
)

	)

161 
	#CK_CAMB_BASE
 (0xf3000000 + 
PERI_BASE
)

	)

162 
	#CK_VIP_BASE
 (0xf3400000 + 
PERI_BASE
)

	)

163 
	#CK_CDVS_BASE
 (0xf3500000 + 
PERI_BASE
)

	)

164 
	#OTP_BASE_ADDR
 (0xf4000000 + 
PERI_BASE
)

	)

165 
	#NFC_BASE_ADDR
 (0xf4100000 + 
PERI_BASE
)

	)

166 
	#SPACC_BASE_ADDR
 (0xf4500000 + 
PERI_BASE
)

	)

167 
	#RSA_BASE_ADDR
 (0xf4600000 + 
PERI_BASE
)

	)

168 
	#QSPI_BASE
 (0xf4700000 + 
PERI_BASE
)

	)

169 
	#CK_DSP_C5_0_BASE
 (0xf5000000 + 
PERI_BASE
)

	)

170 
	#CK_DSP_P6_0_BASE
 (0xf5200000 + 
PERI_BASE
)

	)

174 
	#CK_SDIO0_BASEADDRESS
 (0xf6100000 + 
PERI_BASE
)

	)

175 
	#CK_SDIO1_BASEADDRESS
 (0xf6200000 + 
PERI_BASE
)

	)

176 
	#CK_AHB_DMA_CONTROL
(
x
Ë(0xf6300000 + (x * 0x100000Ë+ 
PERI_BASE
)

	)

177 
	#CK_AXI_DMA_ADDRESS
 (0xf6500000 + 
PERI_BASE
)

	)

178 
	#CK_ISP0_Sœve
 (0xf6600000 + 
PERI_BASE
)

	)

179 
	#CK_ISP1_Sœve
 (0xf6700000 + 
PERI_BASE
)

	)

180 
	#CK_AVS2_BASE
 (0xf6800000 + 
PERI_BASE
)

	)

181 
	#CK_GC620_BASE
 (0xf6e00000 + 
PERI_BASE
)

	)

185 
	#SPI0_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7000000 + 
PERI_BASE
)

	)

186 
	#SPI1_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7001000 + 
PERI_BASE
)

	)

187 
	#I2S0_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7002000 + 
PERI_BASE
)

	)

188 
	#I2S1_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7003000 + 
PERI_BASE
)

	)

189 
	#I2S2_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7004000 + 
PERI_BASE
)

	)

190 
	#I2S3_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7005000 + 
PERI_BASE
)

	)

191 
	#I2S4_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf7006000 + 
PERI_BASE
)

192 
	#CK_I2C0_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf7007000 + 
PERI_BASE
)

	)

193 
	#CK_I2C1_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf7008000 + 
PERI_BASE
)

	)

194 
	#CK_I2C2_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf7009000 + 
PERI_BASE
)

	)

195 
	#CK_I2C3_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf700a000 + 
PERI_BASE
)

	)

196 
	#CK_WDT_CK860_ADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf700b000 + 
PERI_BASE
)

	)

197 
	#CK_WDT_CK810_ADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf700c000 + 
PERI_BASE
)

	)

198 
	#CK_WDT_UNI_ADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf700d000 + 
PERI_BASE
)

	)

199 
	#APTS_BASE
 (0xf700e000 + 
PERI_BASE
)

	)

200 
	#I2S_PTS_BASE
 (0xf700f000 + 
PERI_BASE
)

	)

204 
	#SPI2_BASE
 (0xf8000000 + 
PERI_BASE
)

	)

205 
	#SPI3_BASE
 (0xf8001000 + 
PERI_BASE
)

	)

206 
	#INTC_CK860_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf8002000 + 
PERI_BASE
)

	)

207 
	#INTC_CK810_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf8003000 + 
PERI_BASE
)

	)

208 
	#INTC_UNI_BASE
 (vﬁ©ûê
CK_UINT32
 *)(0xf8004000 + 
PERI_BASE
)

	)

209 #i‡
CK_CK860


210 
	#CK_INTC_BASEADDRESS
 (0xf8002000 + 
PERI_BASE
)

	)

212 
	#CK_INTC_BASEADDRESS
 (0xf8003000 + 
PERI_BASE
)

	)

214 
	#CK_TIMER0_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005000 + 
PERI_BASE
)

	)

215 
	#CK_TIMER1_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005014 + 
PERI_BASE
)

	)

216 
	#CK_TIMER2_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005028 + 
PERI_BASE
)

	)

217 
	#CK_TIMER3_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf800503¯+ 
PERI_BASE
)

	)

218 
	#CK_TIMER4_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005050 + 
PERI_BASE
)

	)

219 
	#CK_TIMER5_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005064 + 
PERI_BASE
)

	)

220 
	#CK_TIMER6_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf8005078 + 
PERI_BASE
)

	)

221 
	#CK_TIMER7_BASSADDR
 (vﬁ©ûê
CK_UINT32
 *)(0xf800508¯+ 
PERI_BASE
)

	)

222 
	#CK_UART_ADDRBASE0
 (vﬁ©ûê
CK_UINT32
 *)(0xf8006000 + 
PERI_BASE
)

	)

223 
	#CK_UART_ADDRBASE1
 (vﬁ©ûê
CK_UINT32
 *)(0xf8007000 + 
PERI_BASE
)

	)

224 
	#CK_UART_ADDRBASE2
 (vﬁ©ûê
CK_UINT32
 *)(0xf8008000 + 
PERI_BASE
)

	)

225 
	#CK_UART_ADDRBASE3
 (vﬁ©ûê
CK_UINT32
 *)(0xf8009000 + 
PERI_BASE
)

	)

226 
	#CK_UART_ADDRBASE4
 (vﬁ©ûê
CK_UINT32
 *)(0xf800a000 + 
PERI_BASE
)

	)

227 
	#SCI7816_ADDR
 (0xf800b000 + 
PERI_BASE
)

	)

228 
	#CK_GPIO_ADDR
 (0xf800c000 + 
PERI_BASE
)

	)

229 
	#PWM_BASE
(
x
Ë(vﬁ©ûê
CK_UINT32
 *)(0xf800d000 + (x * 0x200Ë+ 
PERI_BASE
)

	)

230 
	#CK_RTC_ADDR
 (0xf800e000 + 
PERI_BASE
)

	)

231 
	#CK_STC_ADDR
 (0xf800f000 + 
PERI_BASE
)

	)

235 
	#CK_CRM_ADDR
 (0xf9700000 + 
PERI_BASE
)

	)

236 
	#CK_SYS_CTRL_ADDR
 (0xf9701000 + 
PERI_BASE
)

	)

237 
	#CK_PMU_ADDR
 (0xf9702000 + 
PERI_BASE
)

	)

238 
	#CK_PINMUX_C⁄åﬁ
 (0xf9703000 + 
PERI_BASE
)

	)

242 
	#CK_MIPI_Sœve
 (0xÁ004000 + 
PERI_BASE
)

243 
	#CK_VC8000E_BASE
 (0xÁ000000 + 
PERI_BASE
)

	)

244 
	#CK_VC8000D_BASE
 (0xÁ002000 + 
PERI_BASE
)

	)

250 
	#CK_INTC_QSPI
 2

	)

251 
	#CK_INTC_SPACC
 6

	)

252 
	#CK_INTC_RSA
 7

	)

253 
	#CK_INTC_AXIDMA
 8

	)

254 
	#CK_INTC_AHBDMA
(
x
Ë(9 + x)

	)

255 
	#CK_INTC_SDIO0
 11

	)

256 
	#CK_INTC_SDIO0_WAKEUP
 12

	)

257 
	#CK_INTC_SDIO1
 13

	)

258 
	#CK_INTC_SDIO1_WAKEUP
 14

	)

259 
	#CK_INTC_MIPI
 30

	)

260 
	#CK_INTC_SPI0
 31

	)

261 
	#CK_INTC_SPI1
 32

	)

262 
	#CK_INTC_SPI2
 33

	)

263 
	#CK_INTC_SPI3
 34

	)

264 
	#CK_INTC_I2C0
 40

	)

265 
	#CK_INTC_I2C1
 41

	)

266 
	#CK_INTC_I2C2
 42

	)

267 
	#CK_INTC_I2C3
 43

	)

268 
	#CK_INTC_WDT_CK860
 44

	)

269 
	#CK_INTC_WDT_CK810
 45

	)

270 
	#CK_INTC_WDT_UNI
 46

	)

271 
	#CK_INTC_UART0
 47

	)

272 
	#CK_INTC_UART1
 48

	)

273 
	#CK_INTC_UART2
 49

	)

274 
	#CK_INTC_UART3
 50

	)

275 
	#CK_INTC_UART4
 51

	)

276 
	#CK_INTC_SCI7816
 52

	)

277 
	#CK_INTC_GPIO
 53

	)

278 
	#CK_INTC_TIM0
 54

	)

279 
	#CK_INTC_TIM1
 55

	)

280 
	#CK_INTC_TIM2
 56

	)

281 
	#CK_INTC_TIM3
 57

	)

282 
	#CK_INTC_TIM4
 58

	)

283 
	#CK_INTC_TIM5
 59

	)

284 
	#CK_INTC_TIM6
 60

	)

285 
	#CK_INTC_TIM7
 61

	)

286 
	#CK_INTC_PWM
(
x
Ë(62 + x)

	)

287 
	#CK_INTC_RTC
 70

	)

288 
	#CK_INTC_APTS
 71

	)

289 
	#CK_INTC_I2S_PTS
 72

	)

291 
	#PHYSICAL_ADDRESS
(
x
Ë(vﬁ©ûê
CK_UINT32
 *)((CK_UINT32)x - 
PERI_BASE
)

	)

	@include/crm.h

3 #i‚de‡
___CRM_H___


4 
	#___CRM_H___


	)

6 
	~"ck810.h
"

8 
	#CRM_TSM_PLL_BYP
 
CK_CRM_ADDR
 + 0x74

	)

9 
	#CRM_TSMPLL_REFCLK_CFG
 
CK_CRM_ADDR
 + 0x144

	)

10 
	#CRM_TS_CLK_CFG
 
CK_CRM_ADDR
 + 0x148

	)

11 
	#CRM_BLK_CLK_ICG3
 
CK_CRM_ADDR
 + 0x20c

	)

13 
	#OTP_SW_RST
 1 << 18

	)

14 
	#CRM_BLK_SW_RST3
 
CK_CRM_ADDR
 + 0x81c

	)

15 
	#I2S_PTS_RST
 
	`BIT
(31)

	)

16 
	#SCI_SW_RST
 
	`BIT
(25)

	)

17 
	#STC_SW_RST
 
	`BIT
(1)

	)

18 
	#APTS_SW_RST
 
	`BIT
(0)

	)

21 
	#SYS_PLL_PARAM
 0x000

	)

22 
	#SYS_PLL_BYP
 0x004

	)

23 
	#SYS_PLL_PD
 0x008

	)

24 
	#SYS_PLL_LOCK
 0x00C

	)

25 
	#CK_PLL_PARAM
 0x010

	)

26 
	#CK_PLL_BYP
 0x014

	)

27 
	#CK_PLL_PD
 0x018

	)

28 
	#CK_PLL_LOCK
 0x01C

	)

29 
	#UNI_PLL_PARAM
 0x020

	)

30 
	#UNI_PLL_BYP
 0x024

	)

31 
	#UNI_PLL_PD
 0x028

	)

32 
	#UNI_PLL_LOCK
 0x02C

	)

33 
	#DDR_PLL_PARAM
 0x030

	)

34 
	#DDR_PLL_BYP
 0x034

	)

35 
	#DDR_PLL_PD
 0x038

	)

36 
	#DDR_PLL_LOCK
 0x03C

	)

37 
	#VIDEO0_PLL_PARAM
 0x040

	)

38 
	#VIDEO0_PLL_BYP
 0x044

	)

39 
	#VIDEO0_PLL_PD
 0x048

	)

40 
	#VIDEO0_PLL_LOCK
 0x04C

	)

41 
	#VIDEO1_PLL_PARAM
 0x050

	)

42 
	#VIDEO1_PLL_BYP
 0x054

	)

43 
	#VIDEO1_PLL_PD
 0x058

	)

44 
	#VIDEO1_PLL_LOCK
 0x05C

	)

45 
	#DSP_PLL_PARAM
 0x060

	)

46 
	#DSP_PLL_BYP
 0x064

	)

47 
	#DSP_PLL_PD
 0x068

	)

48 
	#DSP_PLL_LOCK
 0x06C

	)

49 
	#TSM_PLL_PARAM
 0x070

	)

50 
	#TSM_PLL_BYP
 0x074

	)

51 
	#TSM_PLL_PD
 0x078

	)

52 
	#TSM_PLL_LOCK
 0x07C

	)

53 
	#GMAC_PLL_PARAM
 0x080

	)

54 
	#GMAC_PLL_BYP
 0x084

	)

55 
	#GMAC_PLL_PD
 0x088

	)

56 
	#GMAC_PLL_LOCK
 0x08C

	)

57 
	#PIXEL_PLL_PARAM
 0x090

	)

58 
	#PIXEL_PLL_BYP
 0x094

	)

59 
	#PIXEL_PLL_PD
 0x098

	)

60 
	#PIXEL_PLL_LOCK
 0x09C

	)

61 
	#AUDIO_PLL_PARAM
 0x0A0

	)

62 
	#AUDIO_PLL_BYP
 0x0A4

	)

63 
	#AUDIO_PLL_PD
 0x0A8

	)

64 
	#AUDIO_PLL_LOCK
 0x0AC

	)

65 
	#SENSOR_PLL_PARAM
 0x0B0

	)

66 
	#SENSOR_PLL_BYP
 0x0B4

	)

67 
	#SENSOR_PLL_PD
 0x0B8

	)

68 
	#SENSOR_PLL_LOCK
 0x0BC

	)

69 
	#SYS_CLK_CFG
 0x100

	)

70 
	#CK860_CLK_CFG
 0x104

	)

71 
	#CK810_CLK_CFG
 0x108

	)

72 
	#UNI_CLK_CFG
 0x10C

	)

73 
	#XDMA_CLK_CFG
 0x110

	)

74 
	#GMAC_CLK_CFG
 0x114

	)

75 
	#SDIO_CLK_CFG
 0x118

	)

76 
	#PCIE_CLK_CFG
 0x11C

	)

77 
	#I2S_CLK_CFG
 0x120

	)

78 
	#VIN_CLK_CFG
 0x124

	)

79 
	#VDEC_CLK_CFG
 0x128

	)

80 
	#VENC_CLK_CFG
 0x12C

	)

81 
	#JPEG_CLK_CFG
 0x130

	)

82 
	#ISP_CLK_CFG
 0x134

	)

83 
	#GPU_CLK_CFG
 0x138

	)

84 
	#VOUT_CLK_CFG
 0x13C

	)

85 
	#AVS2_CLK_CFG
 0x140

	)

86 
	#TSMPLL_REFCLK_CFG
 0x144

	)

87 
	#TS_CLK_CFG
 0x148

	)

88 
	#C5_CLK_CFG
 0x14C

	)

89 
	#P6_CLK_CFG
 0x150

	)

90 
	#CDVS_CLK_CFG
 0x154

	)

91 
	#VIP_CLK_CFG
 0x158

	)

92 
	#CAMB_CLK_CFG
 0x15C

	)

93 
	#SCI_CLK_CFG
 0x160

	)

94 
	#GPIO_DBCLK_CFG
 0x168

	)

95 
	#TIMER_CLK_CFG
 0x16C

	)

96 
	#SENSOR0_CLK_CFG
 0x170

	)

97 
	#SENSOR1_CLK_CFG
 0x174

	)

98 
	#DISPLAY_CLK_CFG
 0x178

	)

99 
	#MIPI_EXT_CLK_CFG
 0x180

	)

100 
	#BLK_CLK_ICG0
 0x200

	)

101 
	#BLK_CLK_ICG1
 0x204

	)

102 
	#BLK_CLK_ICG2
 0x208

	)

103 
	#BLK_CLK_ICG3
 0x20C

	)

104 
	#BLK_CLK_ICG4
 0x210

	)

106 
	#GLB_SW_RST
 0x800

	)

107 
	#GLB_SW_WIDTH
 0x804

	)

108 
	#BLK_SW_RST0
 0x810

	)

109 
	#BLK_SW_RST1
 0x814

	)

110 
	#BLK_SW_RST2
 0x818

	)

111 
	#BLK_SW_RST3
 0x81C

	)

112 
	#RESET_STATUS
 0x880

	)

	@include/datatype.h

11 #i‚def 
__DATATYPE_H__


12 
	#__DATATYPE_H__


	)

17 #i‚de‡
NULL


18 
	#NULL
 0x00

	)

21 #i‚de‡
TRUE


22 
	#TRUE
 0x01

	)

24 #i‚de‡
FALSE


25 
	#FALSE
 0x00

	)

28 #i‚de‡
åue


29 
	#åue
 0x01

	)

31 #i‚de‡
Ál£


32 
	#Ál£
 0x00

	)

35 #i‚de‡
SUCCESS


36 
	#SUCCESS
 0

	)

38 #i‚de‡
FAILURE


39 
	#FAILURE
 -1

	)

41 
	#TIMEOUT
 0x1000

	)

43 
	#STATUS_ERR
 1

	)

44 
	#STATUS_OK
 0

	)

46 
	tCK_UINT8
;

47 
	tCK_UINT16
;

48 
	tCK_UINT32
;

49 sig√d 
	tCK_INT8
;

50 sig√d 
	tCK_INT16
;

51 sig√d 
	tCK_INT32
;

53 sig√d 
	tCK_INT64
;

54 
	tCK_UINT64
;

55 
	tBOOL
;

56 #i‚de‡
BYTE


57 
	tBYTE
;

59 #i‚de‡
WORD


60 
	tWORD
;

63 sig√d 
	ts8
;

64 
	tu8
;

66 sig√d 
	ts16
;

67 
	tu16
;

69 sig√d 
	ts32
;

70 
	tu32
;

72 sig√d 
	ts64
;

73 
	tu64
;

75 
	tboﬁ
;

77 
	#CK_REG
 
CK_UINT32


	)

78 
	#CK_SREG
 
CK_UINT16


	)

79 
	#CK_CREG
 
CK_UINT8


	)

81 
	#ALIGN_4
 
	`__©åibuã__
((
	`Æig√d
 (4)))

	)

82 
	#ALIGN_16
 
	`__©åibuã__
((
	`Æig√d
 (16)))

	)

83 
	#ALIGN_32
 
	`__©åibuã__
((
	`Æig√d
 (32)))

	)

84 
	#ALIGN_256
 
	`__©åibuã__
((
	`Æig√d
 (256)))

	)

85 
	#INT_DATA
 
	`__©åibuã
((
	`£˘i⁄
(".ötd©a, \"aw\"")))

	)

90 
CK_UINT16
 
	myór
;

91 
CK_UINT8
 
	mm⁄th
;

92 
CK_UINT8
 
	mday
;

93 
CK_UINT8
 
	mwìkday
;

94 
CK_UINT8
 
	mhour
;

95 
CK_UINT8
 
	mmö
;

96 
CK_UINT8
 
	m£c
;

97 }
	t__©åibuã__
((
	t∑cked
)Ë
	tRTCTIME
, *
	tPRTCTIME
;

100 #i‡
deföed
(
DEBUG
)

101 
	#Debug
 
¥ötf


	)

103 
	#Debug


	)

106 
	#IN


	)

107 
	#OUT


	)

108 
	#INOUT


	)

110 
	#ªad_mªg32
–
addr
 ) *(vﬁ©ûê*)◊ddr)

	)

111 
	#wrôe_mªg32
–
addr
, 
vÆ
Ë*(vﬁ©ûê*)◊ddr)(vﬁ©ûê)(vÆ)

	)

112 
	#ªad_mªg16
–
addr
 ) *(vﬁ©ûê*)◊ddr)

	)

113 
	#wrôe_mªg16
–
addr
, 
vÆ
Ë*(vﬁ©ûê*)◊ddrË(vﬁ©ûê)(vÆ)

	)

114 
	#ªad_mªg8
–
addr
 ) *(vﬁ©ûê*)◊ddr)

	)

115 
	#wrôe_mªg8
–
addr
, 
vÆ
Ë*(vﬁ©ûê*)◊ddrË(vﬁ©ûê)(vÆ)

	)

116 
	#wrôe_úam32
–
addr
, 
vÆ
Ë*(vﬁ©ûê*)◊ddrË(vÆ)

	)

117 
	#wrôe_úam16
–
addr
, 
vÆ
Ë*(vﬁ©ûê*)◊ddrË=(vÆ)

	)

118 
	#ªad_úam32
(
addr
Ë*(vﬁ©ûê*)◊ddr)

	)

119 
	#ªad_úam16
(
addr
Ë*(vﬁ©ûê*)◊ddr)

	)

121 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

123 
	#BIT
(
ƒ
Ë(1UL << (ƒ))

	)

125 
	#BITS_PER_LONG
 32

	)

126 
	#GENMASK
(
h
, 
l
) \

127 (((~0ULË<< (
l
)Ë& (~0UL >> (
BITS_PER_LONG
 - 1 - (
h
))))

	)

129 
	#SZ_1
 0x00000001

	)

130 
	#SZ_2
 0x00000002

	)

131 
	#SZ_4
 0x00000004

	)

132 
	#SZ_8
 0x00000008

	)

133 
	#SZ_16
 0x00000010

	)

134 
	#SZ_32
 0x00000020

	)

135 
	#SZ_64
 0x00000040

	)

136 
	#SZ_128
 0x00000080

	)

137 
	#SZ_256
 0x00000100

	)

138 
	#SZ_512
 0x00000200

	)

140 
	#SZ_1K
 0x00000400

	)

141 
	#SZ_2K
 0x00000800

	)

142 
	#SZ_4K
 0x00001000

	)

143 
	#SZ_8K
 0x00002000

	)

144 
	#SZ_16K
 0x00004000

	)

145 
	#SZ_32K
 0x00008000

	)

146 
	#SZ_64K
 0x00010000

	)

147 
	#SZ_128K
 0x00020000

	)

148 
	#SZ_256K
 0x00040000

	)

149 
	#SZ_512K
 0x00080000

	)

151 
	#SZ_1M
 0x00100000

	)

152 
	#SZ_2M
 0x00200000

	)

153 
	#SZ_4M
 0x00400000

	)

154 
	#SZ_8M
 0x00800000

	)

155 
	#SZ_16M
 0x01000000

	)

156 
	#SZ_32M
 0x02000000

	)

157 
	#SZ_64M
 0x04000000

	)

158 
	#SZ_128M
 0x08000000

	)

159 
	#SZ_256M
 0x10000000

	)

160 
	#SZ_512M
 0x20000000

	)

162 
	#SZ_1G
 0x40000000

	)

163 
	#SZ_2G
 0x80000000

	)

165 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

	@include/gpio.h

1 #i‚de‡
__GPIO_H__


2 
	#__GPIO_H__


	)

12 
	~"d©©y≥.h
"

15 
	mGPIO_A
 = 0,

16 
	mGPIO_B
,

17 
	mGPIO_C
,

18 
	mGPIO_D


21 
CK_Gpio_Ouçut
(
pö
, 
vÆ
);

22 
CK_Gpio_I≈ut
(
pö
);

23 
dw_Gpio_Ouçut
(
p‹t
, 
pö
, 
vÆ
);

24 
dw_Gpio_I≈ut
(
p‹t
, 
pö
);

26 
CK_Gpio_Inô
();

27 
CK_Gpio_Te°_Ouçut
();

28 
CK_Gpio_Te°_I≈ut
();

29 
CK_Gpio_Te°_I¡c
();

30 
CK_Gpio_Te°
();

	@include/i2s_pts.h

3 #i‚de‡
___I2S_PTS_H___


4 
	#___I2S_PTS_H___


	)

6 
	~"ck810.h
"

8 
	#I2S_PTS_ENABLE
 
I2S_PTS_BASE
 + 0x000

	)

9 
	#I2S_AUDIO_LEN
 
I2S_PTS_BASE
 + 0x004

	)

10 
	#I2S_SAMPLE_EDGE
 
I2S_PTS_BASE
 + 0x008

	)

11 
	#I2S_PTS_IRQ_EN
 
I2S_PTS_BASE
 + 0x00c

	)

12 
	#I2S_PTS_IRQ_CLR
 
I2S_PTS_BASE
 + 0x010

	)

13 
	#I2S_PTS_IRQ_STATUS
 
I2S_PTS_BASE
 + 0x014

	)

14 
	#I2S_SAMPLE_CNT0
 
I2S_PTS_BASE
 + 0x018

	)

15 
	#I2S_SAMPLE_CNT1
 
I2S_PTS_BASE
 + 0x01c

	)

16 
	#I2S_FIFO_STATUS
 
I2S_PTS_BASE
 + 0x020

	)

17 
	#I2S_FIFO_WORDS
 
I2S_PTS_BASE
 + 0x024

	)

18 
	#I2S_CH0_FIFO_DATA
 
I2S_PTS_BASE
 + 0x028

	)

19 
	#I2S_CH1_FIFO_DATA
 
I2S_PTS_BASE
 + 0x02c

	)

20 
	#I2S_CH2_FIFO_DATA
 
I2S_PTS_BASE
 + 0x030

	)

21 
	#I2S_CH3_FIFO_DATA
 
I2S_PTS_BASE
 + 0x034

	)

	@include/iic.h

14 #i‚de‡
__DW_I2C_H_


15 
	#__DW_I2C_H_


	)

17 
	~"ck810.h
"

18 
	~"d©©y≥.h
"

19 
	~"misc.h
"

27 #i‡
CONFIG_IS_ASIC


28 
	#IC_CLK
 (
I2C_CLK_FREQ
 / 1000000)

	)

30 
	#IC_CLK
 24

	)

32 
	#NANO_TO_MICRO
 1000

	)

36 
	#MIN_SS_SCL_HIGHTIME
 4000

	)

37 
	#MIN_SS_SCL_LOWTIME
 4700

	)

38 
	#MIN_FS_SCL_HIGHTIME
 600

	)

39 
	#MIN_FS_SCL_LOWTIME
 1300

	)

40 
	#MIN_FS_PLUS_SCL_HIGHTIME
 260

	)

41 
	#MIN_FS_PLUS_SCL_LOWTIME
 500

	)

42 
	#MIN_HS_SCL_HIGHTIME
 60

	)

43 
	#MIN_HS_SCL_LOWTIME
 160

	)

46 
	#I2C_BYTE_TO
 (
I2C_CLK_FREQ
 / 500)

	)

47 
	#I2C_STOPDET_TO
 (
I2C_CLK_FREQ
 / 500)

	)

48 
	#I2C_BYTE_TO_BB
 (
I2C_BYTE_TO
 * 16)

	)

51 
	#IC_CON_SD
 0x0040

	)

52 
	#IC_CON_RE
 0x0020

	)

53 
	#IC_CON_10BITADDRMASTER
 0x0010

	)

54 
	#IC_CON_10BITADDR_SLAVE
 0x0008

	)

55 
	#IC_CON_SPD_MSK
 0x0006

	)

56 
	#IC_CON_SPD_SS
 0x0002

	)

57 
	#IC_CON_SPD_FS
 0x0004

	)

58 
	#IC_CON_SPD_HS
 0x0006

	)

59 
	#IC_CON_MM
 0x0001

	)

62 
	#TAR_ADDR
 0x0050

	)

65 
	#IC_SLAVE_ADDR
 0x0002

	)

68 
	#IC_CMD
 0x0100

	)

69 
	#IC_STOP
 0x0200

	)

70 
	#IC_RESTART
 0x0400

	)

74 
	#IC_MST_ON_HOLD
 0x2000

	)

75 
	#IC_GEN_CALL
 0x0800

	)

76 
	#IC_START_DET
 0x0400

	)

77 
	#IC_STOP_DET
 0x0200

	)

78 
	#IC_ACTIVITY
 0x0100

	)

79 
	#IC_RX_DONE
 0x0080

	)

80 
	#IC_TX_ABRT
 0x0040

	)

81 
	#IC_RD_REQ
 0x0020

	)

82 
	#IC_TX_EMPTY
 0x0010

	)

83 
	#IC_TX_OVER
 0x0008

	)

84 
	#IC_RX_FULL
 0x0004

	)

85 
	#IC_RX_OVER
 0x0002

	)

86 
	#IC_RX_UNDER
 0x0001

	)

89 
	#IC_TL0
 0x00

	)

90 
	#IC_TL1
 0x01

	)

91 
	#IC_TL2
 0x02

	)

92 
	#IC_TL3
 0x03

	)

93 
	#IC_TL4
 0x04

	)

94 
	#IC_TL5
 0x05

	)

95 
	#IC_TL6
 0x06

	)

96 
	#IC_TL7
 0x07

	)

97 
	#IC_RX_TL
 
IC_TL0


	)

98 
	#IC_TX_TL
 
IC_TL0


	)

101 
	#IC_ENABLE_ABORT
 0x0002

	)

102 
	#IC_ENABLE_0B
 0x0001

	)

105 
	#IC_STATUS_SA
 0x0040

	)

106 
	#IC_STATUS_MA
 0x0020

	)

107 
	#IC_STATUS_RFF
 0x0010

	)

108 
	#IC_STATUS_RFNE
 0x0008

	)

109 
	#IC_STATUS_TFE
 0x0004

	)

110 
	#IC_STATUS_TFNF
 0x0002

	)

111 
	#IC_STATUS_ACT
 0x0001

	)

114 
	#IC_DMA_CR_TDMAE
 0x2

	)

115 
	#IC_DMA_CR_RDMAE
 0x1

	)

118 
	#IC_ABRT_7B_ADDR_NOACK
 0x1

	)

121 
	#IC_SPEED_MODE_STANDARD
 1

	)

122 
	#IC_SPEED_MODE_FAST
 2

	)

123 
	#IC_SPEED_MODE_FAST_PLUS
 3

	)

124 
	#IC_SPEED_MODE_MAX
 4

	)

126 
	#I2C_MAX_SPEED
 3400000

	)

127 
	#I2C_FAST_PLUS_SPEED
 1000000

	)

128 
	#I2C_FAST_SPEED
 400000

	)

129 
	#I2C_STANDARD_SPEED
 100000

	)

131 
dw_i2c_öô
(
CK_UINT32
 
id
, CK_UINT32 
•ìd
, 
CK_UINT8
 
öt_í
);

132 
CK_UINT32
 
dw_i2c_£t_bus_•ìd
(CK_UINT32 
id
, CK_UINT32 
•ìd
);

133 
CK_UINT32
 
dw_i2c_ªad
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
, CK_UINT32 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

134 
CK_UINT32
 
dw_i2c_wrôe
(CK_UINT32 
id
, CK_UINT32 
dev
, CK_UINT32 
addr
, CK_UINT32 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
);

135 
CK_UINT32
 
dw_i2c_dma_wrôe
(CK_UINT32 
dma_id
, CK_UINT32 
id
,

136 
CK_UINT32
 
dev
, CK_UINT32 
addr
,

137 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

138 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
tdÃ
,

139 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
);

140 
CK_UINT32
 
dw_i2c_dma_ªad
(CK_UINT32 
dma_id
, CK_UINT32 
id
,

141 
CK_UINT32
 
dev
, CK_UINT32 
addr
,

142 
CK_UINT32
 
Æí
, 
CK_UINT8
 *
buf„r
, CK_UINT32 
Àn
,

143 
CK_UINT8
 
dma_ch
, CK_UINT8 
dma_öå
, CK_UINT8 
rdÃ
);

144 
i2c0_h™dÀ
(
CK_UINT32
 
úq
);

145 
CK_UINT32
 
WM_WrôeRegi°î
(CK_UINT32 
addr
, CK_UINT32 
d©a
);

	@include/intc.h

12 #i‚de‡
_INTR_H_


13 
	#_INTR_H_


	)

15 
	~"d©©y≥.h
"

18 
	#AUTO_MODE
 0

	)

19 
	#VECTOR_SHARE_MODE
 1

	)

20 
	#VECTOR_UNIQUE_MODE
 2

	)

21 
	#CKCORE_VECTOR_SYS
 32

	)

22 
	#CKCORE_VECTOR_AUTOVEC
 10

	)

23 
	#CKCORE_VECTOR_FASTAUTOVEC
 11

	)

24 
	#CKCORE_VECTOR_TLBMISS
 14

	)

25 
	#CKCORE_VECTOR_FASTVEC
 96

	)

28 
	sCKS_IRQ_H™dÀr
{

29 *
	mdev«me
;

30 
CK_UINT32
 
	múqid
;

31 
CK_UINT32
 
	m¥i‹ôy
;

32 (*
	mh™dÀr
)(
CK_UINT32
 
	múqid
);

33 
BOOL
 
	mbÁ°
;

34 
CKS_IRQ_H™dÀr
 *
	m√xt
;

35 }
	tCKSåu˘_IRQH™dÀr
, *
	tPCKSåu˘_IRQH™dÀr
;

38 
CK_UINT32
 
	mid
;

39 
CK_UINT32
 
	múq
;

40 
BOOL
 
	mbÁ°
;

41 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

42 } 
	tCKSåu˘_INTCTe°Info
, * 
	tPCKSåu˘_INTCTe°Info
;

45 vﬁ©ûê
ck˝u_v§_èbÀ
[256];

47 
CK_CPU_EnAŒN‹mÆIrq
();

48 
CK_CPU_DisAŒN‹mÆIrq
();

49 
CK_CPU_EnAŒFa°Irq
();

50 
CK_CPU_DisAŒFa°Irq
();

51 
CK_CPU_E¡îCrôiˇl
(
CK_UINT32
 *
p§
);

52 
CK_CPU_ExôCrôiˇl
(
CK_UINT32
 
p§
);

53 
CK_INTC_EnN‹mÆIrq
(
IN
 
CK_UINT32
 
¥i‹ôy
);

54 
CK_INTC_DisN‹mÆIrq
(
IN
 
CK_UINT32
 
¥i‹ôy
);

55 
CK_INTC_EnFa°Irq
(
IN
 
CK_UINT32
 
¥i‹ôy
);

56 
CK_INTC_DisFa°Irq
(
IN
 
CK_UINT32
 
¥i‹ôy
);

57 
CK_INTC_MaskN‹mÆIrq
(
IN
 
CK_UINT32
 
¥imask
);

58 
CK_INTC_UnMaskN‹mÆIrq
(
IN
 
CK_UINT32
 
¥imask
);

59 
CK_INTC_MaskFa°Irq
(
IN
 
CK_UINT32
 
¥imask
);

60 
CK_INTC_UnMaskFa°Irq
(
IN
 
CK_UINT32
 
¥imask
);

61 
CK_INT32
 
CK_INTC_Reque°Irq
(
PCKSåu˘_IRQH™dÀr
 
¥iqh™dÀr
, 
IN
 
CK_UINT32
 
mode
);

62 
CK_INT32
 
CK_INTC_FªeIrq
(
INOUT
 
PCKSåu˘_IRQH™dÀr
 
¥iqh™dÀr
, 
IN
 
CK_UINT32
 
mode
);

63 
CK_INTC_Inô
(
IN
 
CK_UINT32
 
mode
);

64 
CK_Ex˚±i⁄_Inô
 ();

68 
	#IRQ_HANDLER_START
() \

69 
	`asm
 ( \

108 )

	)

111 
	#IRQ_HANDLER_END
() \

112 
	`asm
 ( \

125 )

	)

132 
	#FIQ_HANDLER_START
()\

133 
	`asm
 ( \

166 )

	)

169 
	#FIQ_HANDLER_END
() \

170 
	`asm
 ( \

177 )

	)

182 
	#IRQ_ID
() \

184 
úqid
; \

185 
	`asm
 ( "mfcr %0,Ösr\n\t" \

188 : "=&r" (
úqid
) \

191 
úqid
; \

192 })

	)

	@include/misc.h

11 #i‚de‡
__MISC_H__


12 
	#__MISC_H__


	)

14 
	~"d©©y≥.h
"

19 * 
touµî
(* 
°r
);

24 * 
tﬁowî
(* 
°r
);

29 
övîtch¨
(
c
);

34 
CK_UINT8
 
asciôobcd
(CK_UINT8 
ascii
);

41 
CK_UINT32
 
asciôohex
(
CK_UINT8
 *
±
);

48 
CK_UINT32
 
asciôodec
(
CK_UINT8
 *
±
);

55 
CK_UINT32
 
asciô⁄um
(
CK_UINT8
 *
±
);

56 
	#©⁄
(
°r
Ë
	`asciô⁄um
(°r)

	)

58 
dñay
 ( 
£c
 );

59 
udñay
 (
CK_UINT64
 
u£c
);

60 
mdñay
 (
CK_UINT32
 
m£c
);

62 
¥ötf
(c⁄° *
f‹m©
,...);

66 
putch¨
(
ch
);

71 
puts
(c⁄° *
±r
);

76 
gëch¨
();

83 
CK_INT32
 
CK_WaôF‹Rïly
();

85 
CK_INT32
 
ªg_ªadbk32
(CK_INT32 
addr
,CK_INT32 
ex≥
);

87 #i‡
DEBUG


88 
	#dbg_¥ötf
 
¥ötf


	)

90 
	#dbg_¥ötf


	)

93 
	#debug_¥ötf
 
¥ötf


	)

95 
	#DEST_NOR_FLASH
 0

	)

96 
	#DEST_NAND_FLASH
 1

	)

97 
	#DEST_MEMORY
 2

	)

	@include/otp.h

2 
	~"ck810.h
"

4 #i‚de‡
___OTP_H___


5 
	#___OTP_H___


	)

7 
	#ADDR_COL
 
OTP_BASE_ADDR
 + 0x8000

	)

8 
	#ADDR_ROW
 
OTP_BASE_ADDR
 + 0x8004

	)

9 
	#PAS
 
OTP_BASE_ADDR
 + 0x8008

	)

10 
	#GLB_CTRL
 
OTP_BASE_ADDR
 + 0x800C

	)

11 
	#TEST_CTRL
 
OTP_BASE_ADDR
 + 0x8010

	)

12 
	#PDIN
 
OTP_BASE_ADDR
 + 0x8014

	)

13 
	#PDOUT
 
OTP_BASE_ADDR
 + 0x8018

	)

14 
	#PDOUT_DUMMY
 
OTP_BASE_ADDR
 + 0x801C

	)

15 
	#OTP_STATUS
 
OTP_BASE_ADDR
 + 0x8020

	)

16 
	#ABNORMAL_STATUS
 
OTP_BASE_ADDR
 + 0x8024

	)

17 
	#OTP_FLAG
 
OTP_BASE_ADDR
 + 0x8028

	)

18 
	#LOW_POWER
 
OTP_BASE_ADDR
 + 0x802C

	)

19 
	#INT_EN
 
OTP_BASE_ADDR
 + 0x8030

	)

20 
	#INT_RAW
 
OTP_BASE_ADDR
 + 0x8034

	)

21 
	#INT_MASK
 
OTP_BASE_ADDR
 + 0x8038

	)

22 
	#INT_STATUS
 
OTP_BASE_ADDR
 + 0x803C

	)

23 
	#INT_CLR
 
OTP_BASE_ADDR
 + 0x8040

	)

	@include/pmu.h

10 #i‚de‡
__VSI_PMU_H_


11 
	#__VSI_PMU_H_


	)

13 
	~"ck810.h
"

14 
	~"d©©y≥.h
"

15 
	~"misc.h
"

17 
	#AI_POWER_GATING_CTL
 0x000

	)

18 
	#CDVS_HARD_PWR_CTL
 0x130

	)

19 
	#CAMB_HARD_PWR_CTL
 0x138

	)

20 
	#VIP_HARD_PWR_CTL
 0x12c

	)

22 
	#AVS_POWER_GATING_CTL
 0x004

	)

23 
	#AVS2_HARD_PWR_CTL
 0x134

	)

25 
	#VC8000E_POWER_GATING_CTL
 0x008

	)

26 
	#VC8000E_HARD_PWR_CTL
 0x118

	)

28 
	#GC620_POWER_GATING_CTL
 0x00c

	)

29 
	#GC620_HARD_PWR_CTL
 0x120

	)

31 
	#ISP_POWER_GATING_CTL
 0x010

	)

32 
	#ISP_HARD_PWR_CTL
 0x128

	)

34 
	#UNICORE_POWER_GATING_CTL
 0x020

	)

35 
	#UNICORE_HARD_PWR_CTL
 0x108

	)

37 
	#CK860_POWER_GATING_CTL
 0x018

	)

38 
	#CK860_HARD_PWR_CTL
 0x100

	)

40 
	#CK810_POWER_GATING_CTL
 0x01c

	)

41 
	#CK810_HARD_PWR_CTL
 0x104

	)

43 
	#PCIE_HARD_PWR_CTL
 0x10c

	)

44 
	#JPEG_HARD_PWR_CTL
 0x110

	)

45 
	#VIDEOIN_HARD_PWR_CTL
 0x114

	)

46 
	#VC8000D_HARD_PWR_CTL
 0x11c

	)

47 
	#DC8000_HARD_PWR_CTL
 0x124

	)

49 
domaö_powî_off
(
u32
 
g©ög
, u32 
pwr
);

50 
domaö_powî_⁄
(
u32
 
g©ög
, u32 
pwr
);

	@include/rsa.h

3 #i‚de‡
___RSA_H___


4 
	#___RSA_H___


	)

6 
	~"ck810.h
"

8 
	#CTRL
 
RSA_BASE_ADDR
+0x000

	)

9 
	#ENTRY_PNT
 
RSA_BASE_ADDR
+0x004

	)

10 
	#RTN_CODE
 
RSA_BASE_ADDR
+0x008

	)

11 
	#BUILD_CONF
 
RSA_BASE_ADDR
+0x00C

	)

12 
	#STACK_PNTR
 
RSA_BASE_ADDR
+0x010

	)

13 
	#INSTR_SINCE_GO
 
RSA_BASE_ADDR
+0x014

	)

14 
	#CONFIG
 
RSA_BASE_ADDR
+0x01C

	)

15 
	#STAT
 
RSA_BASE_ADDR
+0x020

	)

16 
	#FLAGS
 
RSA_BASE_ADDR
+0x024

	)

17 
	#WATCHDOG
 
RSA_BASE_ADDR
+0x028

	)

18 
	#CYCLE_SINCE_GO
 
RSA_BASE_ADDR
+0x02C

	)

19 
	#INDEX_I
 
RSA_BASE_ADDR
+0x030

	)

20 
	#INDEX_J
 
RSA_BASE_ADDR
+0x034

	)

21 
	#INDEX_K
 
RSA_BASE_ADDR
+0x038

	)

22 
	#INDEX_L
 
RSA_BASE_ADDR
+0x03C

	)

23 
	#IRQ_EN
 
RSA_BASE_ADDR
+0x040

	)

24 
	#JMP_PROB
 
RSA_BASE_ADDR
+0x044

	)

25 
	#JMP_PROB_LFSR
 
RSA_BASE_ADDR
+0x048

	)

26 
	#BANK_SW_A
 
RSA_BASE_ADDR
+0x050

	)

27 
	#BANK_SW_B
 
RSA_BASE_ADDR
+0x054

	)

28 
	#BANK_SW_C
 
RSA_BASE_ADDR
+0x058

	)

29 
	#BANK_SW_D
 
RSA_BASE_ADDR
+0x05C

	)

32 
	#PKA_REGION_A
 
RSA_BASE_ADDR
+0x400

	)

33 
	#PKA_REGION_B
 
RSA_BASE_ADDR
+0x800

	)

34 
	#PKA_REGION_C
 
RSA_BASE_ADDR
+0xC00

	)

35 
	#PKA_REGION_D
 
RSA_BASE_ADDR
+0x1000

	)

36 
	#PKA_FW
 
RSA_BASE_ADDR
+0x4000

	)

	@include/rtc.h

1 #i‚de‡
__RTC_H__


2 
	#__RTC_H__


	)

4 
CK_Rtc_Inô
();

5 
CK_Rtc_Te°_N‹mÆ
();

6 
CK_Rtc_Te°_I¡c
();

7 
CK_Rtc_Te°
();

	@include/sci7816.h

3 #i‚de‡
___SCI7816_H___


4 
	#___SCI7816_H___


	)

6 
	~"ck810.h
"

8 
	#SCIMODHW
 
SCI7816_ADDR
 + 0x00

	)

9 
	#SCIMODSW
 
SCI7816_ADDR
 + 0x04

	)

10 
	#SCICTRL
 
SCI7816_ADDR
 + 0x08

	)

11 
	#SCISTAT
 
SCI7816_ADDR
 + 0x0C

	)

12 
	#SCIINTIO1
 
SCI7816_ADDR
 + 0x10

	)

13 
	#SCIINTIO2
 
SCI7816_ADDR
 + 0x14

	)

14 
	#EDCCTRL
 
SCI7816_ADDR
 + 0x18

	)

15 
	#WTCTRL
 
SCI7816_ADDR
 + 0x1C

	)

16 
	#SCIBUFHW
 
SCI7816_ADDR
 + 0x20

	)

17 
	#SCIBUFSW
 
SCI7816_ADDR
 + 0x24

	)

18 
	#ETUDATA
 
SCI7816_ADDR
 + 0x28

	)

19 
	#BGTDATA
 
SCI7816_ADDR
 + 0x2C

	)

20 
	#CWTDATA
 
SCI7816_ADDR
 + 0x30

	)

21 
	#EDCDATA
 
SCI7816_ADDR
 + 0x34

	)

22 
	#SCIMODSW2
 
SCI7816_ADDR
 + 0x38

	)

23 
	#SCIBUFSW2
 
SCI7816_ADDR
 + 0x3C

	)

24 
	#SCIINTRST
 
SCI7816_ADDR
 + 0x40

	)

25 
	#BWTDATA
 
SCI7816_ADDR
 + 0x44

	)

	@include/snd_pcm.h

1 #i‚de‡
_SND_PCM_H_


2 
	#_SND_PCM_H_


	)

4 
	~"d©©y≥.h
"

5 
	~"dw_≠b_i2s.h
"

7 
	#DEF_REC_FMT_CHANNEL
 2

	)

8 
	#DEF_REC_FMT_WIDTH
 32

	)

9 
	#DEF_REC_FMT_SAMPLE
 48000

	)

12 
	mSNDRV_PCM_STREAM_PLAYBACK
 = 0,

13 
	mSNDRV_PCM_STREAM_CAPTURE
,

14 
	mSNDRV_PCM_STREAM_LAST
 = 
SNDRV_PCM_STREAM_CAPTURE
,

17 
	#SNDRV_PCM_TRIGGER_STOP
 0

	)

18 
	#SNDRV_PCM_TRIGGER_START
 1

	)

21 
	sriff_hódî
 {

22 
u8
 
	mriff
[4];

23 
u32
 
	mÊí
;

24 
u8
 
	mwave
[4];

25 
u8
 
	mfmt
[4];

26 
u32
 
	mfûãr
;

29 
	swav_öfo
 {

30 
u16
 
	mf‹m©
;

31 
u16
 
	mch™√l
;

32 
u32
 
	mßm∂e_øã
;

33 
u32
 
	mbyã_≥r_£c
;

34 
u16
 
	mbyã_≥r_ßm∂e
;

35 
u16
 
	mbô_≥r_ßm∂e
;

42 
u8
 
	md©©ag
[4];

43 
u32
 
	md©a_Àn
;

48 
	s¢d_pcm_hw_∑øms
 {

49 
	mch™_ƒ
;

50 
	md©a_width
;

51 
	mßm∂e_øã
;

54 
	s¢d_pcm_sub°ªam
 {

55 *
	m¢d_ba£
;

56 *
	md©a_ba£
;

57 
	m±r
;

58 
	m°ªam
;

59 
	msz_tx
;

60 
	msz_rx
;

61 
	md⁄e
;

62 
	mfmt
;

63 
¢d_pcm_hw_∑øms
 
	m∑øms
;

66 
	si2s_˛k_c⁄fig_d©a
 {

67 
	mm˛k
;

68 
	mch™_ƒ
;

69 
u32
 
	md©a_width
;

70 
u32
 
	mßm∂e_øã
;

	@include/snd_sample.h

1 #i‚de‡
_SND_SAMPLE_H_


2 
	#_SND_SAMPLE_H_


	)

3 
	~"¢d_pcm.h
"

4 
	~"soc_dai.h
"

5 
	~"d©©y≥.h
"

7 
	#SND_SAMPLE_48X32X2


	)

15 
	#SAMPLE_DAI_FMT_PLAYBACK
 (0x4001)

	)

16 
	#SAMPLE_DAI_FMT_CAPTURE
 (0x1001)

	)

18 #i‡
deföed
(
SND_SAMPLE_48X32X2
)

19 c⁄° 
wav_öfo
 
	gßm∂e_öfo
 = {

20 .
f‹m©
 = 0x01,

21 .
	gch™√l
 = 2,

22 .
	gßm∂e_øã
 = 48000,

23 .
	gbyã_≥r_ßm∂e
 = 4,

24 .
	gbô_≥r_ßm∂e
 = 32,

30 
u32
 
	g¢d_ßm∂e
[] = {

30033 #ñi‡
deföed
(
SND_SAMPLE_48X32X1
)

30035 c⁄° 
wav_öfo
 
	gßm∂e_öfo
 = {

30036 .
f‹m©
 = 0x01,

30037 .
	gch™√l
 = 1,

30038 .
	gßm∂e_øã
 = 48000,

30039 .
	gbyã_≥r_ßm∂e
 = 4,

30040 .
	gbô_≥r_ßm∂e
 = 32,

30043 
u32
 
	g¢d_ßm∂e
[] = {

30047 #ñi‡
deföed
(
SND_SAMPLE_48X16X2
)

30049 c⁄° 
wav_öfo
 
ßm∂e_öfo
 = {

30050 .
f‹m©
 = 0x01,

30051 .
	gch™√l
 = 2,

30052 .
	gßm∂e_øã
 = 48000,

30053 .
	gbyã_≥r_ßm∂e
 = 2,

30054 .
	gbô_≥r_ßm∂e
 = 16,

30057 
u16
 
	g¢d_ßm∂e
[] = {

55840 #ñi‡
SND_SAMPLE_48X16X1


55842 c⁄° 
wav_öfo
 
	gßm∂e_öfo
 = {

55843 .
f‹m©
 = 0x01,

55844 .
	gch™√l
 = 1,

55845 .
	gßm∂e_øã
 = 48000,

55846 .
	gbyã_≥r_ßm∂e
 = 2,

55847 .
	gbô_≥r_ßm∂e
 = 16,

55850 
	g¢d_ßm∂e
[] = {

64421 #ñi‡
SND_SAMPLE_44_1X16X2


64423 c⁄° 
wav_öfo
 
	gßm∂e_öfo
 = {

64424 .
f‹m©
 = 0x01,

64425 .
	gch™√l
 = 2,

64426 .
	gßm∂e_øã
 = 44100,

64427 .
	gbyã_≥r_ßm∂e
 = 2,

64428 .
	gbô_≥r_ßm∂e
 = 16,

64431 
u16
 
	g¢d_ßm∂e
[] = {

	@include/soc_dai.h

13 #i‚de‡
__LINUX_SND_SOC_DAI_H


14 
	#__LINUX_SND_SOC_DAI_H


	)

23 
	#SND_SOC_DAIFMT_I2S
 1

	)

24 
	#SND_SOC_DAIFMT_RIGHT_J
 2

	)

25 
	#SND_SOC_DAIFMT_LEFT_J
 3

	)

26 
	#SND_SOC_DAIFMT_DSP_A
 4

	)

27 
	#SND_SOC_DAIFMT_DSP_B
 5

	)

28 
	#SND_SOC_DAIFMT_AC97
 6

	)

29 
	#SND_SOC_DAIFMT_PDM
 7

	)

32 
	#SND_SOC_DAIFMT_MSB
 
SND_SOC_DAIFMT_LEFT_J


	)

33 
	#SND_SOC_DAIFMT_LSB
 
SND_SOC_DAIFMT_RIGHT_J


	)

41 
	#SND_SOC_DAIFMT_CONT
 (1 << 4Ë

	)

42 
	#SND_SOC_DAIFMT_GATED
 (0 << 4Ë

	)

65 
	#SND_SOC_DAIFMT_NB_NF
 (0 << 8Ë

	)

66 
	#SND_SOC_DAIFMT_NB_IF
 (2 << 8Ë

	)

67 
	#SND_SOC_DAIFMT_IB_NF
 (3 << 8Ë

	)

68 
	#SND_SOC_DAIFMT_IB_IF
 (4 << 8Ë

	)

77 
	#SND_SOC_DAIFMT_CBM_CFM
 (1 << 12Ë

	)

78 
	#SND_SOC_DAIFMT_CBS_CFM
 (2 << 12Ë

	)

79 
	#SND_SOC_DAIFMT_CBM_CFS
 (3 << 12Ë

	)

80 
	#SND_SOC_DAIFMT_CBS_CFS
 (4 << 12Ë

	)

82 
	#SND_SOC_DAIFMT_FORMAT_MASK
 0x000f

	)

83 
	#SND_SOC_DAIFMT_CLOCK_MASK
 0x00f0

	)

84 
	#SND_SOC_DAIFMT_INV_MASK
 0x0f00

	)

85 
	#SND_SOC_DAIFMT_MASTER_MASK
 0xf000

	)

90 
	#SND_SOC_CLOCK_IN
 0

	)

91 
	#SND_SOC_CLOCK_OUT
 1

	)

94 
	s¢d_soc_dai_dev
 {

95 
	msys˛k
;

96 *
	m˝u_dai
;

97 *
	mcodec_dai
;

100 
	s¢d_soc_dai_›s
 {

101 (*
	m°¨tup
)(
¢d_soc_dai_dev
 *
	mdai_dev
,

102 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

103 (*
	mhw_∑øms
)(
¢d_soc_dai_dev
 *
	mdai_dev
,

104 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

106 (*
	m¥ï¨e
)(
¢d_soc_dai_dev
 *
	mdai_dev
,

107 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

109 (*
	måiggî
)(
¢d_soc_dai_dev
 *
	mdai_dev
, 
u32
 
	mcmd
,

110 
¢d_pcm_sub°ªam
 *
	msub°ªam
);

	@include/spacc.h

3 #i‚de‡
___SPACC_H___


4 
	#___SPACC_H___


	)

6 
	~"ck810.h
"

8 
	#IRQ_EN
 
SPACC_BASE_ADDR
+0x0

	)

9 
	#IRQ_STAT
 
SPACC_BASE_ADDR
+0x4

	)

10 
	#IRQ_CTRL
 
SPACC_BASE_ADDR
+0x8

	)

11 
	#FIFO_STAT
 
SPACC_BASE_ADDR
+0xC

	)

12 
	#SDMA_BRST_SZ
 
SPACC_BASE_ADDR
+0x10

	)

13 
	#SRC_PTR
 
SPACC_BASE_ADDR
+0x20

	)

14 
	#DST_PTR
 
SPACC_BASE_ADDR
+0x24

	)

15 
	#OFFSET
 
SPACC_BASE_ADDR
+0x28

	)

16 
	#PRE_AAD_LEN
 
SPACC_BASE_ADDR
+0x2C

	)

17 
	#POST_AAD_LEN
 
SPACC_BASE_ADDR
+0x30

	)

18 
	#PROC_LEN
 
SPACC_BASE_ADDR
+0x34

	)

19 
	#ICV_LEN
 
SPACC_BASE_ADDR
+0x38

	)

20 
	#ICV_OFFSET
 
SPACC_BASE_ADDR
+0x3C

	)

21 
	#IV_OFFSET
 
SPACC_BASE_ADDR
+0x40

	)

22 
	#SW_CTRL
 
SPACC_BASE_ADDR
+0x44

	)

23 
	#AUX_INFO
 
SPACC_BASE_ADDR
+0x48

	)

24 
	#CTRL
 
SPACC_BASE_ADDR
+0x4C

	)

25 
	#STAT_POP
 
SPACC_BASE_ADDR
+0x50

	)

26 
	#STATUS
 
SPACC_BASE_ADDR
+0x54

	)

27 
	#STAT_WD_CTRL
 
SPACC_BASE_ADDR
+0x80

	)

28 
	#KEY_SZ
 
SPACC_BASE_ADDR
+0x100

	)

31 
	#CIPH_CTX
 
SPACC_BASE_ADDR
+0x4000

	)

32 
	#HAS_CTX
 
SPACC_BASE_ADDR
+0x8000

	)

34 
	#SRC_PTR_ADDR
 0xf0000000+0x0

	)

35 
	#DST_PTR_ADDR
 0xf0000000+0x8000

	)

37 
	#PLAIN_SRAM_BASE
 0xf0010000

	)

38 
	#CIPH_SRAM_BASE
 0xf0020000

	)

39 
	#DECYP_SRAM_BASE
 0xf0030000

	)

40 
	#PLAIN_SRAM_1_BASE
 0xf00e0000

	)

41 
	#CIPH_SRAM_1_BASE
 0xf0120000

	)

42 
	#DECYP_SRAM_1_BASE
 0xf0160000

	)

44 
	#PLAIN_DDR_BASE
 0x30000000

	)

45 
	#CIPH_DDR_BASE
 0x60000000

	)

46 
	#DECYP_DDR_BASE
 0x90000000

	)

47 
	#DECYP_DDR_1_BASE
 0xd0000000

	)

	@include/spi_nand.h

5 #i‚de‡ 
__SPI_NAND__


6 
	#__SPI_NAND__


	)

8 
	~"d©©y≥.h
"

9 
	~"ötc.h
"

10 
	~"ck810.h
"

13 
	#W25N01GV


	)

14 
	#DEFAULT_NAND_CS
 0

	)

15 
	#SPI_REG_BASE
 
SPI3_BASE


	)

18 
	#SPI_TXREG
 (0x00 + 
SPI_REG_BASE
)

	)

19 
	#SPI_RXREG
 (0x04 + 
SPI_REG_BASE
)

	)

20 
	#SPI_CSTAT
 (0x08 + 
SPI_REG_BASE
)

	)

21 
	#SPI_INTSTAT
 (0x0C + 
SPI_REG_BASE
)

	)

22 
	#SPI_INTEN
 (0x10 + 
SPI_REG_BASE
)

	)

23 
	#SPI_INTCLR
 (0x14 + 
SPI_REG_BASE
)

	)

24 
	#SPI_GCTL
 (0x18 + 
SPI_REG_BASE
)

	)

25 
	#SPI_CCTL
 (0x1¯+ 
SPI_REG_BASE
)

	)

26 
	#SPI_SPBRG
 (0x20 + 
SPI_REG_BASE
)

	)

27 
	#SPI_RXDNR
 (0x24 + 
SPI_REG_BASE
)

	)

28 
	#SPI_SCSR
 (0x28 + 
SPI_REG_BASE
)

	)

29 
	#SPI_MIO_2_3_CTL
 (0x2¯+ 
SPI_REG_BASE
)

	)

31 
	#IO_MASK
 0x80

	)

32 
	#BYTE_MASK
 0xFF

	)

35 
	#PASS
 0

	)

36 
	#FAIL
 1

	)

37 
	#BUSY
 0

	)

38 
	#READY
 1

	)

39 
	#PROTECTED
 0

	)

40 
	#UNPROTECTED
 1

	)

45 
	#SR0_OIP
 0x01

46 
	#SR1_WEL
 0x02

	)

47 
	#SR2_Eø£Faû
 0x04

	)

48 
	#SR2_ProgømFaû
 0x08

	)

50 
	#FLASH_QE_MASK
 0x01

	)

57 #ifde‡
W25N01GV


58 
	#FœshID
 0xeÁa21

	)

59 
	#FœshSize
 0x8000000

60 

	)

62 
	#SIO
 0

	)

63 
	#DIO
 1

	)

64 
	#QIO
 2

	)

68 
	#SPI_Rxavl_4byã
 (1 << 3)

	)

69 
	#SPI_Re˚ive_Em±y
 (0 << 3)

	)

70 
	#SPI_TxFuŒ
 (1 << 2)

	)

71 
	#SPI_TxNoFuŒ
 (0 << 2)

	)

72 
	#SPI_Rxavl
 (1 << 1)

	)

73 
	#SPI_RxEm±y
 (0 << 1)

	)

74 
	#SPI_TxEm±y
 (1 << 0)

	)

75 
	#SPI_TxNoEm±y
 (0 << 0)

	)

78 
	#SPI_TxEm±yI¡
 (1 << 6)

	)

79 
	#SPI_TxNoEm±yI¡
 (0 << 6)

	)

80 
	#SPI_RxFuŒI¡
 (1 << 5)

	)

81 
	#SPI_RxNoFuŒI¡
 (0 << 5)

	)

82 
	#SPI_RxM©chI¡
 (1 << 4)

	)

83 
	#SPI_RxOREº‹
 (1 << 3)

	)

84 
	#SPI_TxUREº‹
 (1 << 2)

	)

85 
	#SPI_RxI¡F
 (1 << 1)

	)

86 
	#SPI_TxI¡F
 (1 << 0)

	)

89 
	#SPI_TxEm±yI¡En
 (1 << 6)

	)

90 
	#SPI_RxFuŒI¡En
 (1 << 5)

	)

91 
	#SPI_RxM©chEn
 (1 << 4)

	)

92 
	#SPI_RxORI¡En
 (1 << 3)

	)

93 
	#SPI_TxURI¡En
 (1 << 2)

	)

94 
	#SPI_RxI¡En
 (1 << 1)

	)

95 
	#SPI_TxI¡En
 (1 << 0)

	)

98 
	#SPI_TxEm±yI¡CÃ
 (1 << 6)

	)

99 
	#SPI_RxFuŒI¡CÃ
 (1 << 5)

	)

100 
	#SPI_RxM©chCÃ
 (1 << 4)

	)

101 
	#SPI_RxORI¡CÃ
 (1 << 3)

	)

102 
	#SPI_TxURI¡CÃ
 (1 << 2)

	)

103 
	#SPI_RxI¡CÃ
 (1 << 1)

	)

104 
	#SPI_TxI¡CÃ
 (1 << 0)

	)

107 
	#SPI_ti_modeDis
 (0 << 14)

	)

108 
	#SPI_ti_modeEn
 (1 << 14)

	)

110 
	#SPI_quad_modeDis
 (0 << 13)

	)

111 
	#SPI_quad_modeEn
 (1 << 13)

	)

113 
	#SPI_duÆ_modeDis
 (0 << 12)

	)

114 
	#SPI_duÆ_modeEn
 (1 << 12)

	)

116 
	#SPI_CS_so·c
 (0 << 10)

	)

117 
	#SPI_CS_h¨dc
 (1 << 10)

	)

118 
	#SPI_DMAmode
 (1 << 9)

	)

119 
	#SPI_N‹mÆmode
 (0 << 9)

	)

120 
	#SPI_Tx4TrigÀvñ
 (1 << 7)

	)

121 
	#SPI_Tx1TrigÀvñ
 (0 << 7)

	)

122 
	#SPI_Rx1TrigÀvñ
 (0 << 5)

	)

123 
	#SPI_Rx4TrigÀvñ
 (1 << 5)

	)

124 
	#SPI_RxEn
 (1 << 4)

	)

125 
	#SPI_RxDis
 (0 << 4)

	)

126 
	#SPI_TxEn
 (1 << 3)

	)

127 
	#SPI_TxDis
 (0 << 3)

	)

128 
	#SPI_Ma°îMode
 (1 << 2)

	)

129 
	#SPI_SœveMode
 (0 << 2)

	)

130 
	#SPI_I¡En
 (1 << 1)

	)

131 
	#SPI_I¡Dis
 (0 << 1)

	)

132 
	#SPI_SPIEn
 (1 << 0)

	)

133 
	#SPI_SPIDis
 (0 << 0)

	)

136 
	#SPI_Lígth8
 (7 << 8)

	)

138 
	#SPI_TxEdgeHS
 (1 << 5)

	)

140 
	#SPI_RxEdgeHS
 (1 << 4)

	)

141 
	#SPI_RxEdgeMS
 (0 << 4)

	)

143 
	#SPI_LSBFú°
 (1 << 2)

	)

144 
	#SPI_MSBFú°
 (0 << 2)

	)

145 
	#SPI_CKPLH
 (1 << 1)

	)

146 
	#SPI_CKPLL
 (0 << 1)

	)

147 
	#SPI_CKPHH
 (1 << 0)

	)

148 
	#SPI_CKPHL
 (0 << 0)

	)

152 
	#FLASH_CMD_RDID
 0x9F

153 
	#FLASH_CMD_GET_FEATURE
 0x0F

154 
	#FLASH_CMD_SET_FEATURE
 0x1F

155 
	#FLASH_CMD_READ
 0x13

156 
	#FLASH_CMD_READ_CACHE
 0x03

157 
	#FLASH_CMD_READ_CACHE2
 0x3B

158 
	#FLASH_CMD_READ_CACHE4
 0x6B

159 
	#FLASH_CMD_WREN
 0x06

160 
	#FLASH_CMD_WRDI
 0x04

161 
	#FLASH_CMD_PP_LOAD
 0x02

162 
	#FLASH_CMD_PP_RAND_LOAD
 0x84

163 
	#FLASH_CMD_4PP_LOAD
 0x32

164 
	#FLASH_CMD_4PP_RAND_LOAD
 0x34

165 
	#FLASH_CMD_PROGRAM_EXEC
 0x10

166 
	#FLASH_CMD_BE
 0xD8

167 
	#FLASH_CMD_ECC_STAT_READ
 0x7C

168 
	#FLASH_CMD_RESET
 0xFF

169 

	)

170 
	#SPI_NAND_TEST_LEN
 64

	)

173 
CK_UINT32
 
	múq
;

174 
BOOL
 
	m›íed
;

175 
CK_UINT32
 
	mtimeout
;

176 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

177 } 
	tCKSåu˘_SpiNANDInfo
, *
	tPCKSåu˘_SpiNANDInfo
;

181 
	mFœsh_Suc˚ss
,

182 
	mFœsh_Busy
,

183 
	mFœsh_O≥øti⁄TimeOut
,

184 
	mFœsh_ProgømFaûed
,

185 
	mFœsh_Eø£Faûed
,

186 
	mFœsh_RódIDFaûed
,

187 
	mFœsh_CmdInvÆid
,

188 
	mFœsh_D©aInvÆid
,

189 
	mFœsh_AddrInvÆid
,

190 
	mFœsh_QuadNŸE«bÀ


191 } 
	tRëu∫Msg
;

194 
CS_High
();

195 
CS_Low
();

196 
In£πDummyCy˛e
(
CK_UINT8
 
dummy_cy˛e
);

197 
SídByã
(
CK_UINT8
 
byã_vÆue
, CK_UINT8 
å™s„r_ty≥
);

198 
CK_UINT8
 
GëByã
(CK_UINT8 
å™s„r_ty≥
);

201 
Inôül_Spi
();

202 
BOOL
 
WaôFœshRódy
();

204 
SídRowAddr
(
CK_UINT32
 
Addªss
, 
CK_UINT8
 
io_mode
);

205 
BOOL
 
IsFœshQIO
();

208 
Rëu∫Msg
 
CMD_RDID
(
CK_UINT32
 *
Idítifiˇti⁄
);

209 
Rëu∫Msg
 
CMD_WREN
();

210 
Rëu∫Msg
 
CMD_WRDI
();

211 
Rëu∫Msg
 
CMD_GET_FEATURE
(
CK_UINT8
 
addr
, CK_UINT8 *
SètusReg
);

212 
Rëu∫Msg
 
CMD_SET_FEATURE
(
CK_UINT8
 
addr
, CK_UINT8 
vÆue
);

213 
Rëu∫Msg
 
CMD_RESET_OP
();

214 
BOOL
 
CheckSètus
(
CK_UINT8
 
CheckFœg
);

215 
Rëu∫Msg
 
CMD_READ
(
CK_UINT32
 
Êash_addªss
);

216 
Rëu∫Msg
 
CMD_READ_CACHE
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
byã_Àngth
, CK_UINT8 
addr_Êag
);

217 
Rëu∫Msg
 
CMD_READ_CACHE2
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
byã_Àngth
, CK_UINT8 
addr_Êag
);

218 
Rëu∫Msg
 
CMD_READ_CACHE4
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
byã_Àngth
, CK_UINT8 
addr_Êag
);

219 
Rëu∫Msg
 
CMD_PP_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
Lígth
, CK_UINT8 
addr_Êag
);

220 
Rëu∫Msg
 
CMD_PP_RAND_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
Lígth
, CK_UINT8 
addr_Êag
);

221 
Rëu∫Msg
 
CMD_4PP_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
Lígth
, CK_UINT8 
addr_Êag
);

222 
Rëu∫Msg
 
CMD_4PP_RAND_LOAD
(
CK_UINT16
 
cﬁ_addªss
, 
CK_UINT8
 *
D©aBuf
, 
CK_UINT32
 
Lígth
, CK_UINT8 
addr_Êag
);

223 
Rëu∫Msg
 
CMD_PROGRAM_EXEC
(
CK_UINT32
 
addªss
);

224 
Rëu∫Msg
 
CMD_BE
(
CK_UINT32
 
Êash_addªss
);

225 
Rëu∫Msg
 
CMD_ECC_STAT_READ
(
CK_UINT8
 *
SètusReg
);

226 
CK_INT32
 
SPINAND_uƒegi°î_i§
();

227 
Rëu∫Msg
 
DMA_Wrôe_NAND
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

228 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

229 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
,

230 
CK_UINT32
 
d°_å_width
, CK_UINT32 
d°_msize
);

231 
DMA_Ród_NAND
(
CK_UINT32
 
dma_id
, 
CK_UINT8
 
•i_id
, CK_UINT32 
addr
,

232 
CK_UINT8
 *
buf
, 
CK_UINT32
 
Àn
,

233 
CK_UINT8
 
dma_ch™√l
, CK_UINT8 
dma_öå
);

	@include/spi_nor.h

14 #i‚de‡
__SPI_H__


15 
	#__SPI_H__


	)

17 
	~"ck810.h
"

18 
	~"d©©y≥.h
"

19 
	~"ötc.h
"

21 
	#SPI_REG_BASE
 
QSPI_BASE


	)

24 
	#SPI_TXREG
 (vﬁ©ûê
CK_UINT32
 *)(0x00 + 
SPI_REG_BASE
)

	)

25 
	#SPI_RXREG
 (vﬁ©ûê
CK_UINT32
 *)(0x04 + 
SPI_REG_BASE
)

	)

26 
	#SPI_CSTAT
 (vﬁ©ûê
CK_UINT32
 *)(0x08 + 
SPI_REG_BASE
)

	)

27 
	#SPI_INTSTAT
 (vﬁ©ûê
CK_UINT32
 *)(0x0C + 
SPI_REG_BASE
)

	)

28 
	#SPI_INTEN
 (vﬁ©ûê
CK_UINT32
 *)(0x10 + 
SPI_REG_BASE
)

	)

29 
	#SPI_INTCLR
 (vﬁ©ûê
CK_UINT32
 *)(0x14 + 
SPI_REG_BASE
)

	)

30 
	#SPI_GCTL
 (vﬁ©ûê
CK_UINT32
 *)(0x18 + 
SPI_REG_BASE
)

	)

31 
	#SPI_CCTL
 (vﬁ©ûê
CK_UINT32
 *)(0x1¯+ 
SPI_REG_BASE
)

	)

32 
	#SPI_SPBRG
 (vﬁ©ûê
CK_UINT32
 *)(0x20 + 
SPI_REG_BASE
)

	)

33 
	#SPI_RXDNR
 (vﬁ©ûê
CK_UINT32
 *)(0x24 + 
SPI_REG_BASE
)

	)

34 
	#SPI_SCSR
 (vﬁ©ûê
CK_UINT32
 *)(0x28 + 
SPI_REG_BASE
)

	)

35 
	#SPI_MIO_2_3_CTL
 (vﬁ©ûê
CK_UINT32
 *)(0x2¯+ 
SPI_REG_BASE
)

	)

38 
	#SPI_Rxavl_4byã
 (1 << 3)

	)

39 
	#SPI_Re˚ive_Em±y
 (0 << 3)

	)

40 
	#SPI_TxFuŒ
 (1 << 2)

	)

41 
	#SPI_TxNoFuŒ
 (0 << 2)

	)

42 
	#SPI_Rxavl
 (1 << 1)

	)

43 
	#SPI_RxEm±y
 (0 << 1)

	)

44 
	#SPI_TxEm±y
 (1 << 0)

	)

45 
	#SPI_TxNoEm±y
 (0 << 0)

	)

48 
	#SPI_TxEm±yI¡
 (1 << 6)

	)

49 
	#SPI_TxNoEm±yI¡
 (0 << 6)

	)

50 
	#SPI_RxFuŒI¡
 (1 << 5)

	)

51 
	#SPI_RxNoFuŒI¡
 (0 << 5)

	)

52 
	#SPI_RxM©chI¡
 (1 << 4)

	)

53 
	#SPI_RxOREº‹
 (1 << 3)

	)

54 
	#SPI_TxUREº‹
 (1 << 2)

	)

55 
	#SPI_RxI¡F
 (1 << 1)

	)

56 
	#SPI_TxI¡F
 (1 << 0)

	)

59 
	#SPI_TxEm±yI¡En
 (1 << 6)

	)

60 
	#SPI_RxFuŒI¡En
 (1 << 5)

	)

61 
	#SPI_RxM©chEn
 (1 << 4)

	)

62 
	#SPI_RxORI¡En
 (1 << 3)

	)

63 
	#SPI_TxURI¡En
 (1 << 2)

	)

64 
	#SPI_RxI¡En
 (1 << 1)

	)

65 
	#SPI_TxI¡En
 (1 << 0)

	)

68 
	#SPI_TxEm±yI¡CÃ
 (1 << 6)

	)

69 
	#SPI_RxFuŒI¡CÃ
 (1 << 5)

	)

70 
	#SPI_RxM©chCÃ
 (1 << 4)

	)

71 
	#SPI_RxORI¡CÃ
 (1 << 3)

	)

72 
	#SPI_TxURI¡CÃ
 (1 << 2)

	)

73 
	#SPI_RxI¡CÃ
 (1 << 1)

	)

74 
	#SPI_TxI¡CÃ
 (1 << 0)

	)

77 
	#SPI_ti_modeDis
 (0 << 14)

	)

78 
	#SPI_ti_modeEn
 (1 << 14)

	)

80 
	#SPI_quad_modeDis
 (0 << 13)

	)

81 
	#SPI_quad_modeEn
 (1 << 13)

	)

83 
	#SPI_duÆ_modeDis
 (0 << 12)

	)

84 
	#SPI_duÆ_modeEn
 (1 << 12)

	)

86 
	#SPI_CS_so·c
 (0 << 10)

	)

87 
	#SPI_CS_h¨dc
 (1 << 10)

	)

88 
	#SPI_DMAmode
 (1 << 9)

	)

89 
	#SPI_N‹mÆmode
 (0 << 9)

	)

90 
	#SPI_Tx4TrigÀvñ
 (1 << 7)

	)

91 
	#SPI_Tx1TrigÀvñ
 (0 << 7)

	)

92 
	#SPI_Rx1TrigÀvñ
 (0 << 5)

	)

93 
	#SPI_Rx4TrigÀvñ
 (1 << 5)

	)

94 
	#SPI_RxEn
 (1 << 4)

	)

95 
	#SPI_RxDis
 (0 << 4)

	)

96 
	#SPI_TxEn
 (1 << 3)

	)

97 
	#SPI_TxDis
 (0 << 3)

	)

98 
	#SPI_Ma°îMode
 (1 << 2)

	)

99 
	#SPI_SœveMode
 (0 << 2)

	)

100 
	#SPI_I¡En
 (1 << 1)

	)

101 
	#SPI_I¡Dis
 (0 << 1)

	)

102 
	#SPI_SPIEn
 (1 << 0)

	)

103 
	#SPI_SPIDis
 (0 << 0)

	)

106 
	#SPI_Lígth32
 (31 << 8)

	)

107 
	#SPI_Lígth8
 (7 << 8)

	)

109 
	#SPI_TxEdgeHS
 (1 << 5)

	)

110 
	#SPI_TxEdgeMS
 (0 << 5)

	)

112 
	#SPI_RxEdgeHS
 (1 << 4)

	)

113 
	#SPI_RxEdgeMS
 (0 << 4)

	)

115 
	#SPI_LSBFú°
 (1 << 2)

	)

116 
	#SPI_MSBFú°
 (0 << 2)

	)

117 
	#SPI_CKPLH
 (1 << 1)

	)

118 
	#SPI_CKPLL
 (0 << 1)

	)

119 
	#SPI_CKPHH
 (1 << 0)

	)

120 
	#SPI_CKPHL
 (0 << 0)

	)

122 
	#SPI_Sœbe0
 (0x„)

	)

125 
	#NOR_CMD_QUAD_RDID
 (0x94)

	)

126 
	#NOR_CMD_DUAL_RDID
 (0x92)

	)

127 
	#NOR_CMD_RDID
 (0x9F)

	)

128 
	#NOR_CMD_REMS
 (0x90)

	)

129 
	#NOR_MID_ADDR
 (0x000000)

	)

130 
	#NOR_DID_ADDR
 (0x000001)

	)

131 
	#NOR_CMD_RSRL
 (0x05)

	)

132 
	#NOR_CMD_RSRM
 (0x35)

	)

133 
	#NOR_CMD_RSRH
 (0x15)

	)

134 
	#NOR_CMD_WSRL
 (0x01)

	)

135 
	#NOR_CMD_WSRM
 (0x31)

	)

136 
	#NOR_CMD_WSRH
 (0x11)

	)

137 
	#NOR_CMD_READ
 (0x03)

	)

138 
	#NOR_DUAL_FAST_READ
 (0x3B)

	)

139 
	#NOR_QUAD_FAST_READ
 (0x6B)

	)

140 
	#NOR_DUAL_READ
 (0xBB)

	)

141 
	#NOR_CMD_FAST_READ
 (0x0b)

	)

142 
	#NOR_CMD_WREN
 (0x06)

	)

143 
	#NOR_CMD_WRDIS
 (0x04)

	)

144 
	#NOR_CMD_SE
 (0x20)

	)

145 
	#NOR_CMD_BE
 (0x52)

	)

146 
	#NOR_CMD_CE
 (0xC7)

	)

147 
	#NOR_CMD_PP
 (0x02)

	)

148 
	#NOR_CMD_QUAD_PP
 (0x32)

	)

149 
	#NOR_CMD_FSRD
 (0xeb)

	)

151 
	#BIT
(
ƒ
Ë(1UL << (ƒ))

	)

153 
	#STATUS_WIP
 
	`BIT
(0)

	)

154 
	#STATUS_WEL
 
	`BIT
(1)

	)

155 
	#STATUS_BP0
 
	`BIT
(2)

	)

156 
	#STATUS_BP1
 
	`BIT
(3)

	)

157 
	#STATUS_BP2
 
	`BIT
(4)

	)

158 
	#STATUS_BP3
 
	`BIT
(5)

	)

159 
	#STATUS_BP4
 
	`BIT
(6)

	)

160 
	#STATUS_SRP0
 
	`BIT
(7)

	)

162 
	#STATUS_SRP1
 
	`BIT
(0)

	)

163 
	#STATUS_QE
 
	`BIT
(1)

	)

164 
	#STATUS_SUS2
 
	`BIT
(2)

	)

165 
	#STATUS_LB1
 
	`BIT
(3)

	)

166 
	#STATUS_LB2
 
	`BIT
(4)

	)

168 
	#NOR_TEST_LEN
 64

	)

169 
	#BYTE_MASK
 0xFF

	)

170 
	#NOR_FLASH_ID
 0xC84018

	)

173 
CK_UINT32
 
	múq
;

174 
BOOL
 
	m›íed
;

175 
CK_UINT32
 
	mtimeout
;

176 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

177 } 
	tCKSåu˘_SpiMInfo
, *
	tPCKSåu˘_SpiMInfo
;

180 
•i_öô
(
CK_UINT8
 
P‹tN
);

181 
•i_ªad_w‹d
(*
buf„r
, 
CK_UINT32
 
numbî
, 
CK_UINT8
 
P‹tN
);

182 
SPI_WRCMD
(
CK_UINT8
 *
buf„r
, CK_UINT8 
Àngth
, CK_UINT8 
P‹tN
);

183 
CK_UINT32
 
SPI_READID
(
CK_UINT8
 
P‹tN
);

184 
CK_UINT32
 
SPI_READMSR
(
CK_UINT8
 
P‹tN
);

185 
CK_UINT32
 
SPI_READLSR
(
CK_UINT8
 
P‹tN
);

186 
SPI_WRITEMSR
(
CK_UINT8
 
P‹tN
, CK_UINT8 
°©us
);

187 
CK_UINT32
 
SPI_READMID
(
CK_UINT8
 
P‹tN
);

188 
•i_Á°_ªad_byã
(
CK_UINT8
 *
d°_d©a
,
CK_UINT32
 
Àngth
,CK_UINT32 
off£t
, CK_UINT8 
P‹tN
);

189 
•i_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
, CK_UINT32 
off£t
, CK_UINT8 
P‹tN
);

190 
•i_wrôe_byã
(
CK_UINT8
 *
d°_mem
, 
CK_UINT32
 
Àngth
, CK_UINT32 
addr
, CK_UINT8 
P‹tN
);

191 
•i_quad_wrôe_byã
(
CK_UINT8
 *
d°_mem
, 
CK_UINT32
 
Àngth
, CK_UINT32 
addr
, CK_UINT8 
P‹tN
);

192 
•i_duÆ_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
, CK_UINT32 
off£t
, CK_UINT8 
P‹tN
);

193 
•i_quad_Á°_ªad_byã
(
CK_UINT8
 *
d°_d©a
, 
CK_UINT32
 
Àngth
, CK_UINT32 
off£t
, CK_UINT8 
P‹tN
);

194 
Êash_checkbusy
(
CK_UINT8
 
P‹tN
);

195 
•i_îa£_£˘‹
(
CK_UINT8
 
P‹tN
, 
CK_UINT32
 
off£t
);

196 
•i_úq_h™dÀr
(
CK_UINT32
 
úq
);

197 
CK_INT32
 
•i_ªgi°î_i§
((*
h™dÀr
)(
CK_UINT32
), 
CK_UINT16
 
¥i‹ôy
, 
BOOL
 
Á°
);

198 
CK_INT32
 
	`•i_uƒegi°î_i§
();

199 
	`•i_ªg_öô
();

200 
	`•i_ªg_wrôe
(
CK_UINT32
 
id
, CK_UINT32 
addr
, CK_UINT32 
vÆ
);

201 
CK_UINT32
 
	`•i_ªg_ªad
(CK_UINT32 
id
, CK_UINT32 
addr
);

202 
BOOL
 
	`•i_quad_íabÀ
(
CK_UINT8
 
P‹tN
);

203 
BOOL
 
	`•i_quad_dißbÀ
(
CK_UINT8
 
P‹tN
);

	@include/spi_slave.h

14 #i‚de‡
__SPI_SLAVE_H__


15 
	#__SPI_SLAVE_H__


	)

17 
	~"ck810.h
"

18 
	~"d©©y≥.h
"

19 
	~"ötc.h
"

21 
	#SPI_TEST_LEN
 128

	)

22 
	#SPI_SLAVE_REG_BASE
 
SPI2_BASE


	)

25 
	#SPI_SLAVE_TXREG
 (0x00 + 
SPI_SLAVE_REG_BASE
)

	)

26 
	#SPI_SLAVE_RXREG
 (0x04 + 
SPI_SLAVE_REG_BASE
)

	)

27 
	#SPI_SLAVE_CSTAT
 (0x08 + 
SPI_SLAVE_REG_BASE
)

	)

28 
	#SPI_SLAVE_INTSTAT
 (0x0C + 
SPI_SLAVE_REG_BASE
)

	)

29 
	#SPI_SLAVE_INTEN
 (0x10 + 
SPI_SLAVE_REG_BASE
)

	)

30 
	#SPI_SLAVE_INTCLR
 (0x14 + 
SPI_SLAVE_REG_BASE
)

	)

31 
	#SPI_SLAVE_GCTL
 (0x18 + 
SPI_SLAVE_REG_BASE
)

	)

32 
	#SPI_SLAVE_CCTL
 (0x1¯+ 
SPI_SLAVE_REG_BASE
)

	)

33 
	#SPI_SLAVE_SPBRG
 (0x20 + 
SPI_SLAVE_REG_BASE
)

	)

34 
	#SPI_SLAVE_RXDNR
 (0x24 + 
SPI_SLAVE_REG_BASE
)

	)

35 
	#SPI_SLAVE_SCSR
 (0x28 + 
SPI_SLAVE_REG_BASE
)

	)

36 
	#SPI_SLAVE_MIO_2_3_CTL
 (0x2¯+ 
SPI_SLAVE_REG_BASE
)

	)

39 
	#SPI_Rxavl_4byã
 (1 << 3)

	)

40 
	#SPI_Re˚ive_Em±y
 (0 << 3)

	)

41 
	#SPI_TxFuŒ
 (1 << 2)

	)

42 
	#SPI_TxNoFuŒ
 (0 << 2)

	)

43 
	#SPI_Rxavl
 (1 << 1)

	)

44 
	#SPI_RxEm±y
 (0 << 1)

	)

45 
	#SPI_TxEm±y
 (1 << 0)

	)

46 
	#SPI_TxNoEm±y
 (0 << 0)

	)

49 
	#SPI_TxEm±yI¡
 (1 << 6)

	)

50 
	#SPI_TxNoEm±yI¡
 (0 << 6)

	)

51 
	#SPI_RxFuŒI¡
 (1 << 5)

	)

52 
	#SPI_RxNoFuŒI¡
 (0 << 5)

	)

53 
	#SPI_RxM©chI¡
 (1 << 4)

	)

54 
	#SPI_RxOREº‹
 (1 << 3)

	)

55 
	#SPI_TxUREº‹
 (1 << 2)

	)

56 
	#SPI_RxI¡F
 (1 << 1)

	)

57 
	#SPI_TxI¡F
 (1 << 0)

	)

60 
	#SPI_TxEm±yI¡En
 (1 << 6)

	)

61 
	#SPI_RxFuŒI¡En
 (1 << 5)

	)

62 
	#SPI_RxM©chEn
 (1 << 4)

	)

63 
	#SPI_RxORI¡En
 (1 << 3)

	)

64 
	#SPI_TxURI¡En
 (1 << 2)

	)

65 
	#SPI_RxI¡En
 (1 << 1)

	)

66 
	#SPI_TxI¡En
 (1 << 0)

	)

69 
	#SPI_TxEm±yI¡CÃ
 (1 << 6)

	)

70 
	#SPI_RxFuŒI¡CÃ
 (1 << 5)

	)

71 
	#SPI_RxM©chCÃ
 (1 << 4)

	)

72 
	#SPI_RxORI¡CÃ
 (1 << 3)

	)

73 
	#SPI_TxURI¡CÃ
 (1 << 2)

	)

74 
	#SPI_RxI¡CÃ
 (1 << 1)

	)

75 
	#SPI_TxI¡CÃ
 (1 << 0)

	)

78 
	#SPI_ti_modeDis
 (0 << 14)

	)

79 
	#SPI_ti_modeEn
 (1 << 14)

	)

81 
	#SPI_quad_modeDis
 (0 << 13)

	)

82 
	#SPI_quad_modeEn
 (1 << 13)

	)

84 
	#SPI_duÆ_modeDis
 (0 << 12)

	)

85 
	#SPI_duÆ_modeEn
 (1 << 12)

	)

87 
	#SPI_CS_so·c
 (0 << 10)

	)

88 
	#SPI_CS_h¨dc
 (1 << 10)

	)

89 
	#SPI_DMAmode
 (1 << 9)

	)

90 
	#SPI_N‹mÆmode
 (0 << 9)

	)

91 
	#SPI_Tx4TrigÀvñ
 (1 << 7)

	)

92 
	#SPI_Tx1TrigÀvñ
 (0 << 7)

	)

93 
	#SPI_Rx1TrigÀvñ
 (0 << 5)

	)

94 
	#SPI_Rx4TrigÀvñ
 (1 << 5)

	)

95 
	#SPI_RxEn
 (1 << 4)

	)

96 
	#SPI_RxDis
 (0 << 4)

	)

97 
	#SPI_TxEn
 (1 << 3)

	)

98 
	#SPI_TxDis
 (0 << 3)

	)

99 
	#SPI_Ma°îMode
 (1 << 2)

	)

100 
	#SPI_SœveMode
 (0 << 2)

	)

101 
	#SPI_I¡En
 (1 << 1)

	)

102 
	#SPI_I¡Dis
 (0 << 1)

	)

103 
	#SPI_SPIEn
 (1 << 0)

	)

104 
	#SPI_SPIDis
 (0 << 0)

	)

107 
	#SPI_Lígth32
 (31 << 8)

	)

108 
	#SPI_Lígth8
 (7 << 8)

	)

110 
	#SPI_TxEdgeHS
 (1 << 5)

	)

111 
	#SPI_TxEdgeMS
 (0 << 5)

	)

113 
	#SPI_RxEdgeHS
 (1 << 4)

	)

114 
	#SPI_RxEdgeMS
 (0 << 4)

	)

116 
	#SPI_LSBFú°
 (1 << 2)

	)

117 
	#SPI_MSBFú°
 (0 << 2)

	)

118 
	#SPI_CKPLH
 (1 << 1)

	)

119 
	#SPI_CKPLL
 (0 << 1)

	)

120 
	#SPI_CKPHH
 (1 << 0)

	)

121 
	#SPI_CKPHL
 (0 << 0)

	)

124 
	#MODE0
 (0x01)

125 
	#MODE1
 (0x00)

126 
	#MODE2
 (0x03)

127 
	#MODE3
 (0x02)

128 

	)

130 
CK_UINT32
 
	múq
;

131 
BOOL
 
	m›íed
;

132 
CK_UINT32
 
	mtimeout
;

133 
CKSåu˘_IRQH™dÀr
 
	múqh™dÀr
;

134 } 
	tCKSåu˘_SpiSInfo
, *
	tPCKSåu˘_SpiSInfo
;

136 
•i_¶ave_öô
(
CK_UINT8
 
mode
, 
CK_UINT16
 
øã
);

	@include/stc.h

3 #i‚de‡
___STC_H___


4 
	#___STC_H___


	)

6 
	~"ck810.h
"

8 
	#VSI_STC_ENABLE
 
CK_STC_ADDR
 + 0x000

	)

9 
	#VSI_STC_EN
 
	`BIT
(0)

	)

10 
	#VSI_STC_CLK_DIVIDER
 
CK_STC_ADDR
 + 0x004

	)

11 
	#VSI_STC_TIMER_INIT_VALUE_L
 
CK_STC_ADDR
 + 0x008

	)

12 
	#VSI_STC_TIMER_INIT_VALUE_H
 
CK_STC_ADDR
 + 0x00c

	)

13 
	#VSI_STC_TIMER_CUR_VALUE_L
 
CK_STC_ADDR
 + 0x010

	)

14 
	#VSI_STC_TIMER_CUR_VALUE_H
 
CK_STC_ADDR
 + 0x014

	)

	@include/syns_mmc.h

15 #i‚de‡
__SYNS_MMC_H__


16 
	#__SYNS_MMC_H__


	)

18 
	~"d©©y≥.h
"

22 
	#BLOCK_SIZE
 512

	)

24 
	#NO_CARD_ERR
 16

	)

25 
	#UNUSABLE_ERR
 17

	)

26 
	#COMM_ERR
 18

	)

27 
	#SWITCH_ERR
 20

	)

29 
	#MMC_CMD_GO_IDLE_STATE
 0

	)

30 
	#MMC_CMD_SEND_OP_COND
 1

	)

31 
	#MMC_CMD_ALL_SEND_CID
 2

	)

32 
	#MMC_CMD_SET_RELATIVE_ADDR
 3

	)

33 
	#MMC_CMD_SET_DSR
 4

	)

34 
	#MMC_CMD_SWITCH
 6

	)

35 
	#MMC_CMD_SELECT_CARD
 7

	)

36 
	#MMC_CMD_SEND_EXT_CSD
 8

	)

37 
	#MMC_CMD_SEND_CSD
 9

	)

38 
	#MMC_CMD_SEND_CID
 10

	)

39 
	#MMC_CMD_STOP_TRANSMISSION
 12

	)

40 
	#MMC_CMD_SEND_STATUS
 13

	)

41 
	#MMC_CMD_SET_BLOCKLEN
 16

	)

42 
	#MMC_CMD_READ_SINGLE_BLOCK
 17

	)

43 
	#MMC_CMD_READ_MULTIPLE_BLOCK
 18

	)

44 
	#MMC_CMD_SET_BLOCK_COUNT
 23

	)

45 
	#MMC_CMD_WRITE_SINGLE_BLOCK
 24

	)

46 
	#MMC_CMD_WRITE_MULTIPLE_BLOCK
 25

	)

47 
	#MMC_CMD_ERASE_GROUP_START
 35

	)

48 
	#MMC_CMD_ERASE_GROUP_END
 36

	)

49 
	#MMC_CMD_ERASE
 38

	)

50 
	#MMC_CMD_APP_CMD
 55

	)

51 
	#MMC_CMD_SPI_READ_OCR
 58

	)

52 
	#MMC_CMD_SPI_CRC_ON_OFF
 59

	)

53 
	#MMC_CMD_RES_MAN
 62

	)

55 
	#MMC_CMD62_ARG1
 0xeÁc62ec

	)

56 
	#MMC_CMD62_ARG2
 0xcb´a7

	)

59 
	#SD_CMD_SEND_RELATIVE_ADDR
 3

	)

60 
	#SD_CMD_SWITCH_FUNC
 6

	)

61 
	#SD_CMD_SEND_IF_COND
 8

	)

62 
	#SD_CMD_SWITCH_UHS18V
 11

	)

64 
	#SD_CMD_APP_SET_BUS_WIDTH
 6

	)

65 
	#SD_CMD_ERASE_WR_BLK_START
 32

	)

66 
	#SD_CMD_ERASE_WR_BLK_END
 33

	)

67 
	#SD_CMD_APP_SEND_OP_COND
 41

	)

68 
	#SD_CMD_APP_SEND_SCR
 51

	)

70 
	#OCR_BUSY
 0x80000000

	)

71 
	#OCR_HCS
 0x40000000

	)

72 
	#OCR_VOLTAGE_MASK
 0x007FFF80

	)

73 
	#OCR_ACCESS_MODE
 0x60000000

	)

75 
	#SDHCI_MAX_DIV_SPEC_200
 256

	)

76 
	#SDHCI_MAX_DIV_SPEC_300
 2046

	)

79 
	#SDCARD
 0x00

	)

80 
	#EMMCCARD
 0x01

	)

82 
	#MMC_RSP_PRESENT
 (1 << 0)

	)

83 
	#MMC_RSP_136
 (1 << 1Ë

	)

84 
	#MMC_RSP_CRC
 (1 << 2Ë

	)

85 
	#MMC_RSP_BUSY
 (1 << 3Ë

	)

86 
	#MMC_RSP_OPCODE
 (1 << 4Ë

	)

88 
	#MMC_RSP_NONE
 (0)

	)

89 
	#MMC_RSP_R1
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
)

	)

90 
	#MMC_RSP_R1b
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
| \

91 
MMC_RSP_BUSY
)

	)

92 
	#MMC_RSP_R2
 (
MMC_RSP_PRESENT
|
MMC_RSP_136
|
MMC_RSP_CRC
)

	)

93 
	#MMC_RSP_R3
 (
MMC_RSP_PRESENT
)

	)

94 
	#MMC_RSP_R4
 (
MMC_RSP_PRESENT
)

	)

95 
	#MMC_RSP_R5
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
)

	)

96 
	#MMC_RSP_R6
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
)

	)

97 
	#MMC_RSP_R7
 (
MMC_RSP_PRESENT
|
MMC_RSP_CRC
|
MMC_RSP_OPCODE
)

	)

99 
	#MMC_DATA_READ
 1

	)

100 
	#MMC_DATA_WRITE
 2

	)

105 
	#SDHCI_QUIRK_32BIT_DMA_ADDR
 (1 << 0)

	)

106 
	#SDHCI_QUIRK_REG32_RW
 (1 << 1)

	)

107 
	#SDHCI_QUIRK_BROKEN_R1B
 (1 << 2)

	)

108 
	#SDHCI_QUIRK_NO_HISPD_BIT
 (1 << 3)

	)

109 
	#SDHCI_QUIRK_BROKEN_VOLTAGE
 (1 << 4)

	)

110 
	#SDHCI_QUIRK_NO_CD
 (1 << 5)

	)

111 
	#SDHCI_QUIRK_WAIT_SEND_CMD
 (1 << 6)

	)

112 
	#SDHCI_QUIRK_NO_SIMULT_VDD_AND_POWER
 (1 << 7)

	)

113 
	#SDHCI_QUIRK_USE_WIDE8
 (1 << 8)

	)

118 
	#SDHCI_DEFAULT_BOUNDARY_SIZE
 (512 * 1024)

	)

119 
	#SDHCI_DEFAULT_BOUNDARY_ARG
 (7)

	)

125 
	#SDHCI_DMA_ADDRESS
 0x00

	)

126 
	#SDHCI_ARGUMENT2
 
SDHCI_DMA_ADDRESS


	)

128 
	#SDHCI_BLOCK_SIZE
 0x04

	)

129 
	#SDHCI_MAKE_BLKSZ
(
dma
, 
blksz
Ë(((dm®& 0x7Ë<< 12Ë| (blksz & 0xFFF))

	)

131 
	#SDHCI_BLOCK_COUNT
 0x06

	)

133 
	#SDHCI_ARGUMENT
 0x08

	)

135 
	#SDHCI_TRANSFER_MODE
 0x0C

	)

136 
	#SDHCI_TRNS_DMA
 0x01

	)

137 
	#SDHCI_TRNS_BLK_CNT_EN
 0x02

	)

138 
	#SDHCI_TRNS_AUTO_CMD12
 0x04

	)

139 
	#SDHCI_TRNS_AUTO_CMD23
 0x08

	)

140 
	#SDHCI_TRNS_READ
 0x10

	)

141 
	#SDHCI_TRNS_MULTI
 0x20

	)

143 
	#SDHCI_COMMAND
 0x0E

	)

144 
	#SDHCI_CMD_RESP_MASK
 0x03

	)

145 
	#SDHCI_CMD_CRC
 0x08

	)

146 
	#SDHCI_CMD_INDEX
 0x10

	)

147 
	#SDHCI_CMD_DATA
 0x20

	)

148 
	#SDHCI_CMD_ABORTCMD
 0xC0

	)

150 
	#SDHCI_CMD_RESP_NONE
 0x00

	)

151 
	#SDHCI_CMD_RESP_LONG
 0x01

	)

152 
	#SDHCI_CMD_RESP_SHORT
 0x02

	)

153 
	#SDHCI_CMD_RESP_SHORT_BUSY
 0x03

	)

155 
	#SDHCI_MAKE_CMD
(
c
, 
f
Ë(((¯& 0xffË<< 8Ë| (‡& 0xff))

	)

156 
	#SDHCI_GET_CMD
(
c
Ë((c>>8Ë& 0x3f)

	)

158 
	#SDHCI_RESPONSE
 0x10

	)

159 
	#CARD_READY
 0x80000000

	)

161 
	#SDHCI_BUFFER
 0x20

	)

163 
	#SDHCI_PRESENT_STATE
 0x24

	)

164 
	#SDHCI_CMD_INHIBIT
 0x00000001

	)

165 
	#SDHCI_DATA_INHIBIT
 0x00000002

	)

166 
	#SDHCI_DOING_WRITE
 0x00000100

	)

167 
	#SDHCI_DOING_READ
 0x00000200

	)

168 
	#SDHCI_SPACE_AVAILABLE
 0x00000400

	)

169 
	#SDHCI_DATA_AVAILABLE
 0x00000800

	)

170 
	#SDHCI_CARD_PRESENT
 0x00010000

	)

171 
	#SDHCI_WRITE_PROTECT
 0x00080000

	)

172 
	#SDHCI_DATA_LVL_MASK
 0x00F00000

	)

173 
	#SDHCI_DATA_LVL_SHIFT
 20

	)

174 
	#SDHCI_DATA_0_LVL_MASK
 0x00100000

	)

175 
	#SDHCI_CMD_LVL
 0x01000000

	)

177 
	#SDHCI_HOST_CONTROL
 0x28

	)

178 
	#SDHCI_CTRL_LED
 0x01

	)

179 
	#SDHCI_CTRL_4BITBUS
 0x02

	)

180 
	#SDHCI_CTRL_HISPD
 0x04

	)

181 
	#SDHCI_CTRL_DMA_MASK
 0x18

	)

182 
	#SDHCI_CTRL_SDMA
 0x00

	)

183 
	#SDHCI_CTRL_ADMA1
 0x08

	)

184 
	#SDHCI_CTRL_ADMA32
 0x10

	)

185 
	#SDHCI_CTRL_ADMA64
 0x18

	)

186 
	#SDHCI_CTRL_8BITBUS
 0x20

	)

187 
	#SDHCI_CTRL_CDTEST_INS
 0x40

	)

188 
	#SDHCI_CTRL_CDTEST_EN
 0x80

	)

190 
	#SDHCI_POWER_CONTROL
 0x29

	)

191 
	#SDHCI_POWER_ON
 0x01

	)

192 
	#SDHCI_POWER_180
 0x0A

	)

193 
	#SDHCI_POWER_300
 0x0C

	)

194 
	#SDHCI_POWER_330
 0x0E

	)

196 
	#SDHCI_BLOCK_GAP_CONTROL
 0x2A

	)

198 
	#SDHCI_WAKE_UP_CONTROL
 0x2B

	)

199 
	#SDHCI_WAKE_ON_INT
 0x01

	)

200 
	#SDHCI_WAKE_ON_INSERT
 0x02

	)

201 
	#SDHCI_WAKE_ON_REMOVE
 0x04

	)

203 
	#SDHCI_CLOCK_CONTROL
 0x2C

	)

204 
	#SDHCI_DIVIDER_SHIFT
 8

	)

205 
	#SDHCI_DIVIDER_HI_SHIFT
 6

	)

206 
	#SDHCI_DIV_MASK
 0xFF

	)

207 
	#SDHCI_DIV_MASK_LEN
 8

	)

208 
	#SDHCI_DIV_HI_MASK
 0x300

	)

209 
	#SDHCI_PROG_CLOCK_MODE
 0x0020

	)

210 
	#SDHCI_CLOCK_CARD_EN
 0x0004

	)

211 
	#SDHCI_CLOCK_INT_STABLE
 0x0002

	)

212 
	#SDHCI_CLOCK_INT_EN
 0x0001

	)

214 
	#SDHCI_TIMEOUT_CONTROL
 0x2E

	)

216 
	#SDHCI_SOFTWARE_RESET
 0x2F

	)

217 
	#SDHCI_RESET_ALL
 0x01

	)

218 
	#SDHCI_RESET_CMD
 0x02

	)

219 
	#SDHCI_RESET_DATA
 0x04

	)

221 
	#SDHCI_INT_STATUS
 0x30

	)

222 
	#SDHCI_INT_ENABLE
 0x34

	)

223 
	#SDHCI_SIGNAL_ENABLE
 0x38

	)

224 
	#SDHCI_INT_RESPONSE
 0x00000001

	)

225 
	#SDHCI_INT_DATA_END
 0x00000002

	)

226 
	#SDHCI_INT_BLK_GAP
 0x00000004

	)

227 
	#SDHCI_INT_DMA_END
 0x00000008

	)

228 
	#SDHCI_INT_SPACE_AVAIL
 0x00000010

	)

229 
	#SDHCI_INT_DATA_AVAIL
 0x00000020

	)

230 
	#SDHCI_INT_CARD_INSERT
 0x00000040

	)

231 
	#SDHCI_INT_CARD_REMOVE
 0x00000080

	)

232 
	#SDHCI_INT_CARD_INT
 0x00000100

	)

233 
	#SDHCI_INT_RETUNE
 0x00001000

	)

234 
	#SDHCI_INT_CQE
 0x00004000

	)

235 
	#SDHCI_INT_ERROR
 0x00008000

	)

236 
	#SDHCI_INT_TIMEOUT
 0x00010000

	)

237 
	#SDHCI_INT_CRC
 0x00020000

	)

238 
	#SDHCI_INT_END_BIT
 0x00040000

	)

239 
	#SDHCI_INT_INDEX
 0x00080000

	)

240 
	#SDHCI_INT_DATA_TIMEOUT
 0x00100000

	)

241 
	#SDHCI_INT_DATA_CRC
 0x00200000

	)

242 
	#SDHCI_INT_DATA_END_BIT
 0x00400000

	)

243 
	#SDHCI_INT_BUS_POWER
 0x00800000

	)

244 
	#SDHCI_INT_ACMD12ERR
 0x01000000

	)

245 
	#SDHCI_INT_ADMA_ERROR
 0x02000000

	)

247 
	#SDHCI_INT_NORMAL_MASK
 0x00007FFF

	)

248 
	#SDHCI_INT_ERROR_MASK
 0xFFFF8000

	)

250 
	#SDHCI_INT_CMD_MASK
 (
SDHCI_INT_RESPONSE
 | 
SDHCI_INT_TIMEOUT
 | \

251 
SDHCI_INT_CRC
 | 
SDHCI_INT_END_BIT
 | 
SDHCI_INT_INDEX
)

	)

252 
	#SDHCI_INT_DATA_MASK
 (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
 | \

253 
SDHCI_INT_DATA_AVAIL
 | 
SDHCI_INT_SPACE_AVAIL
 | \

254 
SDHCI_INT_DATA_TIMEOUT
 | 
SDHCI_INT_DATA_CRC
 | \

255 
SDHCI_INT_DATA_END_BIT
 | 
SDHCI_INT_ADMA_ERROR
 | \

256 
SDHCI_INT_BLK_GAP
)

	)

257 
	#SDHCI_INT_ALL_MASK
 (()-1)

	)

259 
	#SDHCI_CQE_INT_ERR_MASK
 ( \

260 
SDHCI_INT_ADMA_ERROR
 | 
SDHCI_INT_BUS_POWER
 | 
SDHCI_INT_DATA_END_BIT
 | \

261 
SDHCI_INT_DATA_CRC
 | 
SDHCI_INT_DATA_TIMEOUT
 | 
SDHCI_INT_INDEX
 | \

262 
SDHCI_INT_END_BIT
 | 
SDHCI_INT_CRC
 | 
SDHCI_INT_TIMEOUT
)

	)

264 
	#SDHCI_CQE_INT_MASK
 (
SDHCI_CQE_INT_ERR_MASK
 | 
SDHCI_INT_CQE
)

	)

266 
	#SDHCI_ACMD12_ERR
 0x3C

	)

268 
	#SDHCI_HOST_CONTROL2
 0x3E

	)

269 
	#SDHCI_CTRL_UHS_MASK
 0x0007

	)

270 
	#SDHCI_CTRL_UHS_SDR12
 0x0000

	)

271 
	#SDHCI_CTRL_UHS_SDR25
 0x0001

	)

272 
	#SDHCI_CTRL_UHS_SDR50
 0x0002

	)

273 
	#SDHCI_CTRL_UHS_SDR104
 0x0003

	)

274 
	#SDHCI_CTRL_UHS_DDR50
 0x0004

	)

275 
	#SDHCI_CTRL_HS400
 0x0005

	)

276 
	#SDHCI_CTRL_VDD_180
 0x0008

	)

277 
	#SDHCI_CTRL_DRV_TYPE_MASK
 0x0030

	)

278 
	#SDHCI_CTRL_DRV_TYPE_B
 0x0000

	)

279 
	#SDHCI_CTRL_DRV_TYPE_A
 0x0010

	)

280 
	#SDHCI_CTRL_DRV_TYPE_C
 0x0020

	)

281 
	#SDHCI_CTRL_DRV_TYPE_D
 0x0030

	)

282 
	#SDHCI_CTRL_EXEC_TUNING
 0x0040

	)

283 
	#SDHCI_CTRL_TUNED_CLK
 0x0080

	)

284 
	#SDHCI_CTRL_PRESET_VAL_ENABLE
 0x8000

	)

286 
	#SDHCI_CAPABILITIES
 0x40

	)

287 
	#SDHCI_CAPABILITIES_1
 0x40

	)

288 
	#SDHCI_TIMEOUT_CLK_MASK
 0x0000003F

	)

289 
	#SDHCI_TIMEOUT_CLK_SHIFT
 0

	)

290 
	#SDHCI_TIMEOUT_CLK_UNIT
 0x00000080

	)

291 
	#SDHCI_CLOCK_BASE_MASK
 0x00003F00

	)

292 
	#SDHCI_CLOCK_V3_BASE_MASK
 0x0000FF00

	)

293 
	#SDHCI_CLOCK_BASE_SHIFT
 8

	)

294 
	#SDHCI_MAX_BLOCK_MASK
 0x00030000

	)

295 
	#SDHCI_MAX_BLOCK_SHIFT
 16

	)

296 
	#SDHCI_CAN_DO_8BIT
 0x00040000

	)

297 
	#SDHCI_CAN_DO_ADMA2
 0x00080000

	)

298 
	#SDHCI_CAN_DO_ADMA1
 0x00100000

	)

299 
	#SDHCI_CAN_DO_HISPD
 0x00200000

	)

300 
	#SDHCI_CAN_DO_SDMA
 0x00400000

	)

301 
	#SDHCI_CAN_DO_SUSPEND
 0x00800000

	)

302 
	#SDHCI_CAN_VDD_330
 0x01000000

	)

303 
	#SDHCI_CAN_VDD_300
 0x02000000

	)

304 
	#SDHCI_CAN_VDD_180
 0x04000000

	)

305 
	#SDHCI_CAN_64BIT
 0x10000000

	)

307 
	#SDHCI_SUPPORT_SDR50
 0x00000001

	)

308 
	#SDHCI_SUPPORT_SDR104
 0x00000002

	)

309 
	#SDHCI_SUPPORT_DDR50
 0x00000004

	)

310 
	#SDHCI_DRIVER_TYPE_A
 0x00000010

	)

311 
	#SDHCI_DRIVER_TYPE_C
 0x00000020

	)

312 
	#SDHCI_DRIVER_TYPE_D
 0x00000040

	)

313 
	#SDHCI_RETUNING_TIMER_COUNT_MASK
 0x00000F00

	)

314 
	#SDHCI_RETUNING_TIMER_COUNT_SHIFT
 8

	)

315 
	#SDHCI_USE_SDR50_TUNING
 0x00002000

	)

316 
	#SDHCI_RETUNING_MODE_MASK
 0x0000C000

	)

317 
	#SDHCI_RETUNING_MODE_SHIFT
 14

	)

318 
	#SDHCI_CLOCK_MUL_MASK
 0x00FF0000

	)

319 
	#SDHCI_CLOCK_MUL_SHIFT
 16

	)

320 
	#SDHCI_SUPPORT_HS400
 0x80000000

	)

322 
	#SDHCI_CAPABILITIES_2
 0x44

	)

324 
	#SDHCI_MAX_CURRENT
 0x48

	)

325 
	#SDHCI_MAX_CURRENT_LIMIT
 0xFF

	)

326 
	#SDHCI_MAX_CURRENT_330_MASK
 0x0000FF

	)

327 
	#SDHCI_MAX_CURRENT_330_SHIFT
 0

	)

328 
	#SDHCI_MAX_CURRENT_300_MASK
 0x00FF00

	)

329 
	#SDHCI_MAX_CURRENT_300_SHIFT
 8

	)

330 
	#SDHCI_MAX_CURRENT_180_MASK
 0xFF0000

	)

331 
	#SDHCI_MAX_CURRENT_180_SHIFT
 16

	)

332 
	#SDHCI_MAX_CURRENT_MULTIPLIER
 4

	)

336 
	#SDHCI_SET_ACMD12_ERROR
 0x50

	)

337 
	#SDHCI_SET_INT_ERROR
 0x52

	)

339 
	#SDHCI_ADMA_ERROR
 0x54

	)

343 
	#SDHCI_ADMA_ADDRESS
 0x58

	)

344 
	#SDHCI_ADMA_ADDRESS_HI
 0x5C

	)

348 
	#SDHCI_PRESET_FOR_SDR12
 0x66

	)

349 
	#SDHCI_PRESET_FOR_SDR25
 0x68

	)

350 
	#SDHCI_PRESET_FOR_SDR50
 0x6A

	)

351 
	#SDHCI_PRESET_FOR_SDR104
 0x6C

	)

352 
	#SDHCI_PRESET_FOR_DDR50
 0x6E

	)

353 
	#SDHCI_PRESET_FOR_HS400
 0x74

	)

354 
	#SDHCI_PRESET_DRV_MASK
 0xC000

	)

355 
	#SDHCI_PRESET_DRV_SHIFT
 14

	)

356 
	#SDHCI_PRESET_CLKGEN_SEL_MASK
 0x400

	)

357 
	#SDHCI_PRESET_CLKGEN_SEL_SHIFT
 10

	)

358 
	#SDHCI_PRESET_SDCLK_FREQ_MASK
 0x3FF

	)

359 
	#SDHCI_PRESET_SDCLK_FREQ_SHIFT
 0

	)

361 
	#SDHCI_SLOT_INT_STATUS
 0xFC

	)

363 
	#SDHCI_HOST_VERSION
 0xFE

	)

364 
	#SDHCI_VENDOR_VER_MASK
 0xFF00

	)

365 
	#SDHCI_VENDOR_VER_SHIFT
 8

	)

366 
	#SDHCI_SPEC_VER_MASK
 0x00FF

	)

367 
	#SDHCI_SPEC_VER_SHIFT
 0

	)

368 
	#SDHCI_SPEC_100
 0

	)

369 
	#SDHCI_SPEC_200
 1

	)

370 
	#SDHCI_SPEC_300
 2

	)

376 
	#MMC_VDD_165_195
 0x00000080

	)

377 
	#MMC_VDD_20_21
 0x00000100

	)

378 
	#MMC_VDD_21_22
 0x00000200

	)

379 
	#MMC_VDD_22_23
 0x00000400

	)

380 
	#MMC_VDD_23_24
 0x00000800

	)

381 
	#MMC_VDD_24_25
 0x00001000

	)

382 
	#MMC_VDD_25_26
 0x00002000

	)

383 
	#MMC_VDD_26_27
 0x00004000

	)

384 
	#MMC_VDD_27_28
 0x00008000

	)

385 
	#MMC_VDD_28_29
 0x00010000

	)

386 
	#MMC_VDD_29_30
 0x00020000

	)

387 
	#MMC_VDD_30_31
 0x00040000

	)

388 
	#MMC_VDD_31_32
 0x00080000

	)

389 
	#MMC_VDD_32_33
 0x00100000

	)

390 
	#MMC_VDD_33_34
 0x00200000

	)

391 
	#MMC_VDD_34_35
 0x00400000

	)

392 
	#MMC_VDD_35_36
 0x00800000

	)

402 
	ssdhci_ho°
 {

403 
	mid
;

404 
	miﬂddr
;

405 
	mˇrd_ty≥
;

406 
	múq
;

407 
u32
 
	mbus_width
;

408 
u32
 
	m˛ock
;

409 
u32
 
	mvﬁèges
;

410 
	mvîsi⁄
;

411 
	mquúks
;

412 
u32
 
	mhas_öô
;

413 
	m›_c⁄d_≥ndög
;

414 
	möô_ö_¥ogªss
;

415 
u32
 
	mˇps
;

416 
u32
 
	mˇps1
;

417 
u32
 
	mf_mö
;

418 
u32
 
	mf_max
;

419 
u32
 
	mo¸
;

420 
u32
 
	mrˇ
;

421 
u32
 
	ms¸
[2];

422 
u32
 
	mcsd
[4];

423 
u32
 
	mcid
[4];

424 
	mhigh_ˇ∑côy
;

483 
	smmc_cmd
 {

484 
u16
 
	mcmdidx
;

485 
u32
 
	mª•_ty≥
;

486 
u32
 
	mcmd¨g
;

487 
u32
 
	mª•⁄£
[4];

490 
	smmc_d©a
 {

492 *
	mde°
;

493 c⁄° *
	m§c
;

495 
u32
 
	mÊags
;

496 
u32
 
	mblocks
;

497 
u32
 
	mblocksize
;

500 
sdhci_wrôñ
(
sdhci_ho°
 *
ho°
, 
u32
 
vÆ
, 
ªg
);

501 
sdhci_wrôew
(
sdhci_ho°
 *
ho°
, 
u16
 
vÆ
, 
ªg
);

502 
sdhci_wrôeb
(
sdhci_ho°
 *
ho°
, 
u8
 
vÆ
, 
ªg
);

503 
u32
 
sdhci_ªadl
(
sdhci_ho°
 *
ho°
, 
ªg
);

504 
u16
 
sdhci_ªadw
(
sdhci_ho°
 *
ho°
, 
ªg
);

505 
u8
 
sdhci_ªadb
(
sdhci_ho°
 *
ho°
, 
ªg
);

506 
sdhci_cmd_d⁄e
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
);

507 
sdhci_£nd_comm™d
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
,

508 
u32
 
Êags
);

509 
mmc_£nd_if_c⁄d
(
sdhci_ho°
 *
ho°
);

510 
sd_£nd_›_c⁄d
(
sdhci_ho°
 *
ho°
);

511 
mmc_£nd_›_c⁄d
(
sdhci_ho°
 *
ho°
);

512 
mmc_£nd_›_c⁄d_ôî
(
sdhci_ho°
 *
ho°
, 
u£_¨g
);

513 
sdhci_ª£t
(
sdhci_ho°
 *
ho°
, 
u8
 
mask
);

514 
sdhci_£t_˛ock
(
sdhci_ho°
 *
ho°
, 
˛ock
);

515 
mmc_£nd_cmd
(
sdhci_ho°
 *
ho°
, 
mmc_cmd
 *
cmd
, 
u32
 
Êags
);

516 
mmc_go_idÀ
(
sdhci_ho°
 *
ho°
);

517 
mmc_°¨t_öô
(
sdhci_ho°
 *
ho°
);

518 
mmc_com∂ëe_öô
(
sdhci_ho°
 *
ho°
);

519 
sdhci_£tup_ho°
(
sdhci_ho°
 *
ho°
);

520 
bﬂrd_mmc_powî_öô
();

521 
sdhci_i§
();

	@include/sys_ctrl.h

3 #i‚de‡
___SYS_CTRL_H___


4 
	#___SYS_CTRL_H___


	)

6 
	~"ck810.h
"

8 
	#DDR_REMAP_CTL
 
CK_SYS_CTRL_ADDR
 + 0x134

	)

	@include/timer.h

13 #i‚de‡
__TIMER_H__


14 
	#__TIMER_H__


	)

16 
	~"d©©y≥.h
"

23 
	mTIMER0
,

24 
	mTIMER1
,

25 
	mTIMER2
,

26 
	mTIMER3
,

27 
	mTIMER4
,

28 
	mTIMER5
,

29 
	mTIMER6
,

30 
	mTIMER7


31 } 
	tCKEnum_Timî_Devi˚
;

33 
	#TIMERID_MAX
 8

	)

38 
CK_Timî_Inô
();

47 
CK_INT32
 
CK_Timî_O≥n
(
CKEnum_Timî_Devi˚
 
timîid
,

48 (*
h™dÀr
)(), 
CK_UINT16
 
¥i‹ôy
, 
BOOL
 
bÁ°
);

55 
CK_INT32
 
CK_Timî_Clo£
(
CKEnum_Timî_Devi˚
 
timîid
);

63 
CK_INT32
 
CK_Timî_Sèπ
(
CKEnum_Timî_Devi˚
 
timîid
, 
CK_UINT32
 
timeout
);

64 
CK_INT32
 
CK_Timî_Sèπ_Fªe_Ru¬ög
(
CKEnum_Timî_Devi˚
 
timîid
);

71 
CK_UINT32
 
CK_Timî_St›
(
CKEnum_Timî_Devi˚
 
timîid
);

77 
BOOL
 
CK_Timî_CÀ¨IrqFœg
(
CKEnum_Timî_Devi˚
 
timîid
);

85 
CK_UINT32
 
CK_Timî_CuºítVÆue
(
CKEnum_Timî_Devi˚
 
timîid
);

87 
öô_time0
();

88 
timî_udñay
(
CK_UINT64
 
u£c
);

	@include/uart.h

11 #i‚de‡
__UART_H__


12 
	#__UART_H__


	)

14 
	~"d©©y≥.h
"

20 
	#BAUDRATE
 19200

	)

24 
	#CONFIG_TERMINAL_UART
 
UART0


	)

28 
	mB4800
=4800,

29 
	mB9600
=9600,

30 
	mB14400
=14400,

31 
	mB19200
=19200,

32 
	mB56000
=56000,

33 
	mB38400
=38400,

34 
	mB57600
=57600,

35 
	mB115200
=115200

36 }
	tCK_U¨t_Baudøã
;

40 
	mUART0
,

41 
	mUART1
,

42 
	mUART2
,

43 
	mUART3
,

44 
	mUART4


45 }
	tCK_U¨t_Devi˚
;

48 
	mWORD_SIZE_5
,

49 
	mWORD_SIZE_6
,

50 
	mWORD_SIZE_7
,

51 
	mWORD_SIZE_8


52 }
	tCK_U¨t_W‹dSize
;

55 
	mODD
,

56 
	mEVEN
,

57 
	mNONE


58 }
	tCK_U¨t_P¨ôy
;

61 
	mLCR_STOP_BIT_1
,

62 
	mLCR_STOP_BIT_2


63 }
	tCK_U¨t_St›Bô
;

67 
	mCK_U¨t_CTRL_C
 = 0,

68 
	mCK_U¨t_FømeEº‹
 = 1,

69 
	mCK_U¨t_P¨ôyEº‹
 = 2

70 }
	tCKEnum_U¨t_Eº‹
;

72 
CK_INT32
 
CK_U¨t_DrivîInô
();

83 
CK_INT32
 
CK_U¨t_O≥n
–
CK_U¨t_Devi˚
 
u¨tid
,(*
h™dÀr
)(
CK_INT8
 
îr‹
));

90 
CK_INT32
 
	`CK_U¨t_Clo£
–
CK_U¨t_Devi˚
 
u¨tid
);

100 
CK_INT32
 
	`CK_U¨t_Ch™geBaudøã
(

101 
CK_U¨t_Devi˚
 
u¨tid
, 
CK_U¨t_Baudøã
 
baudøã
);

112 
CK_INT32
 
	`CK_U¨t_SëP¨ôy
(

113 
CK_U¨t_Devi˚
 
u¨tid
, 
CK_U¨t_P¨ôy
 
∑rôy
);

125 
CK_INT32
 
	`CK_U¨t_SëSt›Bô
(

126 
CK_U¨t_Devi˚
 
u¨tid
, 
CK_U¨t_St›Bô
 
°›bô
);

137 
CK_INT32
 
	`CK_U¨t_SëW‹dSize
(
CK_U¨t_Devi˚
 
u¨tid
, 
CK_U¨t_W‹dSize
 
w‹dsize
);

149 
CK_INT32
 
	`CK_U¨t_SëTXMode
–
CK_U¨t_Devi˚
 
u¨tid
, 
BOOL
 
bQuîy
);

161 
CK_INT32
 
	`CK_U¨t_SëRXMode
–
CK_U¨t_Devi˚
 
u¨tid
, 
BOOL
 
bQuîy
);

170 
CK_INT32
 
	`CK_U¨t_GëCh¨
(
CK_U¨t_Devi˚
 
u¨tid
, 
CK_UINT8
 *
ch
);

179 
CK_INT32
 
	`CK_U¨t_PutCh¨
(
CK_U¨t_Devi˚
 
u¨tid
, 
CK_UINT8
 
ch
);

190 
CK_INT32
 
	`CK_U¨t_Inô
–
CK_U¨t_Devi˚
 
u¨tid
);

194 
CK_INT32
 
	`CK_U¨t_C⁄figDMA
(

195 
CK_U¨t_Devi˚
 
u¨tid
,

196 *
buf„r
,

197 
BOOL
 
btx
,

198 
CK_INT32
 
txrxsize
,

199 (*
h™dÀr
)()

204 
	`CK_U¨t_SèπDMARxTx
 ();

206 
	`CK_UART_CÀ¨RxBuf„r
(
CK_U¨t_Devi˚
 
u¨tid
);

208 
	`CK_U¨t_Së_DMA_Mode
(
CK_U¨t_Devi˚
 
u¨tid
, 
CK_UINT32
 
mode
);

211 
CK_INT32
 
	`CK_U¨t_GëCh¨UnBlock
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, 
OUT
 
CK_UINT8
 *
ch
);

219 
	`CK_U¨t_Së_FIFO_Ac˚ss_Mode
(
CK_U¨t_Devi˚
 
u¨tid
);

229 
CK_INT32
 
	`CK_U¨t_Ród_TFR
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, IN 
CK_UINT32
 
Àn
,

230 
OUT
 
CK_UINT8
 *
buf
);

240 
CK_INT32
 
	`CK_U¨t_Wrôe_RFW
(
IN
 
CK_U¨t_Devi˚
 
u¨tid
, IN 
CK_UINT32
 
Àn
,

241 
OUT
 
CK_UINT8
 *
buf
);

	@include/wdt.h

14 #i‚de‡
__WDT_H__


15 
	#__WDT_H__


	)

17 
	~"d©©y≥.h
"

24 
	mWDT_CK860
,

25 
	mWDT_CK810
,

26 
	mWDT_UNI


27 } 
	tCKEnum_WDT_Devi˚
;

33 
CK_WDT_Inô
();

42 
CK_INT32
 
CK_WDT_O≥n
 ( 
CKEnum_WDT_Devi˚
 
wdtid
,

43 
IN
 (*
h™dÀr
)(),

44 
IN
 
CK_UINT16
 
¥i‹ôy
,

45 
IN
 
BOOL
 
bÁ°
);

52 
CK_INT32
 
CK_WDT_Clo£
 ( 
CKEnum_WDT_Devi˚
 
wdtid
 );

60 
CK_INT32
 
CK_WDT_Sèπ
 ( 
CKEnum_WDT_Devi˚
 
wdtid
,

61 
IN
 
CK_UINT32
 
mode
,

62 
IN
 
CK_UINT32
 
timeout
);

68 
CK_WDT_CÀ¨IrqFœg
 ( 
CKEnum_WDT_Devi˚
 
wdtid
 );

76 
CK_UINT32
 
CK_WDT_CuºítVÆue
 ( 
CKEnum_WDT_Devi˚
 
wdtid
 );

83 
CK_WDT_Cou¡î_RST
 ( 
CKEnum_WDT_Devi˚
 
wdtid
 );

	@lib/circlebuffer.c

7 
	~"d©©y≥.h
"

8 
	~"cú˛ebuf„r.h
"

18 
	$CK_Cú˛eBuf„r_Inô
(

19 
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,

20 
CK_UINT8
 * 
buf„r
,

21 
CK_INT32
 
buf„rsize


24 
pcú˛ebuf„r
->
Buf„r
 = 
buf„r
;

25 
pcú˛ebuf„r
->
Buf„rSize
 = 
buf„rsize
;

26 
pcú˛ebuf„r
->
RódPå
 =Öcú˛ebuf„r->
WrôePå
 = 0;

27 
	}
}

35 
	$CK_Cú˛eBuf„r_CÀ¨
–
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
)

37 
pcú˛ebuf„r
->
RódPå
 =Öcú˛ebuf„r->
WrôePå
 = 0;

38 
	}
}

46 
BOOL
 
	$CK_Cú˛eBuf„r_IsEm±y
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
)

48 –
pcú˛ebuf„r
->
RódPå
 =pcú˛ebuf„r->
WrôePå
);

49 
	}
}

56 
BOOL
 
	$CK_Cú˛eBuf„r_IsFuŒ
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
)

58 ((
pcú˛ebuf„r
->
WrôePå
 + 1Ë%Öcú˛ebuf„r->
Buf„rSize
 =pcú˛ebuf„r->
RódPå
);

59 
	}
}

69 
BOOL
 
	$CK_Cú˛eBuf„r_Ród
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,
CK_UINT8
* 
ch
)

71 i‡(
	`CK_Cú˛eBuf„r_IsEm±y
(
pcú˛ebuf„r
))

72  
FALSE
;

73 *
ch
 = 
pcú˛ebuf„r
->
Buf„r
[pcú˛ebuf„r->
RódPå
];

74 
pcú˛ebuf„r
->
RódPå
 = (pcú˛ebuf„r->RódPå + 1Ë%Öcú˛ebuf„r->
Buf„rSize
;

75  
TRUE
;

76 
	}
}

85 
BOOL
 
	$CK_Cú˛eBuf„r_Wrôe
(
PCKSåu˘_Cú˛eBuf„r
 
pcú˛ebuf„r
,
CK_UINT8
 
ch
)

87 if(
	`CK_Cú˛eBuf„r_IsFuŒ
(
pcú˛ebuf„r
))

88  
FALSE
;

89 
pcú˛ebuf„r
->
Buf„r
[pcú˛ebuf„r->
WrôePå
] = 
ch
;

90 
pcú˛ebuf„r
->
WrôePå
 = (pcú˛ebuf„r->WrôePå + 1Ë%Öcú˛ebuf„r->
Buf„rSize
;

91  
SUCCESS
;

93 
	}
}

	@lib/misc.c

9 
	~<u¨t.h
>

10 
	~<timî.h
>

11 
	~<d©©y≥.h
>

13 
CK_U¨t_Devi˚
 
c⁄sﬁeu¨t
;

20 
	$övîtch¨
(
c
)

22 if(
c
 <= 'z' && c >= 'a')

23  (
c
 - 32);

24 if(
c
 < 'Z' && c > 'A')

25  (
c
 + 32);

26  
c
;

27 
	}
}

34 *
	$tﬁowî
(*
°r
)

36 *
s°r
 = 
°r
;

38 i‡(!
°r
)

40  
°r
;

42  ; *
s°r
 ; sstr++)

44 if(*
s°r
<='Z' && *sstr >= 'A')

46 *
s°r
 = *sstr + 32;

49  
°r
;

50 
	}
}

57 *
	$touµî
(*
°r
)

59 *
s°r
 = 
°r
;

61 i‡(!
°r
)

63  
°r
;

65  ; *
s°r
 ; sstr++)

67 if(*
s°r
 <= 'z' && *sstr >= 'a')

69 *
s°r
 = *sstr - 32;

72  
°r
;

73 
	}
}

80 
CK_UINT8
 
	$asciôobcd
(
CK_UINT8
 
ascii
)

82 
CK_UINT8
 
bcd
 = 0;

83 if((
ascii
 >= '0') && (ascii <= '9'))

85 
bcd
 = 
ascii
 - '0';

87 if((
ascii
 >= 'A') && (ascii <= 'F'))

89 
bcd
 = 
ascii
 - 'A' + 10;

91 if((
ascii
 >= 'a') && (ascii <= 'f'))

93 
bcd
 = 
ascii
 - 'a' + 10;

96  
bcd
;

97 
	}
}

105 
CK_UINT32
 
	$asciôohex
(
CK_UINT8
 *
±
)

107 
CK_UINT32
 
hex
=0;

108 
CK_UINT8
 
bcd
;

110 i‡(!
±
)

114 *
±
)

116 
bcd
 = 
	`asciôobcd
(*
±
++);

117 
hex
 = hex << 4;

118 
hex
 = hex + 
bcd
;

121  
hex
;

122 
	}
}

130 
CK_UINT32
 
	$asciôodec
(
CK_UINT8
 *
±
)

132 
CK_UINT32
 
dec
=0;

133 
CK_UINT8
 
bcd
;

135 i‡(!
±
)

140 *
±
)

142 
bcd
 = 
	`asciôobcd
(*
±
++);

143 
dec
*=10;

144 
dec
 = de¯+ 
bcd
;

147  
dec
;

148 
	}
}

156 
CK_UINT32
 
	$asciô⁄um
(
CK_UINT8
 *
±
)

158 i‡(!
±
)

163 if((
±
[0]=='0')&&(pt[1]=='x'||pt[1]=='X'))

164  
	`asciôohex
(&
±
[2]);

165  
	`asciôodec
(
±
);

166 
	}
}

172 
	$dñay
 ( 
£c
 )

174 
i
;

175 vﬁ©ûê
j
;

177 
i
 = 0x00; i < 
£c
 * 100; i ++) {

178 
j
 = 
i
;

179 
j
;

181 
	}
}

184 
	$udñay
(
CK_UINT64
 
u£c
)

186 
	`timî_udñay
(
u£c
);

187 
	}
}

189 
	$mdñay
(
CK_UINT32
 
m£c
)

191 
i
;

192 
i
 = 0; i < 
m£c
; i++) {

193 
	`timî_udñay
(1000);

196 
	}
}

202 
CK_INT32
 
	$CK_WaôF‹Rïly
()

204 
CK_UINT8
 
i
;

205 
CK_UINT8
 
ch
;

206 
™swî
[20];

208 
i
 = 0; i < 20; i++)

210 
™swî
[
i
] = '\0';

212 
i
 = 0;

215 if(
SUCCESS
 =
	`CK_U¨t_GëCh¨
(
c⁄sﬁeu¨t
, &
ch
))

218 i‡(
ch
 == '\n' || ch == '\r')

220 
™swî
[
i
] = '\0';

223 if(
ch
 == '\b')

225 if(
i
 > 0)

227 
i
--;

228 
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,
ch
);

233 
™swî
[
i
++] = 
ch
;

234 
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,
ch
);

238 if((
i
 =1Ë&& (
™swî
[0] == 'y'))

242 if((
i
 =1Ë&& (
™swî
[0] == 'n'))

247 
	}
}

249 
	$CK_C⁄sﬁe_CÆlBack
(
CK_INT8
 
îr‹
)

251 i‡(
îr‹
 =
CK_U¨t_CTRL_C
) {

252 
	`CK_UART_CÀ¨RxBuf„r
(
c⁄sﬁeu¨t
);

254 
	}
}

256 
	$CK_C⁄sﬁe_Inô
()

258 
	`CK_U¨t_O≥n
(
c⁄sﬁeu¨t
, 
CK_C⁄sﬁe_CÆlBack
);

259 
	}
}

261 
	$CK_C⁄sﬁe_Clo£
() {

262 
	`CK_U¨t_Clo£
(
c⁄sﬁeu¨t
);

263 
	}
}

265 
CK_INT32
 
	$ªg_ªadbk32
(
CK_INT32
 
addr
,CK_INT32 
ex≥
) {

266 i‡(
	`ªad_mªg32
(
addr
Ë=
ex≥
)

270 
	}
}

	@lib/printf.c

2 
	~"°d¨g.h
"

3 
	~"u¨t.h
"

5 
CK_U¨t_Devi˚
 
c⁄sﬁeu¨t
;

15 *
	$numto°rög
 (
uq
, 
ba£
, *
buf
 )

17 *
p
, *
p0
;

18 
n
 = 0, 
i
;

20 
p
 = 
buf
;

21 *
buf
 = 0;

24 *
buf
 ++ = "0123456789abcdef"[
uq
 % 
ba£
];

25 
n
++;

26 } 
uq
 /
ba£
);

27 
p
[
n
] = '\0';

29 
p0
 = ++
buf
;

30 i‡(
ba£
 =16 && 
n
 < 8)

32 
i
 = 0; i < 8 - 
n
; i++)

34 
p0
[
i
] = '0';

36 ; 
i
 < 8; i++)

38 
p0
[
i
] = 
p
[8 - i - 1];

40 
p0
[8] = '\0';

44 
i
 = 0; i < 
n
; i++)

46 
p0
[
i
] = 
p
[
n
 - i - 1];

48 
p0
[
n
] = '\0';

51  (
p0
);

52 
	}
}

58 
	$putch¨
(
ch
)

60 
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,
ch
Ë!
SUCCESS
);

62 
	}
}

68 
	$puts
(c⁄° *
±r
)

70 *
±r
 !='\0')

72 i‡(
SUCCESS
 =
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,*
±r
))

73 
±r
++;

75 
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,'\n');

77 
	}
}

83 
	$puts_wôhout_íãr
(c⁄° *
±r
)

85 *
±r
 !='\0')

87 i‡(
SUCCESS
 =
	`CK_U¨t_PutCh¨
(
c⁄sﬁeu¨t
,*
±r
))

88 
±r
++;

91 
	}
}

97 
	$gëch¨
()

99 
CK_UINT8
 
ch
;

100 
	`CK_U¨t_GëCh¨
(
c⁄sﬁeu¨t
,&
ch
Ë!
SUCCESS
);

101  
ch
;

102 
	}
}

107 
	$¥ötf
 ( c⁄° *
fmt
, ... )

109 c⁄° *
s
;

110 
vÆue
;

111 
CK_UINT32
 
±r
;

112 
ch
, 
buf
[64], *
pbuf
;

113 
va_li°
 
≠
;

115 
	`va_°¨t
(
≠
, 
fmt
);

116 *
fmt
)

118 i‡(*
fmt
 != '%')

120 
	`putch¨
(*
fmt
++);

124 *++
fmt
)

127 
s
 = 
	`va_¨g
(
≠
, const *);

128 
	`puts_wôhout_íãr
(
s
);

131 
vÆue
 = 
	`va_¨g
(
≠
, );

132 i‡(
vÆue
 < 0)

134 
	`putch¨
('-');

135 
vÆue
 = 0 - value;

137 
pbuf
 = 
	`numto°rög
(()
vÆue
, 10, 
buf
);

138 
	`puts_wôhout_íãr
(
pbuf
);

141 
vÆue
 = 
	`va_¨g
(
≠
,);

142 
pbuf
 = 
	`numto°rög
(()
vÆue
, 16, 
buf
);

143 
	`puts_wôhout_íãr
(
pbuf
);

146 
ch
 = ()
	`va_¨g
(
≠
, );

147 
pbuf
 = &
ch
;

148 
	`putch¨
(*
pbuf
);

159 
±r
 = (Ë
	`va_¨g
(
≠
, *);

160 
pbuf
 = 
	`numto°rög
(
±r
, 16, 
buf
);

161 
	`puts_wôhout_íãr
(
pbuf
);

164 
	`putch¨
(*
fmt
);

167 
fmt
 ++;

169 
	`va_íd
(
≠
);

171 
	}
}

	@main.c

11 
	~"d©©y≥.h
"

12 
	~"ck810.h
"

13 
	~"u¨t.h
"

14 
	~"misc.h
"

15 
	~"ötc.h
"

16 
	~"timî.h
"

17 
	~"πc.h
"

18 
	~"pmu.h
"

20 
CK_U¨t_Devi˚
 
	gc⁄sﬁeu¨t
 = 
CONFIG_TERMINAL_UART
;

22 
CK_C⁄sﬁe_Inô
();

23 
CK_Ex˚±i⁄_Inô
();

24 
CK_INTC_Inô
(
IN
 
CK_UINT32
 
mode
);

25 
CK_UART_Te°
();

26 
CK_INTC_Te°
();

27 
CK_Timî_Te°
();

28 
CK_W©chdog_Te°
();

29 
≠b_ac˚ss_ã°
();

30 
SPI_Ma°î_GD25Q128_APP
(
CK_UINT8
 
P‹tN
);

31 
SPI_Ma°î_w25n01_Aµ
();

32 
CK_SDIO_Te°
();

33 
CK_AHBDMA_Te°
(
CK_UINT32
 
id
);

34 
öô_time0
();

35 
CK_Gpio_Te°
();

36 
CK_RSA_Te°
();

37 
CK_RSA_Reg_RW_Te°
();

38 
CK_SPACC_Reg_RW_Te°
();

39 
CK_SPACC_Te°
();

40 
CK_I2C_Te°
(
CK_UINT8
 
i2c_id
);

41 
CK_CPU_L2_Te°
();

42 
CK_STC_Te°
();

43 
CK_OTP_Te°
();

44 
CK_I2S_PTS_Te°
();

45 
CK_SCI7816_Te°
();

46 
CK_APTS_Te°
();

47 
CK_nfc_ã°
();

48 
CK_PWM_ã°
();

49 
CK_CPU_BoŸ_Te°
();

50 
CK_AXIDMA_Te°
();

51 
Audio_Te°
();

52 
ù_˛k_g©ög_ã°
();

53 
domaö_powî_ã°
();

54 
sdøm_öô
();

55 
∂l_öô
();

56 
dump_∂l_ªgs
();

57 
dump_˛k_‰eq
();

58 
ISP_ã°
();

59 
pö_mux_ã°
();

60 
DDR_ã°
();

61 
CK_DDR_I¡îÀave_Te°
();

62 
CK_MIPI_Te°
();

63 
CK_I2C_Te°
(
CK_UINT8
 
i2c_id
);

64 
CK_I2C_Sœve_Te°
();

69 
	$CK_Drivîs_Inô
()

71 
	`CK_U¨t_DrivîInô
();

72 #i‚de‡
CONFIG_INTC_DIS


73 
	`CK_INTC_Inô
(
AUTO_MODE
);

75 
	}
}

80 
	$maö
 ( )

82 
ã°_id
;

84 #i‡
CONFIG_IS_ASIC


85 
	`∂l_öô
();

88 
	`CK_Drivîs_Inô
();

89 #i‚de‡
CONFIG_INTC_DIS


90 
	`CK_Ex˚±i⁄_Inô
();

92 
	`CK_C⁄sﬁe_Inô
();

93 
	`öô_time0
();

95 #i‡
CONFIG_IS_ASIC


100 
	`¥ötf
 ("\nBare-metalÅest begin ...\n");

101 
	`¥ötf
 ("buûdÅimê%†%s\n", 
__DATE__
, 
__TIME__
);

103 
	`¥ötf
("\nplease inputÅest module ID:\n");

104 
	`¥ötf
("0 -- Synopsys UART\n");

105 
	`¥ötf
("1 -- C-SKY Interrupt Controller\n");

106 
	`¥ötf
("2 -- Synopsys AHB DMA Controller\n");

107 
	`¥ötf
("3 -- Synopsys GPIO Controller\n");

108 
	`¥ötf
("4 -- DesignWare DW_apb_timers\n");

109 
	`¥ötf
("5 -- Synopsys Watchdog Timer\n");

110 
	`¥ötf
("6 -- Synopsys I2C\n");

111 
	`¥ötf
("7 -- VSI STC\n");

112 
	`¥ötf
("8 -- VSI RTC\n");

113 
	`¥ötf
("9 -- VSI SPI controller with GD25Q128 NOR flash\n");

114 
	`¥ötf
("a -- VSI SPI controller with w25n01 NAND flash\n");

115 
	`¥ötf
("b -- Synopsys SDIO Controller\n");

116 
	`¥ötf
("c -- VSI I2S PTS\n");

117 
	`¥ötf
("d -- DDR init\n");

118 
	`¥ötf
("e -- VSI SCI7816\n");

119 
	`¥ötf
("f -- MIPI\n");

120 
	`¥ötf
("g -- VSI APTS\n");

121 
	`¥ötf
("h -- DDR Interleave\n");

122 
	`¥ötf
("i -- VSI OTP controller\n");

123 
	`¥ötf
("j -- CK860 L2 Cache\n");

124 
	`¥ötf
("k -- DDRÅest\n");

125 
	`¥ötf
("l -- Sub-system Test 2\n");

126 
	`¥ötf
("m --ápb_access_test\n");

127 
	`¥ötf
("n -- PWM Test\n");

128 
	`¥ötf
("o -- RSA Test\n");

129 
	`¥ötf
("p -- SPACC Test\n");

130 
	`¥ötf
("q -- NFC Test\n");

131 
	`¥ötf
("r -- Slave CPU Boot Test\n");

132 
	`¥ötf
("s -- Synopsys AXI-DMA Controller\n");

133 
	`¥ötf
("t -- Audio Test\n");

134 
	`¥ötf
("u -- Domain Power Test\n");

135 
	`¥ötf
("v -- Clock Gating Test\n");

136 
	`¥ötf
("w -- ISP Test SDI Test\n");

137 
	`¥ötf
("x -- Pin MUX Test\n");

138 
	`¥ötf
(">");

139 
ã°_id
 = 
	`gëch¨
();

140 
	`putch¨
(
ã°_id
);

141 i‡(
ã°_id
 >= '0' &&Åest_id <= 'x') {

145 
	`¥ötf
 ("\n");

147 
ã°_id
) {

149 
	`CK_UART_Te°
();

152 
	`CK_INTC_Te°
();

155 
	`CK_AHBDMA_Te°
(0);

156 
	`CK_AHBDMA_Te°
(1);

159 
	`CK_Gpio_Te°
();

162 
	`CK_Timî_Te°
();

165 
	`CK_W©chdog_Te°
();

168 
	`CK_I2C_Te°
(3);

170 
	`CK_I2C_Sœve_Te°
();

173 
	`CK_STC_Te°
();

176 
	`CK_Rtc_Te°
();

179 
	`SPI_Ma°î_GD25Q128_APP
(0);

182 
	`SPI_Ma°î_w25n01_Aµ
();

185 
	`CK_SDIO_Te°
();

188 
	`CK_I2S_PTS_Te°
();

191 
	`sdøm_öô
();

194 
	`CK_SCI7816_Te°
();

197 
	`CK_MIPI_Te°
();

200 
	`CK_APTS_Te°
();

203 
	`¥ötf
("DDR Interleave caseÇeed in SRAMánd Disable MMU, L1 & L2 cache\n");

204 
	`CK_DDR_I¡îÀave_Te°
();

207 
	`CK_OTP_Te°
();

210 
	`CK_CPU_L2_Te°
();

213 
	`DDR_ã°
();

219 
	`≠b_ac˚ss_ã°
();

222 
	`CK_PWM_ã°
();

226 
	`CK_RSA_Te°
();

229 
	`CK_SPACC_Reg_RW_Te°
();

230 
	`CK_SPACC_Te°
();

233 
	`CK_nfc_ã°
();

236 
	`CK_CPU_BoŸ_Te°
();

239 
	`CK_AXIDMA_Te°
();

242 
	`Audio_Te°
();

245 
	`domaö_powî_ã°
();

248 
	`ù_˛k_g©ög_ã°
();

251 
	`pö_mux_ã°
();

254 
	`¥ötf
("unsupportedÅest module\n");

258 
	`¥ötf
("\nBare-metalÅestÉnd\n");

262 
	}
}

	@tapb_access.c

8 
	~"d©©y≥.h
"

9 
	~"ck810.h
"

10 
	~"u¨t.h
"

11 
	~"misc.h
"

12 
	~"ötc.h
"

14 
	#UART_DEBUG


	)

15 #ifde‡
UART_DEBUG


16 
	#debug
(
f‹m©
, ...Ë
	`¥ötf
(f‹m©,##
__VA_ARGS__
)

	)

18 
	#debug
(
f‹m©
, ...Ëdÿ{} 0)

	)

21 
	$ªg_ac˚ss_ã°
(* 
«me
, *
ba£
, 
ªad_Àn
, 
wrôe_add
)

23 
u32
 
ªg
 = 0;

24 
i
 = 0;

25 
	`debug
("%†ù ba£ :0x%x \n",
«me
, 
ba£
);

26 
	`debug
("readállÑegs val----------------- \n");

27 
i
 = 0; i <
ªad_Àn
; i += 0x4)

29 
ªg
 = 
	`ªad_mªg32
(
ba£
 + 
i
);

30 
	`debug
("ªg0x%x: 0x%x\n", 
i
, 
ªg
);

32 
	`debug
("wúãÑeg 0x%xÅÿ0xØ------------ \n", 
wrôe_add
);

33 
ªg
 = 0xaa;

34 
	`wrôe_mªg32
(
ba£
 + 
wrôe_add
,
ªg
);

35 
ªg
 = 
	`ªad_mªg32
(
ba£
 + 
wrôe_add
);

36 
	`debug
("ªadÑeg 0x%x :0x%x \n", 
wrôe_add
, 
ªg
);

38 
	}
}

40 
	$≠b_ac˚ss_ã°
()

42 
u32
 
i
 = 0;

43 
i
 = (
u32
)
CK_UART_ADDRBASE1
; i <(u32)
CK_UART_ADDRBASE4
; i += 0x1000)

45 
	`ªg_ac˚ss_ã°
("u¨t", (*)
i
, 0x22, 0x10);

47 
	`ªg_ac˚ss_ã°
("•i0", (*)
SPI0_BASE
, 0x2c, 0x00);

48 
	`ªg_ac˚ss_ã°
("•i1", (*)
SPI1_BASE
, 0x2c, 0x00);

49 
	`ªg_ac˚ss_ã°
("•i2", (*)
SPI2_BASE
, 0x2c, 0x00);

50 
	`ªg_ac˚ss_ã°
("•i3", (*)
SPI3_BASE
, 0x2c, 0x00);

51 
i
 = (
u32
)
I2S0_BASE
; i <(u32)
I2S4_BASE
; i += 0x1000)

53 
	`ªg_ac˚ss_ã°
("I2S", (*)
i
, 0x1fc, 0x3c);

55 
i
 = (
u32
)
CK_I2C0_BASSADDR
; i <(u32)
CK_I2C3_BASSADDR
; i += 0x1000)

57 
	`ªg_ac˚ss_ã°
("I2C", (*)
i
, 0x3c, 0x00);

59 
i
 = (
u32
)
	`PWM_BASE
(0); i <= (u32)PWM_BASE(7); i += 0x200)

61 
	`ªg_ac˚ss_ã°
("pwm", (*)
i
, 0x20, 0x1c);

63 
	`ªg_ac˚ss_ã°
("πc", (*)
CK_RTC_ADDR
, 0x20, 0x08);

64 
	`ªg_ac˚ss_ã°
("sci7816", (*)
SCI7816_ADDR
, 0x44, 0x30);

65 
	`ªg_ac˚ss_ã°
("gpio", (*)
CK_GPIO_ADDR
, 0x74, 0x00);

66 
	`ªg_ac˚ss_ã°
("APTS", (*)
APTS_BASE
, 0x2c, 0x00);

67 
	`ªg_ac˚ss_ã°
("WDT_860", (*)
CK_WDT_CK860_ADDR
, 0xfc, 0x04);

68 
	`ªg_ac˚ss_ã°
("WDT_810", (*)
CK_WDT_CK810_ADDR
, 0xfc, 0x04);

69 
	`ªg_ac˚ss_ã°
("INTC_810", (*)
INTC_CK810_BASE
, 0x1, 0x190);

70 
	`ªg_ac˚ss_ã°
("INTC_UNI", (*)
INTC_UNI_BASE
, 0x1, 0x190);

71 
	`ªg_ac˚ss_ã°
("PCIe", (*)
PCIE_BASE_ADDR
, 0x10, 0x4);

73 
	}
}

	@tapts.c

13 
	~"°c.h
"

14 
	~"≠ts.h
"

15 
	~"¸m.h
"

16 
	~"misc.h
"

17 
	~"ötc.h
"

19 
INIT_STC
();

21 
	#SPI_CLK
 600000

	)

23 
CKSåu˘_IRQH™dÀr
 
	g≠ts_úqh™dÀr
;

26 
	$CK_APTS_ISR_H™dÀr
(
u32
 
úq
) {

27 
CK_INT32
 
°©
;

29 
°©
 = 
	`ªad_mªg32
(
APTS_INTSTS
);

30 
	`wrôe_mªg32
(
APTS_INTCLR
, 
°©
);

32 
	}
}

34 
	$Sim∂e_SPI_Te°
() {

35 
CK_UINT8
 
gë
;

36 
CK_UINT32
 
div
;

38 
	`¥ötf
("\n\tVSI APTS Simple SPIÅransfer Test. . . \n");

40 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`APTS_EN
(0));

41 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`SPI_EN
(0));

43 
	`wrôe_mªg32
(
APTS_Tx0
, 0x00010203);

44 
	`wrôe_mªg32
(
APTS_Tx1
, 0x04050607);

45 
div
 = (
APTS_CLK27_FREQ
 / 
SPI_CLK
) / 2 - 1;

46 
	`wrôe_mªg32
(
APTS_DIVIDER
, 
div
);

49 
	`wrôe_mªg32
(
APTS_CTRL2
, 
	`WD_LEN
(0Ë| 
	`CHAR_LEN
(0x3fË| 
	`ASS
(1Ë| 
	`LSB
(1Ë| 
	`NEG
(0));

51 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`SPI_EN
(1));

52 
	`udñay
(1000);

54 
	`¥ötf
("\t\t- - - Check data onÜogicánalyzer? [y/n] ");

57 
gë
 = 
	`CK_WaôF‹Rïly
();

59 if((
gë
 == 1)) {

60 
	`¥ötf
("\n\t\t\t ---PASS\n");

62 } i‡(
gë
 == 0) {

63 
	`¥ötf
("\n\t\t\t ---FAIL\n");

66 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

68 
	}
}

70 
	$Mode0_Te°
() {

71 
CK_UINT8
 
gë
;

72 
CK_UINT32
 
div
;

73 
CK_UINT32
 
vÆ_h
;

74 
CK_UINT32
 
vÆ_l
;

76 
	`¥ötf
("\n\tVSI APTS Mode0Åransfer Test. . . \n");

79 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`APTS_EN
(0));

80 
div
 = (
APTS_CLK27_FREQ
 / 
SPI_CLK
) / 2 - 1;

81 
	`wrôe_mªg32
(
APTS_DIVIDER
, 
div
);

84 
	`wrôe_mªg32
(
APTS_CTRL2
, 
	`WD_LEN
(0Ë| 
	`APTS_OPMOD
(0Ë| 
	`CHAR_LEN
(0x0fË| 
	`ASS
(1Ë| 
	`LSB
(0Ë| 
	`NEG
(0));

85 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`APTS_EN
(1));

86 
	`udñay
(1000);

88 
	`¥ötf
("\n\t\t- - - Press SW1 PBÅoÅrigger APTS_REQ ...\n");

89 
	`¥ötf
("\t\t- - - Check dataánd interrupt onÜogicánalyzer? [y/n] ");

92 
gë
 = 
	`CK_WaôF‹Rïly
();

94 if((
gë
 == 1)) {

96 
vÆ_l
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_L
);

97 
vÆ_h
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_H
);

98 
	`¥ötf
("\n\t\t\t STC current value_h=0x%x, value_l=0x%x\n",

99 
vÆ_h
, 
vÆ_l
);

100 
	`¥ötf
("\n\t\t\t Mode0 PASS\n");

102 } i‡(
gë
 == 0) {

103 
	`¥ötf
("\n\t\t\t Mode0 FAIL\n");

106 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

108 
	}
}

110 
	$Mode1_Te°
() {

111 
CK_UINT8
 
gë
;

112 
CK_UINT32
 
div
;

113 
CK_UINT32
 
vÆ_h
;

114 
CK_UINT32
 
vÆ_l
;

116 
	`¥ötf
("\n\tVSI APTS Mode1Åransfer Test. . . \n");

119 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`APTS_EN
(0));

120 
div
 = (
APTS_CLK27_FREQ
 / 
SPI_CLK
) / 2 - 1;

121 
	`wrôe_mªg32
(
APTS_DIVIDER
, 
div
);

124 
	`wrôe_mªg32
(
APTS_CTRL2
, 
	`WD_LEN
(0Ë| 
	`APTS_OPMOD
(1Ë| 
	`CHAR_LEN
(0x0fË| 
	`ASS
(1Ë| 
	`LSB
(0Ë| 
	`NEG
(0));

126 
	`wrôe_mªg32
(
APTS_AUDCTL
, 
	`AOFFSET
(0x10Ë| 
	`AUDLEN
(0x480));

127 
	`wrôe_mªg32
(
APTS_INTEN
, 0x7);

128 
	`udñay
(100);

129 
	`wrôe_mªg32
(
APTS_CTRL1
, 
	`APTS_EN
(1));

131 
	`¥ötf
("\t\t- - - Check dataánd interrupt onÜogicánalyzer? [y/n] ");

134 
gë
 = 
	`CK_WaôF‹Rïly
();

136 if((
gë
 == 1)) {

138 
vÆ_l
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_L
);

139 
vÆ_h
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_H
);

140 
	`¥ötf
("\n\t\t\t STC current value_h=0x%x, value_l=0x%x\n",

141 
vÆ_h
, 
vÆ_l
);

142 
	`¥ötf
("\n\t\t\t Mode1 PASS\n");

144 } i‡(
gë
 == 0) {

145 
	`¥ötf
("\n\t\t\t Mode1 FAIL\n");

148 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

150 
	}
}

152 
	$CK_APTS_Te°
() {

153 
CK_UINT32
 
vÆ
;

155 
	`¥ötf
("\nVSI APTS Test. . . \n");

157 
	`INIT_STC
();

159 
	`mem£t
(&
≠ts_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

161 
≠ts_úqh™dÀr
.
dev«me
 = "APTS";

162 
≠ts_úqh™dÀr
.
úqid
 = 
CK_INTC_APTS
;

163 
≠ts_úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_APTS
 - 64;

164 
≠ts_úqh™dÀr
.
h™dÀr
 = 
CK_APTS_ISR_H™dÀr
;

165 
≠ts_úqh™dÀr
.
bÁ°
 = 
FALSE
;

166 
≠ts_úqh™dÀr
.
√xt
 = 
NULL
;

168 
	`CK_INTC_Reque°Irq
(&
≠ts_úqh™dÀr
, 
AUTO_MODE
);

171 
vÆ
 = 
	`ªad_mªg32
(
CRM_BLK_SW_RST3
Ë| 
APTS_SW_RST
;

172 
	`wrôe_mªg32
(
CRM_BLK_SW_RST3
, 
vÆ
);

174 
	`Sim∂e_SPI_Te°
();

176 
	`Mode0_Te°
();

178 
	`Mode1_Te°
();

180 
	`¥ötf
("\n\tEnd VSI APTS Test\n");

181 
	}
}

	@taudio.c

16 
	~<°rög.h
>

17 
	~"ck810.h
"

18 
	~"dw_≠b_i2s.h
"

19 
	~"¢d_pcm.h
"

20 
	~"d©©y≥.h
"

21 
	~"¢d_ßm∂e.h
"

22 
	~"misc.h
"

23 
	~"ad193x.h
"

25 
	#GS0_AUDIO_EN
 (4)

	)

26 
	#GS0_IOPROCEN
 (5)

	)

27 
	#GS0_RESET
 (9)

	)

28 
	#GS1_AUDIO_EN
 (7)

	)

29 
	#GS1_IOPROCEN
 (8)

	)

30 
	#GS1_RESET
 (6)

	)

31 
	#AD1938_RESET
 (15)

	)

33 
	#MAX_SND_STREAM_BUF_LEN
 (1024 * 1024)

	)

35 
¢d_pcm_sub°ªam
 
	g¢d_sub°ªam
;

36 
¢d_soc_dai_dev
 
	gdai_dev
;

38 
	$wav_show
(
wav_öfo
 
öfo
,

39 
riff_hódî
 
hódî
)

41 
	`¥ötf
("\n*********** Audio Informations ***********\n");

42 
	`¥ötf
("Riff Tag :%c%c%c%c\n",

43 
hódî
.
riff
[0], header.riff[1], header.riff[2], header.riff[3]);

44 
	`¥ötf
("TŸÆ D©aLí :%d(B)\n", 
hódî
.
Êí
);

45 
	`¥ötf
("Wave Tag :%c%c%c%c\n",

46 
hódî
.
wave
[0], header.wave[1], header.wave[2], header.wave[3]);

47 
	`¥ötf
("Fmt Tag :%c%c%c%c\n",

48 
hódî
.
fmt
[0], header.fmt[1], header.fmt[2], header.fmt[3]);

49 
	`¥ötf
("Fûã∏Byã :0x%08x\n", 
hódî
.
fûãr
);

50 
	`¥ötf
("F‹m© Tag :0x%04x\n", 
öfo
.
f‹m©
);

51 
	`¥ötf
("Ch™√»Numbî :%d\n", 
öfo
.
ch™√l
);

52 
	`¥ötf
("Sam∂êR©ê:%d\n", 
öfo
.
ßm∂e_øã
);

53 
	`¥ötf
("ByãÖî Sec⁄d :%d\n", 
öfo
.
byã_≥r_£c
);

54 
	`¥ötf
("ByãÖî Sam∂ê:%d\n", 
öfo
.
byã_≥r_ßm∂e
);

55 
	`¥ötf
("BôÖî Sam∂ê :%d\n", 
öfo
.
bô_≥r_ßm∂e
);

56 
	`¥ötf
("DATA Tag :%c%c%c%c\n",

57 
öfo
.
d©©ag
[0], info.datatag[1],

58 
öfo
.
d©©ag
[2], info.datatag[3]);

59 
	`¥ötf
("D©®Lígth :%d(B)\n", 
öfo
.
d©a_Àn
);

60 
	`¥ötf
("*********************************************\n\n");

62 
	}
}

64 
¢d_pcm_sub°ªam
 *
	$wav_°ªam_öô
(*
audio_ba£
, 
°ªam
)

66 
¢d_pcm_sub°ªam
 *
sub°ªam
;

67 
wav_öfo
 
öfo
;

68 
riff_hódî
 
hódî
;

70 
sub°ªam
 = &
¢d_sub°ªam
;

72 
	`mem£t
(
sub°ªam
, 0 , (
¢d_pcm_sub°ªam
));

74 
sub°ªam
->
¢d_ba£
 = 
audio_ba£
;

75 
sub°ªam
->
°ªam
 = stream;

76 
sub°ªam
->
±r
 = 0;

77 
sub°ªam
->
d⁄e
 = 0;

79 if(
°ªam
 =
SNDRV_PCM_STREAM_CAPTURE
) {

80 
sub°ªam
->
∑øms
.
ch™_ƒ
 = 
DEF_REC_FMT_CHANNEL
;

81 
sub°ªam
->
∑øms
.
d©a_width
 = 
DEF_REC_FMT_WIDTH
;

82 
sub°ªam
->
∑øms
.
ßm∂e_øã
 = 
DEF_REC_FMT_SAMPLE
;

83 
sub°ªam
->
sz_rx
 = 
MAX_SND_STREAM_BUF_LEN
;

84 
sub°ªam
->
d©a_ba£
 = 
audio_ba£
;

85  
sub°ªam
;

88 
	`mem£t
(&
hódî
, 0, (
riff_hódî
));

89 
	`mem£t
(&
öfo
, 0, (
wav_öfo
));

91 
	`mem˝y
(&
hódî
, (*)
audio_ba£
, (
riff_hódî
));

92 
	`mem˝y
(&
öfo
, (*)
audio_ba£
 + (
riff_hódî
),

93 (
wav_öfo
));

95 
	`wav_show
(
öfo
, 
hódî
);

97 
sub°ªam
->
d©a_ba£
 = 
audio_ba£
 +

98 (
riff_hódî
) +

99 (
wav_öfo
);

100 
sub°ªam
->
sz_tx
 = 
öfo
.
d©a_Àn
/öfo.
byã_≥r_ßm∂e
;

101 
sub°ªam
->
∑øms
.
ch™_ƒ
 = 2;

102 
sub°ªam
->
∑øms
.
d©a_width
 = 
öfo
.
bô_≥r_ßm∂e
;

103 
sub°ªam
->
∑øms
.
ßm∂e_øã
 = 
öfo
.sample_rate;

105  
sub°ªam
;

107 
	}
}

109 
	$¢d_msg_show
(
¢d_pcm_sub°ªam
 *
sub°ªam
)

111 
	`¥ötf
("\n*********** Audio Informations ***********\n");

112 
	`¥ötf
("Format : %s\n", "PCM");

113 
	`¥ötf
("Ch™√»Numbî : %d\n", 
sub°ªam
->
∑øms
.
ch™_ƒ
);

114 
	`¥ötf
("Sam∂êR©ê : %d\n", 
sub°ªam
->
∑øms
.
ßm∂e_øã
);

115 
	`¥ötf
("BôÖî Sam∂ê : %d\n", 
sub°ªam
->
∑øms
.
d©a_width
);

116 
	`¥ötf
("Data Length : %d(in Word)\n",

117 
sub°ªam
->
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
 ?

118 
sub°ªam
->
sz_tx
 : sub°ªam->
sz_rx
);

119 
	`¥ötf
("D©®Ba£ : 0x%x\n", 
sub°ªam
->
d©a_ba£
);

120 
	`¥ötf
("*******************************************\n\n");

122 
	}
}

124 
¢d_pcm_sub°ªam
 *
	$audio_°ªam_öô
(*
audio_ba£
, 
°ªam
)

126 
¢d_pcm_sub°ªam
 *
sub°ªam
;

128 
sub°ªam
 = &
¢d_sub°ªam
;

130 
	`mem£t
(
sub°ªam
, 0 , (
¢d_pcm_sub°ªam
));

132 
sub°ªam
->
d©a_ba£
 = 
audio_ba£
;

133 
sub°ªam
->
±r
 = 0;

134 
sub°ªam
->
d⁄e
 = 0;

135 
sub°ªam
->
°ªam
 = stream;

136 
sub°ªam
->
∑øms
.
ch™_ƒ
 = 
ßm∂e_öfo
.
ch™√l
;

137 
sub°ªam
->
∑øms
.
d©a_width
 = 
ßm∂e_öfo
.
bô_≥r_ßm∂e
;

138 
sub°ªam
->
∑øms
.
ßm∂e_øã
 = 
ßm∂e_öfo
.sample_rate;

140 if(
°ªam
 =
SNDRV_PCM_STREAM_PLAYBACK
) {

141 
sub°ªam
->
sz_tx
 = (
¢d_ßm∂e
Ë/ 
ßm∂e_öfo
.
byã_≥r_ßm∂e
;

142 
sub°ªam
->
fmt
 = 
SAMPLE_DAI_FMT_PLAYBACK
;

144 
sub°ªam
->
sz_rx
 = (
¢d_ßm∂e
Ë/ 
ßm∂e_öfo
.
byã_≥r_ßm∂e
;

145 
sub°ªam
->
fmt
 = 
SAMPLE_DAI_FMT_CAPTURE
;

148 
	`¢d_msg_show
(
sub°ªam
);

150  
sub°ªam
;

152 
	}
}

155 
	$Audio_Te°_OLD
()

157 
dw_i2s_dev
 *
i2s_dev
;

158 
ad193x_dev
 *
codec_dev
;

159 
¢d_pcm_sub°ªam
 *
sub°ªam
;

161 
dai_dev
.
sys˛k
 = 
MCLK_IN_FREQ
;

164 if(
	`dw_≠b_i2s_¥obe
(&
dai_dev
, 
I2S_FOR_PLAY
)) {

165 
	`¥ötf
("ProbêI2S.%d fÆõd\n", 
I2S_FOR_PLAY
);

166 
Áûed_œbñ
;

168 
i2s_dev
 = (
dw_i2s_dev
 *)
dai_dev
.
˝u_dai
;

171 if(
	`ad193x_codec_¥obe
(&
dai_dev
, 
SPI_FOR_AD1938
)) {

172 
	`¥ötf
("Probêcode¯Álõd(•i:%d)\n", 
SPI_FOR_AD1938
);

173 
Áûed_œbñ
;

175 
codec_dev
 = (
ad193x_dev
 *)
dai_dev
.
codec_dai
;

178 
sub°ªam
 = 
	`audio_°ªam_öô
(
¢d_ßm∂e
, 
SNDRV_PCM_STREAM_PLAYBACK
);

179 if(!
sub°ªam
) {

180 
	`¥ötf
("Initialize substream falied\n");

181 
Áûed_œbñ
;

184 
i2s_dev
->
sub°ªam
 = substream;

186 if(
codec_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
) ||

187 
i2s_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
))

190 if(
codec_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
) ||

191 
i2s_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
))

194 if(
i2s_dev
->
dai_›s
->
	`¥ï¨e
(&
dai_dev
, 
sub°ªam
))

197 
	`¥ötf
("Playing....");

198 if(
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_START
, 
sub°ªam
))

201 !
sub°ªam
->
d⁄e
)

202 
i2s_dev
->
	`pﬁl
(i2s_dev);

203 
	`¥ötf
("Done\n");

205 
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_STOP
, 
sub°ªam
);

207 
	`¥ötf
("I2S.%d Te° Suc˚ss.\n", 
I2S_FOR_PLAY
);

212 
Áûed_œbñ
:

213 
	`¥ötf
("I2S.%dTe° Faûed.\n", 
I2S_FOR_PLAY
);

214 
	}
}

216 
	$Audio_Pœy_Te°
()

218 
dw_i2s_dev
 *
i2s_dev
;

219 
ad193x_dev
 *
codec_dev
;

220 
¢d_pcm_sub°ªam
 *
sub°ªam
;

222 
	`mem£t
(&
dai_dev
, 0, (dai_dev));

224 
dai_dev
.
sys˛k
 = 
MCLK_IN_FREQ
;

227 if(
	`dw_≠b_i2s_¥obe
(&
dai_dev
, 
I2S_FOR_PLAY
)) {

228 
	`¥ötf
("ProbêI2S.%d fÆõd\n", 
I2S_FOR_PLAY
);

229 
Áûed_œbñ
;

231 
i2s_dev
 = (
dw_i2s_dev
 *)
dai_dev
.
˝u_dai
;

234 if(
	`ad193x_codec_¥obe
(&
dai_dev
, 
SPI_FOR_AD1938
)) {

235 
	`¥ötf
("Probêcode¯Álõd(•i:%d)\n", 
SPI_FOR_AD1938
);

236 
Áûed_œbñ
;

238 
codec_dev
 = (
ad193x_dev
 *)
dai_dev
.
codec_dai
;

240 
sub°ªam
 = 
	`audio_°ªam_öô
(
¢d_ßm∂e
, 
SNDRV_PCM_STREAM_PLAYBACK
);

241 if(!
sub°ªam
) {

242 
	`¥ötf
("Initialize substream falied\n");

243 
Áûed_œbñ
;

246 
i2s_dev
->
sub°ªam
 = substream;

248 if(
codec_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
) ||

249 
i2s_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
))

250 
Áûed_œbñ
;

252 if(
codec_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
) ||

253 
i2s_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
))

254 
Áûed_œbñ
;

256 if(
i2s_dev
->
dai_›s
->
	`¥ï¨e
(&
dai_dev
, 
sub°ªam
))

257 
Áûed_œbñ
;

259 
	`¥ötf
("Playing....");

260 if(
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_START
, 
sub°ªam
))

261 
Áûed_œbñ
;

263 
i2s_dev
->
	`pﬁl
(i2s_dev);

265 
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_STOP
, 
sub°ªam
);

266 
	`¥ötf
("Done\n");

270 
Áûed_œbñ
:

271 
	`¥ötf
("I2S.%d Pœy Faûed.\n", 
I2S_FOR_PLAY
);

274 
	}
}

277 
	$Audio_Rec‹d_Te°
(
i2s_id
)

279 
dw_i2s_dev
 *
i2s_dev
;

280 
ad193x_dev
 *
codec_dev
;

281 
¢d_pcm_sub°ªam
 *
sub°ªam
;

283 
	`mem£t
(&
dai_dev
, 0, (dai_dev));

285 
dai_dev
.
sys˛k
 = 
MCLK_IN_FREQ
;

287 if(
i2s_id
 =
I2S_FOR_PLAY
) {

288 
	`¥ötf
("You selectedá masterÖort.\n");

289 
Áûed_œbñ
;

292 if(
	`ad193x_codec_¥obe
(&
dai_dev
, 
SPI_FOR_AD1938
)) {

293 
	`¥ötf
("Probêcode¯Álõd(•i:%d)\n", 
SPI_FOR_AD1938
);

294 
Áûed_œbñ
;

296 
codec_dev
 = (
ad193x_dev
 *)
dai_dev
.
codec_dai
;

298 if(
	`dw_≠b_i2s_¥obe
(&
dai_dev
, 
i2s_id
)) {

299 
	`¥ötf
("ProbêI2S.%d fÆõd\n", 
i2s_id
);

300 
Áûed_œbñ
;

302 
i2s_dev
 = (
dw_i2s_dev
 *)
dai_dev
.
˝u_dai
;

304 
sub°ªam
 = 
	`audio_°ªam_öô
(
¢d_ßm∂e
, 
SNDRV_PCM_STREAM_CAPTURE
);

305 if(!
sub°ªam
) {

306 
	`¥ötf
("Initialize substream falied\n");

307 
Áûed_œbñ
;

310 
i2s_dev
->
sub°ªam
 = substream;

312 if(
codec_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
) ||

313 
i2s_dev
->
dai_›s
->
	`°¨tup
(&
dai_dev
, 
sub°ªam
))

314 
Áûed_œbñ
;

316 if(
codec_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
) ||

317 
i2s_dev
->
dai_›s
->
	`hw_∑øms
(&
dai_dev
, 
sub°ªam
))

318 
Áûed_œbñ
;

320 if(
i2s_dev
->
dai_›s
->
	`¥ï¨e
(&
dai_dev
, 
sub°ªam
))

321 
Áûed_œbñ
;

323 
	`¥ötf
("Recording....");

324 if(
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_START
, 
sub°ªam
))

325 
Áûed_œbñ
;

327 
i2s_dev
->
	`pﬁl
(i2s_dev);

329 
	`¥ötf
("Done\n");

331 
i2s_dev
->
dai_›s
->
	`åiggî
(&
dai_dev
, 
SNDRV_PCM_TRIGGER_STOP
, 
sub°ªam
);

335 
Áûed_œbñ
:

336 
	`¥ötf
("I2S.%d Rec‹d Faûed.\n", 
i2s_id
);

338 
	}
}

340 
	$Audio_Te°
()

342 
choo£
;

343 
i2s_id
;

345 
	`CK_Gpio_Ouçut
(
GS0_AUDIO_EN
, 1);

346 
	`CK_Gpio_Ouçut
(
GS0_IOPROCEN
, 1);

347 
	`CK_Gpio_Ouçut
(
GS0_RESET
, 1);

348 
	`CK_Gpio_Ouçut
(
GS1_AUDIO_EN
, 1);

349 
	`CK_Gpio_Ouçut
(
GS1_IOPROCEN
, 1);

350 
	`CK_Gpio_Ouçut
(
GS1_RESET
, 1);

351 
	`CK_Gpio_Ouçut
(
AD1938_RESET
, 0);

352 
ª_£À˘
:

353 
	`¥ötf
("Please select whitch I2S you wantÅoÅest.(0~3-slave, 4-master)\n");

355 
choo£
 = 
	`gëch¨
();

356 
	`putch¨
(
choo£
);

357 
	`putch¨
('\n');

358 
i2s_id
 = 
choo£
 - '0';

360 if(
i2s_id
 < 0 || i2s_id > 4) {

361 
	`¥ötf
("InvÆid i2†p‹à%d\n", 
i2s_id
);

362 
ª_£À˘
;

365 if(
i2s_id
 !
I2S_FOR_PLAY
) {

366 if(
	`Audio_Rec‹d_Te°
(
i2s_id
))

368 
	`¥ötf
("\nPlaing yourÑecord...\n");

371 
	`Audio_Pœy_Te°
();

372 
	}
}

	@taxidma.c

1 
	~"ck810.h
"

2 
	~"d©©y≥.h
"

3 
	~"ötc.h
"

4 
	~"•i_n‹.h
"

5 
	~"axidma.h
"

6 
	~"ˇche.h
"

7 
	~"misc.h
"

8 
	~<°rög.h
>

10 
	#M2M_TEST_LEN
 64

	)

12 
	#LLI_ADDR
 0x10000000

	)

13 
	#M2M_TEST_SRC
 0x20000000

	)

14 
	#M2M_TEST_DEST
 0x30000000

	)

19 
boﬁ
 
	$check_ªsu…
(
CK_UINT32
 
§c_addr
, CK_UINT32 
d°_addr
, CK_UINT32 
Àngth
)

21 
CK_UINT32
 
˙t
;

22 
CK_UINT8
 
ã°
;

23 
˙t
 = 0; c¡ < 
Àngth
; cnt ++) {

24 
ã°
 = 
	`ªad_mªg8
(
§c_addr
 + 
˙t
);

25 i‡(
ã°
 !
	`ªad_mªg8
(
d°_addr
 + 
˙t
)) {

26 
	`¥ötf
("îr‹át:%d\à(WDATA=0x%x, RDATA=0x%x)\n", 
˙t
, 
ã°
, 
	`ªad_mªg8
(
d°_addr
 + cnt));

30  (
˙t
 =
Àngth
)?
åue
:
Ál£
;

31 
	}
}

33 
CK_AXIDMA_ID_REG_Te°
();

37 
	$AXIDMA_M2M_Te°
(
CK_UINT32
 
§c_addr
, CK_UINT32 
d°_addr
,

38 
axi_dma_öfo
 
axi
, 
CK_UINT32
 
Àngth
)

40 
	`mem£t
((*)
d°_addr
, 0, 
M2M_TEST_LEN
);

42 
	`AXI_DMA_TRAN_INIT
(
axi
, 
§c_addr
, 
d°_addr
, 
Àngth
);

44 
	`AXI_DMA_TRANS
(
axi
);

46 i‡(
	`check_ªsu…
(
§c_addr
, 
d°_addr
, 
Àngth
)) {

47 
	`¥ötf
("src_msize:%d dst_msize:%d src_width:%d dst_width:%d----PASS\n",

48 
axi
.
§c_msize
,áxi.
d°_msize
,áxi.
§c_width
,áxi.
d°_width
);

50 
	`¥ötf
("src_msize:%d dst_msize:%d src_width:%d dst_width:%d----FAIL\n",

51 
axi
.
§c_msize
,áxi.
d°_msize
,áxi.
§c_width
,áxi.
d°_width
);

53 
	}
}

58 
	$AXIDMA_M2M_LLI_TEST
(
CK_UINT32
 
§c_addr
, CK_UINT32 
d°_addr
,

59 
axi_dma_öfo
 
axi
, 
CK_UINT32
 
Àngth
)

61 
	`mem£t
((*)
d°_addr
, 0, 
M2M_TEST_LEN
);

63 
axi_dma_Œi
* 
LLI1
 = (*)
LLI_ADDR
;

64 
	`mem£t
(
LLI1
, 0, (
axi_dma_Œi
));

66 
axi_dma_Œi
* 
LLI2
 = (*)(
LLI_ADDR
 + (axi_dma_lli));

67 
	`mem£t
(
LLI2
, 0, (
axi_dma_Œi
));

69 
LLI1
->
Œp
 = ()
LLI2
;

71 
	`AXI_DMA_TRAN_INIT_LLI
(
axi
, 
§c_addr
, 
d°_addr
, 
Àngth
);

73 
	`¥ötf
("MemoryÅo memoryÅransfer (LLI)\n");

75 
	`AXI_DMA_TRANS
(
axi
);

77 
	`¥ötf
("MemoryÅo memoryÅransfer (LLI) Done.");

79 i‡(
	`check_ªsu…
(
§c_addr
, 
d°_addr
, 
Àngth
))

80 
	`¥ötf
("----------PASS\n");

82 
	`¥ötf
("----------FAIL\n");

83 
	}
}

88 
	$CK_AXIDMA_Te°
()

90 
	`CK_AXIDMA_ID_REG_Te°
();

92 
	`CHOSE_TYPE
(0);

93 
	`¥ötf
("Test inÖolling mode!\n");

96 
CK_UINT32
 
˙t
;

97 
˙t
 = 0; c¡ < 
M2M_TEST_LEN
; cnt++)

98 
	`wrôe_mªg8
(
M2M_TEST_SRC
 + 
˙t
, cnt);

100 
axi_dma_öfo
 
axi
;

101 
i
, 
j
;

103 
i
 = 1; i <= 4; i++) {

104 
axi
.
ch™√l
 = 
i
;

106 
	`¥ötf
("channel %d: change(src_msize:0-9) fix(dst_msize:%d, src_width:%d, dst_width:%d)\n",

107 
axi
.
ch™√l
, 
DST_MSIZE128
, 
SRC_WIDTH16
, 
DST_WIDTH32
);

108 
axi
.
dúe˘i⁄
 = 
CHx_M2M_DMAC
;

109 
axi
.
d°_msize
 = 
DST_MSIZE128
;

110 
axi
.
§c_width
 = 
SRC_WIDTH16
;

111 
axi
.
d°_width
 = 
DST_WIDTH32
;

112 
j
 = 
SRC_MSIZE1
; j <
SRC_MSIZE1024
; j++) {

113 
axi
.
§c_msize
 = 
j
;

114 
	`AXIDMA_M2M_Te°
(
M2M_TEST_SRC
, 
M2M_TEST_DEST
, 
axi
, 
M2M_TEST_LEN
);

117 
	`¥ötf
("channel %d: change(src_msize:0-9) fix(dst_msize:%d, src_width:%d, dst_width:%d)\n",

118 
axi
.
ch™√l
, 
DST_MSIZE128
, 
SRC_WIDTH16
, 
DST_WIDTH32
);

119 
axi
.
dúe˘i⁄
 = 
CHx_M2M_DMAC
;

120 
axi
.
§c_msize
 = 
SRC_MSIZE16
;

121 
axi
.
§c_width
 = 
SRC_WIDTH64
;

122 
axi
.
d°_width
 = 
DST_WIDTH16
;

123 
j
 = 
DST_MSIZE1
; j <
DST_MSIZE1024
; j++) {

124 
axi
.
d°_msize
 = 
j
;

125 
	`AXIDMA_M2M_Te°
(
M2M_TEST_SRC
, 
M2M_TEST_DEST
, 
axi
, 
M2M_TEST_LEN
);

129 
	`¥ötf
("channel %d: change(src_msize:0-9) fix(dst_msize:%d, src_width:%d, dst_width:%d)\n",

130 
axi
.
ch™√l
, 
DST_MSIZE128
, 
SRC_WIDTH16
, 
DST_WIDTH32
);

131 
axi
.
dúe˘i⁄
 = 
CHx_M2M_DMAC
;

132 
axi
.
§c_msize
 = 
SRC_MSIZE1
;

133 
axi
.
d°_msize
 = 
DST_MSIZE128
;

134 
axi
.
d°_width
 = 
DST_WIDTH256
;

135 
j
 = 
SRC_WIDTH8
; j <
SRC_WIDTH128
; j++){

136 
axi
.
§c_width
 = 
j
;

137 
	`AXIDMA_M2M_Te°
(
M2M_TEST_SRC
, 
M2M_TEST_DEST
, 
axi
, 
M2M_TEST_LEN
);

140 
	`¥ötf
("channel %d: change(src_msize:0-9) fix(dst_msize:%d, src_width:%d, dst_width:%d)\n",

141 
axi
.
ch™√l
, 
DST_MSIZE128
, 
SRC_WIDTH16
, 
DST_WIDTH32
);

142 
axi
.
dúe˘i⁄
 = 
CHx_M2M_DMAC
;

143 
axi
.
§c_msize
 = 
SRC_MSIZE1024
;

144 
axi
.
d°_msize
 = 
DST_MSIZE16
;

145 
axi
.
§c_width
 = 
SRC_WIDTH64
;

146 
j
 = 
DST_WIDTH8
; j <
DST_WIDTH512
; j++){

147 
axi
.
d°_width
 = 
j
;

148 
	`AXIDMA_M2M_Te°
(
M2M_TEST_SRC
, 
M2M_TEST_DEST
, 
axi
, 
M2M_TEST_LEN
);

151 
	`¥ötf
("---------------------------------------------\n");

154 
	`¥ötf
("MemoryÅo memory coverÅest finish!\n");

156 
	`CHOSE_TYPE
(1);

157 
	`¥ötf
("Test in interrupt mode!\n");

159 
axi
.
ch™√l
 = 1;

160 
axi
.
dúe˘i⁄
 = 
CHx_M2M_DMAC
;

161 
axi
.
§c_msize
 = 
SRC_MSIZE1024
;

162 
axi
.
d°_msize
 = 
DST_MSIZE64
;

163 
axi
.
§c_width
 = 
SRC_WIDTH16
;

164 
axi
.
d°_width
 = 
DST_WIDTH8
;

165 
	`AXIDMA_M2M_LLI_TEST
(
M2M_TEST_SRC
, 
M2M_TEST_DEST
, 
axi
 ,
M2M_TEST_LEN
);

166 
	}
}

	@tddr.c

13 
	~"¸m.h
"

14 
	~"misc.h
"

15 
	~"sys_˘æ.h
"

17 
	gã°_mode
[6] = {4096, 1024, 256, 0, 512, 1024};

19 
	gn_size
[6] = {0x4000, 0x10000, 0x40000, 0, 0x20000, 0x10000};

20 
	gã°_d©a
[4][8] = {

26 
	smem_ã°
{

27 *
	m°a_addr
;

28 
u32
 
	mszõ
;

29 
u32
 
	m£ed
;

31 
mem_ã°
 
	gddr_èbÀ
[] = {

58 
	$run_mem_ã°
(
mem_ã°
 *
ã°
)

60 
u32
 
i
 = 0;

61 
u32
 *
addr
 = 
ã°
->
°a_addr
;

63 
i
 = 0; i < 
ã°
->
szõ
; i += 4) {

65 
	`wrôe_mªg32
(
addr
, 0);

66 
addr
 ++;

69 
addr
 = 
ã°
->
°a_addr
;

70 
i
 = 0; i < 
ã°
->
szõ
; i += 4) {

72 i‡(
	`ªad_mªg32
(
addr
))

74 
addr
 ++;

76 
addr
 = 
ã°
->
°a_addr
;

77 
i
 = 0; i < 
ã°
->
szõ
; i += 4) {

79 
	`wrôe_mªg32
(
addr
, 
ã°
->
£ed
);

80 
addr
 ++;

83 
addr
 = 
ã°
->
°a_addr
;

84 
i
 = 0; i < 
ã°
->
szõ
; i += 4) {

86 i‡(
ã°
->
£ed
 !
	`ªad_mªg32
(
addr
))

88 
addr
 ++;

91 
	}
}

93 
	$DDR_ã°
()

95 
ödx
 = 0;

96 
ã°_ªt
 = 0;

97 
	`¥ötf
("\t\t DDRÑead writeÅest\n");

98 
ddr_èbÀ
[
ödx
].
szõ
)

100 
	`¥ötf
("test %d sta_addr 0x%x size 0x%x \n",

101 
ödx
, 
ddr_èbÀ
[ödx].
°a_addr
, ddr_èbÀ[ödx].
szõ
);

102 i‡(
	`run_mem_ã°
(&
ddr_èbÀ
[
ödx
])) {

103 
ã°_ªt
++;

104 
	`¥ötf
("\t\t FAIL\n");

107 
	`¥ötf
("\t\t PASS\n");

109 
ödx
++;

111 i‡(
ã°_ªt
) {

112 
	`¥ötf
("AŒÅe° %d, FAIL %d\n", 
ödx
, 
ã°_ªt
);

115 
	`¥ötf
("All PASS\n");

118 
	}
}

120 
	$CK_DDR_I¡îÀave_Te°
() {

121 
CK_UINT8
 
i
;

122 
CK_UINT8
 
Áû
 = 0;

123 
CK_UINT32
 
addr
;

124 
CK_UINT32
 
vÆ
;

125 
CK_UINT8
 
d©a
;

126 
CK_UINT8
 
N
;

127 
CK_UINT8
 
mode
;

129 
	`¥ötf
("\nVSI DDR Interleave Test. . . \n");

132 
vÆ
 = 
	`ªad_mªg32
(
DDR_REMAP_CTL
);

133 i‡(
vÆ
 != 3) {

134 
Áû
 = 1;

135 
	`¥ötf
("\n\tDeÁu… DDRáddªs†modêi†%d\n", 
vÆ
);

136 
ã°_íd
;

140 
mode
 = 0; mode < 6; mode++) {

141 
Áû
 = 0;

143 i‡(
mode
 == 3)

146 
	`¥ötf
("\n\àSèπÅe° DDRáddªs†modê%d\n", 
mode
);

149 
	`wrôe_mªg32
(
DDR_REMAP_CTL
, 3);

152 
i
 = 0; i < 8; i++) {

153 
	`wrôe_mªg8
(0x0 + 
i
, 
ã°_d©a
[0][i]);

154 
	`wrôe_mªg8
(0x40000000 + 
i
, 
ã°_d©a
[1][i]);

155 
	`wrôe_mªg8
(0x80000000 + 
i
, 
ã°_d©a
[2][i]);

156 
	`wrôe_mªg8
(0xc0000000 + 
i
, 
ã°_d©a
[3][i]);

160 
	`wrôe_mªg32
(
DDR_REMAP_CTL
, 
mode
);

163 
i
 = 0; i < 8; i++) {

164 
N
 = 
i
 > 3 ? 1 : 0;

165 
addr
 = 0x0 + 
i
;

166 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[0][
i
]) {

167 
Áû
 = 1;

168 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

169 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[0][
i
]);

172 
addr
 = 0x0 + 
ã°_mode
[
mode
] + 
i
;

173 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[1][
i
]) {

174 
Áû
 = 1;

175 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

176 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[1][
i
]);

180 i‡(
mode
 == 5) {

181 
addr
 = 0x80000000 + 
i
;

182 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[2][
i
]) {

183 
Áû
 = 1;

184 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

185 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[2][
i
]);

188 
addr
 = 0xc0000000 + 
i
;

189 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[3][
i
]) {

190 
Áû
 = 1;

191 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

192 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[3][
i
]);

195 
addr
 = 0x0 + 2 * 
ã°_mode
[
mode
] + 
i
;

196 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[2][
i
]) {

197 
Áû
 = 1;

198 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

199 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[2][
i
]);

202 
addr
 = 0x0 + 3 * 
ã°_mode
[
mode
] + 
i
;

203 i‡(
	`ªad_mªg8
(
addr
Ë!
ã°_d©a
[3][
i
]) {

204 
Áû
 = 1;

205 
	`¥ötf
("\n\tAddress 0x%x data 0x%x !=Éxpect data 0x%x\n",

206 
addr
, 
	`ªad_mªg8
◊ddr), 
ã°_d©a
[3][
i
]);

212 
ã°_íd
:

213 i‡(
Áû
)

214 
	`¥ötf
("\n\t\t ---FAIL\n");

216 
	`¥ötf
("\n\t\t ---PASS\n");

218 
	`¥ötf
("\n\tEnd DDR Interleave Test\n");

219 
	}
}

	@ti2s_pts.c

13 
	~<°rög.h
>

14 
	~"i2s_±s.h
"

15 
	~"°c.h
"

16 
	~"¸m.h
"

17 
	~"misc.h
"

18 
	~"ötc.h
"

20 
	#CH_NUM
 4

	)

21 
	#SAMPLE_LEN
 127

	)

22 
	#FIFO_NUM
 16

	)

23 
	#I2S_TIMEOUT
 1000000

	)

25 
CK_UINT8
 
	götc_ã°
;

26 
CK_UINT8
 
	g∑s£d
;

28 
CKSåu˘_IRQH™dÀr
 
	gi2s_±s_úqh™dÀr
;

30 
	$CK_I2S_PTS_ISR_H™dÀr
(
u32
 
úq
) {

31 
CK_INT32
 
°©
;

33 
ötc_ã°
 += 1;

34 
°©
 = 
	`ªad_mªg32
(
I2S_PTS_IRQ_STATUS
);

35 
	`wrôe_mªg32
(
I2S_PTS_IRQ_CLR
, 
°©
);

37 
	}
}

39 
	$INIT_STC
() {

41 
	`wrôe_mªg32
(
CRM_TSM_PLL_BYP
, 0x00000001);

43 
	`wrôe_mªg32
(
CRM_TSMPLL_REFCLK_CFG
, 0x00000001);

45 
	`wrôe_mªg32
(
CRM_TS_CLK_CFG
, 0x00000000);

47 
	`wrôe_mªg32
(
CRM_BLK_CLK_ICG3
, 0x00000000);

49 
	`wrôe_mªg32
(
CRM_BLK_SW_RST3
, 
STC_SW_RST
);

52 
	`wrôe_mªg32
(
VSI_STC_CLK_DIVIDER
, 0x12B);

54 
	`wrôe_mªg32
(
VSI_STC_TIMER_INIT_VALUE_L
, 0);

55 
	`wrôe_mªg32
(
VSI_STC_TIMER_INIT_VALUE_H
, 0);

57 
	`wrôe_mªg32
(
VSI_STC_ENABLE
, 
VSI_STC_EN
);

58 
	}
}

60 
	$CH_Te°
(
CK_UINT8
 
ch_num
, CK_UINT8 
edge_ty≥
) {

61 
CK_INT32
 
°©
;

62 
CK_INT32
 
i
;

63 
CK_INT32
 
vÆ
;

64 
CK_INT32
 
°¨t
;

67 
	`wrôe_mªg32
(
I2S_AUDIO_LEN
, 
SAMPLE_LEN
);

69 
	`wrôe_mªg32
(
I2S_SAMPLE_EDGE
, 
edge_ty≥
);

71 
	`wrôe_mªg32
(
I2S_PTS_IRQ_EN
, 1);

73 
	`wrôe_mªg32
(
I2S_PTS_ENABLE
, 1 << 
ch_num
);

75 
°¨t
 = 0;

77 
°¨t
 += 1;

78 
	`udñay
(1);

79 } (
ötc_ã°
 < 
FIFO_NUM
Ë&& (
°¨t
 < 
I2S_TIMEOUT
));

81 i‡(
°¨t
 >
I2S_TIMEOUT
) {

82 
	`¥ötf
("\n\t\tNŸÅriggîÉnough i¡îru±Çumbî: %d\n", 
ötc_ã°
);

83 
∑s£d
 = 0;

88 
	`wrôe_mªg32
(
I2S_PTS_IRQ_EN
, 0);

91 
°©
 = 
	`ªad_mªg32
(
I2S_FIFO_STATUS
);

92 i‡(!(
°©
 & (1 << 
ch_num
))) {

93 
	`¥ötf
("\n\t\àCh™√»%d FIFO i†nŸ fuŒ.\n", 
ch_num
);

94 
∑s£d
 = 0;

99 
i
 = 0; i < 
FIFO_NUM
; i++) {

100 
	`udñay
(100);

101 
vÆ
 = 
	`ªad_mªg32
(
I2S_CH0_FIFO_DATA
 + 4 * 
ch_num
);

102 
	`¥ötf
("\n\t\àPTS %d = 0x%x", 
i
, 
vÆ
);

103 i‡(
vÆ
 == 0)

104 
∑s£d
 = 0;

108 
	`wrôe_mªg32
(
I2S_PTS_ENABLE
, 0);

109 
	}
}

111 
	$CK_I2S_PTS_Te°
() {

112 
CK_UINT8
 
i
;

113 
CK_INT32
 
gë
;

114 
CK_INT32
 
vÆ
;

115 
CK_UINT8
 
edg_ty≥
;

117 
	`¥ötf
("\nVSI I2S PTS Test. . . \n");

119 
	`INIT_STC
();

121 
	`mem£t
(&
i2s_±s_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

123 
i2s_±s_úqh™dÀr
.
dev«me
 = "I2S_PTS";

124 
i2s_±s_úqh™dÀr
.
úqid
 = 
CK_INTC_I2S_PTS
;

125 
i2s_±s_úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_I2S_PTS
 - 64;

126 
i2s_±s_úqh™dÀr
.
h™dÀr
 = 
CK_I2S_PTS_ISR_H™dÀr
;

127 
i2s_±s_úqh™dÀr
.
bÁ°
 = 
FALSE
;

128 
i2s_±s_úqh™dÀr
.
√xt
 = 
NULL
;

130 
	`CK_INTC_Reque°Irq
(&
i2s_±s_úqh™dÀr
, 
AUTO_MODE
);

133 
vÆ
 = 
	`ªad_mªg32
(
CRM_BLK_SW_RST3
Ë| 
I2S_PTS_RST
;

134 
	`wrôe_mªg32
(
CRM_BLK_SW_RST3
, 
vÆ
);

136 
i
 = 0; i < 
CH_NUM
; i++) {

137 
	`¥ötf
("\n\tSèπÅe° I2S PTS Ch™√»%d \n", 
i
);

138 
	`¥ötf
("\n\t\t- - - ReadyÅo startÅest?...\n");

139 
	`¥ötf
("\t\t- - - [y/n] ");

142 
gë
 = 
	`CK_WaôF‹Rïly
();

144 if((
gë
 == 1)) {

145 
edg_ty≥
 = 0;Édg_type < 3;Édg_type++) {

146 
ötc_ã°
 = 0;

147 
∑s£d
 = 1;

148 
	`CH_Te°
(
i
, 
edg_ty≥
);

150 i‡(
∑s£d
)

151 
	`¥ötf
("\n\t\t\à--- Edge%d PASS\n", 
edg_ty≥
);

153 
	`¥ötf
("\n\t\t\à--- Edge%d FAIL\n", 
edg_ty≥
);

157 } i‡(
gë
 == 0)

160 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

164 
	`¥ötf
("\n\tEnd VSI I2S PTS Test\n");

165 
	}
}

	@tiic.c

13 
	~"d©©y≥.h
"

14 
	~"iic.h
"

15 
	~"©24c64.h
"

17 
	$CK_I2C_Te°
(
CK_UINT8
 
i2c_id
) {

18 
CK_UINT8
 
ªt
 = 0;

20 
CK_UINT32
 
byã_wrôe_addr
 = 0x50;

21 
CK_UINT32
 
∑ge_wrôe_addr
 = 0x60;

22 
CK_UINT8
 
byã_wrôe_d©a
[2] = {0x16, 0x18};

23 
CK_UINT8
 
byã_ª˚ive_d©a
 = 0;

24 
CK_UINT8
 
∑ge_wrôe_d©a
[2][20] = {{42, 90, 70, 183, 242, 51, 232, 117,

30 
CK_UINT8
 
∑ge_ª˚ive_d©a
[20] = {0};

31 
CK_UINT8
 
i
 = 0;

32 
CK_UINT8
 
j
 = 0;

33 
CK_UINT32
 
•ìd_suµ‹ãd
[3] = {
I2C_STANDARD_SPEED
,

34 
I2C_FAST_SPEED
,

35 
I2C_FAST_PLUS_SPEED
};

36 
CK_UINT32
 
•ìd
 = 0;

37 
CK_UINT8
 
öt_í
[2] = {0, 1};

38 
CK_UINT8
 
öt_id
 = 0;

39 
CK_UINT8
 
°©us
 = 0;

41 
	`dw_i2c_öô
(
i2c_id
, 
I2C_STANDARD_SPEED
, 1);

42 
öt_id
 = 0; int_id < 2; int_id++) {

43 
•ìd
 = 0; speed < 3; speed++) {

44 
	`¥ötf
("I2C %dÅest in %s with speed %s. . .\n",

45 
i2c_id
,

46 
öt_id
 == 0 ? "polling mode" : "interrupt mode",

47 
•ìd
 == 0 ? "standard" : (speed == 1 ? "fast" : "fastÖlus"));

48 
	`dw_i2c_£t_bus_•ìd
(
i2c_id
, 
•ìd_suµ‹ãd
[
•ìd
]);

49 
i
 = 0; i < 2; i++) {

51 
ªt
 = 
	`byã_wrôe
(
i2c_id
, 
byã_wrôe_addr
,

52 
byã_wrôe_d©a
[
i
], 
öt_í
[
öt_id
]);

53 i‡(
ªt
 != 0) {

54 
	`¥ötf
("failed byte writing of AT24C64át 0x%x \n",

55 
byã_wrôe_addr
);

56 
	`¥ötf
(" - - - FAIL.\n");

57 
°©us
 = 1;

61 
ªt
 = 
	`byã_wrôe
(
i2c_id
, 
byã_wrôe_addr
 - 1, 0, 
öt_í
[
öt_id
]);

62 i‡(
ªt
 != 0) {

63 
	`¥ötf
("failed byte writing of AT24C64át 0x%x \n",

64 
byã_wrôe_addr
);

65 
	`¥ötf
(" - - - FAIL.\n");

66 
°©us
 = 1;

71 
ªt
 = 
	`cuºít_addr_ªad
(
i2c_id
, &
byã_ª˚ive_d©a
,

72 1, 
öt_í
[
öt_id
]);

73 i‡(
ªt
 != 0) {

74 
	`¥ötf
("failed currentáddressÑeading"

75 " o‡AT24C64áà0x%x \n", 
byã_wrôe_addr
);

76 
	`¥ötf
(" - - - FAIL.\n");

77 
°©us
 = 1;

80 i‡(
byã_ª˚ive_d©a
 !
byã_wrôe_d©a
[
i
]) {

81 
	`¥ötf
("read data byte 0x%xÇotÉqualÅo write data"

82 "byã 0x%xáàaddªs†0x%x \n", 
byã_ª˚ive_d©a
,

83 
byã_wrôe_d©a
[
i
], 
byã_wrôe_addr
);

84 
	`¥ötf
(" - - - FAIL.\n");

85 
°©us
 = 1;

90 
ªt
 = 
	`∑ge_wrôe
(
i2c_id
, 
∑ge_wrôe_addr
,

91 
∑ge_wrôe_d©a
[
i
],

92 (
∑ge_wrôe_d©a
[
i
]), 
öt_í
[
öt_id
]);

93 i‡(
ªt
 != 0) {

94 
	`¥ötf
("failedÖage writing of AT24C64 from 0x%x \n",

95 
∑ge_wrôe_addr
);

96 
	`¥ötf
(" - - - FAIL.\n");

97 
°©us
 = 1;

100 
ªt
 = 
	`øndom_ªad
(
i2c_id
, 
∑ge_wrôe_addr
,

101 
∑ge_ª˚ive_d©a
,

102 (
∑ge_wrôe_d©a
[
i
]), 
öt_í
[
öt_id
]);

103 i‡(
ªt
 != 0) {

104 
	`¥ötf
("failedÑandomÑeading of AT24C64 from 0x%x \n",

105 
∑ge_wrôe_addr
);

106 
	`¥ötf
(" - - - FAIL.\n");

107 
°©us
 = 1;

111 
j
 = 0; j < (
∑ge_wrôe_d©a
[
i
]); j++) {

112 i‡(
∑ge_ª˚ive_d©a
[
j
] !
∑ge_wrôe_d©a
[
i
][j]) {

113 
	`¥ötf
("randomÑead data 0x%xÇotÉqualÅo write data"

115 
∑ge_ª˚ive_d©a
[
j
],

116 
∑ge_wrôe_d©a
[
i
][
j
],

117 
∑ge_wrôe_addr
 + 
i
);

118 
	`¥ötf
(" - - - FAIL.\n");

119 
°©us
 = 1;

126 i‡(
°©us
 == 0) {

127 
	`¥ötf
(" - - - PASS.\n");

129 
	}
}

	@tintc.c

9 
	~"ck810.h
"

10 
	~"ötc.h
"

11 
	~"misc.h
"

12 
	~"ckötc.h
"

14 
CKSåu˘_INTCTe°Info
 
	gINTC_AUTO_MODE_TabÀ
[] 
	gALIGN_4
 =

16 {0, 0, 
FALSE
},

17 {1, 63, 
FALSE
},

18 {2, 0, 
TRUE
},

19 {3, 63, 
TRUE
}

23 vﬁ©ûê
CKSåu˘_INTC
 *
	gi¸p_ötc
 = 
PCK_INTC
;

24 
CK_UINT8
 
	götc_ã°
;

25 vﬁ©ûê
CK_UINT32
 
	gúq_¥i
[2];

30 
	$CK_Comm⁄_H™dÀr
()

32 
CK_UINT32
 
IFRL
;

33 
CK_UINT32
 
IFRH
;

34 #i‡
CK_128_INTC


35 
CK_UINT32
 
IFRL1
;

36 
CK_UINT32
 
IFRH1
;

38 
CK_UINT32
 
i
, 
k
;

41 
IFRL
 = 
i¸p_ötc
->IFRL;

42 
IFRH
 = 
i¸p_ötc
->IFRH;

43 #i‡
CK_128_INTC


44 
IFRL1
 = 
i¸p_ötc
->IFRL1;

45 
IFRH1
 = 
i¸p_ötc
->IFRH1;

47 #i‡
CK_INTC_DEBUG


48 
	`¥ötf
("JJJ_DEBUG CK_Comm⁄_H™dÀ∏IFRL=0x%x, IFRH=0x%x\n", 
IFRL
, 
IFRH
);

49 #i‡
CK_128_INTC


50 
	`¥ötf
("JJJ_DEBUG CK_Comm⁄_H™dÀ∏IFRL1=0x%x, IFRH1=0x%x\n", 
IFRL1
, 
IFRH1
);

54 
i
 = 0; i < 32; i++) {

55 
k
 = (1 << 
i
);

57 i‡(
i¸p_ötc
->
IPRL
 & 
k
) {

58 
i¸p_ötc
->
IFRL
 &(~IFRLË& 
k
;

59 
ötc_ã°
++;

62 i‡(
i¸p_ötc
->
IPRH
 & 
k
) {

63 
i¸p_ötc
->
IFRH
 &(~IFRHË& 
k
;

64 
ötc_ã°
++;

66 #i‡
CK_128_INTC


67 i‡(
i¸p_ötc
->
IPRL1
 & 
k
) {

68 
i¸p_ötc
->
IFRL1
 &(~IFRL1Ë& 
k
;

69 
ötc_ã°
++;

72 i‡(
i¸p_ötc
->
IPRH1
 & 
k
) {

73 
i¸p_ötc
->
IFRH1
 &(~IFRH1Ë& 
k
;

74 
ötc_ã°
++;

79 #i‡
CK_INTC_DEBUG


80 
	`¥ötf
("JJJ_DEBUG CK_Comm⁄_H™dÀ∏ötc_ã°=0x%x\n", 
ötc_ã°
);

82 
	}
}

84 
	$CK_IRQ10_H™dÀr
()

87 
CK_UINT32
 
k
;

89 
k
 = (1 << 10);

90 i‡(
i¸p_ötc
->
IPRL
 & 
k
) {

91 
i¸p_ötc
->
IFRL
 &~
k
;

92 
úq_¥i
[0] = 10;

93 #i‡
CK_INTC_DEBUG


94 
	`¥ötf
("JJJ_DEBUG CK_IRQ10_H™dÀ∏úq_¥i[%d]=%d\n", 0, 
úq_¥i
[0]);

97 
	}
}

99 
	$CK_IRQ11_H™dÀr
()

102 
CK_UINT32
 
k
;

104 
k
 = (1 << 11);

105 i‡(
i¸p_ötc
->
IPRL
 & 
k
) {

106 
i¸p_ötc
->
IFRL
 &~
k
;

107 
úq_¥i
[1] = 11;

108 #i‡
CK_INTC_DEBUG


109 
	`¥ötf
("JJJ_DEBUG CK_IRQ11_H™dÀ∏úq_¥i[%d]=%d\n", 1, 
úq_¥i
[1]);

112 
	}
}

114 
	$CK_INTC_Mode_Te°
(
IN
 
CK_UINT32
 
mode
)

116 
CK_UINT32
 
i
, 
j
, 
k
;

117 
PCKSåu˘_INTCTe°Info
 
öfo
;

119 
	`CK_CPU_DisAŒN‹mÆIrq
();

120 
	`CK_CPU_DisAŒFa°Irq
();

122 
	`CK_INTC_Inô
(
mode
);

123 
	`CK_Ex˚±i⁄_Inô
();

125 
i
 = 0; i < 
NR_IRQS
; i++) {

126 
	`¥ötf
(" Triggî N‹mÆ i¡îru±%d %dÅimes\n", 
i
, 
IRQ_MAX_TEST_NUM
);

127 
öfo
 = &(
INTC_AUTO_MODE_TabÀ
[0]);

128 
öfo
->
úqh™dÀr
.
dev«me
 = "Normal";

129 
öfo
->
úqh™dÀr
.
úqid
 = 
i
;

130 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 
i
 % 64;

131 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_Comm⁄_H™dÀr
;

132 
öfo
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

133 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

136 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
mode
);

138 
ötc_ã°
 = 0;

139 
k
 = (
i
 % 64) < 32 ? (1 << (i % 64)) : (1 << ((i % 64) - 32));

141 
j
 = 0; j < 
IRQ_MAX_TEST_NUM
; j++) {

142 i‡–
i
 > 63) {

143 i‡((
i
 - 64) < 32) {

144 
i¸p_ötc
->
IFRL1
 |
k
;

146 
i¸p_ötc
->
IPRL1
 & 
k
)

147 
	`dñay
(1);

149 
i¸p_ötc
->
IFRH1
 |
k
;

150 
i¸p_ötc
->
IPRH1
 & 
k
)

151 
	`dñay
(1);

154 i‡(
i
 < 32) {

155 
i¸p_ötc
->
IFRL
 |
k
;

157 
i¸p_ötc
->
IPRL
 & 
k
)

158 
	`dñay
(1);

160 
i¸p_ötc
->
IFRH
 |
k
;

161 
i¸p_ötc
->
IPRH
 & 
k
)

162 
	`dñay
(1);

165 
	`dñay
(1);

168 if(
ötc_ã°
 =
IRQ_MAX_TEST_NUM
)

169 
	`¥ötf
(" - - - PASS.\n");

171 
	`¥ötf
(" - - - FAILURE.\n");

172 
	`dñay
(1);

176 
i
 = 0; i < 
NR_IRQS
; i++) {

177 
öfo
 = &(
INTC_AUTO_MODE_TabÀ
[0]);

178 
öfo
->
úqh™dÀr
.
dev«me
 = "Normal";

179 
öfo
->
úqh™dÀr
.
úqid
 = 
i
;

180 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 
i
 % 64;

181 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_Comm⁄_H™dÀr
;

182 
öfo
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

183 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

184 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
mode
);

188 
	`dñay
(1);

189 
i
 = 0; i < 
NR_IRQS
; i++) {

190 
	`¥ötf
(" Triggî Fa° i¡îru±%d %dÅimes\n", 
i
, 
IRQ_MAX_TEST_NUM
);

191 
öfo
->
úqh™dÀr
.
dev«me
 = "Fast";

192 
öfo
->
úqh™dÀr
.
úqid
 = 
i
;

193 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 
i
 % 64;

194 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_Comm⁄_H™dÀr
;

195 
öfo
->
úqh™dÀr
.
bÁ°
 = 
TRUE
;

196 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

199 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
mode
);

201 
ötc_ã°
 = 0;

202 
k
 = (
i
 % 64) < 32 ? (1 << (i % 64)) : (1 << ((i % 64) - 32));

203 
j
 = 0; j < 
IRQ_MAX_TEST_NUM
; j++) {

204 i‡(
i
 > 63) {

205 i‡((
i
 - 64) < 32) {

206 
i¸p_ötc
->
IFRL1
 |
k
;

208 
i¸p_ötc
->
IPRL1
 & 
k
)

209 
	`dñay
(1);

211 
i¸p_ötc
->
IFRH1
 |
k
;

212 
i¸p_ötc
->
IPRH1
 & 
k
)

213 
	`dñay
(1);

216 i‡(
i
 < 32) {

217 
i¸p_ötc
->
IFRL
 |
k
;

219 
i¸p_ötc
->
IPRL
 & 
k
)

220 
	`dñay
(1);

222 
i¸p_ötc
->
IFRH
 |
k
;

223 
i¸p_ötc
->
IPRH
 & 
k
)

224 
	`dñay
(1);

229 if(
ötc_ã°
 =
IRQ_MAX_TEST_NUM
)

230 
	`¥ötf
(" - - - PASS.\n");

232 
	`¥ötf
(" - - - FAILURE.\n");

233 
	`dñay
(1);

237 
i
 = 0; i < 
NR_IRQS
; i++) {

238 
öfo
->
úqh™dÀr
.
dev«me
 = "Fast";

239 
öfo
->
úqh™dÀr
.
úqid
 = 
i
;

240 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 
i
 % 64;

241 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_Comm⁄_H™dÀr
;

242 
öfo
->
úqh™dÀr
.
bÁ°
 = 
TRUE
;

243 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

244 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
mode
);

246 
	}
}

248 
	$CK_INTC_PRI_Te°
(
IN
 
CK_UINT32
 
mode
)

250 
PCKSåu˘_INTCTe°Info
 
öfo
;

251 
PCKSåu˘_INTCTe°Info
 
öfo1
;

252 
CK_UINT32
 
k
;

254 
	`CK_INTC_Inô
(
mode
);

255 
	`CK_Ex˚±i⁄_Inô
();

257 
	`¥ötf
(" Trigger Normal IRQ10 with PRI10ánd IRQ11 with PRI11át sameÅime\n");

258 
öfo
 = &(
INTC_AUTO_MODE_TabÀ
[0]);

259 
öfo
->
úqh™dÀr
.
dev«me
 = "Normal10";

260 
öfo
->
úqh™dÀr
.
úqid
 = 10;

261 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 10;

262 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ10_H™dÀr
;

263 
öfo
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

264 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

266 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
mode
);

268 
öfo1
 = &(
INTC_AUTO_MODE_TabÀ
[1]);

269 
öfo1
->
úqh™dÀr
.
dev«me
 = "Normal11";

270 
öfo1
->
úqh™dÀr
.
úqid
 = 11;

271 
öfo1
->
úqh™dÀr
.
¥i‹ôy
 = 11;

272 
öfo1
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ11_H™dÀr
;

273 
öfo1
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

274 
öfo1
->
úqh™dÀr
.
√xt
 = 
NULL
;

275 
	`CK_INTC_Reque°Irq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

276 
úq_¥i
[0] = 0;

277 
úq_¥i
[1] = 0;

279 
k
 = (3 << 10);

280 
i¸p_ötc
->
IFRL
 |
k
;

282 
i¸p_ötc
->
IPRL
 & 
k
)

283 
	`dñay
(1);

285 if(
úq_¥i
[0] == 10 && irq_pri[1] == 11)

286 
	`¥ötf
(" - - - PASS.\n");

288 
	`¥ötf
(" - - - FAILURE.\n");

289 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
mode
);

290 
	`CK_INTC_FªeIrq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

292 
	`¥ötf
(" Trigger Fast IRQ10 with PRI10ánd Normal IRQ11 with PRI11át sameÅime\n");

293 
öfo
 = &(
INTC_AUTO_MODE_TabÀ
[0]);

294 
öfo
->
úqh™dÀr
.
dev«me
 = "Normal10";

295 
öfo
->
úqh™dÀr
.
úqid
 = 10;

296 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 10;

297 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ10_H™dÀr
;

298 
öfo
->
úqh™dÀr
.
bÁ°
 = 
TRUE
;

299 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

301 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
mode
);

303 
öfo1
 = &(
INTC_AUTO_MODE_TabÀ
[1]);

304 
öfo1
->
úqh™dÀr
.
dev«me
 = "Normal11";

305 
öfo1
->
úqh™dÀr
.
úqid
 = 11;

306 
öfo1
->
úqh™dÀr
.
¥i‹ôy
 = 11;

307 
öfo1
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ11_H™dÀr
;

308 
öfo1
->
úqh™dÀr
.
bÁ°
 = 
FALSE
;

309 
öfo1
->
úqh™dÀr
.
√xt
 = 
NULL
;

310 
	`CK_INTC_Reque°Irq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

311 
úq_¥i
[0] = 0;

312 
úq_¥i
[1] = 0;

314 
i¸p_ötc
->
IFRL
 |
k
;

316 
i¸p_ötc
->
IPRL
 & 
k
)

317 
	`dñay
(1);

319 if(
úq_¥i
[0] == 10 && irq_pri[1] == 11)

320 
	`¥ötf
(" - - - PASS.\n");

322 
	`¥ötf
(" - - - FAILURE.\n");

323 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
mode
);

324 
	`CK_INTC_FªeIrq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

326 
	`¥ötf
(" Trigger Fast IRQ10 with PRI10ánd Fast IRQ11 with PRI11át sameÅime\n");

327 
öfo
 = &(
INTC_AUTO_MODE_TabÀ
[0]);

328 
öfo
->
úqh™dÀr
.
dev«me
 = "Normal10";

329 
öfo
->
úqh™dÀr
.
úqid
 = 10;

330 
öfo
->
úqh™dÀr
.
¥i‹ôy
 = 10;

331 
öfo
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ10_H™dÀr
;

332 
öfo
->
úqh™dÀr
.
bÁ°
 = 
TRUE
;

333 
öfo
->
úqh™dÀr
.
√xt
 = 
NULL
;

335 
	`CK_INTC_Reque°Irq
(&(
öfo
->
úqh™dÀr
), 
mode
);

337 
öfo1
 = &(
INTC_AUTO_MODE_TabÀ
[1]);

338 
öfo1
->
úqh™dÀr
.
dev«me
 = "Normal11";

339 
öfo1
->
úqh™dÀr
.
úqid
 = 11;

340 
öfo1
->
úqh™dÀr
.
¥i‹ôy
 = 11;

341 
öfo1
->
úqh™dÀr
.
h™dÀr
 = 
CK_IRQ11_H™dÀr
;

342 
öfo1
->
úqh™dÀr
.
bÁ°
 = 
TRUE
;

343 
öfo1
->
úqh™dÀr
.
√xt
 = 
NULL
;

344 
	`CK_INTC_Reque°Irq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

345 
úq_¥i
[0] = 0;

346 
úq_¥i
[1] = 0;

348 
i¸p_ötc
->
IFRL
 |
k
;

350 
i¸p_ötc
->
IPRL
 & 
k
)

351 
	`dñay
(1);

353 if(
úq_¥i
[0] == 10 && irq_pri[1] == 11)

354 
	`¥ötf
(" - - - PASS.\n");

356 
	`¥ötf
(" - - - FAILURE.\n");

357 
	`CK_INTC_FªeIrq
(&(
öfo
->
úqh™dÀr
), 
mode
);

358 
	`CK_INTC_FªeIrq
(&(
öfo1
->
úqh™dÀr
), 
mode
);

359 
	}
}

364 
	$CK_INTC_Te°
()

366 
	`¥ötf
("\nInterrupt Controller Test. . . \n");

368 
	`¥ötf
(" 1. Auto Vectored Interrupt Mode. . . \n");

369 
	`CK_INTC_Mode_Te°
(
AUTO_MODE
);

370 
	`¥ötf
(" Auto Vectored Interrupt Mode Done \n");

372 
	`dñay
(5);

373 
	`¥ötf
("\n 2. Share Vectored Interrupt Mode. . . \n");

374 
	`CK_INTC_Mode_Te°
(
VECTOR_SHARE_MODE
);

375 
	`¥ötf
(" Share Vectored Interrupt Mode Done \n");

377 
	`dñay
(5);

379 #i‚de‡
CK_128_INTC


380 
	`¥ötf
("\n 3. Unique Vectored Interrupt Mode. . . \n");

381 
	`CK_INTC_Mode_Te°
(
VECTOR_UNIQUE_MODE
);

382 
	`¥ötf
(" Unique Vectored Interrupt Mode Done\n");

385 
	`dñay
(5);

386 
	`¥ötf
("\n 4. Interrupt Priority. . . \n");

387 
	`CK_INTC_PRI_Te°
(
AUTO_MODE
);

388 
	`¥ötf
(" Interrupt Priority Done \n");

390 
	`¥ötf
("\nEnd Interrupt Controller Test. . . \n");

391 
	}
}

	@tmmc.c

15 
	~<°rög.h
>

16 
	~"ck810.h
"

17 
	~"misc.h
"

18 
	~"ötc.h
"

19 
	~"syns_mmc.h
"

21 
	#TEST_DATA
 0xFFEEDD00

	)

22 
	#CARD_ADDR
 32

	)

23 
	#BLOCK_NUM
 2

	)

24 
	#MEM_TEST_SRC
 0xF0040000

	)

25 
	#MEM_TEST_DEST
 0xF0050000

	)

26 
	#TRANSFER_TIMEOUT
 1000

	)

28 #i‡
CONFIG_IS_ASIC


29 
	#SDIO0_CLK
 
SDIO0_DEFAULT_FREQ


	)

30 
	#SDIO1_CLK
 
SDIO1_DEFAULT_FREQ


	)

31 
	#SDIOID_MAX
 2

	)

33 
	#SDIO0_CLK
 30000000

	)

34 
	#SDIO1_CLK
 30000000

	)

35 
	#SDIOID_MAX
 1

	)

38 
CK_UINT8
 
	götc_ã°
;

40 
CKSåu˘_IRQH™dÀr
 
	gsdio_úqh™dÀr
;

42 
	gCK_SDIO_TabÀ
[
SDIOID_MAX
][7] =

45 {0, 
CK_SDIO0_BASEADDRESS
, 
SDCARD
, 
CK_INTC_SDIO0
, 4, 1000000, 
MMC_VDD_32_33
 | 
MMC_VDD_33_34
},

47 #i‡
CONFIG_IS_ASIC


48 {1, 
CK_SDIO1_BASEADDRESS
, 
SDCARD
, 
CK_INTC_SDIO1
, 4, 1000000, 
MMC_VDD_32_33
 | 
MMC_VDD_33_34
},

52 
ölöe
 
	$__˝u_idÀ
()

54 
__asm__
 
	`__vﬁ©ûe__
 ("wait\n");

57 
	}
}

59 
	$CK_SDIO_ISR_H™dÀr
(
u32
 
úq
) {

60 
i
;

61 
u32
 
°©
;

62 
u32
 
vÆ
;

63 
u32
 
iﬂddr
;

64 
u32
 
id
;

66 
i
 = 0; i < 
SDIOID_MAX
; i++) {

67 
id
 = 
CK_SDIO_TabÀ
[
i
][0];

68 
iﬂddr
 = 
CK_SDIO_TabÀ
[
i
][1];

70 
°©
 = 
	`ªad_mªg32
(
iﬂddr
 + 
SDHCI_INT_STATUS
);

72 i‡((
°©
 & 
SDHCI_INT_CARD_INSERT
) == SDHCI_INT_CARD_INSERT) {

73 
ötc_ã°
 = 1;

74 
	`¥ötf
("\n\t\tC¨d in£π i¡ÿSDIO %d\n", 
id
);

75 
	`wrôe_mªg32
(
iﬂddr
 + 
SDHCI_INT_STATUS
, 
SDHCI_INT_CARD_INSERT
);

79 i‡((
°©
 & 
SDHCI_INT_CARD_REMOVE
) == SDHCI_INT_CARD_REMOVE) {

80 
ötc_ã°
 = 1;

81 
	`¥ötf
("C¨dÑemoved from SDIO %d\n", 
id
);

82 
	`wrôe_mªg32
(
iﬂddr
 + 
SDHCI_INT_STATUS
, 
SDHCI_INT_CARD_REMOVE
);

86 i‡((
°©
 & 
SDHCI_INT_RESPONSE
) == SDHCI_INT_RESPONSE) {

87 
	`¥ötf
("\n\t\t\tComm™d Com∂ëêIRQ f‹ SDIO %d\n", 
id
);

88 
ötc_ã°
 = 1;

89 
	`wrôe_mªg32
(
iﬂddr
 + 
SDHCI_INT_STATUS
, 
SDHCI_INT_RESPONSE
);

91 
vÆ
 = 
	`ªad_mªg32
(
iﬂddr
 + 
SDHCI_SIGNAL_ENABLE
);

92 
	`wrôe_mªg32
(
iﬂddr
 + 
SDHCI_INT_STATUS
, 
vÆ
 & ~
SDHCI_INT_RESPONSE
);

95 
	}
}

97 
	$CK_SDIO_PIO_SögÀ_Te°
(
sdhci_ho°
 *
ho°
) {

98 
îr
 = 0;

99 
u32
 
Êags
 = 0;

100 
i
;

101 
°¨t
;

102 
u32
 
d©a
;

103 
u32
 
ªsu…
 = 0;

104 
u32
 
°©
;

105 
mmc_cmd
 
cmd
;

107 
	`¥ötf
("\n\t\tStart PIO Single Block Write/Read Test \n");

110 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

112 
	`sdhci_wrôew
(
ho°
, 0, 
SDHCI_TRANSFER_MODE
);

116 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

117 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

118 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

119 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

121 i‡(
îr
) {

122 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

128 
cmd
.
cmdidx
 = 
MMC_CMD_WRITE_SINGLE_BLOCK
;

129 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

130 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

131 
Êags
 = 
SDHCI_CMD_DATA
;

132 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

134 i‡(
îr
) {

135 
	`¥ötf
("CMD24 WRITE_SINGLE_BLOCK fail\n");

140 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

141 
	`sdhci_wrôñ
(
ho°
, 
TEST_DATA
 + 
i
, 
SDHCI_BUFFER
);

142 
	`udñay
(1000);

145 
°¨t
 = 0;

147 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

148 i‡(
°©
 & 
SDHCI_INT_DATA_END
) {

149 
	`sdhci_wrôñ
(
ho°
, 
SDHCI_INT_DATA_END
, 
SDHCI_INT_STATUS
);

152 
°¨t
 += 1;

153 
	`udñay
(1000);

154 } ((
°©
 & 
SDHCI_INT_DATA_END
) != SDHCI_INT_DATA_END) &&

155 (
°¨t
 < 
TRANSFER_TIMEOUT
));

158 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

159 
	`¥ötf
("TransferÇot complete, Test Fail\n");

164 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

166 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_READ
, 
SDHCI_TRANSFER_MODE
);

170 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

171 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

172 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

173 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

175 i‡(
îr
) {

176 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

181 
cmd
.
cmdidx
 = 
MMC_CMD_READ_SINGLE_BLOCK
;

182 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

183 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

184 
Êags
 = 
SDHCI_CMD_DATA
;

185 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

187 i‡(
îr
) {

188 
	`¥ötf
("CMD17 READ_SINGLE_BLOCK fail\n");

192 
°¨t
 = 0;

194 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

195 i‡(
°©
 & 
SDHCI_INT_DATA_AVAIL
)

197 
°¨t
 += 1;

198 
	`udñay
(1000);

199 } ((
°©
 & 
SDHCI_INT_DATA_AVAIL
) != SDHCI_INT_DATA_AVAIL) &&

200 (
°¨t
 < 
TRANSFER_TIMEOUT
));

202 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

203 
	`¥ötf
("Read dataÅimeout, Test Fail\n");

207 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

208 
d©a
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_BUFFER
);

209 i‡(
d©a
 !(
TEST_DATA
 + 
i
)) {

210 
	`¥ötf
("Ród d©®0x%xÇŸÉquÆÉx≥˘ed d©®0x%x\n", 
d©a
, 
TEST_DATA
 + 
i
);

211 
ªsu…
 = 1;

213 
	`udñay
(1000);

216 i‡(
ªsu…
)

217 
	`¥ötf
("\n\t\t\t ---FAIL\n");

219 
	`¥ötf
("\n\t\t\t ---PASS\n");

220 
	}
}

222 
	$CK_SDIO_PIO_Mu…i_Te°
(
sdhci_ho°
 *
ho°
) {

223 
îr
 = 0;

224 
u32
 
Êags
 = 0;

225 
i
;

226 
°¨t
;

227 
u32
 
d©a
;

228 
u32
 
ªsu…
 = 0;

229 
u32
 
°©
;

230 
u32
 
block
 = 0;

231 
u32
 
mask
 = 0;

232 
mmc_cmd
 
cmd
;

234 
	`¥ötf
("\n\t\tSèπ PIO Mu…ò%d Block†™d AutÿCMD23É«bÀd Wrôe/Ród Te°\n", 
BLOCK_NUM
);

237 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

239 
	`sdhci_wrôew
(
ho°
, 
BLOCK_NUM
, 
SDHCI_BLOCK_COUNT
);

241 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_BLK_CNT_EN
 | 
SDHCI_TRNS_AUTO_CMD23
 |

242 
SDHCI_TRNS_MULTI
, 
SDHCI_TRANSFER_MODE
);

243 #i‡
CK_SDIO_DEBUG


244 
	`¥ötf
("[%s:%d] mode=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`sdhci_ªadw
(
ho°
, 
SDHCI_TRANSFER_MODE
));

248 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

249 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

250 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

251 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

253 i‡(
îr
) {

254 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

260 
cmd
.
cmdidx
 = 
MMC_CMD_WRITE_MULTIPLE_BLOCK
;

261 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

262 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

263 
Êags
 = 
SDHCI_CMD_DATA
;

264 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

266 i‡(
îr
) {

267 
	`¥ötf
("CMD25 WRITE_MULTIPLE_BLOCK fail\n");

272 
block
 = 0; block < 
BLOCK_NUM
; block++) {

273 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

274 
	`sdhci_wrôñ
(
ho°
, 
TEST_DATA
 + 
i
, 
SDHCI_BUFFER
);

275 
	`udñay
(1000);

278 if(
block
 =(
BLOCK_NUM
 - 1))

279 
mask
 = 
SDHCI_INT_DATA_END
;

281 
mask
 = 
SDHCI_INT_SPACE_AVAIL
;

283 
°¨t
 = 0;

285 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

286 #i‡
CK_SDIO_DEBUG


287 
	`¥ötf
("[%s:%d] sèt=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
°©
);

289 i‡(
°©
 & 
mask
) {

290 
	`sdhci_wrôñ
(
ho°
, 
mask
, 
SDHCI_INT_STATUS
);

293 
°¨t
 += 1;

294 
	`udñay
(1000);

295 } ((
°©
 & 
mask
) != mask) &&

296 (
°¨t
 < 
TRANSFER_TIMEOUT
));

299 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

300 
	`¥ötf
("TransferÇot complete, Test Fail\n");

306 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

308 
	`sdhci_wrôew
(
ho°
, 
BLOCK_NUM
, 
SDHCI_BLOCK_COUNT
);

310 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_READ
 | 
SDHCI_TRNS_BLK_CNT_EN
 |

311 
SDHCI_TRNS_AUTO_CMD23
 | 
SDHCI_TRNS_MULTI
, 
SDHCI_TRANSFER_MODE
);

312 #i‡
CK_SDIO_DEBUG


313 
	`¥ötf
("[%s:%d] mode=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
	`sdhci_ªadw
(
ho°
, 
SDHCI_TRANSFER_MODE
));

317 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

318 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

319 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

320 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

322 i‡(
îr
) {

323 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

328 
cmd
.
cmdidx
 = 
MMC_CMD_READ_MULTIPLE_BLOCK
;

329 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

330 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

331 
Êags
 = 
SDHCI_CMD_DATA
;

332 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

334 i‡(
îr
) {

335 
	`¥ötf
("CMD18 READ_MULTIPLE_BLOCK fail\n");

339 
	`udñay
(1000*100);

341 
block
 = 0; block < 
BLOCK_NUM
; block++) {

342 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

343 
d©a
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_BUFFER
);

344 i‡(
d©a
 !(
TEST_DATA
 + 
i
)) {

345 
	`¥ötf
("Ród d©®0x%x from block %dÇŸÉquÆÉx≥˘ed d©®0x%x\n", 
d©a
, 
block
, 
TEST_DATA
 + 
i
);

346 
ªsu…
 = 1;

348 
	`udñay
(1000);

351 if(
block
 =(
BLOCK_NUM
 - 1))

352 
mask
 = 
SDHCI_INT_DATA_END
;

354 
mask
 = 
SDHCI_INT_DATA_AVAIL
;

356 
°¨t
 = 0;

358 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

359 #i‡
CK_SDIO_DEBUG


360 
	`¥ötf
("[%s:%d] sèt=0x%x\n", 
__FUNCTION__
, 
__LINE__
, 
°©
);

362 i‡(
°©
 & 
mask
) {

363 
	`sdhci_wrôñ
(
ho°
, 
mask
, 
SDHCI_INT_STATUS
);

366 
°¨t
 += 1;

367 
	`udñay
(1000);

368 } ((
°©
 & 
mask
) != mask) &&

369 (
°¨t
 < 
TRANSFER_TIMEOUT
));

372 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

373 
	`¥ötf
("TransferÇot complete, Test Fail\n");

378 i‡(
ªsu…
)

379 
	`¥ötf
("\n\t\t\t ---FAIL\n");

381 
	`¥ötf
("\n\t\t\t ---PASS\n");

382 
	}
}

384 
	$CK_SDIO_SDMA_SögÀ_Te°
(
sdhci_ho°
 *
ho°
) {

385 
îr
 = 0;

386 
u32
 
Êags
 = 0;

387 
i
;

388 
°¨t
;

389 
u32
 
d©a
;

390 
u32
 
ªsu…
 = 0;

391 
u32
 
°©
;

392 
u32
 
˘æ
;

393 
mmc_cmd
 
cmd
;

395 
	`¥ötf
("\n\t\tSèπ SDMA SögÀ Block Wrôe/Ród Te° Addr=0x%x\n", 
MEM_TEST_SRC
);

398 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

399 
	`wrôe_mªg32
((
MEM_TEST_SRC
 + 
i
 * 4), 
TEST_DATA
 + i);

403 
	`sdhci_wrôñ
(
ho°
, 
MEM_TEST_SRC
, 
SDHCI_DMA_ADDRESS
);

405 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

407 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

408 
˘æ
 |
SDHCI_CTRL_SDMA
;

409 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

411 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_DMA
, 
SDHCI_TRANSFER_MODE
);

415 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

416 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

417 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

418 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

420 i‡(
îr
) {

421 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

427 
cmd
.
cmdidx
 = 
MMC_CMD_WRITE_SINGLE_BLOCK
;

428 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

429 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

430 
Êags
 = 
SDHCI_CMD_DATA
;

431 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

433 i‡(
îr
) {

434 
	`¥ötf
("CMD24 WRITE_SINGLE_BLOCK fail\n");

438 
°¨t
 = 0;

440 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

441 i‡(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) {

442 
	`sdhci_wrôñ
(
ho°
, (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
), 
SDHCI_INT_STATUS
);

445 
°¨t
 += 1;

446 
	`udñay
(1000);

447 } !(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) &&

448 (
°¨t
 < 
TRANSFER_TIMEOUT
));

451 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

452 
	`¥ötf
("TransferÇot complete, Test Fail\n");

456 #i‡
CK_SDIO_DEBUG


457 
	`¥ötf
("\n\t\à°¨àSDMA sögÀ blockÑódÅÿaddr=0x%x", 
MEM_TEST_DEST
);

460 
	`sdhci_wrôñ
(
ho°
, 
MEM_TEST_DEST
, 
SDHCI_DMA_ADDRESS
);

462 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

464 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

465 
˘æ
 |
SDHCI_CTRL_SDMA
;

466 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

468 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_DMA
 | 
SDHCI_TRNS_READ
, 
SDHCI_TRANSFER_MODE
);

472 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

473 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

474 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

475 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

477 i‡(
îr
) {

478 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

484 
cmd
.
cmdidx
 = 
MMC_CMD_READ_SINGLE_BLOCK
;

485 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

486 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

487 
Êags
 = 
SDHCI_CMD_DATA
;

488 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

490 i‡(
îr
) {

491 
	`¥ötf
("CMD17 READ_SINGLE_BLOCK fail\n");

495 
°¨t
 = 0;

497 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

498 i‡(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) {

499 
	`sdhci_wrôñ
(
ho°
, (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
), 
SDHCI_INT_STATUS
);

502 
°¨t
 += 1;

503 
	`udñay
(1000);

504 } !(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) &&

505 (
°¨t
 < 
TRANSFER_TIMEOUT
));

507 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

508 
	`¥ötf
("Read dataÅimeout, Test Fail\n");

512 
i
 = 0; i < (
BLOCK_SIZE
 / 4); i++) {

513 
d©a
 = 
	`ªad_mªg32
(
MEM_TEST_DEST
 + 
i
 * 4);

514 i‡(
d©a
 !(
TEST_DATA
 + 
i
)) {

515 
	`¥ötf
("Ród d©®0x%xÇŸÉquÆÉx≥˘ed d©®0x%x\n", 
d©a
, 
TEST_DATA
 + 
i
);

516 
ªsu…
 = 1;

518 
	`udñay
(1000);

521 i‡(
ªsu…
)

522 
	`¥ötf
("\n\t\t\t ---FAIL\n");

524 
	`¥ötf
("\n\t\t\t ---PASS\n");

525 
	}
}

527 
	$CK_SDIO_SDMA_Mu…i_Te°
(
sdhci_ho°
 *
ho°
) {

528 
îr
 = 0;

529 
u32
 
Êags
 = 0;

530 
i
;

531 
°¨t
;

532 
u32
 
d©a
;

533 
u32
 
ªsu…
 = 0;

534 
u32
 
°©
;

535 
u32
 
˘æ
;

536 
mmc_cmd
 
cmd
;

538 
	`¥ötf
("\n\t\tSèπ SDMA Mu…ò%d Block†™d AutÿCMD12É«bÀd Wrôe/Ród Te° \n", 
BLOCK_NUM
);

540 #i‡
CK_SDIO_DEBUG


541 
	`¥ötf
("\n\t\tJJJ_DEBUG sèπ SDMA mu…òblock wrôêtÿaddr=0x%x", 
MEM_TEST_SRC
);

545 
i
 = 0; i < (
BLOCK_SIZE
 * 
BLOCK_NUM
 / 4); i++) {

546 
	`wrôe_mªg32
((
MEM_TEST_SRC
 + 
i
 * 4), 
TEST_DATA
 + i);

550 
	`sdhci_wrôñ
(
ho°
, 
MEM_TEST_SRC
, 
SDHCI_DMA_ADDRESS
);

552 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

554 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

555 
˘æ
 |
SDHCI_CTRL_SDMA
;

556 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

558 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_DMA
 | 
SDHCI_TRNS_BLK_CNT_EN
 | 
SDHCI_TRNS_AUTO_CMD12
 |

559 
SDHCI_TRNS_MULTI
, 
SDHCI_TRANSFER_MODE
);

561 
	`sdhci_wrôew
(
ho°
, 
BLOCK_NUM
, 
SDHCI_BLOCK_COUNT
);

565 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

566 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

567 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

568 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

570 i‡(
îr
) {

571 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

577 
cmd
.
cmdidx
 = 
MMC_CMD_WRITE_MULTIPLE_BLOCK
;

578 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

579 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

580 
Êags
 = 
SDHCI_CMD_DATA
;

581 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

583 i‡(
îr
) {

584 
	`¥ötf
("CMD25 WRITE_SINGLE_BLOCK fail\n");

588 
°¨t
 = 0;

590 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

591 i‡(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) {

592 
	`sdhci_wrôñ
(
ho°
, (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
), 
SDHCI_INT_STATUS
);

595 
°¨t
 += 1;

596 
	`udñay
(1000);

597 } !(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) &&

598 (
°¨t
 < 
TRANSFER_TIMEOUT
));

601 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

602 
	`¥ötf
("TransferÇot complete, Test Fail\n");

606 #i‡
CK_SDIO_DEBUG


607 
	`¥ötf
("\n\t\à°¨àSDMA mu…òblockÑódÅÿaddr=0x%x", 
MEM_TEST_DEST
);

610 
	`sdhci_wrôñ
(
ho°
, 
MEM_TEST_DEST
, 
SDHCI_DMA_ADDRESS
);

612 
	`sdhci_wrôew
(
ho°
, 
BLOCK_SIZE
, 
SDHCI_BLOCK_SIZE
);

614 
	`sdhci_wrôew
(
ho°
, 
BLOCK_NUM
, 
SDHCI_BLOCK_COUNT
);

616 
˘æ
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_HOST_CONTROL
);

617 
˘æ
 |
SDHCI_CTRL_SDMA
;

618 
	`sdhci_wrôeb
(
ho°
, 
˘æ
, 
SDHCI_HOST_CONTROL
);

620 
	`sdhci_wrôew
(
ho°
, 
SDHCI_TRNS_DMA
 | 
SDHCI_TRNS_BLK_CNT_EN
 | 
SDHCI_TRNS_AUTO_CMD12
 |

621 
SDHCI_TRNS_MULTI
 | 
SDHCI_TRNS_READ
, 
SDHCI_TRANSFER_MODE
);

625 
cmd
.
cmdidx
 = 
MMC_CMD_SET_BLOCKLEN
;

626 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

627 
cmd
.
cmd¨g
 = 
BLOCK_SIZE
;

628 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 0);

630 i‡(
îr
) {

631 
	`¥ötf
("CMD16 SET_BLOCKLEN fail\n");

637 
cmd
.
cmdidx
 = 
MMC_CMD_READ_MULTIPLE_BLOCK
;

638 
cmd
.
ª•_ty≥
 = 
MMC_RSP_R1
;

639 
cmd
.
cmd¨g
 = 
CARD_ADDR
;

640 
Êags
 = 
SDHCI_CMD_DATA
;

641 
îr
 = 
	`mmc_£nd_cmd
(
ho°
, &
cmd
, 
Êags
);

643 i‡(
îr
) {

644 
	`¥ötf
("CMD18 READ_MULTIPLE_BLOCK fail\n");

648 
°¨t
 = 0;

650 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

651 i‡(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) {

652 
	`sdhci_wrôñ
(
ho°
, (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
), 
SDHCI_INT_STATUS
);

655 
°¨t
 += 1;

656 
	`udñay
(1000);

657 } !(
°©
 & (
SDHCI_INT_DATA_END
 | 
SDHCI_INT_DMA_END
)) &&

658 (
°¨t
 < 
TRANSFER_TIMEOUT
));

660 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

661 
	`¥ötf
("Read dataÅimeout, Test Fail\n");

665 
i
 = 0; i < (
BLOCK_SIZE
 * 
BLOCK_NUM
 / 4); i++) {

666 
d©a
 = 
	`ªad_mªg32
(
MEM_TEST_DEST
 + 
i
 * 4);

667 i‡(
d©a
 !(
TEST_DATA
 + 
i
)) {

668 
	`¥ötf
("Ród d©®0x%xÇŸÉquÆÉx≥˘ed d©®0x%x\n", 
d©a
, 
TEST_DATA
 + 
i
);

669 
ªsu…
 = 1;

671 
	`udñay
(1000);

674 i‡(
ªsu…
)

675 
	`¥ötf
("\n\t\t\t ---FAIL\n");

677 
	`¥ötf
("\n\t\t\t ---PASS\n");

678 
	}
}

680 
	$CK_SDIO_IRQ_Te°
(
sdhci_ho°
 *
ho°
) {

681 
u32
 
vÆ
;

682 
u32
 
°¨t
;

683 
mmc_cmd
 
cmd
;

685 
	`¥ötf
("\n\t\tStart IRQ Trigger Test \n");

687 
ötc_ã°
 = 0;

689 
vÆ
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_SIGNAL_ENABLE
);

690 
	`sdhci_wrôñ
(
ho°
, 
vÆ
 | 
SDHCI_INT_RESPONSE
, 
SDHCI_SIGNAL_ENABLE
);

693 
cmd
.
cmdidx
 = 
MMC_CMD_GO_IDLE_STATE
;

694 
cmd
.
cmd¨g
 = 0;

695 
cmd
.
ª•_ty≥
 = 
MMC_RSP_NONE
;

697 
	`sdhci_wrôñ
(
ho°
, 
cmd
.
cmdidx
, 
SDHCI_ARGUMENT
);

698 
	`sdhci_wrôew
(
ho°
, 
	`SDHCI_MAKE_CMD
(
cmd
.
cmd¨g
, 0), 
SDHCI_COMMAND
);

700 
°¨t
 = 0;

702 i‡(
ötc_ã°
)

704 
°¨t
 += 1;

705 
	`udñay
(1000);

706 } (!
ötc_ã°
Ë&& (
°¨t
 < 
TRANSFER_TIMEOUT
));

709 i‡(
ötc_ã°
)

710 
	`¥ötf
("\n\t\t\t ---PASS\n");

712 
	`¥ötf
("\n\t\t\t ---FAIL\n");

713 
	}
}

715 
	$CK_SDIO_HŸ∂ug_Te°
(
sdhci_ho°
 *
ho°
) {

716 
u32
 
°©
;

717 
u32
 
timeout
;

718 
u32
 
vÆ
;

720 
	`¥ötf
("\n\t\tStart SD card Hotplug Test\n");

723 
vÆ
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_SIGNAL_ENABLE
);

724 
	`sdhci_wrôñ
(
ho°
, 
vÆ
 & (~ (
SDHCI_INT_CARD_INSERT
 | 
SDHCI_INT_CARD_REMOVE
)), 
SDHCI_SIGNAL_ENABLE
);

726 
	`¥ötf
("\n\t\t\t NowÑemove SD card\n");

728 
timeout
 = 600;

730 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

732 i‡(
timeout
-- > 0)

733 
	`mdñay
(100);

735 
	`¥ötf
("WaitÑemove interruptÅimeout, Test Fail\n");

738 } !(
°©
 & 
SDHCI_INT_CARD_REMOVE
));

740 
	`¥ötf
("\n\t\t\t Now insert SD card\n");

742 
timeout
 = 600;

744 
°©
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_STATUS
);

746 i‡(
timeout
-- > 0)

747 
	`mdñay
(100);

749 
	`¥ötf
("Wait insert interruptÅimeout, Test Fail\n");

752 } !(
°©
 & 
SDHCI_INT_CARD_INSERT
));

754 
	`¥ötf
("\t\tSD card Hotplug Test\n \t\t\t ---PASS\n");

755 
	}
}

757 
	$CK_SDIO_Wakeup_Te°
(
sdhci_ho°
 *
ho°
) {

758 
u32
 
vÆue
;

759 
u32
 
gë
;

761 
	`mem£t
(&
sdio_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

763 
sdio_úqh™dÀr
.
dev«me
 = "SDIO_Wakeup";

764 
sdio_úqh™dÀr
.
úqid
 = 
CK_INTC_SDIO0_WAKEUP
;

765 
sdio_úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_SDIO0_WAKEUP
;

766 
sdio_úqh™dÀr
.
h™dÀr
 = 
CK_SDIO_ISR_H™dÀr
;

767 
sdio_úqh™dÀr
.
bÁ°
 = 
FALSE
;

768 
sdio_úqh™dÀr
.
√xt
 = 
NULL
;

770 
	`CK_INTC_Reque°Irq
(&
sdio_úqh™dÀr
, 
AUTO_MODE
);

772 
vÆue
 = 
	`sdhci_ªadb
(
ho°
, 
SDHCI_WAKE_UP_CONTROL
);

773 
	`sdhci_wrôeb
(
ho°
, 
SDHCI_WAKE_ON_INT
 | 
SDHCI_WAKE_ON_INSERT
 | 
SDHCI_WAKE_ON_REMOVE
, 
SDHCI_WAKE_UP_CONTROL
);

774 #i‡
CK_SDIO_DEBUG


775 
	`¥ötf
("JJJ_DEBUG SDHCI_WAKE_UP_CONTROL=0x%x\n", 
	`sdhci_ªadb
(
ho°
, 
SDHCI_WAKE_UP_CONTROL
));

778 
vÆue
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_ENABLE
);

779 
	`sdhci_wrôñ
(
ho°
, 
vÆue
 | 
SDHCI_INT_CARD_INSERT
 | 
SDHCI_INT_CARD_REMOVE
, 
SDHCI_INT_ENABLE
);

780 #i‡
CK_SDIO_DEBUG


781 
	`¥ötf
("JJJ_DEBUG SDHCI_INT_ENABLE=0x%x\n", 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_ENABLE
));

784 
vÆue
 = 
	`sdhci_ªadl
(
ho°
, 
SDHCI_SIGNAL_ENABLE
);

785 
	`sdhci_wrôñ
(
ho°
, 
vÆue
 | 
SDHCI_INT_CARD_INSERT
 | 
SDHCI_INT_CARD_REMOVE
, 
SDHCI_SIGNAL_ENABLE
);

786 #i‡
CK_SDIO_DEBUG


787 
	`¥ötf
("JJJ_DEBUG SDHCI_SIGNAL_ENABLE=0x%x\n", 
	`sdhci_ªadl
(
ho°
, 
SDHCI_INT_ENABLE
));

790 
	`¥ötf
("\n\t\tStart SD card Hotplug Test\n");

792 
	`sdhci_wrôñ
(
ho°
, 0xFFFFFFFF, 
SDHCI_INT_STATUS
);

794 
ötc_ã°
 = 0;

795 
	`¥ötf
("\n\n\t- - - ReadyÅo start wakeupÅest?...\n");

796 
	`¥ötf
("- - - [y/n] ");

799 
gë
 = 
	`CK_WaôF‹Rïly
();

800 if((
gë
 == 1)) {

801 
	`¥ötf
("\n\n\t CPUÉnter idle state \n");

802 
	`__˝u_idÀ
();

804 if(
ötc_ã°
)

807 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

809 
	}
}

813 
	$CK_SDIO_Te°
()

815 
îr
;

816 
CK_UINT32
 
i
;

817 
sdhci_ho°
 
ho°
;

819 
	`¥ötf
("\nSynopsys SDIO Controller Test. . . \n");

821 
i
 = 0; i < 
SDIOID_MAX
; i++) {

822 
	`mem£t
(&
ho°
,0,(
sdhci_ho°
));

823 
	`mem£t
(&
sdio_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

825 
ho°
.
id
 = 
CK_SDIO_TabÀ
[
i
][0];

826 
ho°
.
iﬂddr
 = 
CK_SDIO_TabÀ
[
i
][1];

827 
ho°
.
ˇrd_ty≥
 = 
CK_SDIO_TabÀ
[
i
][2];

828 
ho°
.
úq
 = 
CK_SDIO_TabÀ
[
i
][3];

829 
ho°
.
bus_width
 = 
CK_SDIO_TabÀ
[
i
][4];

830 
ho°
.
˛ock
 = 
CK_SDIO_TabÀ
[
i
][5];

831 i‡(
i
 == 0)

832 
ho°
.
f_max
 = 
SDIO0_CLK
;

834 
ho°
.
f_max
 = 
SDIO1_CLK
;

835 
ho°
.
vﬁèges
 = 
CK_SDIO_TabÀ
[
i
][6];

836 
ho°
.
has_öô
 = 0;

838 
	`¥ötf
("\n\tSèπ Te° SDIO %d wôh %†ˇrd %d bô mode\n", 
ho°
.
id
,

839 
ho°
.
ˇrd_ty≥
 ? "eMMC" : "SD", ho°.
bus_width
);

842 
sdio_úqh™dÀr
.
dev«me
 = "SDIO";

843 
sdio_úqh™dÀr
.
úqid
 = 
ho°
.
úq
;

844 
sdio_úqh™dÀr
.
¥i‹ôy
 = 
ho°
.
úq
;

845 
sdio_úqh™dÀr
.
h™dÀr
 = 
CK_SDIO_ISR_H™dÀr
;

846 
sdio_úqh™dÀr
.
bÁ°
 = 
FALSE
;

847 
sdio_úqh™dÀr
.
√xt
 = 
NULL
;

849 
	`CK_INTC_Reque°Irq
(&
sdio_úqh™dÀr
, 
AUTO_MODE
);

851 
îr
 = 
	`sdhci_£tup_ho°
(&
ho°
);

853 if(
îr
) {

854 
	`¥ötf
("\n\tSDIO %d sëu∞Áû,Åe° Faû\n", 
ho°
.
id
);

858 
	`CK_SDIO_PIO_SögÀ_Te°
(&
ho°
);

859 
	`CK_SDIO_PIO_Mu…i_Te°
(&
ho°
);

860 
	`CK_SDIO_SDMA_SögÀ_Te°
(&
ho°
);

861 
	`CK_SDIO_SDMA_Mu…i_Te°
(&
ho°
);

862 
	`CK_SDIO_IRQ_Te°
(&
ho°
);

863 i‡(
ho°
.
ˇrd_ty≥
 =
SDCARD
)

864 
	`CK_SDIO_HŸ∂ug_Te°
(&
ho°
);

865 i‡(
i
 == 0)

866 
	`CK_SDIO_Wakeup_Te°
(&
ho°
);

867 
	`¥ötf
("\n\tEnd Te° SDIO %d \n", 
ho°
.
id
);

870 
	`¥ötf
("\nEnd Synopsys SDIO Controller Test. . . \n");

871 
	}
}

	@tpinmux.c

10 
	~"ck810.h
"

11 
	~"misc.h
"

12 
	~"gpio.h
"

13 
	~"pömux.h
"

15 
	$do_pömux_ã°
(
u32
 
id
) {

16 
gpio0
, 
gpio1
;

17 
gpio0_ﬁd
, 
gpio1_ﬁd
;

18 
∑s£d
 = 0;

19 
pmux_off£t1
, 
pmux_off£t2
;

20 
pmux_gpio1
, 
pmux_gpio2
;

21 
pmux_p‹t1
, 
pmux_p‹t2
;

23 
	`¥ötf
 ("\n");

24 
id
) {

26 
	`¥ötf
 ("\nPWMÖin MUXÅest. . . \n\n");

27 
	`¥ötf
("please connect:\n"

30 
pmux_off£t1
 = 
POLARIS_PMUX_PWM4
;

31 
pmux_off£t2
 = 
POLARIS_PMUX_PWM6
;

32 
pmux_gpio1
 = 31;

33 
pmux_gpio2
 = 30;

34 
pmux_p‹t1
 = 
GPIO_C
;

35 
pmux_p‹t2
 = 
GPIO_D
;

38 
	`¥ötf
 ("\nAPTSÖin MUXÅest. . . \n\n");

39 
	`¥ötf
("\tplease connect:\n"

42 
pmux_off£t1
 = 
POLARIS_PMUX_APTS_SPI_CLK
;

43 
pmux_off£t2
 = 
POLARIS_PMUX_APTS_SPI_MOSI
;

44 
pmux_gpio1
 = 24;

45 
pmux_gpio2
 = 25;

46 
pmux_p‹t1
 = 
GPIO_C
;

47 
pmux_p‹t2
 = 
GPIO_C
;

50 
	`¥ötf
 ("\nTS-PSIÖin MUXÅest. . . \n\n");

51 
	`¥ötf
("\tplease connect:\n"

54 
pmux_off£t1
 = 
POLARIS_PMUX_TS_PSI_DATA0
;

55 
pmux_off£t2
 = 
POLARIS_PMUX_TS_PSI_DATA1
;

56 
pmux_gpio1
 = 15;

57 
pmux_gpio2
 = 16;

58 
pmux_p‹t1
 = 
GPIO_C
;

59 
pmux_p‹t2
 = 
GPIO_C
;

62 
	`¥ötf
 ("\nSCI7816Öin MUXÅest. . . \n\n");

63 
	`¥ötf
("\tplease connect:\n"

66 
pmux_off£t1
 = 
POLARIS_PMUX_SCI7816_CLK
;

67 
pmux_off£t2
 = 
POLARIS_PMUX_SCI7816_IO
;

68 
pmux_gpio1
 = 9;

69 
pmux_gpio2
 = 11;

70 
pmux_p‹t1
 = 
GPIO_C
;

71 
pmux_p‹t2
 = 
GPIO_C
;

74 
	`¥ötf
 ("\nUARTÖin MUXÅest. . . \n\n");

75 
	`¥ötf
("\tplease connect:\n"

78 
pmux_off£t1
 = 
POLARIS_PMUX_DSP_UART0_RXD
;

79 
pmux_off£t2
 = 
POLARIS_PMUX_DSP_UART0_TXD
;

80 
pmux_gpio1
 = 3;

81 
pmux_gpio2
 = 4;

82 
pmux_p‹t1
 = 
GPIO_C
;

83 
pmux_p‹t2
 = 
GPIO_C
;

86 
	`¥ötf
 ("\nNFCÖin MUXÅest. . . \n\n");

87 
	`¥ötf
("\tplease connect:\n"

90 
pmux_off£t1
 = 
POLARIS_PMUX_NFC_CLE
;

91 
pmux_off£t2
 = 
POLARIS_PMUX_NFC_ALE
;

92 
pmux_gpio1
 = 4;

93 
pmux_gpio2
 = 5;

94 
pmux_p‹t1
 = 
GPIO_D
;

95 
pmux_p‹t2
 = 
GPIO_D
;

98 
	`¥ötf
 ("\nQSPIÖin MUXÅest. . . \n\n");

99 
	`¥ötf
("\tplease connect:\n"

102 
pmux_off£t1
 = 
POLARIS_PMUX_SFC_CLK
;

103 
pmux_off£t2
 = 
POLARIS_PMUX_SFC_SIO_IO0
;

104 
pmux_gpio1
 = 23;

105 
pmux_gpio2
 = 25;

106 
pmux_p‹t1
 = 
GPIO_D
;

107 
pmux_p‹t2
 = 
GPIO_D
;

110 
	`¥ötf
 ("\nJTAGÖin MUXÅest (boot from UART isÑecommended). . . \n\n");

111 
	`¥ötf
("\tplease connect:\n"

114 
pmux_off£t1
 = 
POLARIS_PMUX_JTAG_TDI_CK860
;

115 
pmux_off£t2
 = 
POLARIS_PMUX_JTAG_TDO_CK860
;

116 
pmux_gpio1
 = 1;

117 
pmux_gpio2
 = 2;

118 
pmux_p‹t1
 = 
GPIO_B
;

119 
pmux_p‹t2
 = 
GPIO_B
;

125 
	`¥ötf
("\tconnect done? continue? - - - [y/n] ");

126 
	`CK_WaôF‹Rïly
() != 1) {

127 
	`¥ötf
 ("\n\tstartÅest? - - - [y/n] ");

130 
	`¥ötf
 ("\n\n\tset MUXÖinás GPIO function\n");

131 
	`pömux_£t_func
(
pmux_off£t1
, 1);

132 
	`pömux_£t_func
(
pmux_off£t2
, 1);

133 
	`¥ötf
 ("\t[%s:%d], *** CTRL + CÅÿexôÅe° ***\n", 
__FUNCTION__
, 
__LINE__
);

134 
	`dw_Gpio_Ouçut
(
pmux_p‹t1
, 
pmux_gpio1
, 1);

135 
	`dw_Gpio_Ouçut
(
pmux_p‹t2
, 
pmux_gpio2
, 1);

137 
gpio0
 = 
	`dw_Gpio_I≈ut
(
GPIO_A
, 16);

138 
gpio1
 = 
	`dw_Gpio_I≈ut
(
GPIO_A
, 17);

139 
	`¥ötf
 ("\t[%s:%d], gpio0=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio0
);

140 
	`¥ötf
 ("\t[%s:%d], gpio1=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio1
);

141 
gpio0_ﬁd
 = 
gpio0
;

142 
gpio1_ﬁd
 = 
gpio1
;

144 
	`dw_Gpio_Ouçut
(
pmux_p‹t1
, 
pmux_gpio1
, 0);

145 
	`dw_Gpio_Ouçut
(
pmux_p‹t2
, 
pmux_gpio2
, 0);

147 
gpio0
 = 
	`dw_Gpio_I≈ut
(
GPIO_A
, 16);

148 
gpio1
 = 
	`dw_Gpio_I≈ut
(
GPIO_A
, 17);

149 i‡(
gpio0
 !
gpio0_ﬁd
) {

150 
∑s£d
 = 1;

151 
	`¥ötf
 ("\t[%s:%d], gpio0=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio0
);

152 
gpio0_ﬁd
 = 
gpio0
;

155 i‡(
gpio1
 !
gpio1_ﬁd
) {

156 
∑s£d
 = 1;

157 
	`¥ötf
 ("\t[%s:%d], gpio1=%d\n", 
__FUNCTION__
, 
__LINE__
, 
gpio1
);

158 
gpio1_ﬁd
 = 
gpio1
;

161 i‡(0x03 =
	`gëch¨
()) {

162 i‡(
∑s£d
 == 0) {

163 
	`¥ötf
 ("\t\t - - -FAILURE\n");

165 
	`¥ötf
 ("\t\t - - -PASS\n");

171 
	`¥ötf
 ("\tset MUXÖinás specific function\n");

172 
	`pömux_£t_func
(
pmux_off£t1
, 0);

173 
	`pömux_£t_func
(
pmux_off£t2
, 0);

174 
	}
}

176 
	$pö_mux_ã°
() {

177 
u8
 
ã°_id
 = 0;

178 
u8
 
ch
;

181 
	`¥ötf
("\nplease chooseÖin MUXÅest module:\n");

182 
	`¥ötf
("0 -- PWM/GPIO\n");

183 
	`¥ötf
("1 -- APTS/GPIO\n");

184 
	`¥ötf
("2 -- TS_PSI/GPIO\n");

185 
	`¥ötf
("3 -- SCI7816/GPIO\n");

186 
	`¥ötf
("4 -- UART/GPIO\n");

187 
	`¥ötf
("5 -- NFC/GPIO\n");

188 
	`¥ötf
("6 -- QSPI/GPIO\n");

189 
	`¥ötf
("7 -- JTAG/GPIO\n");

190 
	`¥ötf
("> ");

191 
ch
 = 
	`gëch¨
();

192 
	`putch¨
(
ch
);

193 
ã°_id
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
ch
);

194 i‡((
ã°_id
 >= 0) && (test_id <= 7)) {

199 
	`do_pömux_ã°
(
ã°_id
);

201 
	`¥ötf
("\npin MUXÅest done. . . \n");

202 
	}
}

	@tpll.c

10 
	~"ck810.h
"

11 
	~"misc.h
"

12 
	~"¸m.h
"

16 
	$ù_˛k_g©ög_ã°
() {

17 
u32
 
vÆue
;

18 
u32
 
deÁu…_vÆue
;

19 
u32
 
∂l_ªg
;

21 
	`¥ötf
("\nIP clock gatingÅest. . . \n");

23 
	`¥ötf
("\n\n\t- - - ISP0 Clock Gating...\n");

25 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_ISP0_Sœve
 + 0x008);

26 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

27 
∂l_ªg
 |
	`BIT
(1);

28 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

29 
vÆue
 = 
	`ªad_mªg32
(
CK_ISP0_Sœve
 + 0x008);

30 
∂l_ªg
 &~
	`BIT
(1);

31 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

32 i‡(
deÁu…_vÆue
 !
vÆue
)

33 
	`¥ötf
("\n\t\t- - - PASS...\n");

35 
	`¥ötf
("\n\t\t- - - FAIL...\n");

37 
	`¥ötf
("\n\n\t- - - ISP1 Clock Gating...\n");

39 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_ISP1_Sœve
 + 0x008);

40 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

41 
∂l_ªg
 |
	`BIT
(2);

42 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

43 
vÆue
 = 
	`ªad_mªg32
(
CK_ISP1_Sœve
 + 0x008);

44 
∂l_ªg
 &~
	`BIT
(2);

45 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

46 i‡(
deÁu…_vÆue
 !
vÆue
)

47 
	`¥ötf
("\n\t\t- - - PASS...\n");

49 
	`¥ötf
("\n\t\t- - - FAIL...\n");

51 
	`¥ötf
("\n\n\t- - - GC620 Clock Gating...\n");

53 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_GC620_BASE
 + 0x024);

54 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

55 
∂l_ªg
 |
	`BIT
(3);

56 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

57 
vÆue
 = 
	`ªad_mªg32
(
CK_GC620_BASE
 + 0x024);

58 
∂l_ªg
 &~
	`BIT
(3);

59 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

60 i‡(
deÁu…_vÆue
 !
vÆue
)

61 
	`¥ötf
("\n\t\t- - - PASS...\n");

63 
	`¥ötf
("\n\t\t- - - FAIL...\n");

65 
	`¥ötf
("\n\n\t- - - AVS2 Clock Gating...\n");

66 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_AVS2_BASE
 + 0x3004);

67 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

68 
∂l_ªg
 |
	`BIT
(7);

69 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

70 
vÆue
 = 
	`ªad_mªg32
(
CK_AVS2_BASE
 + 0x3004);

71 
∂l_ªg
 &~
	`BIT
(7);

72 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

73 i‡(
deÁu…_vÆue
 !
vÆue
)

74 
	`¥ötf
("\n\t\t- - - PASS...\n");

76 
	`¥ötf
("\n\t\t- - - FAIL...\n");

78 
	`¥ötf
("\n\n\t- - - VC8000E Clock Gating...\n");

80 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_VC8000E_BASE
 + 0x00);

81 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

82 
∂l_ªg
 |
	`BIT
(4);

83 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

84 
vÆue
 = 
	`ªad_mªg32
(
CK_VC8000E_BASE
 + 0x00);

85 
∂l_ªg
 &~
	`BIT
(4);

86 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

87 i‡(
deÁu…_vÆue
 !
vÆue
)

88 
	`¥ötf
("\n\t\t- - - PASS...\n");

90 
	`¥ötf
("\n\t\t- - - FAIL...\n");

92 
	`¥ötf
("\n\n\t- - - VC8000D Clock Gating...\n");

94 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_VC8000D_BASE
 + 0x00);

95 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG1
);

96 
∂l_ªg
 |
	`BIT
(6);

97 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

98 
vÆue
 = 
	`ªad_mªg32
(
CK_VC8000D_BASE
 + 0x00);

99 
∂l_ªg
 &~
	`BIT
(6);

100 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG1
);

101 i‡(
deÁu…_vÆue
 !
vÆue
)

102 
	`¥ötf
("\n\t\t- - - PASS...\n");

104 
	`¥ötf
("\n\t\t- - - FAIL...\n");

106 
	`¥ötf
("\n\n\t- - - DSP C5 Clock Gating...\n");

108 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_DSP_C5_0_BASE
 + 0x04);

109 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG2
);

110 
∂l_ªg
 |
	`BIT
(0);

111 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

112 
vÆue
 = 
	`ªad_mªg32
(
CK_DSP_C5_0_BASE
 + 0x04);

113 
∂l_ªg
 &~
	`BIT
(0);

114 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

115 i‡(
deÁu…_vÆue
 !
vÆue
)

116 
	`¥ötf
("\n\t\t- - - PASS...\n");

118 
	`¥ötf
("\n\t\t- - - FAIL...\n");

120 
	`¥ötf
("\n\n\t- - - DSP P6 Clock Gating...\n");

122 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_DSP_P6_0_BASE
 + 0x404);

123 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG2
);

124 
∂l_ªg
 |
	`BIT
(2);

125 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

126 
vÆue
 = 
	`ªad_mªg32
(
CK_DSP_P6_0_BASE
 + 0x404);

127 
∂l_ªg
 &~
	`BIT
(2);

128 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

129 i‡(
deÁu…_vÆue
 !
vÆue
)

130 
	`¥ötf
("\n\t\t- - - PASS...\n");

132 
	`¥ötf
("\n\t\t- - - FAIL...\n");

134 
	`¥ötf
("\n\n\t- - - VIP Clock Gating...\n");

136 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_VIP_BASE
 + 0x024);

137 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG2
);

138 
∂l_ªg
 |
	`BIT
(4);

139 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

140 
vÆue
 = 
	`ªad_mªg32
(
CK_VIP_BASE
 + 0x024);

141 
∂l_ªg
 &~
	`BIT
(4);

142 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

143 i‡(
deÁu…_vÆue
 !
vÆue
)

144 
	`¥ötf
("\n\t\t- - - PASS...\n");

146 
	`¥ötf
("\n\t\t- - - FAIL...\n");

148 
	`¥ötf
("\n\n\t- - - CAMB Clock Gating...\n");

149 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_CAMB_BASE
 + 0x210);

150 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG2
);

151 
∂l_ªg
 |
	`BIT
(5);

152 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

153 
vÆue
 = 
	`ªad_mªg32
(
CK_CAMB_BASE
 + 0x210);

154 
∂l_ªg
 &~
	`BIT
(5);

155 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

156 i‡(
deÁu…_vÆue
 !
vÆue
)

157 
	`¥ötf
("\n\t\t- - - PASS...\n");

159 
	`¥ötf
("\n\t\t- - - FAIL...\n");

161 
	`¥ötf
("\n\n\t- - - CDVS Clock Gating...\n");

162 
deÁu…_vÆue
 = 
	`ªad_mªg32
(
CK_CDVS_BASE
 + 0x040);

163 
∂l_ªg
 = 
	`¸m_ªadl
(
BLK_CLK_ICG2
);

164 
∂l_ªg
 |
	`BIT
(6);

165 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

166 
vÆue
 = 
	`ªad_mªg32
(
CK_CDVS_BASE
 + 0x040);

167 
∂l_ªg
 &~
	`BIT
(6);

168 
	`¸m_wrôñ
(
∂l_ªg
, 
BLK_CLK_ICG2
);

169 i‡(
deÁu…_vÆue
 !
vÆue
)

170 
	`¥ötf
("\n\t\t- - - PASS...\n");

172 
	`¥ötf
("\n\t\t- - - FAIL...\n");

174 
	`¥ötf
("\nIP clock gatingÅest done. . . \n");

175 
	}
}

	@tpmu.c

10 
	~"ck810.h
"

11 
	~"misc.h
"

12 
	~"pmu.h
"

14 
	$domaö_powî_ã°
() {

15 
u8
 
ã°_id
 = 0;

16 
u8
 
ch
;

17 
u32
 
g©ög_off£t
;

18 
u32
 
pwr_off£t
;

20 
	`¥ötf
("\ndomainÖower up/downÅest. . . \n");

22 
	`¥ötf
("\nÖlease chooseÅest domain:\n");

23 
	`¥ötf
("0 -- ISP\n");

24 
	`¥ötf
("1 -- GC620\n");

25 
	`¥ötf
("2 -- AVS\n");

26 
	`¥ötf
("3 -- VC8000E\n");

27 
	`¥ötf
("4 -- AI(VIP, Cambricon, CDVSánd DSP)\n");

28 #i‡
CK_CK860


29 
	`¥ötf
("5 -- CK810\n");

31 
	`¥ötf
("5 -- CK860\n");

33 
	`¥ötf
("> ");

34 
ch
 = 
	`gëch¨
();

35 
	`putch¨
(
ch
);

36 
ã°_id
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
ch
);

37 i‡((
ã°_id
 >= 0) && (test_id <= 5)) {

42 
ã°_id
) {

44 
g©ög_off£t
 = 
ISP_POWER_GATING_CTL
;

45 
pwr_off£t
 = 
ISP_HARD_PWR_CTL
;

48 
g©ög_off£t
 = 
GC620_POWER_GATING_CTL
;

49 
pwr_off£t
 = 
GC620_HARD_PWR_CTL
;

52 
g©ög_off£t
 = 
AVS_POWER_GATING_CTL
;

53 
pwr_off£t
 = 
AVS2_HARD_PWR_CTL
;

55 
g©ög_off£t
 = 
VC8000E_POWER_GATING_CTL
;

56 
pwr_off£t
 = 
VC8000E_HARD_PWR_CTL
;

59 
g©ög_off£t
 = 
AI_POWER_GATING_CTL
;

60 
pwr_off£t
 = 
VIP_HARD_PWR_CTL
;

63 #i‡
CK_CK860


64 
g©ög_off£t
 = 
CK810_POWER_GATING_CTL
;

65 
pwr_off£t
 = 
CK810_HARD_PWR_CTL
;

67 
g©ög_off£t
 = 
CK860_POWER_GATING_CTL
;

68 
pwr_off£t
 = 
CK860_HARD_PWR_CTL
;

75 
	`domaö_powî_off
(
g©ög_off£t
, 
pwr_off£t
);

76 
	`¥ötf
("\n whetherÅoÖower up domain:\n");

77 
	`¥ötf
("\r\t y:Öower up\n");

78 
	`¥ötf
("\r\tÇ: keepÖower down\n\t\t");

79 
	`¥ötf
("- - - [y/n] ");

81 
ch
 = 
	`CK_WaôF‹Rïly
();

82 if((
ch
 == 1) || (ch == 0))

85 
	`¥ötf
("\n\tÖleaseÉnter 'y' or 'n' ");

87 
	`¥ötf
("\n");

89 if(
ch
 == 1) {

90 
	`domaö_powî_⁄
(
g©ög_off£t
, 
pwr_off£t
);

92 
	`¥ötf
("\ndomainÖowerÅest done. . . \n");

93 
	}
}

	@tsci.c

13 
	~"sci7816.h
"

14 
	~"misc.h
"

15 
	~"ötc.h
"

16 
	~"gpio.h
"

18 
	#TRANSFER_TIMEOUT
 1000

	)

20 
CKSåu˘_IRQH™dÀr
 
	gsci7816_úqh™dÀr
;

23 
CK_UINT32
 
	gîr‹_Êag
 = 0;

24 
CK_UINT32
 
	g£nd_d©a_¨øy
[20];

25 
CK_UINT32
 
	gª˚ive_d©a_¨øy
[20];

26 
CK_UINT8
 
	gtx_öå_Êag
;

27 
CK_UINT8
 
	grx_öå_Êag
;

28 
CK_UINT8
 
	gtx_byã
;

29 
CK_UINT8
 
	grx_byã
;

31 
	$CK_SCI7816_ISR_H™dÀr
(
u32
 
úq
){

32 
CK_UINT32
 
ªg_vÆue
;

35 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCIINTIO1
);

36 
	`¥ötf
("\n\tJJJ_DEBUG INT sètus=0x%x\n", 
ªg_vÆue
);

38 if(
ªg_vÆue
 & 0x4){

39 
	`¥ötf
("\n\tJJJ_DEBUGÅx_öàas£π\n", 
ªg_vÆue
);

40 
	`wrôe_mªg32
(
SCIINTIO1
, 0x4);

41 
tx_öå_Êag
 = 0;

44 if(
ªg_vÆue
 & 0x2){

45 
	`¥ötf
("\n\tJJJ_DEBUGÑx_öàas£π\n", 
ªg_vÆue
);

46 
rx_byã
 = 
	`ªad_mªg32
(
SCIBUFHW
);

47 
	`wrôe_mªg32
(
SCIINTIO1
, 0x2);

48 
rx_öå_Êag
 = 0;

50 
	}
}

52 
	$sy°em_c⁄fig
() {

53 
CK_UINT32
 
ªg_vÆue
;

56 
ªg_vÆue
 = 
	`ªad_mªg32
(
CK_PINMUX_C⁄åﬁ
+0x2c);

57 
ªg_vÆue
 =Ñeg_value & 0xfffffff8;

58 
	`wrôe_mªg32
(
CK_PINMUX_C⁄åﬁ
+0x2c, 
ªg_vÆue
);

61 
ªg_vÆue
 = 
	`ªad_mªg32
(
CK_CRM_ADDR
+0x20c);

62 
ªg_vÆue
 =Ñeg_value & 0xfdffffff;

63 
	`wrôe_mªg32
(
CK_CRM_ADDR
+0x20c, 
ªg_vÆue
);

67 
	`CK_Gpio_Inô
();

68 
	`CK_Gpio_Ouçut
(5, 1);

69 
	`CK_Gpio_Ouçut
(4, 1);

71 
	`udñay
(1000);

73 
	`CK_Gpio_Ouçut
(4, 0);

74 
	`CK_Gpio_Ouçut
(5, 0);

75 
	`udñay
(100);

76 
	}
}

78 
	$design_c⁄fig
(
CK_UINT32
 
t_mode
)

80 
CK_UINT32
 
ªg_vÆue
;

83 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCIMODHW
);

84 
ªg_vÆue
 =Ñeg_vÆuê| 
t_mode
;

86 
	`wrôe_mªg32
(
SCIMODHW
, 
ªg_vÆue
);

89 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCICTRL
);

90 
ªg_vÆue
 =Ñeg_value & 0xffffff7f;

91 
ªg_vÆue
 =Ñeg_value & 0xfffffffb;

92 
	`wrôe_mªg32
(
SCICTRL
, 
ªg_vÆue
);

94 if(
t_mode
 == 1){

96 
ªg_vÆue
 = 
	`ªad_mªg32
(
EDCCTRL
);

97 
ªg_vÆue
 =Ñeg_value | 0x00000001;

98 
	`wrôe_mªg32
(
EDCCTRL
, 
ªg_vÆue
);

101 
ªg_vÆue
 = 
	`ªad_mªg32
(
ETUDATA
);

103 
	`wrôe_mªg32
(
ETUDATA
, 
ªg_vÆue
);

104 
	`¥ötf
("\n\tJJJ_DEBUG design_c⁄fig ETUDATA=0x%x\n", 
ªg_vÆue
);

105 
	}
}

107 
CK_UINT8
 
	$ª˚ive_⁄e_byã_by_pﬁlög
()

109 
CK_UINT8
 
ª˚ive_byã
 = 0;

110 
CK_UINT32
 
ªg_vÆue
;

111 
CK_UINT8
 
°¨t
 = 0;

115 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCISTAT
);

116 i‡(
ªg_vÆue
 & 0x00000001) {

117 if((
ªg_vÆue
 & 0x00000004) == 0x00000004){

118 
	`¥ötf
("rxÉrror happen whenÑeceive one byte\n");

119 
îr‹_Êag
 += 1;

121 
ª˚ive_byã
 = 
	`ªad_mªg32
(
SCIBUFHW
);

125 
°¨t
 += 1;

126 
	`udñay
(50);

127 } (!(
ªg_vÆue
 & 0x00000001)Ë&& (
°¨t
 < 
TRANSFER_TIMEOUT
));

129 i‡(
°¨t
 >
TRANSFER_TIMEOUT
) {

130 
	`¥ötf
("\n\tReceiveÅransferÅimeout, Test Fail\n");

131  
ª˚ive_byã
;

135 
	`udñay
(1000);

137  
ª˚ive_byã
;

138 
	}
}

140 
	$£nd_⁄e_byã_by_pﬁlög
(
CK_UINT8
 
£nd_byã
)

142 
CK_UINT32
 
ªg_vÆue
;

145 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCISTAT
);

147 if((
ªg_vÆue
 & 0x00000010) == 0x0)

150 
	`udñay
(50);

154 
	`wrôe_mªg32
(
SCIBUFHW
, 
£nd_byã
);

155 
	}
}

157 
CK_UINT32
 
	$ª˚ive_ATR
(
CK_UINT32
 
t_mode
)

159 
CK_UINT32
 
i
;

160 
CK_UINT8
 
K
;

161 
CK_UINT8
 
tmp_byã
;

162 
CK_UINT8
 
⁄e_byã
;

163 
CK_UINT32
 
ªg_vÆue
;

164 
CK_UINT32
 
tmp_vÆue
;

165 
CK_UINT32
 
TA2_¥e£¡
;

168 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

169 
	`¥ötf
("\n\tJJJ_DEBUG TS=0x%x\n", 
⁄e_byã
);

172 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

173 
K
 = 
⁄e_byã
 & 0x0f;

174 
tmp_byã
 = 
⁄e_byã
;

175 
	`¥ötf
("\n\tJJJ_DEBUG T0=0x%x,Åmp_byã=0x%x\n", 
⁄e_byã
, 
tmp_byã
);

178 if((
tmp_byã
 & 0x10) == 0x10) {

179 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

180 
	`¥ötf
("\n\tJJJ_DEBUG TA1=0x%x\n", 
⁄e_byã
);

184 if((
tmp_byã
 & 0x20) == 0x20) {

185 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

186 
	`¥ötf
("\n\tJJJ_DEBUG TB1=0x%x\n", 
⁄e_byã
);

190 if((
tmp_byã
 & 0x40) == 0x40) {

191 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

192 
	`¥ötf
("\n\tJJJ_DEBUG TC1=0x%x\n", 
⁄e_byã
);

196 if((
tmp_byã
 & 0x80) == 0x80){

197 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

198 
tmp_byã
 = 
⁄e_byã
;

199 
t_mode
 = 0x00000001;

200 
	`¥ötf
("\n\tJJJ_DEBUG TD1=0x%x\n", 
⁄e_byã
);

202 
tmp_byã
 = 0x00;

203 
t_mode
 = 0x00000000;

206 
	`¥ötf
("\n\tJJJ_DEBUGÅmp_byã=0x%x\n", 
tmp_byã
);

208 if((
tmp_byã
 & 0x10) == 0x10){

209 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

210 
TA2_¥e£¡
 = 1;

211 
	`¥ötf
("\n\tJJJ_DEBUG TA2=0x%x\n", 
⁄e_byã
);

213 
TA2_¥e£¡
 = 0;

217 if((
tmp_byã
 & 0x20) == 0x20) {

218 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

219 
	`¥ötf
("\n\tJJJ_DEBUG TB2=0x%x\n", 
⁄e_byã
);

223 if((
tmp_byã
 & 0x40) == 0x40) {

224 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

225 
	`¥ötf
("\n\tJJJ_DEBUG TC2=0x%x\n", 
⁄e_byã
);

229 if((
tmp_byã
 & 0x80) == 0x80){

230 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

231 
tmp_byã
 = 
⁄e_byã
;

232 
	`¥ötf
("\n\tJJJ_DEBUG TD2=0x%x\n", 
⁄e_byã
);

234 
tmp_byã
 = 0;

238 if((
tmp_byã
 & 0x10) == 0x10) {

239 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

240 
	`¥ötf
("\n\tJJJ_DEBUG TA3=0x%x\n", 
⁄e_byã
);

244 if((
tmp_byã
 & 0x20) == 0x20) {

245 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

246 
	`¥ötf
("\n\tJJJ_DEBUG TB3=0x%x\n", 
⁄e_byã
);

250 if((
tmp_byã
 & 0x40) == 0x40) {

251 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

252 
	`¥ötf
("\n\tJJJ_DEBUG TC3=0x%x\n", 
⁄e_byã
);

256 if((
tmp_byã
 & 0x80) == 0x80){

257 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

258 
tmp_byã
 = 
⁄e_byã
;

259 
	`¥ötf
("\n\tJJJ_DEBUG TD3=0x%x\n", 
⁄e_byã
);

261 
tmp_byã
 = 0x00;

267 
i
=0; i<
K
; i++){

268 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

269 
	`¥ötf
("\n\tJJJ_DEBUG hi°‹iˇ»byã†%d=0x%x\n", 
i
, 
⁄e_byã
);

272 if(
t_mode
 == 1){

273 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

276 
ªg_vÆue
 = 
	`ªad_mªg32
(
EDCDATA
);

277 if(
ªg_vÆue
 != 0){

278 
	`¥ötf
("ª˚ivêTCK(0x%xËi†wr⁄g\n", 
⁄e_byã
);

279 
îr‹_Êag
 += 1;

284 
ªg_vÆue
 = 
	`ªad_mªg32
(
SCIMODHW
);

285 
tmp_vÆue
 = (
ªg_vÆue
 & 0x00000100) >> 7;

286 
ªg_vÆue
 =Ñeg_vÆuê| 
tmp_vÆue
;

287 
	`wrôe_mªg32
(
SCIMODHW
, 
ªg_vÆue
);

290 
	`udñay
(500);

292  
TA2_¥e£¡
;

293 
	}
}

295 
	$PPS_exch™ge
(
CK_UINT8
 
PPS_Fi
, CK_UINT8 
PPS_Di
, 
CK_UINT32
 
t_mode
)

297 
CK_UINT8
 
⁄e_byã
;

298 
CK_UINT8
 
tmp_byã
;

299 
CK_UINT8
 
PCK
;

300 
CK_UINT32
 
Fi_vÆue
;

301 
CK_UINT32
 
Di_vÆue
;

302 
CK_UINT32
 
ªg_vÆue
;

306 
⁄e_byã
 = 0xff;

307 
	`£nd_⁄e_byã_by_pﬁlög
(
⁄e_byã
);

308 
PCK
 = 
⁄e_byã
;

311 
⁄e_byã
 = 0x00;

312 if(
t_mode
 == 0)

313 
⁄e_byã
 = one_byte | 0x00;

315 
⁄e_byã
 = one_byte | 0x01;

317 
⁄e_byã
 = one_byte | 0x10;

318 
	`£nd_⁄e_byã_by_pﬁlög
(
⁄e_byã
);

319 
PCK
 = PCK ^ 
⁄e_byã
;

320 
tmp_byã
 = 
⁄e_byã
;

323 if((
tmp_byã
 & 0x10) == 0x10){

324 
⁄e_byã
 = 0x00;

325 
⁄e_byã
 = o√_byã | ((
PPS_Fi
 & 0x0fË<< 4Ë| (
PPS_Di
 & 0x0f);

326 
	`£nd_⁄e_byã_by_pﬁlög
(
⁄e_byã
);

327 
PCK
 = PCK ^ 
⁄e_byã
;

331 if((
tmp_byã
 & 0x20) == 0x20){

333 
⁄e_byã
 = 0x10;

334 
	`£nd_⁄e_byã_by_pﬁlög
(
⁄e_byã
);

335 
PCK
 = PCK ^ 
⁄e_byã
;

339 if((
tmp_byã
 & 0x40) == 0x40){

341 
⁄e_byã
 = 0x20;

342 
	`£nd_⁄e_byã_by_pﬁlög
(
⁄e_byã
);

343 
PCK
 = PCK ^ 
⁄e_byã
;

347 
	`£nd_⁄e_byã_by_pﬁlög
(
PCK
);

351 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

354 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

355 
tmp_byã
 = 
⁄e_byã
;

358 if((
tmp_byã
 & 0x10) == 0x10)

359 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

363 if((
tmp_byã
 & 0x20) == 0x20)

364 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

367 if((
tmp_byã
 & 0x40) == 0x40)

368 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

372 
⁄e_byã
 = 
	`ª˚ive_⁄e_byã_by_pﬁlög
();

375 if(
⁄e_byã
 !
PCK
){

376 
	`¥ötf
("PCK mism©ch bëwì¿ªque°ándÑe•⁄£,Ñeque° PCK i†0x%x buàª•⁄£ o√ i†0x%x\n", 
PCK
, 
⁄e_byã
);

377 
îr‹_Êag
 += 1;

380 
PPS_Fi
){

381 0x00: 
Fi_vÆue
 = 372;

382 0x01: 
Fi_vÆue
 = 372;

383 0x02: 
Fi_vÆue
 = 558;

384 0x03: 
Fi_vÆue
 = 744;

385 0x04: 
Fi_vÆue
 = 1116;

386 0x05: 
Fi_vÆue
 = 1488;

387 0x06: 
Fi_vÆue
 = 1860;

388 0x09: 
Fi_vÆue
 = 512;

389 0x0a: 
Fi_vÆue
 = 768;

390 0x0b: 
Fi_vÆue
 = 1024;

391 0x0c: 
Fi_vÆue
 = 1536;

392 0x0d: 
Fi_vÆue
 = 2048;

393  : 
Fi_vÆue
 = 372;

396 
PPS_Di
){

397 0x01: 
Di_vÆue
 = 1;

398 0x02: 
Di_vÆue
 = 2;

399 0x03: 
Di_vÆue
 = 4;

400 0x04: 
Di_vÆue
 = 8;

401 0x05: 
Di_vÆue
 = 16;

402 0x06: 
Di_vÆue
 = 32;

403 0x07: 
Di_vÆue
 = 64;

404 0x08: 
Di_vÆue
 = 12;

405 0x09: 
Di_vÆue
 = 20;

406  : 
Di_vÆue
 = 1;

411 
ªg_vÆue
 = 
Fi_vÆue
/
Di_vÆue
;

412 
	`wrôe_mªg32
(
ETUDATA
, 
ªg_vÆue
);

415 
	`udñay
(1000);

416 
	}
}

418 
	$d©a_check
(
CK_UINT32
 
d©a1
, CK_UINT32 
d©a2
) {

419 if(
d©a1
 !
d©a2
){

420 
	`¥ötf
("d©®com∑ª faû, d©a1 0x%x !d©a2 0x%x\n", 
d©a1
, 
d©a2
);

421 
îr‹_Êag
 += 1;

423 
	}
}

425 
	$CK_SCI7816_Te°
() {

426 
CK_UINT32
 
t_mode
 = 0;

427 
CK_UINT32
 
TA2_¥e£¡
;

428 
CK_UINT32
 
ønd_ödex
;

429 
CK_UINT8
 
PPS_Fi
, 
PPS_Di
;

430 
CK_UINT32
 
ªg_vÆue
;

432 
	`¥ötf
("\nVSI SCI7816 T0 Transfer Interrupt Test\n");

435 
	`sy°em_c⁄fig
();

438 
	`design_c⁄fig
(
t_mode
);

441 
ªg_vÆue
 = 
	`ªad_mªg32
(
CK_CRM_ADDR
+0x81c);

442 
ªg_vÆue
 =Ñeg_value | ~0xfdffffff;

443 
	`wrôe_mªg32
(
CK_CRM_ADDR
+0x81c, 
ªg_vÆue
);

445 
	`udñay
(500);

447 
ªg_vÆue
 = 
	`ªad_mªg32
(
CK_CRM_ADDR
+0x81c);

448 
ªg_vÆue
 =Ñeg_value & 0xfdffffff;

449 
	`wrôe_mªg32
(
CK_CRM_ADDR
+0x81c, 
ªg_vÆue
);

450 
	`udñay
(500);

452 
ªg_vÆue
 = 
	`ªad_mªg32
(
CK_CRM_ADDR
+0x81c);

453 
ªg_vÆue
 =Ñeg_value | ~0xfdffffff;

454 
	`wrôe_mªg32
(
CK_CRM_ADDR
+0x81c, 
ªg_vÆue
);

456 
TA2_¥e£¡
 = 
	`ª˚ive_ATR
(
t_mode
);

458 
	`¥ötf
("\n\tJJJ_DEBUG 0x10\n");

461 if(
TA2_¥e£¡
){

462 
	`¥ötf
("\n\tJJJ_DEBUG 0x20\n");

464 
ønd_ödex
 = 0;

466 
	`¥ötf
("\n\tJJJ_DEBUG 0x21\n");

467 
ønd_ödex
){

468 0 : 
PPS_Fi
 = 0x00; 
PPS_Di
 = 0x01;

469 1 : 
PPS_Fi
 = 0x01; 
PPS_Di
 = 0x02;

470 2 : 
PPS_Fi
 = 0x09; 
PPS_Di
 = 0x04;

471 3 : 
PPS_Fi
 = 0x0b; 
PPS_Di
 = 0x06;

472 : 
PPS_Fi
 = 0x00; 
PPS_Di
 = 0x01;

475 
	`PPS_exch™ge
(
PPS_Fi
, 
PPS_Di
, 
t_mode
);

476 
	`¥ötf
("\n\tJJJ_DEBUG 0x22\n");

479 
	`wrôe_mªg32
(
SCIINTIO1
, 0x7);

480 
	`wrôe_mªg32
(
SCIINTRST
, 0x1);

482 
	`¥ötf
("\n\tJJJ_DEBUG 0x23\n");

483 
	`mem£t
(&
sci7816_úqh™dÀr
,0,(
PCKSåu˘_IRQH™dÀr
));

484 
	`¥ötf
("\n\tJJJ_DEBUG 0x24\n");

486 
sci7816_úqh™dÀr
.
dev«me
 = "SCI7816";

487 
sci7816_úqh™dÀr
.
úqid
 = 
CK_INTC_SCI7816
;

488 
sci7816_úqh™dÀr
.
¥i‹ôy
 = 
CK_INTC_SCI7816
;

489 
sci7816_úqh™dÀr
.
h™dÀr
 = 
CK_SCI7816_ISR_H™dÀr
;

490 
sci7816_úqh™dÀr
.
bÁ°
 = 
FALSE
;

491 
sci7816_úqh™dÀr
.
√xt
 = 
NULL
;

492 
	`CK_INTC_Reque°Irq
(&
sci7816_úqh™dÀr
, 
AUTO_MODE
);

493 
	`¥ötf
("\n\tJJJ_DEBUG 0x25\n");

498 
tx_byã
 = 0x32;

499 
	`wrôe_mªg32
(
SCIBUFHW
, 
tx_byã
);

500 
tx_öå_Êag
 != 0) {

501 
	`¥ötf
("\n\tJJJ_DEBUG 0x30\n");

503 
tx_öå_Êag
 = 1;

506 if(
îr‹_Êag
 == 0)

507 
	`¥ötf
("\n\tVSI SCI Test PASS\n");

509 
	`¥ötf
("\n\tVSI SCI Test FAIL\n");

510 
	}
}

	@tstc.c

13 
	~"°c.h
"

14 
	~"¸m.h
"

15 
	~"misc.h
"

17 
	#TEST_LEN
 1

	)

19 
CK_UINT32
 
	göô_vÆ_h
[
TEST_LEN
] = {0x0, 0x1, 0x0, 0x1};

20 
CK_UINT32
 
	göô_vÆ_l
[
TEST_LEN
] = {0x0, 0x1000, 0xFFFFFFF0, 0xFFFFFFF0};

22 
	$STC_INIT_VAL
(
CK_UINT32
 
öô_h
, CK_UINT32 
öô_l
, 
boﬁ
 
ovîtu∫
) {

23 
CK_UINT32
 
vÆ_h
;

24 
CK_UINT32
 
vÆ_l
;

25 
CK_UINT64
 
öô_vÆ
;

26 
CK_UINT64
 
cuºít_vÆ
;

28 
öô_vÆ
 = ((
öô_h
 & 0x1Ë<< 32Ë| 
öô_l
;

30 
	`¥ötf
("\n\t\tTe° inôü»öô_h=0x%x, inô_l=0x%x\n", 
öô_h
, 
öô_l
);

33 
	`wrôe_mªg32
(
VSI_STC_TIMER_INIT_VALUE_L
, 
öô_l
);

34 
	`wrôe_mªg32
(
VSI_STC_TIMER_INIT_VALUE_H
, 
öô_h
);

36 
	`wrôe_mªg32
(
VSI_STC_ENABLE
, 
VSI_STC_EN
);

39 
	`udñay
(1000 * 1000 * 20);

41 
vÆ_l
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_L
);

42 
vÆ_h
 = 
	`ªad_mªg32
(
VSI_STC_TIMER_CUR_VALUE_H
);

44 
cuºít_vÆ
 = (((
CK_UINT64
)
vÆ_h
 & 0x1Ë<< 32Ë| 
vÆ_l
;

46 i‡(((
cuºít_vÆ
 > 
öô_vÆ
Ë&& !
ovîtu∫
) || ((current_val <init_val) && overturn))

47 
	`¥ötf
("\n\t\t\à---PASS vÆ_h=0x%x, vÆ_l=0x%x\n", 
vÆ_h
, 
vÆ_l
);

49 
	`¥ötf
("\n\t\t\à---FAIL vÆ_h=0x%x, vÆ_l=0x%x\n", 
vÆ_h
, 
vÆ_l
);

52 
	`wrôe_mªg32
(
VSI_STC_ENABLE
, 0);

53 
	}
}

55 
	$CK_STC_Te°
() {

56 
CK_UINT8
 
i
;

58 
	`¥ötf
("\nVSI STC Test. . . \n");

61 
	`wrôe_mªg32
(
CRM_TSM_PLL_BYP
, 0x00000001);

63 
	`wrôe_mªg32
(
CRM_TSMPLL_REFCLK_CFG
, 0x00000001);

65 
	`wrôe_mªg32
(
CRM_TS_CLK_CFG
, 0x00000000);

67 
	`wrôe_mªg32
(
CRM_BLK_CLK_ICG3
, 0x00000000);

69 
	`wrôe_mªg32
(
CRM_BLK_SW_RST3
, 
STC_SW_RST
);

73 
	`wrôe_mªg32
(
VSI_STC_CLK_DIVIDER
, 0x12B);

75 
	`¥ötf
("\n\tTest different initial value ofÅimer \n");

77 
i
 = 0; i < 
TEST_LEN
; i++)

78 
	`STC_INIT_VAL
(
öô_vÆ_h
[
i
], 
öô_vÆ_l
[i], i == 3);

80 
	`¥ötf
("\n\tEnd VSI STC Test\n");

81 
	}
}

	@ttimer.c

9 
	~"ck810.h
"

10 
	~"misc.h
"

11 
	~"timî.h
"

13 
CK_Timî_U£r_Deföe_Te°
();

14 
CK_Timî_Fªe_Ru¬ög_Te°
();

16 
	#CK_TIMER_TEST_TIME
 100000

	)

17 
	#CK_TIMER_TEST_CYCLES
 3

	)

18 
	#CK_MAX_TEST_CYCLES
 1

	)

19 vﬁ©ûê
CK_UINT32
 
	gã°_cou¡
[
TIMERID_MAX
];

25 
	$CK_Timî_H™dÀr
(
CK_UINT32
 
úq
)

27 
CK_UINT32
 
i
;

29 
	`¥ötf
("[%s:%d]\n", 
__FUNCTION__
, 
__LINE__
);

30 
i
 = 0; i < 
TIMERID_MAX
; i++) {

31 i‡(
	`CK_Timî_CÀ¨IrqFœg
(
i
)) {

32 
ã°_cou¡
[
i
]++;

33 
	`¥ötf
("Clear interrupt, Timer #%d, cycle %d, current 0x%x\n",

34 
i
, 
ã°_cou¡
[i], 
	`CK_Timî_CuºítVÆue
(i));

36 i‡(
ã°_cou¡
[
i
] =
CK_TIMER_TEST_CYCLES
) {

37 
	`CK_Timî_St›
(
i
);

38 
	`CK_Timî_Clo£
(
i
);

42 
	}
}

47 
	$CK_Timî_Te°
() {

48 
	`CK_Timî_U£r_Deföe_Te°
();

49 
	`CK_Timî_Fªe_Ru¬ög_Te°
();

50 
	}
}

52 
	$CK_Timî_U£r_Deföe_Te°
()

54 
CK_UINT32
 
now
;

55 
CK_UINT32
 
œ°
;

56 
CK_UINT32
 
i
;

57 
BOOL
 
is_Á°
;

59 
	`¥ötf
("\n\tStart Timer User Define modeÅest. . . \n");

60 
	`CK_Timî_Inô
();

61 
i
 = 0; i < 
TIMERID_MAX
; i++) {

62 
	`¥ötf
("\¿ Te°ög Timî #%d\n", 
i
);

64 
ã°_cou¡
[
i
] = 0;

65 
is_Á°
 = 
TRUE
;

69 i‡(
i
 < 2)

70 
is_Á°
 = 
FALSE
;

72 
	`CK_Timî_O≥n
(
i
, 
CK_Timî_H™dÀr
, 
CK_INTC_TIM0
 + i, 
is_Á°
);

73 
	`CK_Timî_Sèπ
(
i
, 
CK_TIMER_TEST_TIME
);

75 
œ°
 = 
	`CK_Timî_CuºítVÆue
(
i
);

76 
	`dñay
(1);

77 
now
 = 
	`CK_Timî_CuºítVÆue
(
i
);

78 i‡(
now
 =
œ°
) {

79 
	`¥ötf
("Timî #%d - - - i†nŸ w‹kög.\n", 
i
);

80 
	`CK_Timî_St›
(
i
);

81 
	`CK_Timî_Clo£
(
i
);

84 
ã°_cou¡
[
i
] < 
CK_TIMER_TEST_CYCLES
)

85 
	`dñay
(1);

87 i‡(
ã°_cou¡
[
i
] =
CK_TIMER_TEST_CYCLES
)

88 
	`¥ötf
(" Timî #%d - - - PASS\n", 
i
);

90 
	`¥ötf
(" Timî #%d - - - FAILURE\n", 
i
);

93 
	}
}

95 
	$CK_Timî_Fªe_Ru¬ög_Te°
()

97 
CK_UINT32
 
now
;

98 
CK_UINT32
 
œ°
;

99 
CK_UINT32
 
i
;

101 
	`¥ötf
("\n\tStart Timer #0 Free-running modeÅest (this mayÅake 4 minutes). . . \n");

102 
	`CK_Timî_Inô
();

104 
	`¥ötf
("\n Testing Timer #0\n");

106 
ã°_cou¡
[0] = 0;

108 
	`CK_Timî_O≥n
(0, 
CK_Timî_H™dÀr
, 
CK_INTC_TIM0
, 
FALSE
);

109 
	`CK_Timî_Sèπ_Fªe_Ru¬ög
(0);

111 
œ°
 = 
	`CK_Timî_CuºítVÆue
(0);

112 
	`dñay
(1);

113 
now
 = 
	`CK_Timî_CuºítVÆue
(0);

114 i‡(
now
 =
œ°
) {

115 
	`¥ötf
("Timer #0 - - - isÇot working.\n");

116 
	`CK_Timî_St›
(0);

117 
	`CK_Timî_Clo£
(0);

121 
i
 = 0;

122 
ã°_cou¡
[0] < 2) {

123 
i
++;

129 i‡(
ã°_cou¡
[0] == 2)

130 
	`¥ötf
(" Timer #0 - - - PASS\n");

132 
	`¥ötf
(" Timer #0 - - - FAILURE\n");

133 
	}
}

	@tuart.c

10 
	~"ck810.h
"

11 
	~"u¨t.h
"

12 
	~"misc.h
"

13 
	~<°rög.h
>

15 
CK_U¨t_Devi˚
 
c⁄sﬁeu¨t
;

16 
CK_U¨t_Së_Pö
(
CK_U¨t_Devi˚
 
u¨tid
);

17 
CK_U¨t_Së_FIFO_Triggî
(
CK_U¨t_Devi˚
 
u¨tid
);

18 
CK_C⁄sﬁe_Inô
();

20 
CK_UINT8
 
	gd©a
[14] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',

33 
	$CK_UART_Te°Mode
(
CK_U¨t_Devi˚
 
u¨tid
)

35 
CK_UINT32
 
i
;

36 
CK_UINT32
 
gë
;

39 
	`¥ötf
("\n\n\t- - - Testing uart mode...\n");

40 
	`¥ötf
("\r\t(query mode ): Output is---\n\t\t");

41 
i
 = 0; i < 14; i++)

43 
	`CK_U¨t_PutCh¨
(
u¨tid
, 
d©a
[
i
]);

45 
	`¥ötf
("- - - [y/n] ");

48 
gë
 = 
	`CK_WaôF‹Rïly
();

49 if((
gë
 == 1) ||(get == 0))

55 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

58 if(
gë
 == 1)

60 
	`¥ötf
("\t- - -PASS\n");

64 
	`¥ötf
("\t- - -FAILURE\n");

67 
	`¥ötf
("\r\t(interrupt mode ): Output is---\n\t\t");

69 
	`dñay
(5000);

71 
	`CK_U¨t_Clo£
(
u¨tid
);

72 
	`CK_U¨t_O≥n
(
u¨tid
, 
NULL
);

73 
	`CK_U¨t_SëRXMode
(
u¨tid
, 
FALSE
);

74 
	`CK_U¨t_SëTXMode
(
u¨tid
, 
FALSE
);

75 
i
 = 0; i < 14; i++)

77 
	`CK_U¨t_PutCh¨
(
u¨tid
, 
d©a
[
i
]);

79 
	`¥ötf
("- - - [y/n] ");

82 
gë
 = 
	`CK_WaôF‹Rïly
();

83 if((
gë
 == 1) ||(get == 0))

89 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

92 if(
gë
 == 1)

94 
	`¥ötf
("\t- - -PASS\n");

98 
	`¥ötf
("\t- - -FAILURE\n");

100 
	}
}

111 
	$CK_UART_Te°Baudøã
(
CK_U¨t_Devi˚
 
u¨tid
)

113 
CK_UINT32
 
i
;

114 
CK_UINT32
 
baudøã
;

115 
CK_UINT32
 
gë
;

117 
CK_UINT32
 
pB
[] = {
B9600
, 
B14400
, 
B38400
, 
B57600
, 
B19200
, 
B115200
};

119 
	`¥ötf
("\n\t- - - Test uart baudrate.\n");

120 
baudøã
 = 0; baudøã < (
pB
) / 4; baudrate++)

122 
	`¥ötf
("\tBaudøã i†%d? [y] ", 
pB
[
baudøã
]);

123 
	`CK_U¨t_Ch™geBaudøã
(
u¨tid
, 
pB
[
baudøã
]);

124 
	`CK_WaôF‹Rïly
() != 1)

126 
	`¥ötf
("\n\tPleaseÉnter 'y' ");

128 
	`¥ötf
(" :Output is ---\n\t\t");

129 
i
 = 0; i < 14; i++)

131 
	`CK_U¨t_PutCh¨
(
u¨tid
, 
d©a
[
i
]);

134 
	`¥ötf
("- - -[y/n] ");

137 
gë
 = 
	`CK_WaôF‹Rïly
();

138 if(
gë
 == 1 || get == 0)

144 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

147 if(
gë
 == 1)

149 
	`¥ötf
("\t- - -PASS\n");

153 
	`¥ötf
("\t- - -FAILURE\n");

158 
	}
}

169 
	$CK_UART_Te°P¨ôy
(
CK_U¨t_Devi˚
 
u¨tid
)

171 
CK_U¨t_P¨ôy
 
∑rôy
;

172 
CK_UINT32
 
i
;

173 
CK_UINT32
 
gë
;

175 
	`¥ötf
("\n\t- - - Test uartÖarity. (Parity: 0 --- ODD, 1 --- EVEN, 2 --- NONE)\n");

176 
∑rôy
 = 0;Öarity < 3;Öarity++)

178 
	`¥ötf
("\tP¨ôy i†%d? [y] ", 
∑rôy
);

179 
	`CK_U¨t_SëP¨ôy
(
u¨tid
, 
∑rôy
);

180 
	`CK_WaôF‹Rïly
() != 1)

182 
	`¥ötf
("\n\tPleaseÉnter 'y' ");

184 
	`¥ötf
(" :Output is ---\n\t\t");

185 
i
 = 0; i < 14; i++)

187 
	`CK_U¨t_PutCh¨
(
u¨tid
, 
d©a
[
i
]);

190 
	`¥ötf
("- - -[y/n] ");

193 
gë
 = 
	`CK_WaôF‹Rïly
();

194 if(
gë
 == 1 || get == 0)

200 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

203 if(
gë
 == 1)

205 
	`¥ötf
("\t- - -PASS\n");

209 
	`¥ötf
("\t- - -FAILURE\n");

214 
	}
}

226 
	$CK_UART_Te°W‹dSize
(

227 
CK_U¨t_Devi˚
 
u¨tid


230 
CK_U¨t_W‹dSize
 
w‹dsize
;

231 
CK_UINT32
 
i
;

232 
CK_UINT32
 
gë
;

234 
	`¥ötf
("\n\t- - - Test uart wordsize.\n");

235 
	`¥ötf
("\t0 --- WORD_SIZE_5,\n\t1 --- WORD_SIZE_6,\n"

237 
w‹dsize
 = 2; wordsize < 4; wordsize++)

239 
	`¥ötf
("\tW‹dsizêi†%d? [y] ", 
w‹dsize
);

240 
	`CK_U¨t_SëW‹dSize
(
u¨tid
, 
w‹dsize
);

241 
	`CK_WaôF‹Rïly
() != 1)

243 
	`¥ötf
("\n\tPleaseÉnter 'y' ");

245 
	`¥ötf
(" :Output is ---\n\t\t");

246 
i
 = 0; i < 14; i++)

248 
	`CK_U¨t_PutCh¨
(
u¨tid
, 
d©a
[
i
]);

251 
	`¥ötf
("- - -[y/n] ");

254 
gë
 = 
	`CK_WaôF‹Rïly
();

255 if(
gë
 == 1 || get == 0)

261 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

264 if(
gë
 == 1)

266 
	`¥ötf
("\t- - -PASS\n");

270 
	`¥ötf
("\t- - -FAILURE\n");

275 
	}
}

285 
	$CK_UART_Te°SIR
(
CK_U¨t_Devi˚
 
u¨tid
) {

286 
CK_UINT32
 
gë
 = 0;

288 
	`¥ötf
("\n\t- - - Test uart SIR Mode.\n");

290 
	`¥ötf
("\tstep 1, SIR mode disabled\n"

293 
	`¥ötf
("\tÖressány key on keyboardÅo continueÅo step 2\n\n");

295 
	`CK_U¨t_GëCh¨
(
u¨tid
, &
gë
);

296 
	`¥ötf
("\tstep 2, Enable SIR mode? [y/n] ");

298 
gë
 = 
	`CK_WaôF‹Rïly
();

299 i‡(
gë
 == 1) {

300 
	`¥ötf
("\n\t - - -Énabling SIR mode\n");

301 
	`¥ötf
("\tÅryÅoÖressány key on keyboard...\n"

303 
	`¥ötf
("\t use/pressÑemote controlÅo getÅoÅheÉnd ofÅhisÅest\n\n");

304 
	`CK_UART_SIR_E«bÀ
(
u¨tid
);

306 } i‡(
gë
 == 0) {

307 
	`¥ötf
("\n\t Skip SIR modeÅest\n");

310 
	`¥ötf
("\n\t PleaseÉnter 'y' or 'n' ");

314 
	`CK_U¨t_GëCh¨
(
u¨tid
, &
gë
);

316 
	`CK_UART_SIR_DißbÀ
(
u¨tid
);

317 
	`¥ötf
("\n\t - - -PASS\n");

318 
	}
}

328 
	$CK_UART_Te°
()

330 
CK_UINT32
 
gë
;

331 
CK_U¨t_Devi˚
 
u¨tid
 = 
c⁄sﬁeu¨t
;

333 
	`¥ötf
("Testing uart...");

336 
	`¥ötf
("Parity --- NONE,");

337 
	`¥ötf
("Wordsize --- 8. ");

338 
	`¥ötf
("\n- - -UART%dÑódy? [y] ", 
u¨tid
);

342 
gë
 = 
	`CK_WaôF‹Rïly
();

343 if((
gë
 == 1))

349 
	`¥ötf
("\nPleaseÉnter 'y' ");

352 
	`CK_UART_Te°Mode
(
u¨tid
);

357 
	`CK_UART_Te°Baudøã
(
u¨tid
);

358 
	`CK_UART_Te°P¨ôy
(
u¨tid
);

359 
	`CK_UART_Te°W‹dSize
(
u¨tid
);

360 
	`CK_UART_Te°SIR
(0);

363 
	`dñay
(10000);

364 
	`CK_U¨t_Clo£
(
u¨tid
);

365 i‡(
u¨tid
 =
c⁄sﬁeu¨t
) {

366 
	`CK_C⁄sﬁe_Inô
();

368 
	}
}

	@twdt.c

14 
	~"ck810.h
"

15 
	~"ötc.h
"

16 
	~"wdt.h
"

17 
	~"ckwdt.h
"

18 
	~"misc.h
"

20 
	#CK_WDT_TEST_TIME
 1000

	)

22 vﬁ©ûê
CK_UINT32
 
	gwdt_ötc_cou¡
[
WDTRID_MAX
] = {0};

23 vﬁ©ûê
CK_UINT8
 
	gwdt_„ed_dog
[
WDTRID_MAX
] = {0};

28 
	$CK_WDT_H™dÀr
(
CKEnum_WDT_Devi˚
 
wdtid
)

30 #i‡
CK_WDT_DEBUG


31 
	`¥ötf
("JJJ_DEBUG CK_WDT_Handler wdt_intc_count[%d]=%d, wdt_feed_dog[%d]=%d\n",

32 
wdtid
, 
wdt_ötc_cou¡
[wdtid], wdtid, 
wdt_„ed_dog
[wdtid]);

35 
wdt_ötc_cou¡
[
wdtid
]++;

37 i‡(
wdt_„ed_dog
[
wdtid
] != 0) {

38 
	`CK_WDT_CÀ¨IrqFœg
(
wdtid
);

39 
	`CK_WDT_Cou¡î_RST
(
wdtid
);

41 
	}
}

43 
	$CK_WDT_H™dÀr0
() {

44 
	`CK_WDT_H™dÀr
(
WDT_CK860
);

45 
	}
}

47 
	$CK_WDT_H™dÀr1
() {

48 
	`CK_WDT_H™dÀr
(
WDT_CK810
);

49 
	}
}

51 
	$CK_WDT_H™dÀr2
() {

52 
	`CK_WDT_H™dÀr
(
WDT_UNI
);

53 
	}
}

55 
	$CK_WDT_Cou¡î_RST_Te°
(
CKEnum_WDT_Devi˚
 
wdtid
) {

56 
CK_UINT32
 
œ°vÆue
;

58 
	`¥ötf
(" 1. Watchdog Timer Counter Restart Test. . . \n");

60 #i‡
CK_WDT_DEBUG


61 
	`¥ötf
("JJJ_DEBUG CK_WDT_Cou¡î_RST_Te° WDT%d\n", 
wdtid
);

63 
	`CK_WDT_Clo£
(
wdtid
);

64 
	`CK_WDT_O≥n
(
CK_WDT_TabÀ
[
wdtid
].
id
,

65 
CK_WDT_TabÀ
[
wdtid
].
úqh™dÀr
.
h™dÀr
,

66 
CK_WDT_TabÀ
[
wdtid
].
úq
,

67 
FALSE
);

69 
wdt_„ed_dog
[
wdtid
] = 1;

70 
	`CK_WDT_Sèπ
(
wdtid
, 
CK_WDT_INTC_RST
, 
CK_WDT_TEST_TIME
);

71 
	`CK_WDT_Cou¡î_RST
(
wdtid
);

72 
	`udñay
(1000 * 10);

73 
œ°vÆue
 = 
	`CK_WDT_CuºítVÆue
(
wdtid
);

75 
	`CK_WDT_Cou¡î_RST
(
wdtid
);

76 i‡(
	`CK_WDT_CuºítVÆue
(
wdtid
Ë> 
œ°vÆue
)

77 
	`¥ötf
(" - - - W©chdog Timî %d PASS.\n", 
wdtid
);

79 
	`¥ötf
(" - - - W©chdog Timî %d FAILURE.\n", 
wdtid
);

80 
	}
}

82 
	$CK_WDT_INTC_RST_Te°
(
CKEnum_WDT_Devi˚
 
wdtid
) {

83 
ª£t
 = 0;

84 
CK_UINT32
 
gë
;

86 
	`¥ötf
(" 2. Watchdog Timer Interrupt Mode Test. . . \n");

88 
	`¥ötf
("\n\n\t- - - Reset System?...\n");

89 
	`¥ötf
("\r\tY: Trigger interruptándÑeset systemÜater.\n\t\t");

90 
	`¥ötf
("\r\tN: Trigger interruptándÑestart counter\n\t\t");

91 
	`¥ötf
("- - - [y/n] ");

94 
gë
 = 
	`CK_WaôF‹Rïly
();

95 if((
gë
 == 1) ||(get == 0))

98 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

101 if(
gë
 == 1) {

102 
wdt_„ed_dog
[
wdtid
] = 0;

103 
ª£t
 = 1;

105 
ª£t
 = 0;

106 
wdt_„ed_dog
[
wdtid
] = 1;

109 
wdt_ötc_cou¡
[
wdtid
] = 0;

111 
	`¥ötf
("\n");

112 
	`CK_WDT_Clo£
(
wdtid
);

113 
	`CK_WDT_O≥n
(
CK_WDT_TabÀ
[
wdtid
].
id
,

114 
CK_WDT_TabÀ
[
wdtid
].
úqh™dÀr
.
h™dÀr
,

115 
CK_WDT_TabÀ
[
wdtid
].
úq
,

116 
FALSE
);

118 
	`CK_WDT_Sèπ
(
wdtid
, 
CK_WDT_INTC_RST
, 
CK_WDT_TEST_TIME
);

120 
	`¥ötf
(" - - - Wait Interrupt Trigger.\n");

123 
wdt_ötc_cou¡
[
wdtid
] == 0) {

124 #i‡
CK_WDT_DEBUG


125 
	`¥ötf
("JJJ_DEBUG wait wdt_intc_count[%d]=%d\n",

126 
wdtid
, 
wdt_ötc_cou¡
[wdtid]);

128 
	`dñay
(1);

131 i‡(
ª£t
) {

132 
	`¥ötf
(" - - - Wait System Reset.\n");

134 
	`dñay
(1000);

135 
	`¥ötf
("%d", 
wdtid
);

138 
	`dñay
(1000);

139 
	`¥ötf
(" - - - W©chdog Timî %d I¡îru± ModêPASS.\n", 
wdtid
);

141 
	}
}

143 
	$CK_WDT_Sy°em_RST_Te°
(
CKEnum_WDT_Devi˚
 
wdtid
) {

145 
	`¥ötf
(" 2. Watchdog Timer System Reset Mode Test. . . \n");

147 
	`CK_WDT_Clo£
(
wdtid
);

148 
	`CK_WDT_O≥n
(
CK_WDT_TabÀ
[
wdtid
].
id
,

149 
CK_WDT_TabÀ
[
wdtid
].
úqh™dÀr
.
h™dÀr
,

150 
CK_WDT_TabÀ
[
wdtid
].
úq
,

151 
FALSE
);

153 
	`CK_WDT_Sèπ
(
wdtid
, 
CK_WDT_SYSTEM_RST
, 
CK_WDT_TEST_TIME
);

155 
	`¥ötf
(" - - - Wait System Reset.\n");

157 
	`dñay
(1000);

158 
	`¥ötf
("%d", 
wdtid
);

160 
	}
}

165 
	$CK_W©chdog_Te°
()

167 
CK_UINT32
 
gë
;

168 
wdt_id
;

170 
	`¥ötf
("\nWatchdog Timer Test. . . \n");

172 
	`CK_WDT_Inô
();

174 
CK_WDT_TabÀ
[0].
úqh™dÀr
.
h™dÀr
 = 
CK_WDT_H™dÀr0
;

175 
CK_WDT_TabÀ
[1].
úqh™dÀr
.
h™dÀr
 = 
CK_WDT_H™dÀr1
;

176 
CK_WDT_TabÀ
[2].
úqh™dÀr
.
h™dÀr
 = 
CK_WDT_H™dÀr2
;

178 
wdt_id
 = 10;

180 
	`¥ötf
("\nplease input watchdogÇumber (0, 1, 2):");

181 
gë
 = 
	`gëch¨
();

182 
	`putch¨
(
gë
);

183 
wdt_id
 = 
	`asciô⁄um
((
CK_UINT8
 *)&
gë
);

184 i‡((
wdt_id
 == 0) || (wdt_id == 1) || (wdt_id == 2)) {

188 
	`¥ötf
("\¡e° w©chdog %d\n", 
wdt_id
);

189 
	`CK_WDT_Cou¡î_RST_Te°
(
wdt_id
);

191 
	`¥ötf
("\n\n\t- - - Testing mode...\n");

192 
	`¥ötf
("\r\tY: Interruptánd Reset Mode; N: System Reset mode\n\t\t");

193 
	`¥ötf
("- - - [y/n] ");

195 
gë
 = 
	`CK_WaôF‹Rïly
();

196 if((
gë
 == 1) || (get == 0))

199 
	`¥ötf
("\n\tPleaseÉnter 'y' or 'n' ");

202 
	`¥ötf
("\n");

204 if(
gë
 == 1)

205 
	`CK_WDT_INTC_RST_Te°
(
wdt_id
);

207 
	`CK_WDT_Sy°em_RST_Te°
(
wdt_id
);

208 
	`¥ötf
("\n");

209 
	}
}

	@weak_func.c

13 
	~<ö˛ude/d©©y≥.h
>

16 
__©åibuã__
((
wók
)Ë
	$CK_PWM_ã°
(){
	}
};

17 
__©åibuã__
((
wók
)Ë
	$CK_Gpio_Te°
(Ë{
	}
}

18 
__©åibuã__
((
wók
)Ë
	$CK_W©chdog_Te°
(Ë{
	}
}

19 
__©åibuã__
((
wók
)Ë
	$CK_I2C_Te°
(Ë{
	}
}

20 
__©åibuã__
((
wók
)Ë
	$CK_Rtc_Te°
(Ë{
	}
}

21 
__©åibuã__
((
wók
)Ë
	$SPI_Ma°î_GD25Q128_APP
(
CK_UINT8
 
P‹tN
Ë{
	}
}

22 
__©åibuã__
((
wók
)Ë
	$SPI_Ma°î_w25n01_Aµ
(Ë{
	}
}

23 
__©åibuã__
((
wók
)Ë
	$≠b_ac˚ss_ã°
(Ë{
	}
}

24 
__©åibuã__
((
wók
)Ë
	$CK_SDIO_Te°
(Ë{
	}
}

25 
__©åibuã__
((
wók
)Ë
	$CK_REGS_Te°
(Ë{
	}
}

26 
__©åibuã__
((
wók
)Ë
	$CK_Maûbox_Te°
(Ë{
	}
}

27 
__©åibuã__
((
wók
)Ë
	$CK_MIPI_Te°
(Ë{
	}
}

28 
__©åibuã__
((
wók
)Ë
	$CK_PM_Te°
(Ë{
	}
}

29 
__©åibuã__
((
wók
)Ë
	$CK_PM_AHB_DMA_Te°
(Ë{
	}
}

30 
__©åibuã__
((
wók
)Ë
	$CK_SPI_SLAVE_Te°
(Ë{
	}
}

31 
__©åibuã__
((
wók
)Ë
	$CK_CPU_L2_Te°
(Ë{
	}
}

32 
__©åibuã__
((
wók
)Ë
	$CK_SUB1_Te°
(Ë{
	}
}

33 
__©åibuã__
((
wók
)Ë
	$CK_SUB2_Te°
(Ë{
	}
}

34 
__©åibuã__
((
wók
)Ë
	$DMAMem2PîùhîÆO≥n
(
CK_UINT8
 
ch™√l
, 
CK_UINT32
 
§c_addr
,

35 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
≥rùhîÆ_ID
,

36 
CK_UINT8
 
dma_öå
, 
CK_UINT32
 
P‹tNum
,

37 
CK_UINT16
 
§c_gth_˙t
,

38 
CK_UINT32
 
§c_gth_ötvl
,

39 
CK_UINT32
 
d°_å_width
,

40 
CK_UINT32
 
d°_msize
Ë{
	}
}

41 
__©åibuã__
((
wók
)Ë
	$DMAPîùhîÆ2MemO≥n
(
CK_UINT8
 
ch™√l
, 
CK_UINT32
 
d°_addr
,

42 
CK_UINT32
 
cou¡
, 
CK_UINT8
 
≥rùhîÆ_ID
,

43 
CK_UINT8
 
dma_öå
, 
CK_UINT32
 
P‹tNum
,

44 
CK_UINT16
 
d°_s˘_˙t
,

45 
CK_UINT32
 
d°_s˘_ötvl
Ë{
	}
}

49 
__©åibuã__
((
wók
)Ë
	$DMAC_Clo£
(
CK_UINT32
 
ch™√l_numbî
Ë{
	}
}

50 
__©åibuã__
((
wók
)Ë
	$DMAC_Inô
(Ë{
	}
}

51 
__©åibuã__
((
wók
)Ë
	$CK_Timî_Te°
(Ë{
	}
}

52 
__©åibuã__
((
wók
)Ë
	$CK_zxdmac_ã°
(Ë{
	}
}

53 
__©åibuã__
((
wók
)Ë
	$CK_UART_Te°
(Ë{
	}
}

54 
__©åibuã__
((
wók
)Ë
	$CK_INTC_Te°
(Ë{
	}
}

55 
__©åibuã__
((
wók
)Ë
	$CK_Comm⁄_H™dÀr
(Ë{
	}
}

56 
__©åibuã__
((
wók
)Ë
	$DMAC_Sèπ
(
CK_UINT32
 
ch™√l_numbî
Ë{
	}
}

57 
__©åibuã__
((
wók
)Ë
	$CK_STC_Te°
(Ë{
	}
}

58 
__©åibuã__
((
wók
)Ë
	$CK_I2S_PTS_Te°
(Ë{
	}
}

59 
__©åibuã__
((
wók
)Ë
	$CK_SCI7816_Te°
(Ë{
	}
}

60 
__©åibuã__
((
wók
)Ë
	$CK_APTS_Te°
(Ë{
	}
}

61 
__©åibuã__
((
wók
)Ë
	$öô_time0
(Ë{
	}
}

62 
__©åibuã__
((
wók
)Ë
	$CK_AHBDMA_Te°
(Ë{
	}
}

63 
__©åibuã__
((
wók
)Ë
	$CK_I2C_Sœve_Te°
(Ë{
	}
}

64 
__©åibuã__
((
wók
)Ë
	$CK_OTP_Te°
(Ë{
	}
}

65 
__©åibuã__
((
wók
)Ë
	$CK_RSA_Te°
(Ë{
	}
}

66 
__©åibuã__
((
wók
)Ë
	$CK_SPACC_Reg_RW_Te°
(Ë{
	}
}

67 
__©åibuã__
((
wók
)Ë
	$CK_SPACC_Te°
(Ë{
	}
}

68 
__©åibuã__
((
wók
)Ë
	$CK_nfc_ã°
(Ë{
	}
}

69 
__©åibuã__
((
wók
)Ë
	$CK_CPU_BoŸ_Te°
(Ë{
	}
}

70 
__©åibuã__
((
wók
)Ë
	$CK_AXIDMA_Te°
(Ë{
	}
}

71 
__©åibuã__
((
wók
)Ë
	$CK_DDR_I¡îÀave_Te°
(Ë{
	}
}

72 
__©åibuã__
((
wók
)Ë
	$Audio_Te°
(Ë{
	}
}

73 
__©åibuã__
((
wók
)Ë
	$domaö_powî_ã°
(Ë{
	}
}

74 
__©åibuã__
((
wók
)Ë
	$ù_˛k_g©ög_ã°
(Ë{
	}
}

75 
__©åibuã__
((
wók
)Ë
	$DDR_ã°
(Ë{
	}
}

76 
__©åibuã__
((
wók
)Ë
	$pö_mux_ã°
(Ë{
	}
}

	@
1
.
0
116
1840
L2_cache.c
cpu_boot.c
drivers/ADV7511.c
drivers/ADV7511.h
drivers/ADV7611.c
drivers/ADV7611.h
drivers/OV_5640.c
drivers/OV_5640.h
drivers/ad1938_spi.c
drivers/ad193x.h
drivers/aes_cbc_128.c
drivers/ahbdma.c
drivers/at24c64.c
drivers/axidma.c
drivers/axidma.h
drivers/ckiic.h
drivers/ckintc.h
drivers/ckpwm.c
drivers/ckpwm.h
drivers/cktimer.h
drivers/ckuart.h
drivers/ckwdt.h
drivers/ddr.c
drivers/ddr_all_macro.h
drivers/ddr_chiptest_define.h
drivers/ddr_debug_reg.h
drivers/dvi.c
drivers/dvi.h
drivers/dw_apb_i2s.c
drivers/dw_apb_i2s.h
drivers/gd25q128.c
drivers/gd25q128.h
drivers/gpio.c
drivers/gs2971.c
drivers/gs2971.h
drivers/iic-slave.c
drivers/iic.c
drivers/intc.c
drivers/isp.c
drivers/isp.h
drivers/mipi_dphy.c
drivers/mipi_subsys.c
drivers/mipi_subsys.h
drivers/nand.c
drivers/nand.h
drivers/otp_rw.c
drivers/pinmux.c
drivers/pinmux.h
drivers/pll.c
drivers/pmu.c
drivers/rsa_4096_int.c
drivers/rsa_reg_rw.c
drivers/rtc.c
drivers/spacc_reg_rw.c
drivers/spi_nand.c
drivers/spi_nor.c
drivers/syns_mmc.c
drivers/timer.c
drivers/uart.c
drivers/vs_apb_spi.c
drivers/vs_apb_spi.h
drivers/w25n01_app.c
drivers/wdt.c
include/ahbdma.h
include/apts.h
include/at24c64.h
include/cache.h
include/circlebuffer.h
include/ck810.h
include/crm.h
include/datatype.h
include/gpio.h
include/i2s_pts.h
include/iic.h
include/intc.h
include/misc.h
include/otp.h
include/pmu.h
include/rsa.h
include/rtc.h
include/sci7816.h
include/snd_pcm.h
include/snd_sample.h
include/soc_dai.h
include/spacc.h
include/spi_nand.h
include/spi_nor.h
include/spi_slave.h
include/stc.h
include/syns_mmc.h
include/sys_ctrl.h
include/timer.h
include/uart.h
include/wdt.h
lib/circlebuffer.c
lib/misc.c
lib/printf.c
main.c
tapb_access.c
tapts.c
taudio.c
taxidma.c
tddr.c
ti2s_pts.c
tiic.c
tintc.c
tmmc.c
tpinmux.c
tpll.c
tpmu.c
tsci.c
tstc.c
ttimer.c
tuart.c
twdt.c
weak_func.c
